{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport intersection from 'lodash/intersection';\nimport config from '../../config';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { createSlug } from '../../util/urlHelpers';\nimport routeConfiguration from '../../routeConfiguration';\n/**\n * Validates a filter search param agains a filters configuration.\n *\n * All invalid param names and values are dropped\n *\n * @param {String} paramName Search parameter name\n * @param {Object} paramValue Search parameter value\n * @param {Object} filters Filters configuration\n */\n\nexport const validURLParamForExtendedData = (paramName, paramValue, filters) => {\n  const filtersArray = Object.values(filters); // resolve configuration for this filter\n\n  const filterConfig = filtersArray.find(f => f.paramName === paramName);\n  const valueArray = paramValue ? paramValue.split(',') : [];\n\n  if (filterConfig && valueArray.length > 0) {\n    const _ref = filterConfig.config || {},\n          min = _ref.min,\n          max = _ref.max,\n          active = _ref.active;\n\n    if (filterConfig.options) {\n      // Single and multiselect filters\n      const allowedValues = filterConfig.options.map(o => o.key);\n      const validValues = intersection(valueArray, allowedValues).join(',');\n      return validValues.length > 0 ? {\n        [paramName]: validValues\n      } : {};\n    } else if (filterConfig.config && min != null && max != null) {\n      // Price filter\n      const validValues = valueArray.map(v => {\n        return v < min ? min : v > max ? max : v;\n      });\n      return validValues.length === 2 ? {\n        [paramName]: validValues.join(',')\n      } : {};\n    } else if (filterConfig.config && active) {\n      // Generic filter\n      return paramValue.length > 0 ? {\n        [paramName]: paramValue\n      } : {};\n    }\n  }\n\n  return {};\n};\n/**\n * Checks filter param value validity.\n *\n * Non-filter params are dropped.\n *\n * @param {Object} params Search params\n * @param {Object} filters Filters configuration\n */\n\nexport const validFilterParams = (params, filters) => {\n  const filterParamNames = Object.values(filters).map(f => f.paramName);\n  const paramEntries = Object.entries(params);\n  return paramEntries.reduce((validParams, entry) => {\n    const paramName = entry[0];\n    const paramValue = entry[1];\n    return filterParamNames.includes(paramName) ? _objectSpread({}, validParams, validURLParamForExtendedData(paramName, paramValue, filters)) : _objectSpread({}, validParams);\n  }, {});\n};\n/**\n * Checks filter param value validity.\n *\n * Non-filter params are returned as they are.\n *\n * @param {Object} params Search params\n * @param {Object} filters Filters configuration\n */\n\nexport const validURLParamsForExtendedData = (params, filters) => {\n  const filterParamNames = Object.values(filters).map(f => f.paramName);\n  const paramEntries = Object.entries(params);\n  return paramEntries.reduce((validParams, entry) => {\n    const paramName = entry[0];\n    const paramValue = entry[1];\n    return filterParamNames.includes(paramName) ? _objectSpread({}, validParams, validURLParamForExtendedData(paramName, paramValue, filters)) : _objectSpread({}, validParams, {\n      [paramName]: paramValue\n    });\n  }, {});\n}; // extract search parameters, including a custom URL params\n// which are validated by mapping the values to marketplace custom config.\n\nexport const pickSearchParamsOnly = (params, filters) => {\n  const _ref2 = params || {},\n        address = _ref2.address,\n        origin = _ref2.origin,\n        bounds = _ref2.bounds,\n        rest = _objectWithoutProperties(_ref2, [\"address\", \"origin\", \"bounds\"]);\n\n  const boundsMaybe = bounds ? {\n    bounds\n  } : {};\n  const originMaybe = config.sortSearchByDistance && origin ? {\n    origin\n  } : {};\n  const filterParams = validFilterParams(rest, filters);\n  return _objectSpread({}, boundsMaybe, originMaybe, filterParams);\n};\nexport const createSearchResultSchema = (listings, address, intl) => {\n  // Schema for search engines (helps them to understand what this page is about)\n  // http://schema.org\n  // We are using JSON-LD format\n  const siteTitle = config.siteTitle;\n  const searchAddress = address || intl.formatMessage({\n    id: 'SearchPage.schemaMapSearch'\n  });\n  const schemaDescription = intl.formatMessage({\n    id: 'SearchPage.schemaDescription'\n  });\n  const schemaTitle = intl.formatMessage({\n    id: 'SearchPage.schemaTitle'\n  }, {\n    searchAddress,\n    siteTitle\n  });\n  const schemaListings = listings.map((l, i) => {\n    const title = l.attributes.title;\n    const pathToItem = createResourceLocatorString('ListingPage', routeConfiguration(), {\n      id: l.id.uuid,\n      slug: createSlug(title)\n    });\n    return {\n      '@type': 'ListItem',\n      position: i,\n      url: \"\".concat(config.canonicalRootURL).concat(pathToItem),\n      name: title\n    };\n  });\n  const schemaMainEntity = JSON.stringify({\n    '@type': 'ItemList',\n    name: searchAddress,\n    itemListOrder: 'http://schema.org/ItemListOrderAscending',\n    itemListElement: schemaListings\n  });\n  return {\n    title: schemaTitle,\n    description: schemaDescription,\n    schema: {\n      '@context': 'http://schema.org',\n      '@type': 'SearchResultsPage',\n      description: schemaDescription,\n      name: schemaTitle,\n      mainEntity: [schemaMainEntity]\n    }\n  };\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/SearchPage/SearchPage.helpers.js"],"names":["intersection","config","createResourceLocatorString","createSlug","routeConfiguration","validURLParamForExtendedData","paramName","paramValue","filters","filtersArray","Object","values","filterConfig","find","f","valueArray","split","length","min","max","active","options","allowedValues","map","o","key","validValues","join","v","validFilterParams","params","filterParamNames","paramEntries","entries","reduce","validParams","entry","includes","validURLParamsForExtendedData","pickSearchParamsOnly","address","origin","bounds","rest","boundsMaybe","originMaybe","sortSearchByDistance","filterParams","createSearchResultSchema","listings","intl","siteTitle","searchAddress","formatMessage","id","schemaDescription","schemaTitle","schemaListings","l","i","title","attributes","pathToItem","uuid","slug","position","url","canonicalRootURL","name","schemaMainEntity","JSON","stringify","itemListOrder","itemListElement","description","schema","mainEntity"],"mappings":"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","sourcesContent":["import intersection from 'lodash/intersection';\nimport config from '../../config';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { createSlug } from '../../util/urlHelpers';\nimport routeConfiguration from '../../routeConfiguration';\n\n/**\n * Validates a filter search param agains a filters configuration.\n *\n * All invalid param names and values are dropped\n *\n * @param {String} paramName Search parameter name\n * @param {Object} paramValue Search parameter value\n * @param {Object} filters Filters configuration\n */\nexport const validURLParamForExtendedData = (paramName, paramValue, filters) => {\n  const filtersArray = Object.values(filters);\n  // resolve configuration for this filter\n  const filterConfig = filtersArray.find(f => f.paramName === paramName);\n\n  const valueArray = paramValue ? paramValue.split(',') : [];\n\n  if (filterConfig && valueArray.length > 0) {\n    const { min, max, active } = filterConfig.config || {};\n\n    if (filterConfig.options) {\n      // Single and multiselect filters\n      const allowedValues = filterConfig.options.map(o => o.key);\n\n      const validValues = intersection(valueArray, allowedValues).join(',');\n      return validValues.length > 0 ? { [paramName]: validValues } : {};\n    } else if (filterConfig.config && min != null && max != null) {\n      // Price filter\n      const validValues = valueArray.map(v => {\n        return v < min ? min : v > max ? max : v;\n      });\n      return validValues.length === 2 ? { [paramName]: validValues.join(',') } : {};\n    } else if (filterConfig.config && active) {\n      // Generic filter\n      return paramValue.length > 0 ? { [paramName]: paramValue } : {};\n    }\n  }\n  return {};\n};\n\n/**\n * Checks filter param value validity.\n *\n * Non-filter params are dropped.\n *\n * @param {Object} params Search params\n * @param {Object} filters Filters configuration\n */\nexport const validFilterParams = (params, filters) => {\n  const filterParamNames = Object.values(filters).map(f => f.paramName);\n  const paramEntries = Object.entries(params);\n\n  return paramEntries.reduce((validParams, entry) => {\n    const paramName = entry[0];\n    const paramValue = entry[1];\n\n    return filterParamNames.includes(paramName)\n      ? {\n          ...validParams,\n          ...validURLParamForExtendedData(paramName, paramValue, filters),\n        }\n      : { ...validParams };\n  }, {});\n};\n\n/**\n * Checks filter param value validity.\n *\n * Non-filter params are returned as they are.\n *\n * @param {Object} params Search params\n * @param {Object} filters Filters configuration\n */\nexport const validURLParamsForExtendedData = (params, filters) => {\n  const filterParamNames = Object.values(filters).map(f => f.paramName);\n  const paramEntries = Object.entries(params);\n\n  return paramEntries.reduce((validParams, entry) => {\n    const paramName = entry[0];\n    const paramValue = entry[1];\n\n    return filterParamNames.includes(paramName)\n      ? {\n          ...validParams,\n          ...validURLParamForExtendedData(paramName, paramValue, filters),\n        }\n      : { ...validParams, [paramName]: paramValue };\n  }, {});\n};\n\n// extract search parameters, including a custom URL params\n// which are validated by mapping the values to marketplace custom config.\nexport const pickSearchParamsOnly = (params, filters) => {\n  const { address, origin, bounds, ...rest } = params || {};\n  const boundsMaybe = bounds ? { bounds } : {};\n  const originMaybe = config.sortSearchByDistance && origin ? { origin } : {};\n  const filterParams = validFilterParams(rest, filters);\n\n  return {\n    ...boundsMaybe,\n    ...originMaybe,\n    ...filterParams,\n  };\n};\n\nexport const createSearchResultSchema = (listings, address, intl) => {\n  // Schema for search engines (helps them to understand what this page is about)\n  // http://schema.org\n  // We are using JSON-LD format\n  const siteTitle = config.siteTitle;\n  const searchAddress = address || intl.formatMessage({ id: 'SearchPage.schemaMapSearch' });\n  const schemaDescription = intl.formatMessage({ id: 'SearchPage.schemaDescription' });\n  const schemaTitle = intl.formatMessage(\n    { id: 'SearchPage.schemaTitle' },\n    { searchAddress, siteTitle }\n  );\n\n  const schemaListings = listings.map((l, i) => {\n    const title = l.attributes.title;\n    const pathToItem = createResourceLocatorString('ListingPage', routeConfiguration(), {\n      id: l.id.uuid,\n      slug: createSlug(title),\n    });\n    return {\n      '@type': 'ListItem',\n      position: i,\n      url: `${config.canonicalRootURL}${pathToItem}`,\n      name: title,\n    };\n  });\n\n  const schemaMainEntity = JSON.stringify({\n    '@type': 'ItemList',\n    name: searchAddress,\n    itemListOrder: 'http://schema.org/ItemListOrderAscending',\n    itemListElement: schemaListings,\n  });\n  return {\n    title: schemaTitle,\n    description: schemaDescription,\n    schema: {\n      '@context': 'http://schema.org',\n      '@type': 'SearchResultsPage',\n      description: schemaDescription,\n      name: schemaTitle,\n      mainEntity: [schemaMainEntity],\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}