{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/EditListingWizard/EditListingWizardTab.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape } from 'react-intl';\nimport routeConfiguration from '../../routeConfiguration';\nimport { LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPES } from '../../util/urlHelpers';\nimport { ensureListing } from '../../util/data';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { EditListingAvailabilityPanel, EditListingDescriptionPanel, EditListingFeaturesPanel, EditListingLocationPanel, EditListingPhotosPanel, EditListingPoliciesPanel, EditListingPricingPanel } from '../../components';\nimport css from './EditListingWizard.css';\nexport const AVAILABILITY = 'availability';\nexport const DESCRIPTION = 'description';\nexport const FEATURES = 'features';\nexport const POLICY = 'policy';\nexport const LOCATION = 'location';\nexport const PRICING = 'pricing';\nexport const PHOTOS = 'photos'; // EditListingWizardTab component supports these tabs\n\nexport const SUPPORTED_TABS = [DESCRIPTION, FEATURES, POLICY, LOCATION, PRICING, AVAILABILITY, PHOTOS];\n\nconst pathParamsToNextTab = (params, tab, marketplaceTabs) => {\n  const nextTabIndex = marketplaceTabs.findIndex(s => s === tab) + 1;\n  const nextTab = nextTabIndex < marketplaceTabs.length ? marketplaceTabs[nextTabIndex] : marketplaceTabs[marketplaceTabs.length - 1];\n  return _objectSpread({}, params, {\n    tab: nextTab\n  });\n}; // When user has update draft listing, he should be redirected to next EditListingWizardTab\n\n\nconst redirectAfterDraftUpdate = (listingId, params, tab, marketplaceTabs, history) => {\n  const currentPathParams = _objectSpread({}, params, {\n    type: LISTING_PAGE_PARAM_TYPE_DRAFT,\n    id: listingId\n  });\n\n  const routes = routeConfiguration(); // Replace current \"new\" path to \"draft\" path.\n  // Browser's back button should lead to editing current draft instead of creating a new one.\n\n  if (params.type === LISTING_PAGE_PARAM_TYPE_NEW) {\n    const draftURI = createResourceLocatorString('EditListingPage', routes, currentPathParams, {});\n    history.replace(draftURI);\n  } // Redirect to next tab\n\n\n  const nextPathParams = pathParamsToNextTab(currentPathParams, tab, marketplaceTabs);\n  const to = createResourceLocatorString('EditListingPage', routes, nextPathParams, {});\n  history.push(to);\n};\n\nconst EditListingWizardTab = props => {\n  const tab = props.tab,\n        marketplaceTabs = props.marketplaceTabs,\n        params = props.params,\n        errors = props.errors,\n        fetchInProgress = props.fetchInProgress,\n        newListingPublished = props.newListingPublished,\n        history = props.history,\n        images = props.images,\n        availability = props.availability,\n        listing = props.listing,\n        handleCreateFlowTabScrolling = props.handleCreateFlowTabScrolling,\n        handlePublishListing = props.handlePublishListing,\n        onUpdateListing = props.onUpdateListing,\n        onCreateListingDraft = props.onCreateListingDraft,\n        onImageUpload = props.onImageUpload,\n        onUpdateImageOrder = props.onUpdateImageOrder,\n        onRemoveImage = props.onRemoveImage,\n        onChange = props.onChange,\n        updatedTab = props.updatedTab,\n        updateInProgress = props.updateInProgress,\n        intl = props.intl;\n  const type = params.type;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n  const isNewListingFlow = isNewURI || isDraftURI;\n  const currentListing = ensureListing(listing);\n\n  const imageIds = images => {\n    return images ? images.map(img => img.imageId || img.id) : null;\n  };\n\n  const onCompleteEditListingWizardTab = (tab, updateValues) => {\n    // Normalize images for API call\n    const updatedImages = updateValues.images,\n          otherValues = _objectWithoutProperties(updateValues, [\"images\"]);\n\n    const imageProperty = typeof updatedImages !== 'undefined' ? {\n      images: imageIds(updatedImages)\n    } : {};\n\n    const updateValuesWithImages = _objectSpread({}, otherValues, imageProperty);\n\n    if (isNewListingFlow) {\n      const onUpsertListingDraft = isNewURI ? (tab, updateValues) => onCreateListingDraft(updateValues) : onUpdateListing;\n      const upsertValues = isNewURI ? updateValuesWithImages : _objectSpread({}, updateValuesWithImages, {\n        id: currentListing.id\n      });\n      onUpsertListingDraft(tab, upsertValues).then(r => {\n        if (tab !== marketplaceTabs[marketplaceTabs.length - 1]) {\n          // Create listing flow: smooth scrolling polyfill to scroll to correct tab\n          handleCreateFlowTabScrolling(false); // After successful saving of draft data, user should be redirected to next tab\n\n          redirectAfterDraftUpdate(r.data.data.id.uuid, params, tab, marketplaceTabs, history);\n        } else {\n          handlePublishListing(currentListing.id);\n        }\n      }).catch(e => {// No need for extra actions\n      });\n    } else {\n      onUpdateListing(tab, _objectSpread({}, updateValuesWithImages, {\n        id: currentListing.id\n      }));\n    }\n  };\n\n  const panelProps = tab => {\n    return {\n      className: css.panel,\n      errors,\n      listing,\n      onChange,\n      panelUpdated: updatedTab === tab,\n      updateInProgress\n    };\n  };\n\n  switch (tab) {\n    case DESCRIPTION:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewDescription' : 'EditListingWizard.saveEditDescription';\n        return React.createElement(EditListingDescriptionPanel, Object.assign({}, panelProps(DESCRIPTION), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }));\n      }\n\n    case FEATURES:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewFeatures' : 'EditListingWizard.saveEditFeatures';\n        return React.createElement(EditListingFeaturesPanel, Object.assign({}, panelProps(FEATURES), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }));\n      }\n\n    case POLICY:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewPolicies' : 'EditListingWizard.saveEditPolicies';\n        return React.createElement(EditListingPoliciesPanel, Object.assign({}, panelProps(POLICY), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }));\n      }\n\n    case LOCATION:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewLocation' : 'EditListingWizard.saveEditLocation';\n        return React.createElement(EditListingLocationPanel, Object.assign({}, panelProps(LOCATION), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }));\n      }\n\n    case PRICING:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewPricing' : 'EditListingWizard.saveEditPricing';\n        return React.createElement(EditListingPricingPanel, Object.assign({}, panelProps(PRICING), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }));\n      }\n\n    case AVAILABILITY:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewAvailability' : 'EditListingWizard.saveEditAvailability';\n        return React.createElement(EditListingAvailabilityPanel, Object.assign({}, panelProps(AVAILABILITY), {\n          availability: availability,\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }));\n      }\n\n    case PHOTOS:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewPhotos' : 'EditListingWizard.saveEditPhotos'; // newListingPublished and fetchInProgress are flags for the last wizard tab\n\n        return React.createElement(EditListingPhotosPanel, Object.assign({}, panelProps(PHOTOS), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          newListingPublished: newListingPublished,\n          fetchInProgress: fetchInProgress,\n          images: images,\n          onImageUpload: onImageUpload,\n          onRemoveImage: onRemoveImage,\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          onUpdateImageOrder: onUpdateImageOrder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }));\n      }\n\n    default:\n      return null;\n  }\n};\n\nEditListingWizardTab.defaultProps = {\n  listing: null,\n  updatedTab: null\n};\nconst array = PropTypes.array,\n      bool = PropTypes.bool,\n      func = PropTypes.func,\n      object = PropTypes.object,\n      oneOf = PropTypes.oneOf,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nEditListingWizardTab.propTypes = {\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: oneOf(SUPPORTED_TABS).isRequired\n  }).isRequired,\n  errors: shape({\n    createListingDraftError: object,\n    publishListingError: object,\n    updateListingError: object,\n    showListingsError: object,\n    uploadImageError: object\n  }).isRequired,\n  fetchInProgress: bool.isRequired,\n  newListingPublished: bool.isRequired,\n  history: shape({\n    push: func.isRequired,\n    replace: func.isRequired\n  }).isRequired,\n  images: array.isRequired,\n  availability: object.isRequired,\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: shape({\n    attributes: shape({\n      publicData: object,\n      description: string,\n      geolocation: object,\n      pricing: object,\n      title: string\n    }),\n    images: array\n  }),\n  handleCreateFlowTabScrolling: func.isRequired,\n  handlePublishListing: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onRemoveImage: func.isRequired,\n  onChange: func.isRequired,\n  updatedTab: string,\n  updateInProgress: bool.isRequired,\n  intl: intlShape.isRequired\n};\nexport default EditListingWizardTab;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/EditListingWizard/EditListingWizardTab.js"],"names":["React","PropTypes","intlShape","routeConfiguration","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","LISTING_PAGE_PARAM_TYPES","ensureListing","createResourceLocatorString","EditListingAvailabilityPanel","EditListingDescriptionPanel","EditListingFeaturesPanel","EditListingLocationPanel","EditListingPhotosPanel","EditListingPoliciesPanel","EditListingPricingPanel","css","AVAILABILITY","DESCRIPTION","FEATURES","POLICY","LOCATION","PRICING","PHOTOS","SUPPORTED_TABS","pathParamsToNextTab","params","tab","marketplaceTabs","nextTabIndex","findIndex","s","nextTab","length","redirectAfterDraftUpdate","listingId","history","currentPathParams","type","id","routes","draftURI","replace","nextPathParams","to","push","EditListingWizardTab","props","errors","fetchInProgress","newListingPublished","images","availability","listing","handleCreateFlowTabScrolling","handlePublishListing","onUpdateListing","onCreateListingDraft","onImageUpload","onUpdateImageOrder","onRemoveImage","onChange","updatedTab","updateInProgress","intl","isNewURI","isDraftURI","isNewListingFlow","currentListing","imageIds","map","img","imageId","onCompleteEditListingWizardTab","updateValues","updatedImages","otherValues","imageProperty","updateValuesWithImages","onUpsertListingDraft","upsertValues","then","r","data","uuid","catch","e","panelProps","className","panel","panelUpdated","submitButtonTranslationKey","formatMessage","values","defaultProps","array","bool","func","object","oneOf","shape","string","propTypes","isRequired","slug","createListingDraftError","publishListingError","updateListingError","showListingsError","uploadImageError","attributes","publicData","description","geolocation","pricing","title"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SACEC,6BADF,EAEEC,2BAFF,EAGEC,wBAHF,QAIO,uBAJP;AAKA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,2BAAT,QAA4C,mBAA5C;AACA,SACEC,4BADF,EAEEC,2BAFF,EAGEC,wBAHF,EAIEC,wBAJF,EAKEC,sBALF,EAMEC,wBANF,EAOEC,uBAPF,QAQO,kBARP;AAUA,OAAOC,GAAP,MAAgB,yBAAhB;AAEA,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf,C,CAEP;;AACA,OAAO,MAAMC,cAAc,GAAG,CAC5BN,WAD4B,EAE5BC,QAF4B,EAG5BC,MAH4B,EAI5BC,QAJ4B,EAK5BC,OAL4B,EAM5BL,YAN4B,EAO5BM,MAP4B,CAAvB;;AAUP,MAAME,mBAAmB,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,eAAd,KAAkC;AAC5D,QAAMC,YAAY,GAAGD,eAAe,CAACE,SAAhB,CAA0BC,CAAC,IAAIA,CAAC,KAAKJ,GAArC,IAA4C,CAAjE;AACA,QAAMK,OAAO,GACXH,YAAY,GAAGD,eAAe,CAACK,MAA/B,GACIL,eAAe,CAACC,YAAD,CADnB,GAEID,eAAe,CAACA,eAAe,CAACK,MAAhB,GAAyB,CAA1B,CAHrB;AAIA,2BAAYP,MAAZ;AAAoBC,IAAAA,GAAG,EAAEK;AAAzB;AACD,CAPD,C,CASA;;;AACA,MAAME,wBAAwB,GAAG,CAACC,SAAD,EAAYT,MAAZ,EAAoBC,GAApB,EAAyBC,eAAzB,EAA0CQ,OAA1C,KAAsD;AACrF,QAAMC,iBAAiB,qBAClBX,MADkB;AAErBY,IAAAA,IAAI,EAAElC,6BAFe;AAGrBmC,IAAAA,EAAE,EAAEJ;AAHiB,IAAvB;;AAKA,QAAMK,MAAM,GAAGrC,kBAAkB,EAAjC,CANqF,CAQrF;AACA;;AACA,MAAIuB,MAAM,CAACY,IAAP,KAAgBjC,2BAApB,EAAiD;AAC/C,UAAMoC,QAAQ,GAAGjC,2BAA2B,CAAC,iBAAD,EAAoBgC,MAApB,EAA4BH,iBAA5B,EAA+C,EAA/C,CAA5C;AACAD,IAAAA,OAAO,CAACM,OAAR,CAAgBD,QAAhB;AACD,GAboF,CAerF;;;AACA,QAAME,cAAc,GAAGlB,mBAAmB,CAACY,iBAAD,EAAoBV,GAApB,EAAyBC,eAAzB,CAA1C;AACA,QAAMgB,EAAE,GAAGpC,2BAA2B,CAAC,iBAAD,EAAoBgC,MAApB,EAA4BG,cAA5B,EAA4C,EAA5C,CAAtC;AACAP,EAAAA,OAAO,CAACS,IAAR,CAAaD,EAAb;AACD,CAnBD;;AAqBA,MAAME,oBAAoB,GAAGC,KAAK,IAAI;AAAA,QAElCpB,GAFkC,GAuBhCoB,KAvBgC,CAElCpB,GAFkC;AAAA,QAGlCC,eAHkC,GAuBhCmB,KAvBgC,CAGlCnB,eAHkC;AAAA,QAIlCF,MAJkC,GAuBhCqB,KAvBgC,CAIlCrB,MAJkC;AAAA,QAKlCsB,MALkC,GAuBhCD,KAvBgC,CAKlCC,MALkC;AAAA,QAMlCC,eANkC,GAuBhCF,KAvBgC,CAMlCE,eANkC;AAAA,QAOlCC,mBAPkC,GAuBhCH,KAvBgC,CAOlCG,mBAPkC;AAAA,QAQlCd,OARkC,GAuBhCW,KAvBgC,CAQlCX,OARkC;AAAA,QASlCe,MATkC,GAuBhCJ,KAvBgC,CASlCI,MATkC;AAAA,QAUlCC,YAVkC,GAuBhCL,KAvBgC,CAUlCK,YAVkC;AAAA,QAWlCC,OAXkC,GAuBhCN,KAvBgC,CAWlCM,OAXkC;AAAA,QAYlCC,4BAZkC,GAuBhCP,KAvBgC,CAYlCO,4BAZkC;AAAA,QAalCC,oBAbkC,GAuBhCR,KAvBgC,CAalCQ,oBAbkC;AAAA,QAclCC,eAdkC,GAuBhCT,KAvBgC,CAclCS,eAdkC;AAAA,QAelCC,oBAfkC,GAuBhCV,KAvBgC,CAelCU,oBAfkC;AAAA,QAgBlCC,aAhBkC,GAuBhCX,KAvBgC,CAgBlCW,aAhBkC;AAAA,QAiBlCC,kBAjBkC,GAuBhCZ,KAvBgC,CAiBlCY,kBAjBkC;AAAA,QAkBlCC,aAlBkC,GAuBhCb,KAvBgC,CAkBlCa,aAlBkC;AAAA,QAmBlCC,QAnBkC,GAuBhCd,KAvBgC,CAmBlCc,QAnBkC;AAAA,QAoBlCC,UApBkC,GAuBhCf,KAvBgC,CAoBlCe,UApBkC;AAAA,QAqBlCC,gBArBkC,GAuBhChB,KAvBgC,CAqBlCgB,gBArBkC;AAAA,QAsBlCC,IAtBkC,GAuBhCjB,KAvBgC,CAsBlCiB,IAtBkC;AAAA,QAyB5B1B,IAzB4B,GAyBnBZ,MAzBmB,CAyB5BY,IAzB4B;AA0BpC,QAAM2B,QAAQ,GAAG3B,IAAI,KAAKjC,2BAA1B;AACA,QAAM6D,UAAU,GAAG5B,IAAI,KAAKlC,6BAA5B;AACA,QAAM+D,gBAAgB,GAAGF,QAAQ,IAAIC,UAArC;AAEA,QAAME,cAAc,GAAG7D,aAAa,CAAC8C,OAAD,CAApC;;AACA,QAAMgB,QAAQ,GAAGlB,MAAM,IAAI;AACzB,WAAOA,MAAM,GAAGA,MAAM,CAACmB,GAAP,CAAWC,GAAG,IAAIA,GAAG,CAACC,OAAJ,IAAeD,GAAG,CAAChC,EAArC,CAAH,GAA8C,IAA3D;AACD,GAFD;;AAIA,QAAMkC,8BAA8B,GAAG,CAAC9C,GAAD,EAAM+C,YAAN,KAAuB;AAC5D;AAD4D,UAE5CC,aAF4C,GAEVD,YAFU,CAEpDvB,MAFoD;AAAA,UAE1ByB,WAF0B,4BAEVF,YAFU;;AAG5D,UAAMG,aAAa,GACjB,OAAOF,aAAP,KAAyB,WAAzB,GAAuC;AAAExB,MAAAA,MAAM,EAAEkB,QAAQ,CAACM,aAAD;AAAlB,KAAvC,GAA6E,EAD/E;;AAEA,UAAMG,sBAAsB,qBAAQF,WAAR,EAAwBC,aAAxB,CAA5B;;AAEA,QAAIV,gBAAJ,EAAsB;AACpB,YAAMY,oBAAoB,GAAGd,QAAQ,GACjC,CAACtC,GAAD,EAAM+C,YAAN,KAAuBjB,oBAAoB,CAACiB,YAAD,CADV,GAEjClB,eAFJ;AAIA,YAAMwB,YAAY,GAAGf,QAAQ,GACzBa,sBADyB,qBAEpBA,sBAFoB;AAEIvC,QAAAA,EAAE,EAAE6B,cAAc,CAAC7B;AAFvB,QAA7B;AAIAwC,MAAAA,oBAAoB,CAACpD,GAAD,EAAMqD,YAAN,CAApB,CACGC,IADH,CACQC,CAAC,IAAI;AACT,YAAIvD,GAAG,KAAKC,eAAe,CAACA,eAAe,CAACK,MAAhB,GAAyB,CAA1B,CAA3B,EAAyD;AACvD;AACAqB,UAAAA,4BAA4B,CAAC,KAAD,CAA5B,CAFuD,CAIvD;;AACApB,UAAAA,wBAAwB,CAACgD,CAAC,CAACC,IAAF,CAAOA,IAAP,CAAY5C,EAAZ,CAAe6C,IAAhB,EAAsB1D,MAAtB,EAA8BC,GAA9B,EAAmCC,eAAnC,EAAoDQ,OAApD,CAAxB;AACD,SAND,MAMO;AACLmB,UAAAA,oBAAoB,CAACa,cAAc,CAAC7B,EAAhB,CAApB;AACD;AACF,OAXH,EAYG8C,KAZH,CAYSC,CAAC,IAAI,CACV;AACD,OAdH;AAeD,KAxBD,MAwBO;AACL9B,MAAAA,eAAe,CAAC7B,GAAD,oBAAWmD,sBAAX;AAAmCvC,QAAAA,EAAE,EAAE6B,cAAc,CAAC7B;AAAtD,SAAf;AACD;AACF,GAlCD;;AAoCA,QAAMgD,UAAU,GAAG5D,GAAG,IAAI;AACxB,WAAO;AACL6D,MAAAA,SAAS,EAAExE,GAAG,CAACyE,KADV;AAELzC,MAAAA,MAFK;AAGLK,MAAAA,OAHK;AAILQ,MAAAA,QAJK;AAKL6B,MAAAA,YAAY,EAAE5B,UAAU,KAAKnC,GALxB;AAMLoC,MAAAA;AANK,KAAP;AAQD,GATD;;AAWA,UAAQpC,GAAR;AACE,SAAKT,WAAL;AAAkB;AAChB,cAAMyE,0BAA0B,GAAGxB,gBAAgB,GAC/C,sCAD+C,GAE/C,uCAFJ;AAGA,eACE,oBAAC,2BAAD,oBACMoB,UAAU,CAACrE,WAAD,CADhB;AAEE,UAAA,gBAAgB,EAAE8C,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAFpB;AAGE,UAAA,QAAQ,EAAEE,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;;AACD,SAAK1E,QAAL;AAAe;AACb,cAAMwE,0BAA0B,GAAGxB,gBAAgB,GAC/C,mCAD+C,GAE/C,oCAFJ;AAGA,eACE,oBAAC,wBAAD,oBACMoB,UAAU,CAACpE,QAAD,CADhB;AAEE,UAAA,gBAAgB,EAAE6C,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAFpB;AAGE,UAAA,QAAQ,EAAEE,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;;AACD,SAAKzE,MAAL;AAAa;AACX,cAAMuE,0BAA0B,GAAGxB,gBAAgB,GAC/C,mCAD+C,GAE/C,oCAFJ;AAGA,eACE,oBAAC,wBAAD,oBACMoB,UAAU,CAACnE,MAAD,CADhB;AAEE,UAAA,gBAAgB,EAAE4C,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAFpB;AAGE,UAAA,QAAQ,EAAEE,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;;AACD,SAAKxE,QAAL;AAAe;AACb,cAAMsE,0BAA0B,GAAGxB,gBAAgB,GAC/C,mCAD+C,GAE/C,oCAFJ;AAGA,eACE,oBAAC,wBAAD,oBACMoB,UAAU,CAAClE,QAAD,CADhB;AAEE,UAAA,gBAAgB,EAAE2C,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAFpB;AAGE,UAAA,QAAQ,EAAEE,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;;AACD,SAAKvE,OAAL;AAAc;AACZ,cAAMqE,0BAA0B,GAAGxB,gBAAgB,GAC/C,kCAD+C,GAE/C,mCAFJ;AAGA,eACE,oBAAC,uBAAD,oBACMoB,UAAU,CAACjE,OAAD,CADhB;AAEE,UAAA,gBAAgB,EAAE0C,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAFpB;AAGE,UAAA,QAAQ,EAAEE,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;;AACD,SAAK5E,YAAL;AAAmB;AACjB,cAAM0E,0BAA0B,GAAGxB,gBAAgB,GAC/C,uCAD+C,GAE/C,wCAFJ;AAGA,eACE,oBAAC,4BAAD,oBACMoB,UAAU,CAACtE,YAAD,CADhB;AAEE,UAAA,YAAY,EAAEmC,YAFhB;AAGE,UAAA,gBAAgB,EAAEY,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAHpB;AAIE,UAAA,QAAQ,EAAEE,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD;;AACD,SAAKtE,MAAL;AAAa;AACX,cAAMoE,0BAA0B,GAAGxB,gBAAgB,GAC/C,iCAD+C,GAE/C,kCAFJ,CADW,CAKX;;AACA,eACE,oBAAC,sBAAD,oBACMoB,UAAU,CAAChE,MAAD,CADhB;AAEE,UAAA,gBAAgB,EAAEyC,IAAI,CAAC4B,aAAL,CAAmB;AAAErD,YAAAA,EAAE,EAAEoD;AAAN,WAAnB,CAFpB;AAGE,UAAA,mBAAmB,EAAEzC,mBAHvB;AAIE,UAAA,eAAe,EAAED,eAJnB;AAKE,UAAA,MAAM,EAAEE,MALV;AAME,UAAA,aAAa,EAAEO,aANjB;AAOE,UAAA,aAAa,EAAEE,aAPjB;AAQE,UAAA,QAAQ,EAAEiC,MAAM,IAAI;AAClBpB,YAAAA,8BAA8B,CAAC9C,GAAD,EAAMkE,MAAN,CAA9B;AACD,WAVH;AAWE,UAAA,kBAAkB,EAAElC,kBAXtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAeD;;AACD;AACE,aAAO,IAAP;AA7GJ;AA+GD,CAjMD;;AAmMAb,oBAAoB,CAACgD,YAArB,GAAoC;AAClCzC,EAAAA,OAAO,EAAE,IADyB;AAElCS,EAAAA,UAAU,EAAE;AAFsB,CAApC;MAKQiC,K,GAAoD9F,S,CAApD8F,K;MAAOC,I,GAA6C/F,S,CAA7C+F,I;MAAMC,I,GAAuChG,S,CAAvCgG,I;MAAMC,M,GAAiCjG,S,CAAjCiG,M;MAAQC,K,GAAyBlG,S,CAAzBkG,K;MAAOC,K,GAAkBnG,S,CAAlBmG,K;MAAOC,M,GAAWpG,S,CAAXoG,M;AAEjDvD,oBAAoB,CAACwD,SAArB,GAAiC;AAC/B5E,EAAAA,MAAM,EAAE0E,KAAK,CAAC;AACZ7D,IAAAA,EAAE,EAAE8D,MAAM,CAACE,UADC;AAEZC,IAAAA,IAAI,EAAEH,MAAM,CAACE,UAFD;AAGZjE,IAAAA,IAAI,EAAE6D,KAAK,CAAC7F,wBAAD,CAAL,CAAgCiG,UAH1B;AAIZ5E,IAAAA,GAAG,EAAEwE,KAAK,CAAC3E,cAAD,CAAL,CAAsB+E;AAJf,GAAD,CAAL,CAKLA,UAN4B;AAO/BvD,EAAAA,MAAM,EAAEoD,KAAK,CAAC;AACZK,IAAAA,uBAAuB,EAAEP,MADb;AAEZQ,IAAAA,mBAAmB,EAAER,MAFT;AAGZS,IAAAA,kBAAkB,EAAET,MAHR;AAIZU,IAAAA,iBAAiB,EAAEV,MAJP;AAKZW,IAAAA,gBAAgB,EAAEX;AALN,GAAD,CAAL,CAMLK,UAb4B;AAc/BtD,EAAAA,eAAe,EAAE+C,IAAI,CAACO,UAdS;AAe/BrD,EAAAA,mBAAmB,EAAE8C,IAAI,CAACO,UAfK;AAgB/BnE,EAAAA,OAAO,EAAEgE,KAAK,CAAC;AACbvD,IAAAA,IAAI,EAAEoD,IAAI,CAACM,UADE;AAEb7D,IAAAA,OAAO,EAAEuD,IAAI,CAACM;AAFD,GAAD,CAAL,CAGNA,UAnB4B;AAoB/BpD,EAAAA,MAAM,EAAE4C,KAAK,CAACQ,UApBiB;AAqB/BnD,EAAAA,YAAY,EAAE8C,MAAM,CAACK,UArBU;AAuB/B;AACAlD,EAAAA,OAAO,EAAE+C,KAAK,CAAC;AACbU,IAAAA,UAAU,EAAEV,KAAK,CAAC;AAChBW,MAAAA,UAAU,EAAEb,MADI;AAEhBc,MAAAA,WAAW,EAAEX,MAFG;AAGhBY,MAAAA,WAAW,EAAEf,MAHG;AAIhBgB,MAAAA,OAAO,EAAEhB,MAJO;AAKhBiB,MAAAA,KAAK,EAAEd;AALS,KAAD,CADJ;AAQblD,IAAAA,MAAM,EAAE4C;AARK,GAAD,CAxBiB;AAmC/BzC,EAAAA,4BAA4B,EAAE2C,IAAI,CAACM,UAnCJ;AAoC/BhD,EAAAA,oBAAoB,EAAE0C,IAAI,CAACM,UApCI;AAqC/B/C,EAAAA,eAAe,EAAEyC,IAAI,CAACM,UArCS;AAsC/B9C,EAAAA,oBAAoB,EAAEwC,IAAI,CAACM,UAtCI;AAuC/B7C,EAAAA,aAAa,EAAEuC,IAAI,CAACM,UAvCW;AAwC/B5C,EAAAA,kBAAkB,EAAEsC,IAAI,CAACM,UAxCM;AAyC/B3C,EAAAA,aAAa,EAAEqC,IAAI,CAACM,UAzCW;AA0C/B1C,EAAAA,QAAQ,EAAEoC,IAAI,CAACM,UA1CgB;AA2C/BzC,EAAAA,UAAU,EAAEuC,MA3CmB;AA4C/BtC,EAAAA,gBAAgB,EAAEiC,IAAI,CAACO,UA5CQ;AA8C/BvC,EAAAA,IAAI,EAAE9D,SAAS,CAACqG;AA9Ce,CAAjC;AAiDA,eAAezD,oBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape } from 'react-intl';\nimport routeConfiguration from '../../routeConfiguration';\nimport {\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\n  LISTING_PAGE_PARAM_TYPE_NEW,\n  LISTING_PAGE_PARAM_TYPES,\n} from '../../util/urlHelpers';\nimport { ensureListing } from '../../util/data';\nimport { createResourceLocatorString } from '../../util/routes';\nimport {\n  EditListingAvailabilityPanel,\n  EditListingDescriptionPanel,\n  EditListingFeaturesPanel,\n  EditListingLocationPanel,\n  EditListingPhotosPanel,\n  EditListingPoliciesPanel,\n  EditListingPricingPanel,\n} from '../../components';\n\nimport css from './EditListingWizard.css';\n\nexport const AVAILABILITY = 'availability';\nexport const DESCRIPTION = 'description';\nexport const FEATURES = 'features';\nexport const POLICY = 'policy';\nexport const LOCATION = 'location';\nexport const PRICING = 'pricing';\nexport const PHOTOS = 'photos';\n\n// EditListingWizardTab component supports these tabs\nexport const SUPPORTED_TABS = [\n  DESCRIPTION,\n  FEATURES,\n  POLICY,\n  LOCATION,\n  PRICING,\n  AVAILABILITY,\n  PHOTOS,\n];\n\nconst pathParamsToNextTab = (params, tab, marketplaceTabs) => {\n  const nextTabIndex = marketplaceTabs.findIndex(s => s === tab) + 1;\n  const nextTab =\n    nextTabIndex < marketplaceTabs.length\n      ? marketplaceTabs[nextTabIndex]\n      : marketplaceTabs[marketplaceTabs.length - 1];\n  return { ...params, tab: nextTab };\n};\n\n// When user has update draft listing, he should be redirected to next EditListingWizardTab\nconst redirectAfterDraftUpdate = (listingId, params, tab, marketplaceTabs, history) => {\n  const currentPathParams = {\n    ...params,\n    type: LISTING_PAGE_PARAM_TYPE_DRAFT,\n    id: listingId,\n  };\n  const routes = routeConfiguration();\n\n  // Replace current \"new\" path to \"draft\" path.\n  // Browser's back button should lead to editing current draft instead of creating a new one.\n  if (params.type === LISTING_PAGE_PARAM_TYPE_NEW) {\n    const draftURI = createResourceLocatorString('EditListingPage', routes, currentPathParams, {});\n    history.replace(draftURI);\n  }\n\n  // Redirect to next tab\n  const nextPathParams = pathParamsToNextTab(currentPathParams, tab, marketplaceTabs);\n  const to = createResourceLocatorString('EditListingPage', routes, nextPathParams, {});\n  history.push(to);\n};\n\nconst EditListingWizardTab = props => {\n  const {\n    tab,\n    marketplaceTabs,\n    params,\n    errors,\n    fetchInProgress,\n    newListingPublished,\n    history,\n    images,\n    availability,\n    listing,\n    handleCreateFlowTabScrolling,\n    handlePublishListing,\n    onUpdateListing,\n    onCreateListingDraft,\n    onImageUpload,\n    onUpdateImageOrder,\n    onRemoveImage,\n    onChange,\n    updatedTab,\n    updateInProgress,\n    intl,\n  } = props;\n\n  const { type } = params;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n  const isNewListingFlow = isNewURI || isDraftURI;\n\n  const currentListing = ensureListing(listing);\n  const imageIds = images => {\n    return images ? images.map(img => img.imageId || img.id) : null;\n  };\n\n  const onCompleteEditListingWizardTab = (tab, updateValues) => {\n    // Normalize images for API call\n    const { images: updatedImages, ...otherValues } = updateValues;\n    const imageProperty =\n      typeof updatedImages !== 'undefined' ? { images: imageIds(updatedImages) } : {};\n    const updateValuesWithImages = { ...otherValues, ...imageProperty };\n\n    if (isNewListingFlow) {\n      const onUpsertListingDraft = isNewURI\n        ? (tab, updateValues) => onCreateListingDraft(updateValues)\n        : onUpdateListing;\n\n      const upsertValues = isNewURI\n        ? updateValuesWithImages\n        : { ...updateValuesWithImages, id: currentListing.id };\n\n      onUpsertListingDraft(tab, upsertValues)\n        .then(r => {\n          if (tab !== marketplaceTabs[marketplaceTabs.length - 1]) {\n            // Create listing flow: smooth scrolling polyfill to scroll to correct tab\n            handleCreateFlowTabScrolling(false);\n\n            // After successful saving of draft data, user should be redirected to next tab\n            redirectAfterDraftUpdate(r.data.data.id.uuid, params, tab, marketplaceTabs, history);\n          } else {\n            handlePublishListing(currentListing.id);\n          }\n        })\n        .catch(e => {\n          // No need for extra actions\n        });\n    } else {\n      onUpdateListing(tab, { ...updateValuesWithImages, id: currentListing.id });\n    }\n  };\n\n  const panelProps = tab => {\n    return {\n      className: css.panel,\n      errors,\n      listing,\n      onChange,\n      panelUpdated: updatedTab === tab,\n      updateInProgress,\n    };\n  };\n\n  switch (tab) {\n    case DESCRIPTION: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewDescription'\n        : 'EditListingWizard.saveEditDescription';\n      return (\n        <EditListingDescriptionPanel\n          {...panelProps(DESCRIPTION)}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n        />\n      );\n    }\n    case FEATURES: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewFeatures'\n        : 'EditListingWizard.saveEditFeatures';\n      return (\n        <EditListingFeaturesPanel\n          {...panelProps(FEATURES)}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n        />\n      );\n    }\n    case POLICY: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewPolicies'\n        : 'EditListingWizard.saveEditPolicies';\n      return (\n        <EditListingPoliciesPanel\n          {...panelProps(POLICY)}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n        />\n      );\n    }\n    case LOCATION: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewLocation'\n        : 'EditListingWizard.saveEditLocation';\n      return (\n        <EditListingLocationPanel\n          {...panelProps(LOCATION)}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n        />\n      );\n    }\n    case PRICING: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewPricing'\n        : 'EditListingWizard.saveEditPricing';\n      return (\n        <EditListingPricingPanel\n          {...panelProps(PRICING)}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n        />\n      );\n    }\n    case AVAILABILITY: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewAvailability'\n        : 'EditListingWizard.saveEditAvailability';\n      return (\n        <EditListingAvailabilityPanel\n          {...panelProps(AVAILABILITY)}\n          availability={availability}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n        />\n      );\n    }\n    case PHOTOS: {\n      const submitButtonTranslationKey = isNewListingFlow\n        ? 'EditListingWizard.saveNewPhotos'\n        : 'EditListingWizard.saveEditPhotos';\n\n      // newListingPublished and fetchInProgress are flags for the last wizard tab\n      return (\n        <EditListingPhotosPanel\n          {...panelProps(PHOTOS)}\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\n          newListingPublished={newListingPublished}\n          fetchInProgress={fetchInProgress}\n          images={images}\n          onImageUpload={onImageUpload}\n          onRemoveImage={onRemoveImage}\n          onSubmit={values => {\n            onCompleteEditListingWizardTab(tab, values);\n          }}\n          onUpdateImageOrder={onUpdateImageOrder}\n        />\n      );\n    }\n    default:\n      return null;\n  }\n};\n\nEditListingWizardTab.defaultProps = {\n  listing: null,\n  updatedTab: null,\n};\n\nconst { array, bool, func, object, oneOf, shape, string } = PropTypes;\n\nEditListingWizardTab.propTypes = {\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: oneOf(SUPPORTED_TABS).isRequired,\n  }).isRequired,\n  errors: shape({\n    createListingDraftError: object,\n    publishListingError: object,\n    updateListingError: object,\n    showListingsError: object,\n    uploadImageError: object,\n  }).isRequired,\n  fetchInProgress: bool.isRequired,\n  newListingPublished: bool.isRequired,\n  history: shape({\n    push: func.isRequired,\n    replace: func.isRequired,\n  }).isRequired,\n  images: array.isRequired,\n  availability: object.isRequired,\n\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: shape({\n    attributes: shape({\n      publicData: object,\n      description: string,\n      geolocation: object,\n      pricing: object,\n      title: string,\n    }),\n    images: array,\n  }),\n\n  handleCreateFlowTabScrolling: func.isRequired,\n  handlePublishListing: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onRemoveImage: func.isRequired,\n  onChange: func.isRequired,\n  updatedTab: string,\n  updateInProgress: bool.isRequired,\n\n  intl: intlShape.isRequired,\n};\n\nexport default EditListingWizardTab;\n"]},"metadata":{},"sourceType":"module"}