{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingAvailabilityForm/EditListingAvailabilityForm.js\";\nimport React, { Component } from 'react';\nimport { bool, func, object, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { Form, Button } from '../../components';\nimport ManageAvailabilityCalendar from './ManageAvailabilityCalendar';\nimport css from './EditListingAvailabilityForm.css';\nexport class EditListingAvailabilityFormComponent extends Component {\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const className = fieldRenderProps.className,\n              rootClassName = fieldRenderProps.rootClassName,\n              disabled = fieldRenderProps.disabled,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              invalid = fieldRenderProps.invalid,\n              pristine = fieldRenderProps.pristine,\n              saveActionMsg = fieldRenderProps.saveActionMsg,\n              updated = fieldRenderProps.updated,\n              updateError = fieldRenderProps.updateError,\n              updateInProgress = fieldRenderProps.updateInProgress,\n              availability = fieldRenderProps.availability,\n              availabilityPlan = fieldRenderProps.availabilityPlan,\n              listingId = fieldRenderProps.listingId;\n        const errorMessage = updateError ? React.createElement(\"p\", {\n          className: css.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingAvailabilityForm.updateFailed\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        })) : null;\n        const classes = classNames(rootClassName || css.root, className);\n        const submitReady = updated && pristine;\n        const submitInProgress = updateInProgress;\n        const submitDisabled = invalid || disabled || submitInProgress;\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, errorMessage, React.createElement(\"div\", {\n          className: css.calendarWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(ManageAvailabilityCalendar, {\n          availability: availability,\n          availabilityPlan: availabilityPlan,\n          listingId: listingId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        })), React.createElement(Button, {\n          className: css.submitButton,\n          type: \"submit\",\n          inProgress: submitInProgress,\n          disabled: submitDisabled,\n          ready: submitReady,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, saveActionMsg));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n\n}\nEditListingAvailabilityFormComponent.defaultProps = {\n  updateError: null\n};\nEditListingAvailabilityFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  updateError: propTypes.error,\n  updateInProgress: bool.isRequired,\n  availability: object.isRequired\n};\nexport default compose(injectIntl)(EditListingAvailabilityFormComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingAvailabilityForm/EditListingAvailabilityForm.js"],"names":["React","Component","bool","func","object","string","compose","Form","FinalForm","intlShape","injectIntl","FormattedMessage","classNames","propTypes","Button","ManageAvailabilityCalendar","css","EditListingAvailabilityFormComponent","render","props","fieldRenderProps","className","rootClassName","disabled","handleSubmit","invalid","pristine","saveActionMsg","updated","updateError","updateInProgress","availability","availabilityPlan","listingId","errorMessage","error","classes","root","submitReady","submitInProgress","submitDisabled","calendarWrapper","submitButton","defaultProps","intl","isRequired","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bool, func, object, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { Form, Button } from '../../components';\n\nimport ManageAvailabilityCalendar from './ManageAvailabilityCalendar';\nimport css from './EditListingAvailabilityForm.css';\n\nexport class EditListingAvailabilityFormComponent extends Component {\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={fieldRenderProps => {\n          const {\n            className,\n            rootClassName,\n            disabled,\n            handleSubmit,\n            //intl,\n            invalid,\n            pristine,\n            saveActionMsg,\n            updated,\n            updateError,\n            updateInProgress,\n            availability,\n            availabilityPlan,\n            listingId,\n          } = fieldRenderProps;\n\n          const errorMessage = updateError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingAvailabilityForm.updateFailed\" />\n            </p>\n          ) : null;\n\n          const classes = classNames(rootClassName || css.root, className);\n          const submitReady = updated && pristine;\n          const submitInProgress = updateInProgress;\n          const submitDisabled = invalid || disabled || submitInProgress;\n\n          return (\n            <Form className={classes} onSubmit={handleSubmit}>\n              {errorMessage}\n              <div className={css.calendarWrapper}>\n                <ManageAvailabilityCalendar\n                  availability={availability}\n                  availabilityPlan={availabilityPlan}\n                  listingId={listingId}\n                />\n              </div>\n\n              <Button\n                className={css.submitButton}\n                type=\"submit\"\n                inProgress={submitInProgress}\n                disabled={submitDisabled}\n                ready={submitReady}\n              >\n                {saveActionMsg}\n              </Button>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nEditListingAvailabilityFormComponent.defaultProps = {\n  updateError: null,\n};\n\nEditListingAvailabilityFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  updateError: propTypes.error,\n  updateInProgress: bool.isRequired,\n  availability: object.isRequired,\n};\n\nexport default compose(injectIntl)(EditListingAvailabilityFormComponent);\n"]},"metadata":{},"sourceType":"module"}