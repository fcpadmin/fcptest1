{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCheckboxGroup/FieldCheckboxGroup.js\";\n\n/*\n * Renders a group of checkboxes that can be used to select\n * multiple values from a set of options.\n *\n * The corresponding component when rendering the selected\n * values is PropertyGroup.\n *\n */\nimport React from 'react';\nimport { arrayOf, bool, node, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FieldArray } from 'react-final-form-arrays';\nimport { FieldCheckbox, ValidationError } from '../../components';\nimport css from './FieldCheckboxGroup.css';\n\nconst FieldCheckboxRenderer = props => {\n  const className = props.className,\n        rootClassName = props.rootClassName,\n        label = props.label,\n        twoColumns = props.twoColumns,\n        id = props.id,\n        fields = props.fields,\n        options = props.options,\n        meta = props.meta;\n  const classes = classNames(rootClassName || css.root, className);\n  const listClasses = twoColumns ? classNames(css.list, css.twoColumns) : css.list;\n  return React.createElement(\"fieldset\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, label ? React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, label) : null, React.createElement(\"ul\", {\n    className: listClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, options.map((option, index) => {\n    const fieldId = \"\".concat(id, \".\").concat(option.key);\n    return React.createElement(\"li\", {\n      key: fieldId,\n      className: css.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(FieldCheckbox, {\n      id: fieldId,\n      name: fields.name,\n      label: option.label,\n      value: option.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  })), React.createElement(ValidationError, {\n    fieldMeta: _objectSpread({}, meta),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n};\n\nFieldCheckboxRenderer.defaultProps = {\n  rootClassName: null,\n  className: null,\n  label: null,\n  twoColumns: false\n};\nFieldCheckboxRenderer.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: node.isRequired\n  })).isRequired,\n  twoColumns: bool\n};\n\nconst FieldCheckboxGroup = props => React.createElement(FieldArray, Object.assign({\n  component: FieldCheckboxRenderer\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n})); // Name and component are required fields for FieldArray.\n// Component-prop we define in this file, name needs to be passed in\n\n\nFieldCheckboxGroup.propTypes = {\n  name: string.isRequired\n};\nexport default FieldCheckboxGroup;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCheckboxGroup/FieldCheckboxGroup.js"],"names":["React","arrayOf","bool","node","shape","string","classNames","FieldArray","FieldCheckbox","ValidationError","css","FieldCheckboxRenderer","props","className","rootClassName","label","twoColumns","id","fields","options","meta","classes","root","listClasses","list","map","option","index","fieldId","key","item","name","defaultProps","propTypes","isRequired","FieldCheckboxGroup"],"mappings":"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","sourcesContent":["/*\n * Renders a group of checkboxes that can be used to select\n * multiple values from a set of options.\n *\n * The corresponding component when rendering the selected\n * values is PropertyGroup.\n *\n */\n\nimport React from 'react';\nimport { arrayOf, bool, node, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FieldArray } from 'react-final-form-arrays';\nimport { FieldCheckbox, ValidationError } from '../../components';\n\nimport css from './FieldCheckboxGroup.css';\n\nconst FieldCheckboxRenderer = props => {\n  const { className, rootClassName, label, twoColumns, id, fields, options, meta } = props;\n\n  const classes = classNames(rootClassName || css.root, className);\n  const listClasses = twoColumns ? classNames(css.list, css.twoColumns) : css.list;\n\n  return (\n    <fieldset className={classes}>\n      {label ? <legend>{label}</legend> : null}\n      <ul className={listClasses}>\n        {options.map((option, index) => {\n          const fieldId = `${id}.${option.key}`;\n          return (\n            <li key={fieldId} className={css.item}>\n              <FieldCheckbox\n                id={fieldId}\n                name={fields.name}\n                label={option.label}\n                value={option.key}\n              />\n            </li>\n          );\n        })}\n      </ul>\n      <ValidationError fieldMeta={{ ...meta }} />\n    </fieldset>\n  );\n};\n\nFieldCheckboxRenderer.defaultProps = {\n  rootClassName: null,\n  className: null,\n  label: null,\n  twoColumns: false,\n};\n\nFieldCheckboxRenderer.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  options: arrayOf(\n    shape({\n      key: string.isRequired,\n      label: node.isRequired,\n    })\n  ).isRequired,\n  twoColumns: bool,\n};\n\nconst FieldCheckboxGroup = props => <FieldArray component={FieldCheckboxRenderer} {...props} />;\n\n// Name and component are required fields for FieldArray.\n// Component-prop we define in this file, name needs to be passed in\nFieldCheckboxGroup.propTypes = {\n  name: string.isRequired,\n};\n\nexport default FieldCheckboxGroup;\n"]},"metadata":{},"sourceType":"module"}