{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/BookingDatesForm/BookingDatesForm.js\";\nimport React, { Component } from 'react';\nimport { string, bool, arrayOf } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { required, bookingDatesRequired, composeValidators } from '../../util/validators';\nimport { START_DATE, END_DATE } from '../../util/dates';\nimport { propTypes } from '../../util/types';\nimport config from '../../config';\nimport { Form, PrimaryButton, FieldDateRangeInput } from '../../components';\nimport EstimatedBreakdownMaybe from './EstimatedBreakdownMaybe';\nimport css from './BookingDatesForm.css';\nexport class BookingDatesFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focusedInput: null\n    };\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.onFocusedInputChange = this.onFocusedInputChange.bind(this);\n  } // Function that can be passed to nested components\n  // so that they can notify this component when the\n  // focused input changes.\n\n\n  onFocusedInputChange(focusedInput) {\n    this.setState({\n      focusedInput\n    });\n  } // In case start or end date for the booking is missing\n  // focus on that input, otherwise continue with the\n  // default handleSubmit function.\n\n\n  handleFormSubmit(e) {\n    const _ref = e.bookingDates || {},\n          startDate = _ref.startDate,\n          endDate = _ref.endDate;\n\n    if (!startDate) {\n      e.preventDefault();\n      this.setState({\n        focusedInput: START_DATE\n      });\n    } else if (!endDate) {\n      e.preventDefault();\n      this.setState({\n        focusedInput: END_DATE\n      });\n    } else {\n      this.props.onSubmit(e);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          rootClassName = _this$props.rootClassName,\n          className = _this$props.className,\n          unitPrice = _this$props.price,\n          rest = _objectWithoutProperties(_this$props, [\"rootClassName\", \"className\", \"price\"]);\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    if (!unitPrice) {\n      return React.createElement(\"div\", {\n        className: classes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: css.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"BookingDatesForm.listingPriceMissing\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })));\n    }\n\n    if (unitPrice.currency !== config.currency) {\n      return React.createElement(\"div\", {\n        className: classes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: css.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"BookingDatesForm.listingCurrencyInvalid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(FinalForm, Object.assign({}, rest, {\n      unitPrice: unitPrice,\n      onSubmit: this.handleFormSubmit,\n      render: fieldRenderProps => {\n        const endDatePlaceholder = fieldRenderProps.endDatePlaceholder,\n              startDatePlaceholder = fieldRenderProps.startDatePlaceholder,\n              form = fieldRenderProps.form,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              intl = fieldRenderProps.intl,\n              isOwnListing = fieldRenderProps.isOwnListing,\n              submitButtonWrapperClassName = fieldRenderProps.submitButtonWrapperClassName,\n              unitPrice = fieldRenderProps.unitPrice,\n              unitType = fieldRenderProps.unitType,\n              values = fieldRenderProps.values,\n              timeSlots = fieldRenderProps.timeSlots,\n              fetchTimeSlotsError = fieldRenderProps.fetchTimeSlotsError;\n\n        const _ref2 = values && values.bookingDates ? values.bookingDates : {},\n              startDate = _ref2.startDate,\n              endDate = _ref2.endDate;\n\n        const bookingStartLabel = intl.formatMessage({\n          id: 'BookingDatesForm.bookingStartTitle'\n        });\n        const bookingEndLabel = intl.formatMessage({\n          id: 'BookingDatesForm.bookingEndTitle'\n        });\n        const requiredMessage = intl.formatMessage({\n          id: 'BookingDatesForm.requiredDate'\n        });\n        const startDateErrorMessage = intl.formatMessage({\n          id: 'FieldDateRangeInput.invalidStartDate'\n        });\n        const endDateErrorMessage = intl.formatMessage({\n          id: 'FieldDateRangeInput.invalidEndDate'\n        });\n        const timeSlotsError = fetchTimeSlotsError ? React.createElement(\"p\", {\n          className: css.timeSlotsError,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.timeSlotsError\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        })) : null; // This is the place to collect breakdown estimation data. See the\n        // EstimatedBreakdownMaybe component to change the calculations\n        // for customized payment processes.\n\n        const bookingData = startDate && endDate ? {\n          unitType,\n          unitPrice,\n          startDate,\n          endDate,\n          // NOTE: If unitType is `line-item/units`, a new picker\n          // for the quantity should be added to the form.\n          quantity: 1\n        } : null;\n        const bookingInfo = bookingData ? React.createElement(\"div\", {\n          className: css.priceBreakdownContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: css.priceBreakdownTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.priceBreakdownTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        })), React.createElement(EstimatedBreakdownMaybe, {\n          bookingData: bookingData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        })) : null;\n        const dateFormatOptions = {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric'\n        };\n        const now = moment();\n        const today = now.startOf('day').toDate();\n        const tomorrow = now.startOf('day').add(1, 'days').toDate();\n        const startDatePlaceholderText = startDatePlaceholder || intl.formatDate(today, dateFormatOptions);\n        const endDatePlaceholderText = endDatePlaceholder || intl.formatDate(tomorrow, dateFormatOptions);\n        const submitButtonClasses = classNames(submitButtonWrapperClassName || css.submitButtonWrapper);\n        return React.createElement(Form, {\n          onSubmit: handleSubmit,\n          className: classes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, timeSlotsError, React.createElement(FieldDateRangeInput, {\n          className: css.bookingDates,\n          name: \"bookingDates\",\n          unitType: unitType,\n          startDateId: \"\".concat(form, \".bookingStartDate\"),\n          startDateLabel: bookingStartLabel,\n          startDatePlaceholderText: startDatePlaceholderText,\n          endDateId: \"\".concat(form, \".bookingEndDate\"),\n          endDateLabel: bookingEndLabel,\n          endDatePlaceholderText: endDatePlaceholderText,\n          focusedInput: this.state.focusedInput,\n          onFocusedInputChange: this.onFocusedInputChange,\n          format: null,\n          timeSlots: timeSlots,\n          useMobileMargins: true,\n          validate: composeValidators(required(requiredMessage), bookingDatesRequired(startDateErrorMessage, endDateErrorMessage)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }), bookingInfo, React.createElement(\"p\", {\n          className: css.smallPrint,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: isOwnListing ? 'BookingDatesForm.ownListing' : 'BookingDatesForm.youWontBeChargedInfo',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: submitButtonClasses,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(PrimaryButton, {\n          type: \"submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.requestToBook\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }))));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n}\nBookingDatesFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  submitButtonWrapperClassName: null,\n  price: null,\n  isOwnListing: false,\n  startDatePlaceholder: null,\n  endDatePlaceholder: null,\n  timeSlots: null\n};\nBookingDatesFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  submitButtonWrapperClassName: string,\n  unitType: propTypes.bookingUnitType.isRequired,\n  price: propTypes.money,\n  isOwnListing: bool,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  // from injectIntl\n  intl: intlShape.isRequired,\n  // for tests\n  startDatePlaceholder: string,\n  endDatePlaceholder: string\n};\nconst BookingDatesForm = compose(injectIntl)(BookingDatesFormComponent);\nBookingDatesForm.displayName = 'BookingDatesForm';\nexport default BookingDatesForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/BookingDatesForm/BookingDatesForm.js"],"names":["React","Component","string","bool","arrayOf","compose","Form","FinalForm","FormattedMessage","intlShape","injectIntl","classNames","moment","required","bookingDatesRequired","composeValidators","START_DATE","END_DATE","propTypes","config","PrimaryButton","FieldDateRangeInput","EstimatedBreakdownMaybe","css","BookingDatesFormComponent","constructor","props","state","focusedInput","handleFormSubmit","bind","onFocusedInputChange","setState","e","bookingDates","startDate","endDate","preventDefault","onSubmit","render","rootClassName","className","unitPrice","price","rest","classes","root","error","currency","fieldRenderProps","endDatePlaceholder","startDatePlaceholder","form","handleSubmit","intl","isOwnListing","submitButtonWrapperClassName","unitType","values","timeSlots","fetchTimeSlotsError","bookingStartLabel","formatMessage","id","bookingEndLabel","requiredMessage","startDateErrorMessage","endDateErrorMessage","timeSlotsError","bookingData","quantity","bookingInfo","priceBreakdownContainer","priceBreakdownTitle","dateFormatOptions","weekday","month","day","now","today","startOf","toDate","tomorrow","add","startDatePlaceholderText","formatDate","endDatePlaceholderText","submitButtonClasses","submitButtonWrapper","smallPrint","defaultProps","bookingUnitType","isRequired","money","timeSlot","BookingDatesForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, bool, arrayOf } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { required, bookingDatesRequired, composeValidators } from '../../util/validators';\nimport { START_DATE, END_DATE } from '../../util/dates';\nimport { propTypes } from '../../util/types';\nimport config from '../../config';\nimport { Form, PrimaryButton, FieldDateRangeInput } from '../../components';\nimport EstimatedBreakdownMaybe from './EstimatedBreakdownMaybe';\n\nimport css from './BookingDatesForm.css';\n\nexport class BookingDatesFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { focusedInput: null };\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.onFocusedInputChange = this.onFocusedInputChange.bind(this);\n  }\n\n  // Function that can be passed to nested components\n  // so that they can notify this component when the\n  // focused input changes.\n  onFocusedInputChange(focusedInput) {\n    this.setState({ focusedInput });\n  }\n\n  // In case start or end date for the booking is missing\n  // focus on that input, otherwise continue with the\n  // default handleSubmit function.\n  handleFormSubmit(e) {\n    const { startDate, endDate } = e.bookingDates || {};\n    if (!startDate) {\n      e.preventDefault();\n      this.setState({ focusedInput: START_DATE });\n    } else if (!endDate) {\n      e.preventDefault();\n      this.setState({ focusedInput: END_DATE });\n    } else {\n      this.props.onSubmit(e);\n    }\n  }\n\n  render() {\n    const { rootClassName, className, price: unitPrice, ...rest } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n\n    if (!unitPrice) {\n      return (\n        <div className={classes}>\n          <p className={css.error}>\n            <FormattedMessage id=\"BookingDatesForm.listingPriceMissing\" />\n          </p>\n        </div>\n      );\n    }\n    if (unitPrice.currency !== config.currency) {\n      return (\n        <div className={classes}>\n          <p className={css.error}>\n            <FormattedMessage id=\"BookingDatesForm.listingCurrencyInvalid\" />\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <FinalForm\n        {...rest}\n        unitPrice={unitPrice}\n        onSubmit={this.handleFormSubmit}\n        render={fieldRenderProps => {\n          const {\n            endDatePlaceholder,\n            startDatePlaceholder,\n            form,\n            handleSubmit,\n            intl,\n            isOwnListing,\n            submitButtonWrapperClassName,\n            unitPrice,\n            unitType,\n            values,\n            timeSlots,\n            fetchTimeSlotsError,\n          } = fieldRenderProps;\n          const { startDate, endDate } = values && values.bookingDates ? values.bookingDates : {};\n\n          const bookingStartLabel = intl.formatMessage({\n            id: 'BookingDatesForm.bookingStartTitle',\n          });\n          const bookingEndLabel = intl.formatMessage({ id: 'BookingDatesForm.bookingEndTitle' });\n          const requiredMessage = intl.formatMessage({ id: 'BookingDatesForm.requiredDate' });\n          const startDateErrorMessage = intl.formatMessage({\n            id: 'FieldDateRangeInput.invalidStartDate',\n          });\n          const endDateErrorMessage = intl.formatMessage({\n            id: 'FieldDateRangeInput.invalidEndDate',\n          });\n          const timeSlotsError = fetchTimeSlotsError ? (\n            <p className={css.timeSlotsError}>\n              <FormattedMessage id=\"BookingDatesForm.timeSlotsError\" />\n            </p>\n          ) : null;\n\n          // This is the place to collect breakdown estimation data. See the\n          // EstimatedBreakdownMaybe component to change the calculations\n          // for customized payment processes.\n          const bookingData =\n            startDate && endDate\n              ? {\n                  unitType,\n                  unitPrice,\n                  startDate,\n                  endDate,\n\n                  // NOTE: If unitType is `line-item/units`, a new picker\n                  // for the quantity should be added to the form.\n                  quantity: 1,\n                }\n              : null;\n          const bookingInfo = bookingData ? (\n            <div className={css.priceBreakdownContainer}>\n              <h3 className={css.priceBreakdownTitle}>\n                <FormattedMessage id=\"BookingDatesForm.priceBreakdownTitle\" />\n              </h3>\n              <EstimatedBreakdownMaybe bookingData={bookingData} />\n            </div>\n          ) : null;\n\n          const dateFormatOptions = {\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n          };\n\n          const now = moment();\n          const today = now.startOf('day').toDate();\n          const tomorrow = now\n            .startOf('day')\n            .add(1, 'days')\n            .toDate();\n          const startDatePlaceholderText =\n            startDatePlaceholder || intl.formatDate(today, dateFormatOptions);\n          const endDatePlaceholderText =\n            endDatePlaceholder || intl.formatDate(tomorrow, dateFormatOptions);\n          const submitButtonClasses = classNames(\n            submitButtonWrapperClassName || css.submitButtonWrapper\n          );\n\n          return (\n            <Form onSubmit={handleSubmit} className={classes}>\n              {timeSlotsError}\n              <FieldDateRangeInput\n                className={css.bookingDates}\n                name=\"bookingDates\"\n                unitType={unitType}\n                startDateId={`${form}.bookingStartDate`}\n                startDateLabel={bookingStartLabel}\n                startDatePlaceholderText={startDatePlaceholderText}\n                endDateId={`${form}.bookingEndDate`}\n                endDateLabel={bookingEndLabel}\n                endDatePlaceholderText={endDatePlaceholderText}\n                focusedInput={this.state.focusedInput}\n                onFocusedInputChange={this.onFocusedInputChange}\n                format={null}\n                timeSlots={timeSlots}\n                useMobileMargins\n                validate={composeValidators(\n                  required(requiredMessage),\n                  bookingDatesRequired(startDateErrorMessage, endDateErrorMessage)\n                )}\n              />\n              {bookingInfo}\n              <p className={css.smallPrint}>\n                <FormattedMessage\n                  id={\n                    isOwnListing\n                      ? 'BookingDatesForm.ownListing'\n                      : 'BookingDatesForm.youWontBeChargedInfo'\n                  }\n                />\n              </p>\n              <div className={submitButtonClasses}>\n                <PrimaryButton type=\"submit\">\n                  <FormattedMessage id=\"BookingDatesForm.requestToBook\" />\n                </PrimaryButton>\n              </div>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nBookingDatesFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  submitButtonWrapperClassName: null,\n  price: null,\n  isOwnListing: false,\n  startDatePlaceholder: null,\n  endDatePlaceholder: null,\n  timeSlots: null,\n};\n\nBookingDatesFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  submitButtonWrapperClassName: string,\n\n  unitType: propTypes.bookingUnitType.isRequired,\n  price: propTypes.money,\n  isOwnListing: bool,\n  timeSlots: arrayOf(propTypes.timeSlot),\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n\n  // for tests\n  startDatePlaceholder: string,\n  endDatePlaceholder: string,\n};\n\nconst BookingDatesForm = compose(injectIntl)(BookingDatesFormComponent);\nBookingDatesForm.displayName = 'BookingDatesForm';\n\nexport default BookingDatesForm;\n"]},"metadata":{},"sourceType":"module"}