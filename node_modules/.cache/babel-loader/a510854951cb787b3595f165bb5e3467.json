{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/app.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOMServer from 'react-dom/server'; // react-dates needs to be initialized before using any react-dates component\n// https://github.com/airbnb/react-dates#initialize\n// NOTE: Initializing it here will initialize it also for app.test.js\n\nimport 'react-dates/initialize';\nimport Helmet from 'react-helmet';\nimport { BrowserRouter, StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport difference from 'lodash/difference';\nimport mapValues from 'lodash/mapValues';\nimport moment from 'moment';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport configureStore from './store';\nimport routeConfiguration from './routeConfiguration';\nimport Routes from './Routes';\nimport config from './config'; // Flex template application uses English translations as default.\n\nimport defaultMessages from './translations/en.json'; // If you want to change the language, change the imports to match the wanted locale:\n//   1) Change the language in the config.js file!\n//   2) Import correct locale rules for React Intl library\n//   3) Import correct locale rules for Moment library\n//   4) Use the `messagesInLocale` import to add the correct translation file.\n// Step 2:\n// Import locale rules for React Intl library\n\nimport localeData from 'react-intl/locale-data/en'; // Step 3:\n// If you are using a non-english locale with moment library,\n// you should also import time specific formatting rules for that locale\n// e.g. for French: import 'moment/locale/fr';\n// Step 4:\n// If you are using a non-english locale, point `messagesInLocale` to correct .json file\n\nimport messagesInLocale from './translations/fr.json'; // If translation key is missing from `messagesInLocale` (e.g. fr.json),\n// corresponding key will be added to messages from `defaultMessages` (en.json)\n// to prevent missing translation key errors.\n\nconst addMissingTranslations = (sourceLangTranslations, targetLangTranslations) => {\n  const sourceKeys = Object.keys(sourceLangTranslations);\n  const targetKeys = Object.keys(targetLangTranslations);\n  const missingKeys = difference(sourceKeys, targetKeys);\n\n  const addMissingTranslation = (translations, missingKey) => _objectSpread({}, translations, {\n    [missingKey]: sourceLangTranslations[missingKey]\n  });\n\n  return missingKeys.reduce(addMissingTranslation, targetLangTranslations);\n};\n\nconst isDefaultLanguageInUse = config.locale === 'en';\nconst messages = isDefaultLanguageInUse ? defaultMessages : addMissingTranslations(defaultMessages, messagesInLocale);\nconst isTestEnv = process.env.NODE_ENV === 'test'; // Locale should not affect the tests. We ensure this by providing\n// messages with the key as the value of each message.\n\nconst testMessages = mapValues(messages, (val, key) => key);\nconst localeMessages = isTestEnv ? testMessages : messages;\n\nconst setupLocale = () => {\n  if (isTestEnv) {\n    // Don't change the locale in tests\n    return;\n  } // Add the translation messages\n\n\n  addLocaleData([...localeData]); // Set the Moment locale globally\n  // See: http://momentjs.com/docs/#/i18n/changing-locale/\n\n  moment.locale(config.locale);\n};\n\nexport const ClientApp = props => {\n  const store = props.store;\n  setupLocale();\n  return React.createElement(IntlProvider, {\n    locale: config.locale,\n    messages: localeMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Routes, {\n    routes: routeConfiguration(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))));\n};\nconst any = PropTypes.any,\n      string = PropTypes.string;\nClientApp.propTypes = {\n  store: any.isRequired\n};\nexport const ServerApp = props => {\n  const url = props.url,\n        context = props.context,\n        store = props.store;\n  setupLocale();\n  return React.createElement(IntlProvider, {\n    locale: config.locale,\n    messages: localeMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(StaticRouter, {\n    location: url,\n    context: context,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Routes, {\n    routes: routeConfiguration(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }))));\n};\nServerApp.propTypes = {\n  url: string.isRequired,\n  context: any.isRequired,\n  store: any.isRequired\n};\n/**\n * Render the given route.\n *\n * @param {String} url Path to render\n * @param {Object} serverContext Server rendering context from react-router\n *\n * @returns {Object} Object with keys:\n *  - {String} body: Rendered application body of the given route\n *  - {Object} head: Application head metadata from react-helmet\n */\n\nexport const renderApp = (url, serverContext, preloadedState) => {\n  // Don't pass an SDK instance since we're only rendering the\n  // component tree with the preloaded store state and components\n  // shouldn't do any SDK calls in the (server) rendering lifecycle.\n  const store = configureStore(preloadedState);\n  const body = ReactDOMServer.renderToString(React.createElement(ServerApp, {\n    url: url,\n    context: serverContext,\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }));\n  const head = Helmet.renderStatic();\n  return {\n    head,\n    body\n  };\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/app.js"],"names":["React","PropTypes","ReactDOMServer","Helmet","BrowserRouter","StaticRouter","Provider","difference","mapValues","moment","IntlProvider","addLocaleData","configureStore","routeConfiguration","Routes","config","defaultMessages","localeData","messagesInLocale","addMissingTranslations","sourceLangTranslations","targetLangTranslations","sourceKeys","Object","keys","targetKeys","missingKeys","addMissingTranslation","translations","missingKey","reduce","isDefaultLanguageInUse","locale","messages","isTestEnv","process","env","NODE_ENV","testMessages","val","key","localeMessages","setupLocale","ClientApp","props","store","any","string","propTypes","isRequired","ServerApp","url","context","renderApp","serverContext","preloadedState","body","renderToString","head","renderStatic"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOMServer from 'react-dom/server';\n\n// react-dates needs to be initialized before using any react-dates component\n// https://github.com/airbnb/react-dates#initialize\n// NOTE: Initializing it here will initialize it also for app.test.js\nimport 'react-dates/initialize';\nimport Helmet from 'react-helmet';\nimport { BrowserRouter, StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport difference from 'lodash/difference';\nimport mapValues from 'lodash/mapValues';\nimport moment from 'moment';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport configureStore from './store';\nimport routeConfiguration from './routeConfiguration';\nimport Routes from './Routes';\nimport config from './config';\n\n// Flex template application uses English translations as default.\nimport defaultMessages from './translations/en.json';\n\n// If you want to change the language, change the imports to match the wanted locale:\n//   1) Change the language in the config.js file!\n//   2) Import correct locale rules for React Intl library\n//   3) Import correct locale rules for Moment library\n//   4) Use the `messagesInLocale` import to add the correct translation file.\n\n// Step 2:\n// Import locale rules for React Intl library\nimport localeData from 'react-intl/locale-data/en';\n\n// Step 3:\n// If you are using a non-english locale with moment library,\n// you should also import time specific formatting rules for that locale\n// e.g. for French: import 'moment/locale/fr';\n\n// Step 4:\n// If you are using a non-english locale, point `messagesInLocale` to correct .json file\nimport messagesInLocale from './translations/fr.json';\n\n// If translation key is missing from `messagesInLocale` (e.g. fr.json),\n// corresponding key will be added to messages from `defaultMessages` (en.json)\n// to prevent missing translation key errors.\nconst addMissingTranslations = (sourceLangTranslations, targetLangTranslations) => {\n  const sourceKeys = Object.keys(sourceLangTranslations);\n  const targetKeys = Object.keys(targetLangTranslations);\n  const missingKeys = difference(sourceKeys, targetKeys);\n\n  const addMissingTranslation = (translations, missingKey) => ({\n    ...translations,\n    [missingKey]: sourceLangTranslations[missingKey],\n  });\n\n  return missingKeys.reduce(addMissingTranslation, targetLangTranslations);\n};\n\nconst isDefaultLanguageInUse = config.locale === 'en';\n\nconst messages = isDefaultLanguageInUse\n  ? defaultMessages\n  : addMissingTranslations(defaultMessages, messagesInLocale);\n\nconst isTestEnv = process.env.NODE_ENV === 'test';\n\n// Locale should not affect the tests. We ensure this by providing\n// messages with the key as the value of each message.\nconst testMessages = mapValues(messages, (val, key) => key);\nconst localeMessages = isTestEnv ? testMessages : messages;\n\nconst setupLocale = () => {\n  if (isTestEnv) {\n    // Don't change the locale in tests\n    return;\n  }\n\n  // Add the translation messages\n  addLocaleData([...localeData]);\n\n  // Set the Moment locale globally\n  // See: http://momentjs.com/docs/#/i18n/changing-locale/\n  moment.locale(config.locale);\n};\n\nexport const ClientApp = props => {\n  const { store } = props;\n  setupLocale();\n  return (\n    <IntlProvider locale={config.locale} messages={localeMessages}>\n      <Provider store={store}>\n        <BrowserRouter>\n          <Routes routes={routeConfiguration()} />\n        </BrowserRouter>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nconst { any, string } = PropTypes;\n\nClientApp.propTypes = { store: any.isRequired };\n\nexport const ServerApp = props => {\n  const { url, context, store } = props;\n  setupLocale();\n  return (\n    <IntlProvider locale={config.locale} messages={localeMessages}>\n      <Provider store={store}>\n        <StaticRouter location={url} context={context}>\n          <Routes routes={routeConfiguration()} />\n        </StaticRouter>\n      </Provider>\n    </IntlProvider>\n  );\n};\n\nServerApp.propTypes = { url: string.isRequired, context: any.isRequired, store: any.isRequired };\n\n/**\n * Render the given route.\n *\n * @param {String} url Path to render\n * @param {Object} serverContext Server rendering context from react-router\n *\n * @returns {Object} Object with keys:\n *  - {String} body: Rendered application body of the given route\n *  - {Object} head: Application head metadata from react-helmet\n */\nexport const renderApp = (url, serverContext, preloadedState) => {\n  // Don't pass an SDK instance since we're only rendering the\n  // component tree with the preloaded store state and components\n  // shouldn't do any SDK calls in the (server) rendering lifecycle.\n  const store = configureStore(preloadedState);\n\n  const body = ReactDOMServer.renderToString(\n    <ServerApp url={url} context={serverContext} store={store} />\n  );\n  const head = Helmet.renderStatic();\n  return { head, body };\n};\n"]},"metadata":{},"sourceType":"module"}