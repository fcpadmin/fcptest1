{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/CheckoutPage/CheckoutPage.js\";\nimport React, { Component } from 'react';\nimport { bool, func, instanceOf, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routeConfiguration';\nimport { pathByRouteName, findRouteByRouteName } from '../../util/routes';\nimport { propTypes, LINE_ITEM_NIGHT, LINE_ITEM_DAY } from '../../util/types';\nimport { ensureListing, ensureUser, ensureTransaction, ensureBooking } from '../../util/data';\nimport { dateFromLocalToAPI } from '../../util/dates';\nimport { createSlug } from '../../util/urlHelpers';\nimport { isTransactionInitiateAmountTooLowError, isTransactionInitiateListingNotFoundError, isTransactionInitiateMissingStripeAccountError, isTransactionInitiateBookingTimeNotAvailableError, isTransactionZeroPaymentError, transactionInitiateOrderStripeErrors } from '../../util/errors';\nimport { formatMoney } from '../../util/currency';\nimport { AvatarMedium, BookingBreakdown, Logo, NamedLink, NamedRedirect, Page, ResponsiveImage } from '../../components';\nimport { StripePaymentForm } from '../../forms';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { initiateOrder, initiateOrderAfterEnquiry, setInitialValues, speculateTransaction } from './CheckoutPage.duck';\nimport { createStripePaymentToken } from '../../ducks/stripe.duck.js';\nimport config from '../../config';\nimport { storeData, storedData, clearData } from './CheckoutPageSessionHelpers';\nimport css from './CheckoutPage.css';\nconst STORAGE_KEY = 'CheckoutPage';\nexport class CheckoutPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageData: {},\n      dataLoaded: false,\n      submitting: false\n    };\n    this.loadInitialData = this.loadInitialData.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentWillMount() {\n    if (window) {\n      this.loadInitialData();\n    }\n  }\n  /**\n   * Load initial data for the page\n   *\n   * Since the data for the checkout is not passed in the URL (there\n   * might be lots of options in the future), we must pass in the data\n   * some other way. Currently the ListingPage sets the initial data\n   * for the CheckoutPage's Redux store.\n   *\n   * For some cases (e.g. a refresh in the CheckoutPage), the Redux\n   * store is empty. To handle that case, we store the received data\n   * to window.sessionStorage and read it from there if no props from\n   * the store exist.\n   *\n   * This function also sets of fetching the speculative transaction\n   * based on this initial data.\n   */\n\n\n  loadInitialData() {\n    const _this$props = this.props,\n          bookingData = _this$props.bookingData,\n          bookingDates = _this$props.bookingDates,\n          listing = _this$props.listing,\n          enquiredTransaction = _this$props.enquiredTransaction,\n          fetchSpeculatedTransaction = _this$props.fetchSpeculatedTransaction,\n          history = _this$props.history; // Browser's back navigation should not rewrite data in session store.\n    // Action is 'POP' on both history.back() and page refresh cases.\n    // Action is 'PUSH' when user has directed through a link\n    // Action is 'REPLACE' when user has directed through login/signup process\n\n    const hasNavigatedThroughLink = history.action === 'PUSH' || history.action === 'REPLACE';\n    const hasDataInProps = !!(bookingData && bookingDates && listing) && hasNavigatedThroughLink;\n\n    if (hasDataInProps) {\n      // Store data only if data is passed through props and user has navigated through a link.\n      storeData(bookingData, bookingDates, listing, enquiredTransaction, STORAGE_KEY);\n    } // NOTE: stored data can be empty if user has already successfully completed transaction.\n\n\n    const pageData = hasDataInProps ? {\n      bookingData,\n      bookingDates,\n      listing,\n      enquiredTransaction\n    } : storedData(STORAGE_KEY);\n    const hasData = pageData && pageData.listing && pageData.listing.id && pageData.bookingData && pageData.bookingDates && pageData.bookingDates.bookingStart && pageData.bookingDates.bookingEnd;\n\n    if (hasData) {\n      const listingId = pageData.listing.id;\n      const _pageData$bookingDate = pageData.bookingDates,\n            bookingStart = _pageData$bookingDate.bookingStart,\n            bookingEnd = _pageData$bookingDate.bookingEnd; // Convert picked date to date that will be converted on the API as\n      // a noon of correct year-month-date combo in UTC\n\n      const bookingStartForAPI = dateFromLocalToAPI(bookingStart);\n      const bookingEndForAPI = dateFromLocalToAPI(bookingEnd); // Fetch speculated transaction for showing price in booking breakdown\n      // NOTE: if unit type is line-item/units, quantity needs to be added.\n      // The way to pass it to checkout page is through pageData.bookingData\n\n      fetchSpeculatedTransaction({\n        listingId,\n        bookingStart: bookingStartForAPI,\n        bookingEnd: bookingEndForAPI\n      });\n    }\n\n    this.setState({\n      pageData: pageData || {},\n      dataLoaded: true\n    });\n  }\n\n  handleSubmit(values) {\n    if (this.state.submitting) {\n      return;\n    }\n\n    this.setState({\n      submitting: true\n    });\n    const cardToken = values.token;\n    const initialMessage = values.message;\n    const _this$props2 = this.props,\n          history = _this$props2.history,\n          sendOrderRequest = _this$props2.sendOrderRequest,\n          sendOrderRequestAfterEnquiry = _this$props2.sendOrderRequestAfterEnquiry,\n          speculatedTransaction = _this$props2.speculatedTransaction,\n          dispatch = _this$props2.dispatch; // Create order aka transaction\n    // NOTE: if unit type is line-item/units, quantity needs to be added.\n    // The way to pass it to checkout page is through pageData.bookingData\n\n    const requestParams = {\n      listingId: this.state.pageData.listing.id,\n      cardToken,\n      bookingStart: speculatedTransaction.booking.attributes.start,\n      bookingEnd: speculatedTransaction.booking.attributes.end\n    };\n    const enquiredTransaction = this.state.pageData.enquiredTransaction; // if an enquired transaction is available, use that as basis\n    // otherwise initiate a new transaction\n\n    const initiateRequest = enquiredTransaction ? sendOrderRequestAfterEnquiry(enquiredTransaction.id, requestParams) : sendOrderRequest(requestParams, initialMessage);\n    initiateRequest.then(values => {\n      const orderId = values.orderId,\n            initialMessageSuccess = values.initialMessageSuccess;\n      this.setState({\n        submitting: false\n      });\n      const routes = routeConfiguration();\n      const OrderPage = findRouteByRouteName('OrderDetailsPage', routes); // Transaction is already created, but if the initial message\n      // sending failed, we tell it to the OrderDetailsPage.\n\n      dispatch(OrderPage.setInitialValues({\n        initialMessageFailedToTransaction: initialMessageSuccess ? null : orderId\n      }));\n      const orderDetailsPath = pathByRouteName('OrderDetailsPage', routes, {\n        id: orderId.uuid\n      });\n      clearData(STORAGE_KEY);\n      history.push(orderDetailsPath);\n    }).catch(() => {\n      this.setState({\n        submitting: false\n      });\n    });\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          scrollingDisabled = _this$props3.scrollingDisabled,\n          speculateTransactionInProgress = _this$props3.speculateTransactionInProgress,\n          speculateTransactionError = _this$props3.speculateTransactionError,\n          speculatedTransaction = _this$props3.speculatedTransaction,\n          initiateOrderError = _this$props3.initiateOrderError,\n          intl = _this$props3.intl,\n          params = _this$props3.params,\n          currentUser = _this$props3.currentUser,\n          onCreateStripePaymentToken = _this$props3.onCreateStripePaymentToken,\n          stripePaymentTokenInProgress = _this$props3.stripePaymentTokenInProgress,\n          stripePaymentTokenError = _this$props3.stripePaymentTokenError,\n          stripePaymentToken = _this$props3.stripePaymentToken; // Since the listing data is already given from the ListingPage\n    // and stored to handle refreshes, it might not have the possible\n    // deleted or closed information in it. If the transaction\n    // initiate or the speculative initiate fail due to the listing\n    // being deleted or closec, we should dig the information from the\n    // errors and not the listing data.\n\n    const listingNotFound = isTransactionInitiateListingNotFoundError(speculateTransactionError) || isTransactionInitiateListingNotFoundError(initiateOrderError);\n    const isLoading = !this.state.dataLoaded || speculateTransactionInProgress;\n    const _this$state$pageData = this.state.pageData,\n          listing = _this$state$pageData.listing,\n          bookingDates = _this$state$pageData.bookingDates,\n          enquiredTransaction = _this$state$pageData.enquiredTransaction;\n    const currentTransaction = ensureTransaction(speculatedTransaction, {}, null);\n    const currentBooking = ensureBooking(currentTransaction.booking);\n    const currentListing = ensureListing(listing);\n    const currentAuthor = ensureUser(currentListing.author);\n    const isOwnListing = currentUser && currentUser.id && currentAuthor && currentAuthor.id && currentAuthor.id.uuid === currentUser.id.uuid;\n    const hasListingAndAuthor = !!(currentListing.id && currentAuthor.id);\n    const hasBookingDates = !!(bookingDates && bookingDates.bookingStart && bookingDates.bookingEnd);\n    const hasRequiredData = hasListingAndAuthor && hasBookingDates;\n    const canShowPage = hasRequiredData && !isOwnListing;\n    const shouldRedirect = !isLoading && !canShowPage; // Redirect back to ListingPage if data is missing.\n    // Redirection must happen before any data format error is thrown (e.g. wrong currency)\n\n    if (shouldRedirect) {\n      // eslint-disable-next-line no-console\n      console.error('Missing or invalid data for checkout, redirecting back to listing page.', {\n        transaction: currentTransaction,\n        bookingDates,\n        listing\n      });\n      return React.createElement(NamedRedirect, {\n        name: \"ListingPage\",\n        params: params,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      });\n    } // Show breakdown only when transaction and booking are loaded\n    // (i.e. have an id)\n\n\n    const breakdown = currentTransaction.id && currentBooking.id ? React.createElement(BookingBreakdown, {\n      className: css.bookingBreakdown,\n      userRole: \"customer\",\n      unitType: config.bookingUnitType,\n      transaction: currentTransaction,\n      booking: currentBooking,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }) : null; // Allow showing page when currentUser is still being downloaded,\n    // but show payment form only when user info is loaded.\n\n    const showPaymentForm = !!(currentUser && hasRequiredData && !listingNotFound && !initiateOrderError && !speculateTransactionError);\n    const listingTitle = currentListing.attributes.title;\n    const title = intl.formatMessage({\n      id: 'CheckoutPage.title'\n    }, {\n      listingTitle\n    });\n    const firstImage = currentListing.images && currentListing.images.length > 0 ? currentListing.images[0] : null;\n    const listingNotFoundErrorMessage = listingNotFound ? React.createElement(\"p\", {\n      className: css.notFoundError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"CheckoutPage.listingNotFoundError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    })) : null;\n    const listingLink = React.createElement(NamedLink, {\n      name: \"ListingPage\",\n      params: {\n        id: currentListing.id.uuid,\n        slug: createSlug(listingTitle)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"CheckoutPage.errorlistingLinkText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }));\n    const isAmountTooLowError = isTransactionInitiateAmountTooLowError(initiateOrderError);\n    const isBookingTimeNotAvailableError = isTransactionInitiateBookingTimeNotAvailableError(initiateOrderError);\n    const stripeErrors = transactionInitiateOrderStripeErrors(initiateOrderError);\n    let initiateOrderErrorMessage = null;\n\n    if (!listingNotFound && isAmountTooLowError) {\n      initiateOrderErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.initiateOrderAmountTooLow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }));\n    } else if (!listingNotFound && isBookingTimeNotAvailableError) {\n      initiateOrderErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.bookingTimeNotAvailableMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }));\n    } else if (!listingNotFound && stripeErrors && stripeErrors.length > 0) {\n      // NOTE: Error messages from Stripes are not part of translations.\n      // By default they are in English.\n      const stripeErrorsAsString = stripeErrors.join(', ');\n      initiateOrderErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.initiateOrderStripeError\",\n        values: {\n          stripeErrors: stripeErrorsAsString\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }));\n    } else if (!listingNotFound && initiateOrderError) {\n      initiateOrderErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.initiateOrderError\",\n        values: {\n          listingLink\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }));\n    }\n\n    const speculateTransactionErrorMessage = speculateTransactionError ? React.createElement(\"p\", {\n      className: css.speculateError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"CheckoutPage.speculateTransactionError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })) : null;\n    let speculateErrorMessage = null;\n\n    if (isTransactionInitiateMissingStripeAccountError(speculateTransactionError)) {\n      speculateErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.providerStripeAccountMissingError\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }));\n    } else if (isTransactionInitiateBookingTimeNotAvailableError(speculateTransactionError)) {\n      speculateErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.bookingTimeNotAvailableMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }));\n    } else if (isTransactionZeroPaymentError(speculateTransactionError)) {\n      speculateErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.initiateOrderAmountTooLow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }));\n    } else if (speculateTransactionError) {\n      speculateErrorMessage = React.createElement(\"p\", {\n        className: css.orderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.speculateFailedMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }));\n    }\n\n    const topbar = React.createElement(\"div\", {\n      className: css.topbar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(NamedLink, {\n      className: css.home,\n      name: \"LandingPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      className: css.logoMobile,\n      title: intl.formatMessage({\n        id: 'CheckoutPage.goToLandingPage'\n      }),\n      format: \"mobile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(Logo, {\n      className: css.logoDesktop,\n      alt: intl.formatMessage({\n        id: 'CheckoutPage.goToLandingPage'\n      }),\n      format: \"desktop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })));\n    const unitType = config.bookingUnitType;\n    const isNightly = unitType === LINE_ITEM_NIGHT;\n    const isDaily = unitType === LINE_ITEM_DAY;\n    const unitTranslationKey = isNightly ? 'CheckoutPage.perNight' : isDaily ? 'CheckoutPage.perDay' : 'CheckoutPage.perUnit';\n    const price = currentListing.attributes.price;\n    const formattedPrice = formatMoney(intl, price);\n    const detailsSubTitle = \"\".concat(formattedPrice, \" \").concat(intl.formatMessage({\n      id: unitTranslationKey\n    }));\n    const showInitialMessageInput = !enquiredTransaction;\n    const pageProps = {\n      title,\n      scrollingDisabled\n    };\n\n    if (isLoading) {\n      return React.createElement(Page, Object.assign({}, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }), topbar, React.createElement(\"div\", {\n        className: css.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"CheckoutPage.loadingData\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(Page, Object.assign({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }), topbar, React.createElement(\"div\", {\n      className: css.contentContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.aspectWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(ResponsiveImage, {\n      rootClassName: css.rootForImage,\n      alt: listingTitle,\n      image: firstImage,\n      variants: ['landscape-crop', 'landscape-crop2x'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classNames(css.avatarWrapper, css.avatarMobile),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(AvatarMedium, {\n      user: currentAuthor,\n      disableProfileLink: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: css.bookListingContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.heading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: css.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, title), React.createElement(\"div\", {\n      className: css.author,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"CheckoutPage.hostedBy\",\n      values: {\n        name: currentAuthor.attributes.profile.displayName\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: css.priceBreakdownContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: css.priceBreakdownTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"CheckoutPage.priceBreakdownTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    })), speculateTransactionErrorMessage, breakdown), React.createElement(\"section\", {\n      className: css.paymentContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, initiateOrderErrorMessage, listingNotFoundErrorMessage, speculateErrorMessage, showPaymentForm ? React.createElement(StripePaymentForm, {\n      className: css.paymentForm,\n      onSubmit: this.handleSubmit,\n      inProgress: this.state.submitting,\n      formId: \"CheckoutPagePaymentForm\",\n      paymentInfo: intl.formatMessage({\n        id: 'CheckoutPage.paymentInfo'\n      }),\n      authorDisplayName: currentAuthor.attributes.profile.displayName,\n      showInitialMessageInput: showInitialMessageInput,\n      onCreateStripePaymentToken: onCreateStripePaymentToken,\n      stripePaymentTokenInProgress: stripePaymentTokenInProgress,\n      stripePaymentTokenError: stripePaymentTokenError,\n      stripePaymentToken: stripePaymentToken,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }) : null)), React.createElement(\"div\", {\n      className: css.detailsContainerDesktop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.detailsAspectWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(ResponsiveImage, {\n      rootClassName: css.rootForImage,\n      alt: listingTitle,\n      image: firstImage,\n      variants: ['landscape-crop', 'landscape-crop2x'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: css.avatarWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(AvatarMedium, {\n      user: currentAuthor,\n      disableProfileLink: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: css.detailsHeadings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: css.detailsTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, listingTitle), React.createElement(\"p\", {\n      className: css.detailsSubtitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, detailsSubTitle)), React.createElement(\"h3\", {\n      className: css.bookingBreakdownTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"CheckoutPage.priceBreakdownTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    })), speculateTransactionErrorMessage, breakdown)));\n  }\n\n}\nCheckoutPageComponent.defaultProps = {\n  initiateOrderError: null,\n  listing: null,\n  bookingData: {},\n  bookingDates: null,\n  speculateTransactionError: null,\n  speculatedTransaction: null,\n  enquiredTransaction: null,\n  currentUser: null,\n  stripePaymentToken: null\n};\nCheckoutPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  listing: propTypes.listing,\n  bookingData: object,\n  bookingDates: shape({\n    bookingStart: instanceOf(Date).isRequired,\n    bookingEnd: instanceOf(Date).isRequired\n  }),\n  fetchSpeculatedTransaction: func.isRequired,\n  speculateTransactionInProgress: bool.isRequired,\n  speculateTransactionError: propTypes.error,\n  speculatedTransaction: propTypes.transaction,\n  enquiredTransaction: propTypes.transaction,\n  initiateOrderError: propTypes.error,\n  currentUser: propTypes.currentUser,\n  params: shape({\n    id: string,\n    slug: string\n  }).isRequired,\n  sendOrderRequest: func.isRequired,\n  onCreateStripePaymentToken: func.isRequired,\n  stripePaymentTokenInProgress: bool.isRequired,\n  stripePaymentTokenError: bool.isRequired,\n  stripePaymentToken: object,\n  // from connect\n  dispatch: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = state => {\n  const _state$CheckoutPage = state.CheckoutPage,\n        listing = _state$CheckoutPage.listing,\n        bookingData = _state$CheckoutPage.bookingData,\n        bookingDates = _state$CheckoutPage.bookingDates,\n        speculateTransactionInProgress = _state$CheckoutPage.speculateTransactionInProgress,\n        speculateTransactionError = _state$CheckoutPage.speculateTransactionError,\n        speculatedTransaction = _state$CheckoutPage.speculatedTransaction,\n        enquiredTransaction = _state$CheckoutPage.enquiredTransaction,\n        initiateOrderError = _state$CheckoutPage.initiateOrderError;\n  const currentUser = state.user.currentUser;\n  const _state$stripe = state.stripe,\n        stripePaymentTokenInProgress = _state$stripe.stripePaymentTokenInProgress,\n        stripePaymentTokenError = _state$stripe.stripePaymentTokenError,\n        stripePaymentToken = _state$stripe.stripePaymentToken;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    currentUser,\n    bookingData,\n    bookingDates,\n    speculateTransactionInProgress,\n    speculateTransactionError,\n    speculatedTransaction,\n    enquiredTransaction,\n    listing,\n    initiateOrderError,\n    stripePaymentTokenInProgress,\n    stripePaymentTokenError,\n    stripePaymentToken\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch,\n  sendOrderRequest: (params, initialMessage) => dispatch(initiateOrder(params, initialMessage)),\n  sendOrderRequestAfterEnquiry: (transactionId, params) => dispatch(initiateOrderAfterEnquiry(transactionId, params)),\n  fetchSpeculatedTransaction: params => dispatch(speculateTransaction(params)),\n  onCreateStripePaymentToken: params => dispatch(createStripePaymentToken(params))\n});\n\nconst CheckoutPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(CheckoutPageComponent);\n\nCheckoutPage.setInitialValues = initialValues => setInitialValues(initialValues);\n\nCheckoutPage.displayName = 'CheckoutPage';\nexport default CheckoutPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/CheckoutPage/CheckoutPage.js"],"names":["React","Component","bool","func","instanceOf","object","shape","string","compose","connect","FormattedMessage","injectIntl","intlShape","withRouter","classNames","routeConfiguration","pathByRouteName","findRouteByRouteName","propTypes","LINE_ITEM_NIGHT","LINE_ITEM_DAY","ensureListing","ensureUser","ensureTransaction","ensureBooking","dateFromLocalToAPI","createSlug","isTransactionInitiateAmountTooLowError","isTransactionInitiateListingNotFoundError","isTransactionInitiateMissingStripeAccountError","isTransactionInitiateBookingTimeNotAvailableError","isTransactionZeroPaymentError","transactionInitiateOrderStripeErrors","formatMoney","AvatarMedium","BookingBreakdown","Logo","NamedLink","NamedRedirect","Page","ResponsiveImage","StripePaymentForm","isScrollingDisabled","initiateOrder","initiateOrderAfterEnquiry","setInitialValues","speculateTransaction","createStripePaymentToken","config","storeData","storedData","clearData","css","STORAGE_KEY","CheckoutPageComponent","constructor","props","state","pageData","dataLoaded","submitting","loadInitialData","bind","handleSubmit","componentWillMount","window","bookingData","bookingDates","listing","enquiredTransaction","fetchSpeculatedTransaction","history","hasNavigatedThroughLink","action","hasDataInProps","hasData","id","bookingStart","bookingEnd","listingId","bookingStartForAPI","bookingEndForAPI","setState","values","cardToken","token","initialMessage","message","sendOrderRequest","sendOrderRequestAfterEnquiry","speculatedTransaction","dispatch","requestParams","booking","attributes","start","end","initiateRequest","then","orderId","initialMessageSuccess","routes","OrderPage","initialMessageFailedToTransaction","orderDetailsPath","uuid","push","catch","render","scrollingDisabled","speculateTransactionInProgress","speculateTransactionError","initiateOrderError","intl","params","currentUser","onCreateStripePaymentToken","stripePaymentTokenInProgress","stripePaymentTokenError","stripePaymentToken","listingNotFound","isLoading","currentTransaction","currentBooking","currentListing","currentAuthor","author","isOwnListing","hasListingAndAuthor","hasBookingDates","hasRequiredData","canShowPage","shouldRedirect","console","error","transaction","breakdown","bookingBreakdown","bookingUnitType","showPaymentForm","listingTitle","title","formatMessage","firstImage","images","length","listingNotFoundErrorMessage","notFoundError","listingLink","slug","isAmountTooLowError","isBookingTimeNotAvailableError","stripeErrors","initiateOrderErrorMessage","orderError","stripeErrorsAsString","join","speculateTransactionErrorMessage","speculateError","speculateErrorMessage","topbar","home","logoMobile","logoDesktop","unitType","isNightly","isDaily","unitTranslationKey","price","formattedPrice","detailsSubTitle","showInitialMessageInput","pageProps","loading","contentContainer","aspectWrapper","rootForImage","avatarWrapper","avatarMobile","bookListingContainer","heading","name","profile","displayName","priceBreakdownContainer","priceBreakdownTitle","paymentContainer","paymentForm","detailsContainerDesktop","detailsAspectWrapper","detailsHeadings","detailsTitle","detailsSubtitle","bookingBreakdownTitle","defaultProps","isRequired","Date","mapStateToProps","CheckoutPage","user","stripe","mapDispatchToProps","transactionId","initialValues"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bool, func, instanceOf, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routeConfiguration';\nimport { pathByRouteName, findRouteByRouteName } from '../../util/routes';\nimport { propTypes, LINE_ITEM_NIGHT, LINE_ITEM_DAY } from '../../util/types';\nimport { ensureListing, ensureUser, ensureTransaction, ensureBooking } from '../../util/data';\nimport { dateFromLocalToAPI } from '../../util/dates';\nimport { createSlug } from '../../util/urlHelpers';\nimport {\n  isTransactionInitiateAmountTooLowError,\n  isTransactionInitiateListingNotFoundError,\n  isTransactionInitiateMissingStripeAccountError,\n  isTransactionInitiateBookingTimeNotAvailableError,\n  isTransactionZeroPaymentError,\n  transactionInitiateOrderStripeErrors,\n} from '../../util/errors';\nimport { formatMoney } from '../../util/currency';\nimport {\n  AvatarMedium,\n  BookingBreakdown,\n  Logo,\n  NamedLink,\n  NamedRedirect,\n  Page,\n  ResponsiveImage,\n} from '../../components';\nimport { StripePaymentForm } from '../../forms';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  initiateOrder,\n  initiateOrderAfterEnquiry,\n  setInitialValues,\n  speculateTransaction,\n} from './CheckoutPage.duck';\nimport { createStripePaymentToken } from '../../ducks/stripe.duck.js';\nimport config from '../../config';\n\nimport { storeData, storedData, clearData } from './CheckoutPageSessionHelpers';\nimport css from './CheckoutPage.css';\n\nconst STORAGE_KEY = 'CheckoutPage';\n\nexport class CheckoutPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pageData: {},\n      dataLoaded: false,\n      submitting: false,\n    };\n\n    this.loadInitialData = this.loadInitialData.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentWillMount() {\n    if (window) {\n      this.loadInitialData();\n    }\n  }\n\n  /**\n   * Load initial data for the page\n   *\n   * Since the data for the checkout is not passed in the URL (there\n   * might be lots of options in the future), we must pass in the data\n   * some other way. Currently the ListingPage sets the initial data\n   * for the CheckoutPage's Redux store.\n   *\n   * For some cases (e.g. a refresh in the CheckoutPage), the Redux\n   * store is empty. To handle that case, we store the received data\n   * to window.sessionStorage and read it from there if no props from\n   * the store exist.\n   *\n   * This function also sets of fetching the speculative transaction\n   * based on this initial data.\n   */\n  loadInitialData() {\n    const {\n      bookingData,\n      bookingDates,\n      listing,\n      enquiredTransaction,\n      fetchSpeculatedTransaction,\n      history,\n    } = this.props;\n    // Browser's back navigation should not rewrite data in session store.\n    // Action is 'POP' on both history.back() and page refresh cases.\n    // Action is 'PUSH' when user has directed through a link\n    // Action is 'REPLACE' when user has directed through login/signup process\n    const hasNavigatedThroughLink = history.action === 'PUSH' || history.action === 'REPLACE';\n\n    const hasDataInProps = !!(bookingData && bookingDates && listing) && hasNavigatedThroughLink;\n    if (hasDataInProps) {\n      // Store data only if data is passed through props and user has navigated through a link.\n      storeData(bookingData, bookingDates, listing, enquiredTransaction, STORAGE_KEY);\n    }\n\n    // NOTE: stored data can be empty if user has already successfully completed transaction.\n    const pageData = hasDataInProps\n      ? { bookingData, bookingDates, listing, enquiredTransaction }\n      : storedData(STORAGE_KEY);\n\n    const hasData =\n      pageData &&\n      pageData.listing &&\n      pageData.listing.id &&\n      pageData.bookingData &&\n      pageData.bookingDates &&\n      pageData.bookingDates.bookingStart &&\n      pageData.bookingDates.bookingEnd;\n\n    if (hasData) {\n      const listingId = pageData.listing.id;\n      const { bookingStart, bookingEnd } = pageData.bookingDates;\n\n      // Convert picked date to date that will be converted on the API as\n      // a noon of correct year-month-date combo in UTC\n      const bookingStartForAPI = dateFromLocalToAPI(bookingStart);\n      const bookingEndForAPI = dateFromLocalToAPI(bookingEnd);\n\n      // Fetch speculated transaction for showing price in booking breakdown\n      // NOTE: if unit type is line-item/units, quantity needs to be added.\n      // The way to pass it to checkout page is through pageData.bookingData\n      fetchSpeculatedTransaction({\n        listingId,\n        bookingStart: bookingStartForAPI,\n        bookingEnd: bookingEndForAPI,\n      });\n    }\n\n    this.setState({ pageData: pageData || {}, dataLoaded: true });\n  }\n\n  handleSubmit(values) {\n    if (this.state.submitting) {\n      return;\n    }\n    this.setState({ submitting: true });\n\n    const cardToken = values.token;\n    const initialMessage = values.message;\n    const {\n      history,\n      sendOrderRequest,\n      sendOrderRequestAfterEnquiry,\n      speculatedTransaction,\n      dispatch,\n    } = this.props;\n\n    // Create order aka transaction\n    // NOTE: if unit type is line-item/units, quantity needs to be added.\n    // The way to pass it to checkout page is through pageData.bookingData\n    const requestParams = {\n      listingId: this.state.pageData.listing.id,\n      cardToken,\n      bookingStart: speculatedTransaction.booking.attributes.start,\n      bookingEnd: speculatedTransaction.booking.attributes.end,\n    };\n\n    const enquiredTransaction = this.state.pageData.enquiredTransaction;\n\n    // if an enquired transaction is available, use that as basis\n    // otherwise initiate a new transaction\n    const initiateRequest = enquiredTransaction\n      ? sendOrderRequestAfterEnquiry(enquiredTransaction.id, requestParams)\n      : sendOrderRequest(requestParams, initialMessage);\n\n    initiateRequest\n      .then(values => {\n        const { orderId, initialMessageSuccess } = values;\n        this.setState({ submitting: false });\n        const routes = routeConfiguration();\n        const OrderPage = findRouteByRouteName('OrderDetailsPage', routes);\n\n        // Transaction is already created, but if the initial message\n        // sending failed, we tell it to the OrderDetailsPage.\n        dispatch(\n          OrderPage.setInitialValues({\n            initialMessageFailedToTransaction: initialMessageSuccess ? null : orderId,\n          })\n        );\n        const orderDetailsPath = pathByRouteName('OrderDetailsPage', routes, {\n          id: orderId.uuid,\n        });\n        clearData(STORAGE_KEY);\n        history.push(orderDetailsPath);\n      })\n      .catch(() => {\n        this.setState({ submitting: false });\n      });\n  }\n\n  render() {\n    const {\n      scrollingDisabled,\n      speculateTransactionInProgress,\n      speculateTransactionError,\n      speculatedTransaction,\n      initiateOrderError,\n      intl,\n      params,\n      currentUser,\n      onCreateStripePaymentToken,\n      stripePaymentTokenInProgress,\n      stripePaymentTokenError,\n      stripePaymentToken,\n    } = this.props;\n\n    // Since the listing data is already given from the ListingPage\n    // and stored to handle refreshes, it might not have the possible\n    // deleted or closed information in it. If the transaction\n    // initiate or the speculative initiate fail due to the listing\n    // being deleted or closec, we should dig the information from the\n    // errors and not the listing data.\n    const listingNotFound =\n      isTransactionInitiateListingNotFoundError(speculateTransactionError) ||\n      isTransactionInitiateListingNotFoundError(initiateOrderError);\n\n    const isLoading = !this.state.dataLoaded || speculateTransactionInProgress;\n\n    const { listing, bookingDates, enquiredTransaction } = this.state.pageData;\n    const currentTransaction = ensureTransaction(speculatedTransaction, {}, null);\n    const currentBooking = ensureBooking(currentTransaction.booking);\n    const currentListing = ensureListing(listing);\n    const currentAuthor = ensureUser(currentListing.author);\n\n    const isOwnListing =\n      currentUser &&\n      currentUser.id &&\n      currentAuthor &&\n      currentAuthor.id &&\n      currentAuthor.id.uuid === currentUser.id.uuid;\n\n    const hasListingAndAuthor = !!(currentListing.id && currentAuthor.id);\n    const hasBookingDates = !!(\n      bookingDates &&\n      bookingDates.bookingStart &&\n      bookingDates.bookingEnd\n    );\n    const hasRequiredData = hasListingAndAuthor && hasBookingDates;\n    const canShowPage = hasRequiredData && !isOwnListing;\n    const shouldRedirect = !isLoading && !canShowPage;\n\n    // Redirect back to ListingPage if data is missing.\n    // Redirection must happen before any data format error is thrown (e.g. wrong currency)\n    if (shouldRedirect) {\n      // eslint-disable-next-line no-console\n      console.error('Missing or invalid data for checkout, redirecting back to listing page.', {\n        transaction: currentTransaction,\n        bookingDates,\n        listing,\n      });\n      return <NamedRedirect name=\"ListingPage\" params={params} />;\n    }\n\n    // Show breakdown only when transaction and booking are loaded\n    // (i.e. have an id)\n    const breakdown =\n      currentTransaction.id && currentBooking.id ? (\n        <BookingBreakdown\n          className={css.bookingBreakdown}\n          userRole=\"customer\"\n          unitType={config.bookingUnitType}\n          transaction={currentTransaction}\n          booking={currentBooking}\n        />\n      ) : null;\n\n    // Allow showing page when currentUser is still being downloaded,\n    // but show payment form only when user info is loaded.\n    const showPaymentForm = !!(\n      currentUser &&\n      hasRequiredData &&\n      !listingNotFound &&\n      !initiateOrderError &&\n      !speculateTransactionError\n    );\n\n    const listingTitle = currentListing.attributes.title;\n    const title = intl.formatMessage({ id: 'CheckoutPage.title' }, { listingTitle });\n\n    const firstImage =\n      currentListing.images && currentListing.images.length > 0 ? currentListing.images[0] : null;\n\n    const listingNotFoundErrorMessage = listingNotFound ? (\n      <p className={css.notFoundError}>\n        <FormattedMessage id=\"CheckoutPage.listingNotFoundError\" />\n      </p>\n    ) : null;\n    const listingLink = (\n      <NamedLink\n        name=\"ListingPage\"\n        params={{ id: currentListing.id.uuid, slug: createSlug(listingTitle) }}\n      >\n        <FormattedMessage id=\"CheckoutPage.errorlistingLinkText\" />\n      </NamedLink>\n    );\n\n    const isAmountTooLowError = isTransactionInitiateAmountTooLowError(initiateOrderError);\n    const isBookingTimeNotAvailableError = isTransactionInitiateBookingTimeNotAvailableError(\n      initiateOrderError\n    );\n    const stripeErrors = transactionInitiateOrderStripeErrors(initiateOrderError);\n\n    let initiateOrderErrorMessage = null;\n\n    if (!listingNotFound && isAmountTooLowError) {\n      initiateOrderErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.initiateOrderAmountTooLow\" />\n        </p>\n      );\n    } else if (!listingNotFound && isBookingTimeNotAvailableError) {\n      initiateOrderErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.bookingTimeNotAvailableMessage\" />\n        </p>\n      );\n    } else if (!listingNotFound && stripeErrors && stripeErrors.length > 0) {\n      // NOTE: Error messages from Stripes are not part of translations.\n      // By default they are in English.\n      const stripeErrorsAsString = stripeErrors.join(', ');\n      initiateOrderErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage\n            id=\"CheckoutPage.initiateOrderStripeError\"\n            values={{ stripeErrors: stripeErrorsAsString }}\n          />\n        </p>\n      );\n    } else if (!listingNotFound && initiateOrderError) {\n      initiateOrderErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.initiateOrderError\" values={{ listingLink }} />\n        </p>\n      );\n    }\n\n    const speculateTransactionErrorMessage = speculateTransactionError ? (\n      <p className={css.speculateError}>\n        <FormattedMessage id=\"CheckoutPage.speculateTransactionError\" />\n      </p>\n    ) : null;\n    let speculateErrorMessage = null;\n\n    if (isTransactionInitiateMissingStripeAccountError(speculateTransactionError)) {\n      speculateErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.providerStripeAccountMissingError\" />\n        </p>\n      );\n    } else if (isTransactionInitiateBookingTimeNotAvailableError(speculateTransactionError)) {\n      speculateErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.bookingTimeNotAvailableMessage\" />\n        </p>\n      );\n    } else if (isTransactionZeroPaymentError(speculateTransactionError)) {\n      speculateErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.initiateOrderAmountTooLow\" />\n        </p>\n      );\n    } else if (speculateTransactionError) {\n      speculateErrorMessage = (\n        <p className={css.orderError}>\n          <FormattedMessage id=\"CheckoutPage.speculateFailedMessage\" />\n        </p>\n      );\n    }\n\n    const topbar = (\n      <div className={css.topbar}>\n        <NamedLink className={css.home} name=\"LandingPage\">\n          <Logo\n            className={css.logoMobile}\n            title={intl.formatMessage({ id: 'CheckoutPage.goToLandingPage' })}\n            format=\"mobile\"\n          />\n          <Logo\n            className={css.logoDesktop}\n            alt={intl.formatMessage({ id: 'CheckoutPage.goToLandingPage' })}\n            format=\"desktop\"\n          />\n        </NamedLink>\n      </div>\n    );\n\n    const unitType = config.bookingUnitType;\n    const isNightly = unitType === LINE_ITEM_NIGHT;\n    const isDaily = unitType === LINE_ITEM_DAY;\n\n    const unitTranslationKey = isNightly\n      ? 'CheckoutPage.perNight'\n      : isDaily\n      ? 'CheckoutPage.perDay'\n      : 'CheckoutPage.perUnit';\n\n    const price = currentListing.attributes.price;\n    const formattedPrice = formatMoney(intl, price);\n    const detailsSubTitle = `${formattedPrice} ${intl.formatMessage({ id: unitTranslationKey })}`;\n\n    const showInitialMessageInput = !enquiredTransaction;\n\n    const pageProps = { title, scrollingDisabled };\n\n    if (isLoading) {\n      return (\n        <Page {...pageProps}>\n          {topbar}\n          <div className={css.loading}>\n            <FormattedMessage id=\"CheckoutPage.loadingData\" />\n          </div>\n        </Page>\n      );\n    }\n\n    return (\n      <Page {...pageProps}>\n        {topbar}\n        <div className={css.contentContainer}>\n          <div className={css.aspectWrapper}>\n            <ResponsiveImage\n              rootClassName={css.rootForImage}\n              alt={listingTitle}\n              image={firstImage}\n              variants={['landscape-crop', 'landscape-crop2x']}\n            />\n          </div>\n          <div className={classNames(css.avatarWrapper, css.avatarMobile)}>\n            <AvatarMedium user={currentAuthor} disableProfileLink />\n          </div>\n          <div className={css.bookListingContainer}>\n            <div className={css.heading}>\n              <h1 className={css.title}>{title}</h1>\n              <div className={css.author}>\n                <FormattedMessage\n                  id=\"CheckoutPage.hostedBy\"\n                  values={{ name: currentAuthor.attributes.profile.displayName }}\n                />\n              </div>\n            </div>\n\n            <div className={css.priceBreakdownContainer}>\n              <h3 className={css.priceBreakdownTitle}>\n                <FormattedMessage id=\"CheckoutPage.priceBreakdownTitle\" />\n              </h3>\n              {speculateTransactionErrorMessage}\n              {breakdown}\n            </div>\n\n            <section className={css.paymentContainer}>\n              {initiateOrderErrorMessage}\n              {listingNotFoundErrorMessage}\n              {speculateErrorMessage}\n              {showPaymentForm ? (\n                <StripePaymentForm\n                  className={css.paymentForm}\n                  onSubmit={this.handleSubmit}\n                  inProgress={this.state.submitting}\n                  formId=\"CheckoutPagePaymentForm\"\n                  paymentInfo={intl.formatMessage({ id: 'CheckoutPage.paymentInfo' })}\n                  authorDisplayName={currentAuthor.attributes.profile.displayName}\n                  showInitialMessageInput={showInitialMessageInput}\n                  onCreateStripePaymentToken={onCreateStripePaymentToken}\n                  stripePaymentTokenInProgress={stripePaymentTokenInProgress}\n                  stripePaymentTokenError={stripePaymentTokenError}\n                  stripePaymentToken={stripePaymentToken}\n                />\n              ) : null}\n            </section>\n          </div>\n\n          <div className={css.detailsContainerDesktop}>\n            <div className={css.detailsAspectWrapper}>\n              <ResponsiveImage\n                rootClassName={css.rootForImage}\n                alt={listingTitle}\n                image={firstImage}\n                variants={['landscape-crop', 'landscape-crop2x']}\n              />\n            </div>\n            <div className={css.avatarWrapper}>\n              <AvatarMedium user={currentAuthor} disableProfileLink />\n            </div>\n            <div className={css.detailsHeadings}>\n              <h2 className={css.detailsTitle}>{listingTitle}</h2>\n              <p className={css.detailsSubtitle}>{detailsSubTitle}</p>\n            </div>\n            <h3 className={css.bookingBreakdownTitle}>\n              <FormattedMessage id=\"CheckoutPage.priceBreakdownTitle\" />\n            </h3>\n            {speculateTransactionErrorMessage}\n            {breakdown}\n          </div>\n        </div>\n      </Page>\n    );\n  }\n}\n\nCheckoutPageComponent.defaultProps = {\n  initiateOrderError: null,\n  listing: null,\n  bookingData: {},\n  bookingDates: null,\n  speculateTransactionError: null,\n  speculatedTransaction: null,\n  enquiredTransaction: null,\n  currentUser: null,\n  stripePaymentToken: null,\n};\n\nCheckoutPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  listing: propTypes.listing,\n  bookingData: object,\n  bookingDates: shape({\n    bookingStart: instanceOf(Date).isRequired,\n    bookingEnd: instanceOf(Date).isRequired,\n  }),\n  fetchSpeculatedTransaction: func.isRequired,\n  speculateTransactionInProgress: bool.isRequired,\n  speculateTransactionError: propTypes.error,\n  speculatedTransaction: propTypes.transaction,\n  enquiredTransaction: propTypes.transaction,\n  initiateOrderError: propTypes.error,\n  currentUser: propTypes.currentUser,\n  params: shape({\n    id: string,\n    slug: string,\n  }).isRequired,\n  sendOrderRequest: func.isRequired,\n  onCreateStripePaymentToken: func.isRequired,\n  stripePaymentTokenInProgress: bool.isRequired,\n  stripePaymentTokenError: bool.isRequired,\n  stripePaymentToken: object,\n\n  // from connect\n  dispatch: func.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    listing,\n    bookingData,\n    bookingDates,\n    speculateTransactionInProgress,\n    speculateTransactionError,\n    speculatedTransaction,\n    enquiredTransaction,\n    initiateOrderError,\n  } = state.CheckoutPage;\n  const { currentUser } = state.user;\n  const {\n    stripePaymentTokenInProgress,\n    stripePaymentTokenError,\n    stripePaymentToken,\n  } = state.stripe;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    currentUser,\n    bookingData,\n    bookingDates,\n    speculateTransactionInProgress,\n    speculateTransactionError,\n    speculatedTransaction,\n    enquiredTransaction,\n    listing,\n    initiateOrderError,\n    stripePaymentTokenInProgress,\n    stripePaymentTokenError,\n    stripePaymentToken,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch,\n  sendOrderRequest: (params, initialMessage) => dispatch(initiateOrder(params, initialMessage)),\n  sendOrderRequestAfterEnquiry: (transactionId, params) =>\n    dispatch(initiateOrderAfterEnquiry(transactionId, params)),\n  fetchSpeculatedTransaction: params => dispatch(speculateTransaction(params)),\n  onCreateStripePaymentToken: params => dispatch(createStripePaymentToken(params)),\n});\n\nconst CheckoutPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(CheckoutPageComponent);\n\nCheckoutPage.setInitialValues = initialValues => setInitialValues(initialValues);\n\nCheckoutPage.displayName = 'CheckoutPage';\n\nexport default CheckoutPage;\n"]},"metadata":{},"sourceType":"module"}