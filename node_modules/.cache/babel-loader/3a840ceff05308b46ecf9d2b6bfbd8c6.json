{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Modal/Modal.js\";\n\n/**\n * Modal creates popup which on mobile layout fills the entire visible page.\n *\n * Example:\n * <Parent>\n *   <Modal id=\"UniqueIdForThisModal\" isOpen={this.state.modalIsOpen} onClose={handleClose}>\n *     <FormX />\n *   </Modal>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport { Button, IconClose } from '../../components';\nimport css from './Modal.css';\nconst KEY_CODE_ESCAPE = 27;\nexport class ModalComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleBodyKeyUp = this.handleBodyKeyUp.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          id = _this$props.id,\n          isOpen = _this$props.isOpen,\n          onManageDisableScrolling = _this$props.onManageDisableScrolling;\n    onManageDisableScrolling(id, isOpen);\n    document.body.addEventListener('keyup', this.handleBodyKeyUp);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          isOpen = _this$props2.isOpen,\n          onManageDisableScrolling = _this$props2.onManageDisableScrolling;\n\n    if (nextProps.isOpen !== isOpen) {\n      onManageDisableScrolling(id, nextProps.isOpen);\n    }\n  }\n\n  componentWillUnmount() {\n    const _this$props3 = this.props,\n          id = _this$props3.id,\n          onManageDisableScrolling = _this$props3.onManageDisableScrolling;\n    document.body.removeEventListener('keyup', this.handleBodyKeyUp);\n    onManageDisableScrolling(id, false);\n  }\n\n  handleBodyKeyUp(event) {\n    const isOpen = this.props.isOpen;\n\n    if (event.keyCode === KEY_CODE_ESCAPE && isOpen) {\n      this.handleClose(event);\n    }\n  }\n\n  handleClose(event) {\n    const _this$props4 = this.props,\n          id = _this$props4.id,\n          onClose = _this$props4.onClose,\n          onManageDisableScrolling = _this$props4.onManageDisableScrolling;\n    onManageDisableScrolling(id, false);\n    onClose(event);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          children = _this$props5.children,\n          className = _this$props5.className,\n          scrollLayerClassName = _this$props5.scrollLayerClassName,\n          closeButtonMessage = _this$props5.closeButtonMessage,\n          containerClassName = _this$props5.containerClassName,\n          contentClassName = _this$props5.contentClassName,\n          lightCloseButton = _this$props5.lightCloseButton,\n          intl = _this$props5.intl,\n          isClosedClassName = _this$props5.isClosedClassName,\n          isOpen = _this$props5.isOpen;\n    const closeModalMessage = intl.formatMessage({\n      id: 'Modal.closeModal'\n    });\n    const closeButtonClasses = classNames(css.close, {\n      [css.closeLight]: lightCloseButton\n    });\n    const closeBtn = isOpen ? React.createElement(Button, {\n      onClick: this.handleClose,\n      rootClassName: closeButtonClasses,\n      title: closeModalMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.closeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, closeButtonMessage || React.createElement(FormattedMessage, {\n      id: \"Modal.close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(IconClose, {\n      rootClassName: css.closeIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })) : null; // Modal uses given styles to wrap child components.\n    // If props doesn't contain isClosedClassName, styles default to css.isClosed\n    // This makes it possible to create ModalInMobile on top of Modal where style modes are:\n    // visible, hidden, or none (ModalInMobile's children are always visible on desktop layout.)\n\n    const modalClass = isOpen ? css.isOpen : isClosedClassName;\n    const classes = classNames(modalClass, className);\n    const scrollLayerClasses = scrollLayerClassName || css.scrollLayer;\n    const containerClasses = containerClassName || css.container;\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: scrollLayerClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: containerClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, closeBtn, React.createElement(\"div\", {\n      className: classNames(contentClassName || css.content),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, children))));\n  }\n\n}\nModalComponent.defaultProps = {\n  children: null,\n  className: null,\n  scrollLayerClassName: null,\n  closeButtonMessage: null,\n  containerClassName: null,\n  contentClassName: null,\n  lightCloseButton: false,\n  isClosedClassName: css.isClosed,\n  isOpen: false,\n  onClose: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      node = PropTypes.node,\n      string = PropTypes.string;\nModalComponent.propTypes = {\n  children: node,\n  className: string,\n  scrollLayerClassName: string,\n  closeButtonMessage: node,\n  containerClassName: string,\n  contentClassName: string,\n  lightCloseButton: bool,\n  id: string.isRequired,\n  intl: intlShape.isRequired,\n  isClosedClassName: string,\n  isOpen: bool,\n  onClose: func.isRequired,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired\n};\nexport default injectIntl(ModalComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Modal/Modal.js"],"names":["React","Component","PropTypes","classNames","FormattedMessage","intlShape","injectIntl","Button","IconClose","css","KEY_CODE_ESCAPE","ModalComponent","constructor","props","handleBodyKeyUp","bind","handleClose","componentDidMount","id","isOpen","onManageDisableScrolling","document","body","addEventListener","componentWillReceiveProps","nextProps","componentWillUnmount","removeEventListener","event","keyCode","onClose","render","children","className","scrollLayerClassName","closeButtonMessage","containerClassName","contentClassName","lightCloseButton","intl","isClosedClassName","closeModalMessage","formatMessage","closeButtonClasses","close","closeLight","closeBtn","closeText","closeIcon","modalClass","classes","scrollLayerClasses","scrollLayer","containerClasses","container","content","defaultProps","isClosed","bool","func","node","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\n * Modal creates popup which on mobile layout fills the entire visible page.\n *\n * Example:\n * <Parent>\n *   <Modal id=\"UniqueIdForThisModal\" isOpen={this.state.modalIsOpen} onClose={handleClose}>\n *     <FormX />\n *   </Modal>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport { Button, IconClose } from '../../components';\n\nimport css from './Modal.css';\n\nconst KEY_CODE_ESCAPE = 27;\n\nexport class ModalComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleBodyKeyUp = this.handleBodyKeyUp.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  componentDidMount() {\n    const { id, isOpen, onManageDisableScrolling } = this.props;\n    onManageDisableScrolling(id, isOpen);\n    document.body.addEventListener('keyup', this.handleBodyKeyUp);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { id, isOpen, onManageDisableScrolling } = this.props;\n    if (nextProps.isOpen !== isOpen) {\n      onManageDisableScrolling(id, nextProps.isOpen);\n    }\n  }\n\n  componentWillUnmount() {\n    const { id, onManageDisableScrolling } = this.props;\n    document.body.removeEventListener('keyup', this.handleBodyKeyUp);\n    onManageDisableScrolling(id, false);\n  }\n\n  handleBodyKeyUp(event) {\n    const { isOpen } = this.props;\n    if (event.keyCode === KEY_CODE_ESCAPE && isOpen) {\n      this.handleClose(event);\n    }\n  }\n\n  handleClose(event) {\n    const { id, onClose, onManageDisableScrolling } = this.props;\n    onManageDisableScrolling(id, false);\n    onClose(event);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      scrollLayerClassName,\n      closeButtonMessage,\n      containerClassName,\n      contentClassName,\n      lightCloseButton,\n      intl,\n      isClosedClassName,\n      isOpen,\n    } = this.props;\n\n    const closeModalMessage = intl.formatMessage({ id: 'Modal.closeModal' });\n    const closeButtonClasses = classNames(css.close, {\n      [css.closeLight]: lightCloseButton,\n    });\n    const closeBtn = isOpen ? (\n      <Button\n        onClick={this.handleClose}\n        rootClassName={closeButtonClasses}\n        title={closeModalMessage}\n      >\n        <span className={css.closeText}>\n          {closeButtonMessage || <FormattedMessage id=\"Modal.close\" />}\n        </span>\n        <IconClose rootClassName={css.closeIcon} />\n      </Button>\n    ) : null;\n\n    // Modal uses given styles to wrap child components.\n    // If props doesn't contain isClosedClassName, styles default to css.isClosed\n    // This makes it possible to create ModalInMobile on top of Modal where style modes are:\n    // visible, hidden, or none (ModalInMobile's children are always visible on desktop layout.)\n    const modalClass = isOpen ? css.isOpen : isClosedClassName;\n    const classes = classNames(modalClass, className);\n    const scrollLayerClasses = scrollLayerClassName || css.scrollLayer;\n    const containerClasses = containerClassName || css.container;\n    return (\n      <div className={classes}>\n        <div className={scrollLayerClasses}>\n          <div className={containerClasses}>\n            {closeBtn}\n            <div className={classNames(contentClassName || css.content)}>{children}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nModalComponent.defaultProps = {\n  children: null,\n  className: null,\n  scrollLayerClassName: null,\n  closeButtonMessage: null,\n  containerClassName: null,\n  contentClassName: null,\n  lightCloseButton: false,\n  isClosedClassName: css.isClosed,\n  isOpen: false,\n  onClose: null,\n};\n\nconst { bool, func, node, string } = PropTypes;\n\nModalComponent.propTypes = {\n  children: node,\n  className: string,\n  scrollLayerClassName: string,\n  closeButtonMessage: node,\n  containerClassName: string,\n  contentClassName: string,\n  lightCloseButton: bool,\n  id: string.isRequired,\n  intl: intlShape.isRequired,\n  isClosedClassName: string,\n  isOpen: bool,\n  onClose: func.isRequired,\n\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired,\n};\n\nexport default injectIntl(ModalComponent);\n"]},"metadata":{},"sourceType":"module"}