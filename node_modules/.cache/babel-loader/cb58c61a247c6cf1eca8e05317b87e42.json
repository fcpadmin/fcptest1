{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/BookingBreakdown/LineItemSubTotalMaybe.js\";\nimport React from 'react';\nimport { string } from 'prop-types';\nimport { FormattedMessage, intlShape } from 'react-intl';\nimport Decimal from 'decimal.js';\nimport { formatMoney } from '../../util/currency';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { propTypes, LINE_ITEM_CUSTOMER_COMMISSION, LINE_ITEM_PROVIDER_COMMISSION } from '../../util/types';\nimport css from './BookingBreakdown.css';\nconst Money = sdkTypes.Money;\n/**\n * Calculates the total price in sub units for multiple line items.\n */\n\nconst lineItemsTotal = lineItems => {\n  const amount = lineItems.reduce((total, item) => {\n    return total.plus(item.lineTotal.amount);\n  }, new Decimal(0));\n  return new Money(amount, config.currency);\n};\n/**\n * Checks if line item represents commission\n */\n\n\nconst isCommission = lineItem => {\n  return lineItem.code === LINE_ITEM_PROVIDER_COMMISSION || lineItem.code === LINE_ITEM_CUSTOMER_COMMISSION;\n};\n/**\n * Returns non-commission, non-reversal line items\n */\n\n\nconst nonCommissionNonReversalLineItems = transaction => {\n  return transaction.attributes.lineItems.filter(item => !isCommission(item) && !item.reversal);\n};\n/**\n * Checks if a transaction has a commission line-item for\n * a given user role.\n */\n\n\nconst txHasCommission = (transaction, userRole) => {\n  let commissionLineItem = null;\n\n  if (userRole === 'customer') {\n    commissionLineItem = transaction.attributes.lineItems.find(item => item.code === LINE_ITEM_CUSTOMER_COMMISSION);\n  } else if (userRole === 'provider') {\n    commissionLineItem = transaction.attributes.lineItems.find(item => item.code === LINE_ITEM_PROVIDER_COMMISSION);\n  }\n\n  return !!commissionLineItem;\n};\n\nconst LineItemSubTotalMaybe = props => {\n  const transaction = props.transaction,\n        unitType = props.unitType,\n        userRole = props.userRole,\n        intl = props.intl;\n  const refund = transaction.attributes.lineItems.find(item => item.code === unitType && item.reversal); // Show unit purchase line total (unit price * quantity) as a subtotal.\n  // PLEASE NOTE that this assumes that the transaction doesn't have other\n  // line item types than the defined unit type (e.g. week, month, year).\n\n  const showSubTotal = txHasCommission(transaction, userRole) || refund; // all non-reversal, non-commission line items\n\n  const subTotalLineItems = nonCommissionNonReversalLineItems(transaction); // line totals of those line items combined\n\n  const subTotal = lineItemsTotal(subTotalLineItems);\n  const formattedSubTotal = subTotalLineItems.length > 0 ? formatMoney(intl, subTotal) : null;\n  return formattedSubTotal && showSubTotal ? React.createElement(\"div\", {\n    className: css.subTotalLineItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: css.itemLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"BookingBreakdown.subTotal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: css.itemValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, formattedSubTotal)) : null;\n};\n\nLineItemSubTotalMaybe.propTypes = {\n  transaction: propTypes.transaction.isRequired,\n  userRole: string.isRequired,\n  intl: intlShape.isRequired\n};\nexport default LineItemSubTotalMaybe;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/BookingBreakdown/LineItemSubTotalMaybe.js"],"names":["React","string","FormattedMessage","intlShape","Decimal","formatMoney","config","types","sdkTypes","propTypes","LINE_ITEM_CUSTOMER_COMMISSION","LINE_ITEM_PROVIDER_COMMISSION","css","Money","lineItemsTotal","lineItems","amount","reduce","total","item","plus","lineTotal","currency","isCommission","lineItem","code","nonCommissionNonReversalLineItems","transaction","attributes","filter","reversal","txHasCommission","userRole","commissionLineItem","find","LineItemSubTotalMaybe","props","unitType","intl","refund","showSubTotal","subTotalLineItems","subTotal","formattedSubTotal","length","subTotalLineItem","itemLabel","itemValue","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { string } from 'prop-types';\nimport { FormattedMessage, intlShape } from 'react-intl';\nimport Decimal from 'decimal.js';\nimport { formatMoney } from '../../util/currency';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport {\n  propTypes,\n  LINE_ITEM_CUSTOMER_COMMISSION,\n  LINE_ITEM_PROVIDER_COMMISSION,\n} from '../../util/types';\n\nimport css from './BookingBreakdown.css';\n\nconst { Money } = sdkTypes;\n\n/**\n * Calculates the total price in sub units for multiple line items.\n */\nconst lineItemsTotal = lineItems => {\n  const amount = lineItems.reduce((total, item) => {\n    return total.plus(item.lineTotal.amount);\n  }, new Decimal(0));\n  return new Money(amount, config.currency);\n};\n\n/**\n * Checks if line item represents commission\n */\nconst isCommission = lineItem => {\n  return (\n    lineItem.code === LINE_ITEM_PROVIDER_COMMISSION ||\n    lineItem.code === LINE_ITEM_CUSTOMER_COMMISSION\n  );\n};\n\n/**\n * Returns non-commission, non-reversal line items\n */\nconst nonCommissionNonReversalLineItems = transaction => {\n  return transaction.attributes.lineItems.filter(item => !isCommission(item) && !item.reversal);\n};\n\n/**\n * Checks if a transaction has a commission line-item for\n * a given user role.\n */\nconst txHasCommission = (transaction, userRole) => {\n  let commissionLineItem = null;\n\n  if (userRole === 'customer') {\n    commissionLineItem = transaction.attributes.lineItems.find(\n      item => item.code === LINE_ITEM_CUSTOMER_COMMISSION\n    );\n  } else if (userRole === 'provider') {\n    commissionLineItem = transaction.attributes.lineItems.find(\n      item => item.code === LINE_ITEM_PROVIDER_COMMISSION\n    );\n  }\n  return !!commissionLineItem;\n};\n\nconst LineItemSubTotalMaybe = props => {\n  const { transaction, unitType, userRole, intl } = props;\n\n  const refund = transaction.attributes.lineItems.find(\n    item => item.code === unitType && item.reversal\n  );\n\n  // Show unit purchase line total (unit price * quantity) as a subtotal.\n  // PLEASE NOTE that this assumes that the transaction doesn't have other\n  // line item types than the defined unit type (e.g. week, month, year).\n  const showSubTotal = txHasCommission(transaction, userRole) || refund;\n\n  // all non-reversal, non-commission line items\n  const subTotalLineItems = nonCommissionNonReversalLineItems(transaction);\n  // line totals of those line items combined\n  const subTotal = lineItemsTotal(subTotalLineItems);\n\n  const formattedSubTotal = subTotalLineItems.length > 0 ? formatMoney(intl, subTotal) : null;\n\n  return formattedSubTotal && showSubTotal ? (\n    <div className={css.subTotalLineItem}>\n      <span className={css.itemLabel}>\n        <FormattedMessage id=\"BookingBreakdown.subTotal\" />\n      </span>\n      <span className={css.itemValue}>{formattedSubTotal}</span>\n    </div>\n  ) : null;\n};\n\nLineItemSubTotalMaybe.propTypes = {\n  transaction: propTypes.transaction.isRequired,\n  userRole: string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default LineItemSubTotalMaybe;\n"]},"metadata":{},"sourceType":"module"}