{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/BookingDatesForm/EstimatedBreakdownMaybe.js\";\n\n/**\n * Booking breakdown estimation\n *\n * Transactions have payment information that can be shown with the\n * BookingBreakdown component. However, when selecting booking\n * details, there is no transaction object present and we have to\n * estimate the breakdown of the transaction without data from the\n * API.\n *\n * If the payment process of a customized marketplace is something\n * else than simply daily or nightly bookings, the estimation will\n * most likely need some changes.\n *\n * To customize the estimation, first change the BookingDatesForm to\n * collect all booking information from the user (in addition to the\n * default date pickers), and provide that data to the\n * EstimatedBreakdownMaybe components. You can then make customization\n * within this file to create a fake transaction object that\n * calculates the breakdown information correctly according to the\n * process.\n *\n * In the future, the optimal scenario would be to use the same\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\n * is using to get the breakdown information from the API, but\n * currently the API doesn't support that for logged out users, and we\n * are forced to estimate the information here.\n */\nimport React from 'react';\nimport moment from 'moment';\nimport Decimal from 'decimal.js';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { dateFromLocalToAPI, nightsBetween, daysBetween } from '../../util/dates';\nimport { TRANSITION_REQUEST, TX_TRANSITION_ACTOR_CUSTOMER } from '../../util/transaction';\nimport { LINE_ITEM_DAY, LINE_ITEM_NIGHT, LINE_ITEM_UNITS } from '../../util/types';\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\nimport { BookingBreakdown } from '../../components';\nimport css from './BookingDatesForm.css';\nconst Money = sdkTypes.Money,\n      UUID = sdkTypes.UUID;\n\nconst estimatedTotalPrice = (unitPrice, unitCount) => {\n  const numericPrice = convertMoneyToNumber(unitPrice);\n  const numericTotalPrice = new Decimal(numericPrice).times(unitCount).toNumber();\n  return new Money(convertUnitToSubUnit(numericTotalPrice, unitDivisor(unitPrice.currency)), unitPrice.currency);\n}; // When we cannot speculatively initiate a transaction (i.e. logged\n// out), we must estimate the booking breakdown. This function creates\n// an estimated transaction object for that use case.\n\n\nconst estimatedTransaction = (unitType, bookingStart, bookingEnd, unitPrice, quantity) => {\n  const now = new Date();\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n  const unitCount = isNightly ? nightsBetween(bookingStart, bookingEnd) : isDaily ? daysBetween(bookingStart, bookingEnd) : quantity;\n  const totalPrice = estimatedTotalPrice(unitPrice, unitCount); // bookingStart: \"Fri Mar 30 2018 12:00:00 GMT-1100 (SST)\" aka \"Fri Mar 30 2018 23:00:00 GMT+0000 (UTC)\"\n  // Server normalizes night/day bookings to start from 00:00 UTC aka \"Thu Mar 29 2018 13:00:00 GMT-1100 (SST)\"\n  // The result is: local timestamp.subtract(12h).add(timezoneoffset) (in eg. -23 h)\n  // local noon -> startOf('day') => 00:00 local => remove timezoneoffset => 00:00 API (UTC)\n\n  const serverDayStart = dateFromLocalToAPI(moment(bookingStart).startOf('day').toDate());\n  const serverDayEnd = dateFromLocalToAPI(moment(bookingEnd).startOf('day').toDate());\n  return {\n    id: new UUID('estimated-transaction'),\n    type: 'transaction',\n    attributes: {\n      createdAt: now,\n      lastTransitionedAt: now,\n      lastTransition: TRANSITION_REQUEST,\n      payinTotal: totalPrice,\n      payoutTotal: totalPrice,\n      lineItems: [{\n        code: unitType,\n        includeFor: ['customer', 'provider'],\n        unitPrice: unitPrice,\n        quantity: new Decimal(unitCount),\n        lineTotal: totalPrice,\n        reversal: false\n      }],\n      transitions: [{\n        createdAt: now,\n        by: TX_TRANSITION_ACTOR_CUSTOMER,\n        transition: TRANSITION_REQUEST\n      }]\n    },\n    booking: {\n      id: new UUID('estimated-booking'),\n      type: 'booking',\n      attributes: {\n        start: serverDayStart,\n        end: serverDayEnd\n      }\n    }\n  };\n};\n\nconst EstimatedBreakdownMaybe = props => {\n  const _props$bookingData = props.bookingData,\n        unitType = _props$bookingData.unitType,\n        unitPrice = _props$bookingData.unitPrice,\n        startDate = _props$bookingData.startDate,\n        endDate = _props$bookingData.endDate,\n        quantity = _props$bookingData.quantity;\n  const isUnits = unitType === LINE_ITEM_UNITS;\n  const quantityIfUsingUnits = !isUnits || Number.isInteger(quantity);\n  const canEstimatePrice = startDate && endDate && unitPrice && quantityIfUsingUnits;\n\n  if (!canEstimatePrice) {\n    return null;\n  }\n\n  const tx = estimatedTransaction(unitType, startDate, endDate, unitPrice, quantity);\n  return React.createElement(BookingBreakdown, {\n    className: css.receipt,\n    userRole: \"customer\",\n    unitType: unitType,\n    transaction: tx,\n    booking: tx.booking,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  });\n};\n\nexport default EstimatedBreakdownMaybe;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/BookingDatesForm/EstimatedBreakdownMaybe.js"],"names":["React","moment","Decimal","types","sdkTypes","dateFromLocalToAPI","nightsBetween","daysBetween","TRANSITION_REQUEST","TX_TRANSITION_ACTOR_CUSTOMER","LINE_ITEM_DAY","LINE_ITEM_NIGHT","LINE_ITEM_UNITS","unitDivisor","convertMoneyToNumber","convertUnitToSubUnit","BookingBreakdown","css","Money","UUID","estimatedTotalPrice","unitPrice","unitCount","numericPrice","numericTotalPrice","times","toNumber","currency","estimatedTransaction","unitType","bookingStart","bookingEnd","quantity","now","Date","isNightly","isDaily","totalPrice","serverDayStart","startOf","toDate","serverDayEnd","id","type","attributes","createdAt","lastTransitionedAt","lastTransition","payinTotal","payoutTotal","lineItems","code","includeFor","lineTotal","reversal","transitions","by","transition","booking","start","end","EstimatedBreakdownMaybe","props","bookingData","startDate","endDate","isUnits","quantityIfUsingUnits","Number","isInteger","canEstimatePrice","tx","receipt"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,KAAK,IAAIC,QAAlB,QAAkC,sBAAlC;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,WAA5C,QAA+D,kBAA/D;AACA,SAASC,kBAAT,EAA6BC,4BAA7B,QAAiE,wBAAjE;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,eAAzC,QAAgE,kBAAhE;AACA,SAASC,WAAT,EAAsBC,oBAAtB,EAA4CC,oBAA5C,QAAwE,qBAAxE;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,OAAOC,GAAP,MAAgB,wBAAhB;MAEQC,K,GAAgBd,Q,CAAhBc,K;MAAOC,I,GAASf,Q,CAATe,I;;AAEf,MAAMC,mBAAmB,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACpD,QAAMC,YAAY,GAAGT,oBAAoB,CAACO,SAAD,CAAzC;AACA,QAAMG,iBAAiB,GAAG,IAAItB,OAAJ,CAAYqB,YAAZ,EAA0BE,KAA1B,CAAgCH,SAAhC,EAA2CI,QAA3C,EAA1B;AACA,SAAO,IAAIR,KAAJ,CACLH,oBAAoB,CAACS,iBAAD,EAAoBX,WAAW,CAACQ,SAAS,CAACM,QAAX,CAA/B,CADf,EAELN,SAAS,CAACM,QAFL,CAAP;AAID,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMC,oBAAoB,GAAG,CAACC,QAAD,EAAWC,YAAX,EAAyBC,UAAzB,EAAqCV,SAArC,EAAgDW,QAAhD,KAA6D;AACxF,QAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAMC,SAAS,GAAGN,QAAQ,KAAKlB,eAA/B;AACA,QAAMyB,OAAO,GAAGP,QAAQ,KAAKnB,aAA7B;AAEA,QAAMY,SAAS,GAAGa,SAAS,GACvB7B,aAAa,CAACwB,YAAD,EAAeC,UAAf,CADU,GAEvBK,OAAO,GACP7B,WAAW,CAACuB,YAAD,EAAeC,UAAf,CADJ,GAEPC,QAJJ;AAMA,QAAMK,UAAU,GAAGjB,mBAAmB,CAACC,SAAD,EAAYC,SAAZ,CAAtC,CAXwF,CAaxF;AACA;AACA;AAEA;;AACA,QAAMgB,cAAc,GAAGjC,kBAAkB,CACvCJ,MAAM,CAAC6B,YAAD,CAAN,CACGS,OADH,CACW,KADX,EAEGC,MAFH,EADuC,CAAzC;AAKA,QAAMC,YAAY,GAAGpC,kBAAkB,CACrCJ,MAAM,CAAC8B,UAAD,CAAN,CACGQ,OADH,CACW,KADX,EAEGC,MAFH,EADqC,CAAvC;AAMA,SAAO;AACLE,IAAAA,EAAE,EAAE,IAAIvB,IAAJ,CAAS,uBAAT,CADC;AAELwB,IAAAA,IAAI,EAAE,aAFD;AAGLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAEZ,GADD;AAEVa,MAAAA,kBAAkB,EAAEb,GAFV;AAGVc,MAAAA,cAAc,EAAEvC,kBAHN;AAIVwC,MAAAA,UAAU,EAAEX,UAJF;AAKVY,MAAAA,WAAW,EAAEZ,UALH;AAMVa,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,IAAI,EAAEtB,QADR;AAEEuB,QAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,UAAb,CAFd;AAGE/B,QAAAA,SAAS,EAAEA,SAHb;AAIEW,QAAAA,QAAQ,EAAE,IAAI9B,OAAJ,CAAYoB,SAAZ,CAJZ;AAKE+B,QAAAA,SAAS,EAAEhB,UALb;AAMEiB,QAAAA,QAAQ,EAAE;AANZ,OADS,CAND;AAgBVC,MAAAA,WAAW,EAAE,CACX;AACEV,QAAAA,SAAS,EAAEZ,GADb;AAEEuB,QAAAA,EAAE,EAAE/C,4BAFN;AAGEgD,QAAAA,UAAU,EAAEjD;AAHd,OADW;AAhBH,KAHP;AA2BLkD,IAAAA,OAAO,EAAE;AACPhB,MAAAA,EAAE,EAAE,IAAIvB,IAAJ,CAAS,mBAAT,CADG;AAEPwB,MAAAA,IAAI,EAAE,SAFC;AAGPC,MAAAA,UAAU,EAAE;AACVe,QAAAA,KAAK,EAAErB,cADG;AAEVsB,QAAAA,GAAG,EAAEnB;AAFK;AAHL;AA3BJ,GAAP;AAoCD,CAjED;;AAmEA,MAAMoB,uBAAuB,GAAGC,KAAK,IAAI;AAAA,6BACuBA,KAAK,CAACC,WAD7B;AAAA,QAC/BlC,QAD+B,sBAC/BA,QAD+B;AAAA,QACrBR,SADqB,sBACrBA,SADqB;AAAA,QACV2C,SADU,sBACVA,SADU;AAAA,QACCC,OADD,sBACCA,OADD;AAAA,QACUjC,QADV,sBACUA,QADV;AAEvC,QAAMkC,OAAO,GAAGrC,QAAQ,KAAKjB,eAA7B;AACA,QAAMuD,oBAAoB,GAAG,CAACD,OAAD,IAAYE,MAAM,CAACC,SAAP,CAAiBrC,QAAjB,CAAzC;AACA,QAAMsC,gBAAgB,GAAGN,SAAS,IAAIC,OAAb,IAAwB5C,SAAxB,IAAqC8C,oBAA9D;;AACA,MAAI,CAACG,gBAAL,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,QAAMC,EAAE,GAAG3C,oBAAoB,CAACC,QAAD,EAAWmC,SAAX,EAAsBC,OAAtB,EAA+B5C,SAA/B,EAA0CW,QAA1C,CAA/B;AAEA,SACE,oBAAC,gBAAD;AACE,IAAA,SAAS,EAAEf,GAAG,CAACuD,OADjB;AAEE,IAAA,QAAQ,EAAC,UAFX;AAGE,IAAA,QAAQ,EAAE3C,QAHZ;AAIE,IAAA,WAAW,EAAE0C,EAJf;AAKE,IAAA,OAAO,EAAEA,EAAE,CAACb,OALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CApBD;;AAsBA,eAAeG,uBAAf","sourcesContent":["/**\n * Booking breakdown estimation\n *\n * Transactions have payment information that can be shown with the\n * BookingBreakdown component. However, when selecting booking\n * details, there is no transaction object present and we have to\n * estimate the breakdown of the transaction without data from the\n * API.\n *\n * If the payment process of a customized marketplace is something\n * else than simply daily or nightly bookings, the estimation will\n * most likely need some changes.\n *\n * To customize the estimation, first change the BookingDatesForm to\n * collect all booking information from the user (in addition to the\n * default date pickers), and provide that data to the\n * EstimatedBreakdownMaybe components. You can then make customization\n * within this file to create a fake transaction object that\n * calculates the breakdown information correctly according to the\n * process.\n *\n * In the future, the optimal scenario would be to use the same\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\n * is using to get the breakdown information from the API, but\n * currently the API doesn't support that for logged out users, and we\n * are forced to estimate the information here.\n */\nimport React from 'react';\nimport moment from 'moment';\nimport Decimal from 'decimal.js';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { dateFromLocalToAPI, nightsBetween, daysBetween } from '../../util/dates';\nimport { TRANSITION_REQUEST, TX_TRANSITION_ACTOR_CUSTOMER } from '../../util/transaction';\nimport { LINE_ITEM_DAY, LINE_ITEM_NIGHT, LINE_ITEM_UNITS } from '../../util/types';\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\nimport { BookingBreakdown } from '../../components';\n\nimport css from './BookingDatesForm.css';\n\nconst { Money, UUID } = sdkTypes;\n\nconst estimatedTotalPrice = (unitPrice, unitCount) => {\n  const numericPrice = convertMoneyToNumber(unitPrice);\n  const numericTotalPrice = new Decimal(numericPrice).times(unitCount).toNumber();\n  return new Money(\n    convertUnitToSubUnit(numericTotalPrice, unitDivisor(unitPrice.currency)),\n    unitPrice.currency\n  );\n};\n\n// When we cannot speculatively initiate a transaction (i.e. logged\n// out), we must estimate the booking breakdown. This function creates\n// an estimated transaction object for that use case.\nconst estimatedTransaction = (unitType, bookingStart, bookingEnd, unitPrice, quantity) => {\n  const now = new Date();\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n\n  const unitCount = isNightly\n    ? nightsBetween(bookingStart, bookingEnd)\n    : isDaily\n    ? daysBetween(bookingStart, bookingEnd)\n    : quantity;\n\n  const totalPrice = estimatedTotalPrice(unitPrice, unitCount);\n\n  // bookingStart: \"Fri Mar 30 2018 12:00:00 GMT-1100 (SST)\" aka \"Fri Mar 30 2018 23:00:00 GMT+0000 (UTC)\"\n  // Server normalizes night/day bookings to start from 00:00 UTC aka \"Thu Mar 29 2018 13:00:00 GMT-1100 (SST)\"\n  // The result is: local timestamp.subtract(12h).add(timezoneoffset) (in eg. -23 h)\n\n  // local noon -> startOf('day') => 00:00 local => remove timezoneoffset => 00:00 API (UTC)\n  const serverDayStart = dateFromLocalToAPI(\n    moment(bookingStart)\n      .startOf('day')\n      .toDate()\n  );\n  const serverDayEnd = dateFromLocalToAPI(\n    moment(bookingEnd)\n      .startOf('day')\n      .toDate()\n  );\n\n  return {\n    id: new UUID('estimated-transaction'),\n    type: 'transaction',\n    attributes: {\n      createdAt: now,\n      lastTransitionedAt: now,\n      lastTransition: TRANSITION_REQUEST,\n      payinTotal: totalPrice,\n      payoutTotal: totalPrice,\n      lineItems: [\n        {\n          code: unitType,\n          includeFor: ['customer', 'provider'],\n          unitPrice: unitPrice,\n          quantity: new Decimal(unitCount),\n          lineTotal: totalPrice,\n          reversal: false,\n        },\n      ],\n      transitions: [\n        {\n          createdAt: now,\n          by: TX_TRANSITION_ACTOR_CUSTOMER,\n          transition: TRANSITION_REQUEST,\n        },\n      ],\n    },\n    booking: {\n      id: new UUID('estimated-booking'),\n      type: 'booking',\n      attributes: {\n        start: serverDayStart,\n        end: serverDayEnd,\n      },\n    },\n  };\n};\n\nconst EstimatedBreakdownMaybe = props => {\n  const { unitType, unitPrice, startDate, endDate, quantity } = props.bookingData;\n  const isUnits = unitType === LINE_ITEM_UNITS;\n  const quantityIfUsingUnits = !isUnits || Number.isInteger(quantity);\n  const canEstimatePrice = startDate && endDate && unitPrice && quantityIfUsingUnits;\n  if (!canEstimatePrice) {\n    return null;\n  }\n\n  const tx = estimatedTransaction(unitType, startDate, endDate, unitPrice, quantity);\n\n  return (\n    <BookingBreakdown\n      className={css.receipt}\n      userRole=\"customer\"\n      unitType={unitType}\n      transaction={tx}\n      booking={tx.booking}\n    />\n  );\n};\n\nexport default EstimatedBreakdownMaybe;\n"]},"metadata":{},"sourceType":"module"}