{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/StyleguidePage/StyleguidePage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport classNames from 'classnames';\nimport { NamedLink } from '../../components';\nimport css from './StyleguidePage.css';\nconst ALL = '*';\nconst DEFAULT_GROUP = 'misc';\n\nconst Example = props => {\n  const componentName = props.componentName,\n        exampleName = props.exampleName,\n        ExampleComponent = props.component,\n        description = props.description,\n        exampleProps = props.props,\n        useDefaultWrapperStyles = props.useDefaultWrapperStyles;\n  const exampleWrapperClassName = useDefaultWrapperStyles ? css.defaultWrapperStyles : '';\n  const desc = description ? React.createElement(\"p\", {\n    className: css.withMargin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Description: \", description) : null;\n  return React.createElement(\"li\", {\n    className: css.example,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: css.withMargin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(NamedLink, {\n    name: \"StyleguideComponent\",\n    params: {\n      component: componentName\n    },\n    className: css.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, componentName), ' ', \"/\", ' ', React.createElement(NamedLink, {\n    name: \"StyleguideComponentExample\",\n    params: {\n      component: componentName,\n      example: exampleName\n    },\n    className: css.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, exampleName)), React.createElement(\"span\", {\n    className: css.withMargin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(NamedLink, {\n    name: \"StyleguideComponentExampleRaw\",\n    params: {\n      component: componentName,\n      example: exampleName\n    },\n    className: css.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"raw\")), desc, React.createElement(\"div\", {\n    className: exampleWrapperClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(ExampleComponent, Object.assign({}, exampleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }))));\n};\n\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      node = PropTypes.node,\n      object = PropTypes.object,\n      oneOfType = PropTypes.oneOfType,\n      shape = PropTypes.shape,\n      string = PropTypes.string,\n      arrayOf = PropTypes.arrayOf;\nExample.defaultProps = {\n  description: null,\n  props: {},\n  useDefaultWrapperStyles: true\n};\nExample.propTypes = {\n  componentName: string.isRequired,\n  exampleName: string.isRequired,\n  component: oneOfType([func, node]).isRequired,\n  description: string,\n  props: object,\n  useDefaultWrapperStyles: bool\n}; // Renders the list of component example groups as clickable filters\n\nconst Nav = props => {\n  const groups = props.groups,\n        selectedGroup = props.selectedGroup;\n\n  const toGroupLink = group => {\n    const linkProps = {\n      name: group === ALL ? 'Styleguide' : 'StyleguideGroup',\n      params: group === ALL ? null : {\n        group\n      }\n    };\n    const linkContent = group === ALL ? 'all components' : group;\n    const isSelected = selectedGroup && group === selectedGroup;\n    const groupLink = classNames(css.link, {\n      [css.selectedGroup]: isSelected\n    });\n    return React.createElement(\"li\", {\n      key: group,\n      className: css.group,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(NamedLink, Object.assign({}, linkProps, {\n      className: groupLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), linkContent));\n  };\n\n  const filteredGroups = groups.filter(g => g !== ALL && g !== DEFAULT_GROUP);\n  const basicStylings = ['typography', 'colors'];\n  const basicStylingGroups = filteredGroups.filter(g => basicStylings.includes(g)).map(toGroupLink);\n  const componentGroups = filteredGroups.filter(g => !basicStylings.includes(g)).map(toGroupLink);\n  return React.createElement(\"nav\", {\n    className: css.withMargin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, toGroupLink(ALL)), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Basic styling\"), React.createElement(\"ul\", {\n    className: css.groups,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, basicStylingGroups), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Component categories\"), React.createElement(\"ul\", {\n    className: css.groups,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, componentGroups, toGroupLink(DEFAULT_GROUP)));\n};\n\nNav.defaultProps = {\n  selectedGroup: null\n};\nNav.propTypes = {\n  groups: arrayOf(string).isRequired,\n  selectedGroup: string\n}; // The imported examples are in a nested tree structure. Flatten the\n// structure into an array of example objects.\n\nconst flatExamples = examples => {\n  return Object.keys(examples).reduce((flattened, componentName) => {\n    const exs = Object.keys(examples[componentName]).reduce((result, exampleName) => {\n      const ex = examples[componentName][exampleName];\n      return result.concat([_objectSpread({\n        componentName,\n        exampleName,\n        group: DEFAULT_GROUP\n      }, ex)]);\n    }, []);\n    return flattened.concat(exs);\n  }, []);\n}; // Filter the examples based on the given criteria\n\n\nconst examplesFor = (examples, group, componentName, exampleName) => {\n  return examples.filter(ex => {\n    return (group === ALL || ex.group === group) && (componentName === ALL || ex.componentName === componentName) && (exampleName === ALL || ex.exampleName === exampleName);\n  });\n};\n\nconst StyleguidePage = props => {\n  // TODO: importing all the examples will affect the module bundling\n  // since examples call routeConfiguration without function wrapping\n  // Furthermore, it would be nice to exclude styleguide away from actual app\n  let allExamples = [];\n\n  try {\n    allExamples = require('../../examples');\n  } catch (e) {\n    console.error(e);\n    console.warn('require(): The file \"../../examples.js\" could not be loaded.');\n  }\n\n  const params = props.params,\n        raw = props.raw;\n  const group = params.group ? decodeURIComponent(params.group) : ALL;\n  const componentName = params.component || ALL;\n  const exampleName = params.example || ALL;\n  const flattened = flatExamples(allExamples);\n  const groups = flattened.reduce((result, ex) => {\n    if (ex.group && !result.includes(ex.group)) {\n      return result.concat(ex.group);\n    }\n\n    return result;\n  }, []);\n  groups.sort();\n  const selectedGroup = isEmpty(params) ? ALL : params.group;\n  const examples = examplesFor(flattened, group, componentName, exampleName); // Raw examples are rendered without any wrapper\n\n  if (raw && examples.length > 0) {\n    // There can be only one raw example at a time, therefore pick\n    // only the first example in the examples Array\n    const _examples$ = examples[0],\n          ExampleComponent = _examples$.component,\n          exampleProps = _examples$.props;\n    return React.createElement(ExampleComponent, Object.assign({}, exampleProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }));\n  } else if (raw) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"No example with filter \", componentName, \"/\", exampleName, \"/raw\");\n  }\n\n  const html = examples.length > 0 ? React.createElement(\"ul\", {\n    className: css.examplesList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, examples.map(ex => React.createElement(Example, Object.assign({\n    key: \"\".concat(ex.componentName, \"/\").concat(ex.exampleName)\n  }, ex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  })))) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"No examples with filter: \", componentName, \"/\", exampleName);\n  return React.createElement(\"section\", {\n    className: css.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.navBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: css.withMargin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(NamedLink, {\n    name: \"Styleguide\",\n    className: css.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Styleguide\")), React.createElement(\"h2\", {\n    className: css.withMargin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"Select category:\"), React.createElement(Nav, {\n    groups: groups,\n    selectedGroup: selectedGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: css.main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"Component examples:\"), html));\n};\n\nStyleguidePage.defaultProps = {\n  raw: false\n};\nStyleguidePage.propTypes = {\n  params: shape({\n    group: string,\n    component: string,\n    example: string\n  }).isRequired,\n  raw: bool\n};\nexport default StyleguidePage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/StyleguidePage/StyleguidePage.js"],"names":["React","PropTypes","isEmpty","classNames","NamedLink","css","ALL","DEFAULT_GROUP","Example","props","componentName","exampleName","ExampleComponent","component","description","exampleProps","useDefaultWrapperStyles","exampleWrapperClassName","defaultWrapperStyles","desc","withMargin","example","link","bool","func","node","object","oneOfType","shape","string","arrayOf","defaultProps","propTypes","isRequired","Nav","groups","selectedGroup","toGroupLink","group","linkProps","name","params","linkContent","isSelected","groupLink","filteredGroups","filter","g","basicStylings","basicStylingGroups","includes","map","componentGroups","flatExamples","examples","Object","keys","reduce","flattened","exs","result","ex","concat","examplesFor","StyleguidePage","allExamples","require","e","console","error","warn","raw","decodeURIComponent","sort","length","html","examplesList","root","navBar","main"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport classNames from 'classnames';\nimport { NamedLink } from '../../components';\n\nimport css from './StyleguidePage.css';\n\nconst ALL = '*';\nconst DEFAULT_GROUP = 'misc';\n\nconst Example = props => {\n  const {\n    componentName,\n    exampleName,\n    component: ExampleComponent,\n    description,\n    props: exampleProps,\n    useDefaultWrapperStyles,\n  } = props;\n\n  const exampleWrapperClassName = useDefaultWrapperStyles ? css.defaultWrapperStyles : '';\n  const desc = description ? <p className={css.withMargin}>Description: {description}</p> : null;\n  return (\n    <li className={css.example}>\n      <h3 className={css.withMargin}>\n        <NamedLink\n          name=\"StyleguideComponent\"\n          params={{ component: componentName }}\n          className={css.link}\n        >\n          {componentName}\n        </NamedLink>{' '}\n        /{' '}\n        <NamedLink\n          name=\"StyleguideComponentExample\"\n          params={{ component: componentName, example: exampleName }}\n          className={css.link}\n        >\n          {exampleName}\n        </NamedLink>\n      </h3>\n      <span className={css.withMargin}>\n        <NamedLink\n          name=\"StyleguideComponentExampleRaw\"\n          params={{ component: componentName, example: exampleName }}\n          className={css.link}\n        >\n          raw\n        </NamedLink>\n      </span>\n      {desc}\n      <div className={exampleWrapperClassName}>\n        <ExampleComponent {...exampleProps} />\n      </div>\n    </li>\n  );\n};\n\nconst { bool, func, node, object, oneOfType, shape, string, arrayOf } = PropTypes;\n\nExample.defaultProps = {\n  description: null,\n  props: {},\n  useDefaultWrapperStyles: true,\n};\n\nExample.propTypes = {\n  componentName: string.isRequired,\n  exampleName: string.isRequired,\n  component: oneOfType([func, node]).isRequired,\n  description: string,\n  props: object,\n  useDefaultWrapperStyles: bool,\n};\n\n// Renders the list of component example groups as clickable filters\nconst Nav = props => {\n  const { groups, selectedGroup } = props;\n  const toGroupLink = group => {\n    const linkProps = {\n      name: group === ALL ? 'Styleguide' : 'StyleguideGroup',\n      params: group === ALL ? null : { group },\n    };\n\n    const linkContent = group === ALL ? 'all components' : group;\n    const isSelected = selectedGroup && group === selectedGroup;\n    const groupLink = classNames(css.link, { [css.selectedGroup]: isSelected });\n    return (\n      <li key={group} className={css.group}>\n        <NamedLink {...linkProps} className={groupLink}>\n          {linkContent}\n        </NamedLink>\n      </li>\n    );\n  };\n\n  const filteredGroups = groups.filter(g => g !== ALL && g !== DEFAULT_GROUP);\n  const basicStylings = ['typography', 'colors'];\n  const basicStylingGroups = filteredGroups.filter(g => basicStylings.includes(g)).map(toGroupLink);\n  const componentGroups = filteredGroups.filter(g => !basicStylings.includes(g)).map(toGroupLink);\n\n  return (\n    <nav className={css.withMargin}>\n      <ul>{toGroupLink(ALL)}</ul>\n      <h5>Basic styling</h5>\n      <ul className={css.groups}>{basicStylingGroups}</ul>\n      <h5>Component categories</h5>\n      <ul className={css.groups}>\n        {componentGroups}\n        {toGroupLink(DEFAULT_GROUP)}\n      </ul>\n    </nav>\n  );\n};\n\nNav.defaultProps = { selectedGroup: null };\n\nNav.propTypes = {\n  groups: arrayOf(string).isRequired,\n  selectedGroup: string,\n};\n\n// The imported examples are in a nested tree structure. Flatten the\n// structure into an array of example objects.\nconst flatExamples = examples => {\n  return Object.keys(examples).reduce((flattened, componentName) => {\n    const exs = Object.keys(examples[componentName]).reduce((result, exampleName) => {\n      const ex = examples[componentName][exampleName];\n      return result.concat([\n        {\n          componentName,\n          exampleName,\n          group: DEFAULT_GROUP,\n          ...ex,\n        },\n      ]);\n    }, []);\n    return flattened.concat(exs);\n  }, []);\n};\n\n// Filter the examples based on the given criteria\nconst examplesFor = (examples, group, componentName, exampleName) => {\n  return examples.filter(ex => {\n    return (\n      (group === ALL || ex.group === group) &&\n      (componentName === ALL || ex.componentName === componentName) &&\n      (exampleName === ALL || ex.exampleName === exampleName)\n    );\n  });\n};\n\nconst StyleguidePage = props => {\n  // TODO: importing all the examples will affect the module bundling\n  // since examples call routeConfiguration without function wrapping\n  // Furthermore, it would be nice to exclude styleguide away from actual app\n  let allExamples = [];\n  try {\n    allExamples = require('../../examples');\n  } catch (e) {\n    console.error(e);\n    console.warn('require(): The file \"../../examples.js\" could not be loaded.');\n  }\n\n  const { params, raw } = props;\n  const group = params.group ? decodeURIComponent(params.group) : ALL;\n  const componentName = params.component || ALL;\n  const exampleName = params.example || ALL;\n\n  const flattened = flatExamples(allExamples);\n  const groups = flattened.reduce((result, ex) => {\n    if (ex.group && !result.includes(ex.group)) {\n      return result.concat(ex.group);\n    }\n    return result;\n  }, []);\n  groups.sort();\n  const selectedGroup = isEmpty(params) ? ALL : params.group;\n  const examples = examplesFor(flattened, group, componentName, exampleName);\n\n  // Raw examples are rendered without any wrapper\n  if (raw && examples.length > 0) {\n    // There can be only one raw example at a time, therefore pick\n    // only the first example in the examples Array\n    const { component: ExampleComponent, props: exampleProps } = examples[0];\n    return <ExampleComponent {...exampleProps} />;\n  } else if (raw) {\n    return (\n      <p>\n        No example with filter {componentName}/{exampleName}/raw\n      </p>\n    );\n  }\n\n  const html =\n    examples.length > 0 ? (\n      <ul className={css.examplesList}>\n        {examples.map(ex => (\n          <Example key={`${ex.componentName}/${ex.exampleName}`} {...ex} />\n        ))}\n      </ul>\n    ) : (\n      <p>\n        No examples with filter: {componentName}/{exampleName}\n      </p>\n    );\n\n  return (\n    <section className={css.root}>\n      <div className={css.navBar}>\n        <h1 className={css.withMargin}>\n          <NamedLink name=\"Styleguide\" className={css.link}>\n            Styleguide\n          </NamedLink>\n        </h1>\n        <h2 className={css.withMargin}>Select category:</h2>\n        <Nav groups={groups} selectedGroup={selectedGroup} />\n      </div>\n      <div className={css.main}>\n        <h2>Component examples:</h2>\n        {html}\n      </div>\n    </section>\n  );\n};\n\nStyleguidePage.defaultProps = { raw: false };\n\nStyleguidePage.propTypes = {\n  params: shape({\n    group: string,\n    component: string,\n    example: string,\n  }).isRequired,\n  raw: bool,\n};\n\nexport default StyleguidePage;\n"]},"metadata":{},"sourceType":"module"}