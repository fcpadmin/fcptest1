{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport pick from 'lodash/pick';\nimport moment from 'moment';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { storableError } from '../../util/errors';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { TRANSITION_ENQUIRE } from '../../util/transaction';\nimport { LISTING_PAGE_DRAFT_VARIANT, LISTING_PAGE_PENDING_APPROVAL_VARIANT } from '../../util/urlHelpers';\nimport { fetchCurrentUser, fetchCurrentUserHasOrdersSuccess } from '../../ducks/user.duck';\nconst UUID = sdkTypes.UUID; // ================ Action types ================ //\n\nexport const SET_INITAL_VALUES = 'app/ListingPage/SET_INITIAL_VALUES';\nexport const SHOW_LISTING_REQUEST = 'app/ListingPage/SHOW_LISTING_REQUEST';\nexport const SHOW_LISTING_ERROR = 'app/ListingPage/SHOW_LISTING_ERROR';\nexport const FETCH_REVIEWS_REQUEST = 'app/ListingPage/FETCH_REVIEWS_REQUEST';\nexport const FETCH_REVIEWS_SUCCESS = 'app/ListingPage/FETCH_REVIEWS_SUCCESS';\nexport const FETCH_REVIEWS_ERROR = 'app/ListingPage/FETCH_REVIEWS_ERROR';\nexport const FETCH_TIME_SLOTS_REQUEST = 'app/ListingPage/FETCH_TIME_SLOTS_REQUEST';\nexport const FETCH_TIME_SLOTS_SUCCESS = 'app/ListingPage/FETCH_TIME_SLOTS_SUCCESS';\nexport const FETCH_TIME_SLOTS_ERROR = 'app/ListingPage/FETCH_TIME_SLOTS_ERROR';\nexport const SEND_ENQUIRY_REQUEST = 'app/ListingPage/SEND_ENQUIRY_REQUEST';\nexport const SEND_ENQUIRY_SUCCESS = 'app/ListingPage/SEND_ENQUIRY_SUCCESS';\nexport const SEND_ENQUIRY_ERROR = 'app/ListingPage/SEND_ENQUIRY_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  id: null,\n  showListingError: null,\n  reviews: [],\n  fetchReviewsError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n  sendEnquiryInProgress: false,\n  sendEnquiryError: null,\n  enquiryModalOpenForListingId: null\n};\n\nconst listingPageReducer = (state = initialState, action = {}) => {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case SET_INITAL_VALUES:\n      return _objectSpread({}, initialState, payload);\n\n    case SHOW_LISTING_REQUEST:\n      return _objectSpread({}, state, {\n        id: payload.id,\n        showListingError: null\n      });\n\n    case SHOW_LISTING_ERROR:\n      return _objectSpread({}, state, {\n        showListingError: payload\n      });\n\n    case FETCH_REVIEWS_REQUEST:\n      return _objectSpread({}, state, {\n        fetchReviewsError: null\n      });\n\n    case FETCH_REVIEWS_SUCCESS:\n      return _objectSpread({}, state, {\n        reviews: payload\n      });\n\n    case FETCH_REVIEWS_ERROR:\n      return _objectSpread({}, state, {\n        fetchReviewsError: payload\n      });\n\n    case FETCH_TIME_SLOTS_REQUEST:\n      return _objectSpread({}, state, {\n        fetchTimeSlotsError: null\n      });\n\n    case FETCH_TIME_SLOTS_SUCCESS:\n      return _objectSpread({}, state, {\n        timeSlots: payload\n      });\n\n    case FETCH_TIME_SLOTS_ERROR:\n      return _objectSpread({}, state, {\n        fetchTimeSlotsError: payload\n      });\n\n    case SEND_ENQUIRY_REQUEST:\n      return _objectSpread({}, state, {\n        sendEnquiryInProgress: true,\n        sendEnquiryError: null\n      });\n\n    case SEND_ENQUIRY_SUCCESS:\n      return _objectSpread({}, state, {\n        sendEnquiryInProgress: false\n      });\n\n    case SEND_ENQUIRY_ERROR:\n      return _objectSpread({}, state, {\n        sendEnquiryInProgress: false,\n        sendEnquiryError: payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default listingPageReducer; // ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\nexport const showListingRequest = id => ({\n  type: SHOW_LISTING_REQUEST,\n  payload: {\n    id\n  }\n});\nexport const showListingError = e => ({\n  type: SHOW_LISTING_ERROR,\n  error: true,\n  payload: e\n});\nexport const fetchReviewsRequest = () => ({\n  type: FETCH_REVIEWS_REQUEST\n});\nexport const fetchReviewsSuccess = reviews => ({\n  type: FETCH_REVIEWS_SUCCESS,\n  payload: reviews\n});\nexport const fetchReviewsError = error => ({\n  type: FETCH_REVIEWS_ERROR,\n  error: true,\n  payload: error\n});\nexport const fetchTimeSlotsRequest = () => ({\n  type: FETCH_TIME_SLOTS_REQUEST\n});\nexport const fetchTimeSlotsSuccess = timeSlots => ({\n  type: FETCH_TIME_SLOTS_SUCCESS,\n  payload: timeSlots\n});\nexport const fetchTimeSlotsError = error => ({\n  type: FETCH_TIME_SLOTS_ERROR,\n  error: true,\n  payload: error\n});\nexport const sendEnquiryRequest = () => ({\n  type: SEND_ENQUIRY_REQUEST\n});\nexport const sendEnquirySuccess = () => ({\n  type: SEND_ENQUIRY_SUCCESS\n});\nexport const sendEnquiryError = e => ({\n  type: SEND_ENQUIRY_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const showListing = (listingId, isOwn = false) => (dispatch, getState, sdk) => {\n  dispatch(showListingRequest(listingId));\n  dispatch(fetchCurrentUser());\n  const params = {\n    id: listingId,\n    include: ['author', 'author.profileImage', 'images'],\n    'fields.image': [// Listing page\n    'variants.landscape-crop', 'variants.landscape-crop2x', 'variants.landscape-crop4x', 'variants.landscape-crop6x', // Social media\n    'variants.facebook', 'variants.twitter', // Image carousel\n    'variants.scaled-small', 'variants.scaled-medium', 'variants.scaled-large', 'variants.scaled-xlarge', // Avatars\n    'variants.square-small', 'variants.square-small2x']\n  };\n  const show = isOwn ? sdk.ownListings.show(params) : sdk.listings.show(params);\n  return show.then(data => {\n    dispatch(addMarketplaceEntities(data));\n    return data;\n  }).catch(e => {\n    dispatch(showListingError(storableError(e)));\n  });\n};\nexport const fetchReviews = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchReviewsRequest());\n  return sdk.reviews.query({\n    listing_id: listingId,\n    state: 'public',\n    include: ['author', 'author.profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const reviews = denormalisedResponseEntities(response);\n    dispatch(fetchReviewsSuccess(reviews));\n  }).catch(e => {\n    dispatch(fetchReviewsError(storableError(e)));\n  });\n};\n\nconst timeSlotsRequest = params => (dispatch, getState, sdk) => {\n  return sdk.timeslots.query(params).then(response => {\n    return denormalisedResponseEntities(response);\n  });\n};\n\nexport const fetchTimeSlots = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchTimeSlotsRequest); // Time slots can be fetched for 90 days at a time,\n  // for at most 180 days from now. If max number of bookable\n  // day exceeds 90, a second request is made.\n\n  const maxTimeSlots = 90; // booking range: today + bookable days -1\n\n  const bookingRange = config.dayCountAvailableForBooking - 1;\n  const timeSlotsRange = Math.min(bookingRange, maxTimeSlots);\n  const start = moment.utc().startOf('day').toDate();\n  const end = moment().utc().startOf('day').add(timeSlotsRange, 'days').toDate();\n  const params = {\n    listingId,\n    start,\n    end\n  };\n  return dispatch(timeSlotsRequest(params)).then(timeSlots => {\n    const secondRequest = bookingRange > maxTimeSlots;\n\n    if (secondRequest) {\n      const secondRange = Math.min(maxTimeSlots, bookingRange - maxTimeSlots);\n      const secondParams = {\n        listingId,\n        start: end,\n        end: moment(end).add(secondRange, 'days').toDate()\n      };\n      return dispatch(timeSlotsRequest(secondParams)).then(secondBatch => {\n        const combined = timeSlots.concat(secondBatch);\n        dispatch(fetchTimeSlotsSuccess(combined));\n      });\n    } else {\n      dispatch(fetchTimeSlotsSuccess(timeSlots));\n    }\n  }).catch(e => {\n    dispatch(fetchTimeSlotsError(storableError(e)));\n  });\n};\nexport const sendEnquiry = (listingId, message) => (dispatch, getState, sdk) => {\n  dispatch(sendEnquiryRequest());\n  const bodyParams = {\n    transition: TRANSITION_ENQUIRE,\n    processAlias: config.bookingProcessAlias,\n    params: {\n      listingId\n    }\n  };\n  return sdk.transactions.initiate(bodyParams).then(response => {\n    const transactionId = response.data.data.id; // Send the message to the created transaction\n\n    return sdk.messages.send({\n      transactionId,\n      content: message\n    }).then(() => {\n      dispatch(sendEnquirySuccess());\n      dispatch(fetchCurrentUserHasOrdersSuccess(true));\n      return transactionId;\n    });\n  }).catch(e => {\n    dispatch(sendEnquiryError(storableError(e)));\n    throw e;\n  });\n};\nexport const loadData = (params, search) => dispatch => {\n  const listingId = new UUID(params.id);\n  const ownListingVariants = [LISTING_PAGE_DRAFT_VARIANT, LISTING_PAGE_PENDING_APPROVAL_VARIANT];\n\n  if (ownListingVariants.includes(params.variant)) {\n    return dispatch(showListing(listingId, true));\n  }\n\n  if (config.enableAvailability) {\n    return Promise.all([dispatch(showListing(listingId)), dispatch(fetchTimeSlots(listingId)), dispatch(fetchReviews(listingId))]);\n  } else {\n    return Promise.all([dispatch(showListing(listingId)), dispatch(fetchReviews(listingId))]);\n  }\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ListingPage/ListingPage.duck.js"],"names":["pick","moment","config","types","sdkTypes","storableError","addMarketplaceEntities","denormalisedResponseEntities","TRANSITION_ENQUIRE","LISTING_PAGE_DRAFT_VARIANT","LISTING_PAGE_PENDING_APPROVAL_VARIANT","fetchCurrentUser","fetchCurrentUserHasOrdersSuccess","UUID","SET_INITAL_VALUES","SHOW_LISTING_REQUEST","SHOW_LISTING_ERROR","FETCH_REVIEWS_REQUEST","FETCH_REVIEWS_SUCCESS","FETCH_REVIEWS_ERROR","FETCH_TIME_SLOTS_REQUEST","FETCH_TIME_SLOTS_SUCCESS","FETCH_TIME_SLOTS_ERROR","SEND_ENQUIRY_REQUEST","SEND_ENQUIRY_SUCCESS","SEND_ENQUIRY_ERROR","initialState","id","showListingError","reviews","fetchReviewsError","timeSlots","fetchTimeSlotsError","sendEnquiryInProgress","sendEnquiryError","enquiryModalOpenForListingId","listingPageReducer","state","action","type","payload","setInitialValues","initialValues","Object","keys","showListingRequest","e","error","fetchReviewsRequest","fetchReviewsSuccess","fetchTimeSlotsRequest","fetchTimeSlotsSuccess","sendEnquiryRequest","sendEnquirySuccess","showListing","listingId","isOwn","dispatch","getState","sdk","params","include","show","ownListings","listings","then","data","catch","fetchReviews","query","listing_id","response","timeSlotsRequest","timeslots","fetchTimeSlots","maxTimeSlots","bookingRange","dayCountAvailableForBooking","timeSlotsRange","Math","min","start","utc","startOf","toDate","end","add","secondRequest","secondRange","secondParams","secondBatch","combined","concat","sendEnquiry","message","bodyParams","transition","processAlias","bookingProcessAlias","transactions","initiate","transactionId","messages","send","content","loadData","search","ownListingVariants","includes","variant","enableAvailability","Promise","all"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport moment from 'moment';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { storableError } from '../../util/errors';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { TRANSITION_ENQUIRE } from '../../util/transaction';\nimport {\n  LISTING_PAGE_DRAFT_VARIANT,\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n} from '../../util/urlHelpers';\nimport { fetchCurrentUser, fetchCurrentUserHasOrdersSuccess } from '../../ducks/user.duck';\n\nconst { UUID } = sdkTypes;\n\n// ================ Action types ================ //\n\nexport const SET_INITAL_VALUES = 'app/ListingPage/SET_INITIAL_VALUES';\n\nexport const SHOW_LISTING_REQUEST = 'app/ListingPage/SHOW_LISTING_REQUEST';\nexport const SHOW_LISTING_ERROR = 'app/ListingPage/SHOW_LISTING_ERROR';\n\nexport const FETCH_REVIEWS_REQUEST = 'app/ListingPage/FETCH_REVIEWS_REQUEST';\nexport const FETCH_REVIEWS_SUCCESS = 'app/ListingPage/FETCH_REVIEWS_SUCCESS';\nexport const FETCH_REVIEWS_ERROR = 'app/ListingPage/FETCH_REVIEWS_ERROR';\n\nexport const FETCH_TIME_SLOTS_REQUEST = 'app/ListingPage/FETCH_TIME_SLOTS_REQUEST';\nexport const FETCH_TIME_SLOTS_SUCCESS = 'app/ListingPage/FETCH_TIME_SLOTS_SUCCESS';\nexport const FETCH_TIME_SLOTS_ERROR = 'app/ListingPage/FETCH_TIME_SLOTS_ERROR';\n\nexport const SEND_ENQUIRY_REQUEST = 'app/ListingPage/SEND_ENQUIRY_REQUEST';\nexport const SEND_ENQUIRY_SUCCESS = 'app/ListingPage/SEND_ENQUIRY_SUCCESS';\nexport const SEND_ENQUIRY_ERROR = 'app/ListingPage/SEND_ENQUIRY_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  id: null,\n  showListingError: null,\n  reviews: [],\n  fetchReviewsError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n  sendEnquiryInProgress: false,\n  sendEnquiryError: null,\n  enquiryModalOpenForListingId: null,\n};\n\nconst listingPageReducer = (state = initialState, action = {}) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_INITAL_VALUES:\n      return { ...initialState, ...payload };\n\n    case SHOW_LISTING_REQUEST:\n      return { ...state, id: payload.id, showListingError: null };\n    case SHOW_LISTING_ERROR:\n      return { ...state, showListingError: payload };\n\n    case FETCH_REVIEWS_REQUEST:\n      return { ...state, fetchReviewsError: null };\n    case FETCH_REVIEWS_SUCCESS:\n      return { ...state, reviews: payload };\n    case FETCH_REVIEWS_ERROR:\n      return { ...state, fetchReviewsError: payload };\n\n    case FETCH_TIME_SLOTS_REQUEST:\n      return { ...state, fetchTimeSlotsError: null };\n    case FETCH_TIME_SLOTS_SUCCESS:\n      return { ...state, timeSlots: payload };\n    case FETCH_TIME_SLOTS_ERROR:\n      return { ...state, fetchTimeSlotsError: payload };\n\n    case SEND_ENQUIRY_REQUEST:\n      return { ...state, sendEnquiryInProgress: true, sendEnquiryError: null };\n    case SEND_ENQUIRY_SUCCESS:\n      return { ...state, sendEnquiryInProgress: false };\n    case SEND_ENQUIRY_ERROR:\n      return { ...state, sendEnquiryInProgress: false, sendEnquiryError: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default listingPageReducer;\n\n// ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState)),\n});\n\nexport const showListingRequest = id => ({\n  type: SHOW_LISTING_REQUEST,\n  payload: { id },\n});\n\nexport const showListingError = e => ({\n  type: SHOW_LISTING_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const fetchReviewsRequest = () => ({ type: FETCH_REVIEWS_REQUEST });\nexport const fetchReviewsSuccess = reviews => ({ type: FETCH_REVIEWS_SUCCESS, payload: reviews });\nexport const fetchReviewsError = error => ({\n  type: FETCH_REVIEWS_ERROR,\n  error: true,\n  payload: error,\n});\n\nexport const fetchTimeSlotsRequest = () => ({ type: FETCH_TIME_SLOTS_REQUEST });\nexport const fetchTimeSlotsSuccess = timeSlots => ({\n  type: FETCH_TIME_SLOTS_SUCCESS,\n  payload: timeSlots,\n});\nexport const fetchTimeSlotsError = error => ({\n  type: FETCH_TIME_SLOTS_ERROR,\n  error: true,\n  payload: error,\n});\n\nexport const sendEnquiryRequest = () => ({ type: SEND_ENQUIRY_REQUEST });\nexport const sendEnquirySuccess = () => ({ type: SEND_ENQUIRY_SUCCESS });\nexport const sendEnquiryError = e => ({ type: SEND_ENQUIRY_ERROR, error: true, payload: e });\n\n// ================ Thunks ================ //\n\nexport const showListing = (listingId, isOwn = false) => (dispatch, getState, sdk) => {\n  dispatch(showListingRequest(listingId));\n  dispatch(fetchCurrentUser());\n  const params = {\n    id: listingId,\n    include: ['author', 'author.profileImage', 'images'],\n    'fields.image': [\n      // Listing page\n      'variants.landscape-crop',\n      'variants.landscape-crop2x',\n      'variants.landscape-crop4x',\n      'variants.landscape-crop6x',\n\n      // Social media\n      'variants.facebook',\n      'variants.twitter',\n\n      // Image carousel\n      'variants.scaled-small',\n      'variants.scaled-medium',\n      'variants.scaled-large',\n      'variants.scaled-xlarge',\n\n      // Avatars\n      'variants.square-small',\n      'variants.square-small2x',\n    ],\n  };\n\n  const show = isOwn ? sdk.ownListings.show(params) : sdk.listings.show(params);\n\n  return show\n    .then(data => {\n      dispatch(addMarketplaceEntities(data));\n      return data;\n    })\n    .catch(e => {\n      dispatch(showListingError(storableError(e)));\n    });\n};\n\nexport const fetchReviews = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchReviewsRequest());\n  return sdk.reviews\n    .query({\n      listing_id: listingId,\n      state: 'public',\n      include: ['author', 'author.profileImage'],\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\n    })\n    .then(response => {\n      const reviews = denormalisedResponseEntities(response);\n      dispatch(fetchReviewsSuccess(reviews));\n    })\n    .catch(e => {\n      dispatch(fetchReviewsError(storableError(e)));\n    });\n};\n\nconst timeSlotsRequest = params => (dispatch, getState, sdk) => {\n  return sdk.timeslots.query(params).then(response => {\n    return denormalisedResponseEntities(response);\n  });\n};\n\nexport const fetchTimeSlots = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchTimeSlotsRequest);\n\n  // Time slots can be fetched for 90 days at a time,\n  // for at most 180 days from now. If max number of bookable\n  // day exceeds 90, a second request is made.\n\n  const maxTimeSlots = 90;\n  // booking range: today + bookable days -1\n  const bookingRange = config.dayCountAvailableForBooking - 1;\n  const timeSlotsRange = Math.min(bookingRange, maxTimeSlots);\n\n  const start = moment\n    .utc()\n    .startOf('day')\n    .toDate();\n  const end = moment()\n    .utc()\n    .startOf('day')\n    .add(timeSlotsRange, 'days')\n    .toDate();\n  const params = { listingId, start, end };\n\n  return dispatch(timeSlotsRequest(params))\n    .then(timeSlots => {\n      const secondRequest = bookingRange > maxTimeSlots;\n\n      if (secondRequest) {\n        const secondRange = Math.min(maxTimeSlots, bookingRange - maxTimeSlots);\n        const secondParams = {\n          listingId,\n          start: end,\n          end: moment(end)\n            .add(secondRange, 'days')\n            .toDate(),\n        };\n\n        return dispatch(timeSlotsRequest(secondParams)).then(secondBatch => {\n          const combined = timeSlots.concat(secondBatch);\n          dispatch(fetchTimeSlotsSuccess(combined));\n        });\n      } else {\n        dispatch(fetchTimeSlotsSuccess(timeSlots));\n      }\n    })\n    .catch(e => {\n      dispatch(fetchTimeSlotsError(storableError(e)));\n    });\n};\n\nexport const sendEnquiry = (listingId, message) => (dispatch, getState, sdk) => {\n  dispatch(sendEnquiryRequest());\n  const bodyParams = {\n    transition: TRANSITION_ENQUIRE,\n    processAlias: config.bookingProcessAlias,\n    params: { listingId },\n  };\n  return sdk.transactions\n    .initiate(bodyParams)\n    .then(response => {\n      const transactionId = response.data.data.id;\n\n      // Send the message to the created transaction\n      return sdk.messages.send({ transactionId, content: message }).then(() => {\n        dispatch(sendEnquirySuccess());\n        dispatch(fetchCurrentUserHasOrdersSuccess(true));\n        return transactionId;\n      });\n    })\n    .catch(e => {\n      dispatch(sendEnquiryError(storableError(e)));\n      throw e;\n    });\n};\n\nexport const loadData = (params, search) => dispatch => {\n  const listingId = new UUID(params.id);\n\n  const ownListingVariants = [LISTING_PAGE_DRAFT_VARIANT, LISTING_PAGE_PENDING_APPROVAL_VARIANT];\n  if (ownListingVariants.includes(params.variant)) {\n    return dispatch(showListing(listingId, true));\n  }\n\n  if (config.enableAvailability) {\n    return Promise.all([\n      dispatch(showListing(listingId)),\n      dispatch(fetchTimeSlots(listingId)),\n      dispatch(fetchReviews(listingId)),\n    ]);\n  } else {\n    return Promise.all([dispatch(showListing(listingId)), dispatch(fetchReviews(listingId))]);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}