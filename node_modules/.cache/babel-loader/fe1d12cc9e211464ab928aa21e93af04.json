{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCheckboxGroup/FieldCheckboxGroup.example.js\";\nimport React from 'react';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { Button } from '../../components';\nimport FieldCheckboxGroup from './FieldCheckboxGroup';\nimport { requiredFieldArrayCheckbox } from '../../util/validators';\nconst formName = 'Styleguide.FieldCheckboxGroup';\nconst formNameRequired = 'Styleguide.FieldCheckboxGroupRequired';\nconst label = React.createElement(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, \"Amenities\");\nconst commonProps = {\n  label: label,\n  options: [{\n    key: 'towels',\n    label: 'Towels'\n  }, {\n    key: 'bathroom',\n    label: 'Bathroom'\n  }, {\n    key: 'swimming_pool',\n    label: 'Swimming pool'\n  }, {\n    key: 'own_drinks',\n    label: 'Own drinks allowed'\n  }, {\n    key: 'jacuzzi',\n    label: 'Jacuzzi'\n  }, {\n    key: 'audiovisual_entertainment',\n    label: 'Audiovisual entertainment'\n  }, {\n    key: 'barbeque',\n    label: 'Barbeque'\n  }, {\n    key: 'own_food_allowed',\n    label: 'Own food allowed'\n  }],\n  twoColumns: true\n};\n\nconst optionalProps = _objectSpread({\n  name: 'amenities-optional',\n  id: 'amenities-optional'\n}, commonProps);\n\nconst requiredProps = _objectSpread({\n  name: 'amenities-required',\n  id: \"\".concat(formNameRequired, \".amenities-required\")\n}, commonProps, {\n  validate: requiredFieldArrayCheckbox('this is required')\n});\n\nconst tosProps = {\n  name: 'terms-of-service',\n  id: \"\".concat(formNameRequired, \".tos-accepted\"),\n  options: [{\n    key: 'tos',\n    label: 'Terms of Service'\n  }],\n  validate: requiredFieldArrayCheckbox('You need to accept Terms of Service')\n};\n\nconst formComponent = country => props => React.createElement(FinalForm, Object.assign({}, props, {\n  mutators: _objectSpread({}, arrayMutators),\n  render: fieldRenderProps => {\n    const handleSubmit = fieldRenderProps.handleSubmit,\n          invalid = fieldRenderProps.invalid,\n          submitting = fieldRenderProps.submitting,\n          componentProps = fieldRenderProps.componentProps,\n          onChange = fieldRenderProps.onChange;\n    const submitDisabled = invalid || submitting;\n    return React.createElement(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(FormSpy, {\n      onChange: onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(FieldCheckboxGroup, Object.assign({}, componentProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(Button, {\n      style: {\n        marginTop: 24\n      },\n      type: \"submit\",\n      disabled: submitDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Submit\"));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}));\n\nexport const Optional = {\n  component: formComponent(formName),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    initialValues: {\n      [optionalProps.name]: ['jacuzzi', 'towels']\n    },\n    componentProps: optionalProps\n  },\n  group: 'inputs'\n};\nexport const Required = {\n  component: formComponent(formNameRequired),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    componentProps: requiredProps\n  },\n  group: 'inputs'\n};\nexport const ToSAccepted = {\n  component: formComponent(formNameRequired),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    componentProps: tosProps\n  },\n  group: 'inputs'\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCheckboxGroup/FieldCheckboxGroup.example.js"],"names":["React","Form","FinalForm","FormSpy","arrayMutators","Button","FieldCheckboxGroup","requiredFieldArrayCheckbox","formName","formNameRequired","label","commonProps","options","key","twoColumns","optionalProps","name","id","requiredProps","validate","tosProps","formComponent","country","props","fieldRenderProps","handleSubmit","invalid","submitting","componentProps","onChange","submitDisabled","e","preventDefault","marginTop","Optional","component","formState","dirty","console","log","values","onSubmit","initialValues","group","Required","ToSAccepted"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { Button } from '../../components';\nimport FieldCheckboxGroup from './FieldCheckboxGroup';\nimport { requiredFieldArrayCheckbox } from '../../util/validators';\n\nconst formName = 'Styleguide.FieldCheckboxGroup';\nconst formNameRequired = 'Styleguide.FieldCheckboxGroupRequired';\n\nconst label = <h3>Amenities</h3>;\n\nconst commonProps = {\n  label: label,\n  options: [\n    {\n      key: 'towels',\n      label: 'Towels',\n    },\n    {\n      key: 'bathroom',\n      label: 'Bathroom',\n    },\n    {\n      key: 'swimming_pool',\n      label: 'Swimming pool',\n    },\n    {\n      key: 'own_drinks',\n      label: 'Own drinks allowed',\n    },\n    {\n      key: 'jacuzzi',\n      label: 'Jacuzzi',\n    },\n    {\n      key: 'audiovisual_entertainment',\n      label: 'Audiovisual entertainment',\n    },\n    {\n      key: 'barbeque',\n      label: 'Barbeque',\n    },\n    {\n      key: 'own_food_allowed',\n      label: 'Own food allowed',\n    },\n  ],\n  twoColumns: true,\n};\n\nconst optionalProps = {\n  name: 'amenities-optional',\n  id: 'amenities-optional',\n  ...commonProps,\n};\n\nconst requiredProps = {\n  name: 'amenities-required',\n  id: `${formNameRequired}.amenities-required`,\n  ...commonProps,\n  validate: requiredFieldArrayCheckbox('this is required'),\n};\nconst tosProps = {\n  name: 'terms-of-service',\n  id: `${formNameRequired}.tos-accepted`,\n  options: [\n    {\n      key: 'tos',\n      label: 'Terms of Service',\n    },\n  ],\n  validate: requiredFieldArrayCheckbox('You need to accept Terms of Service'),\n};\n\nconst formComponent = country => props => (\n  <FinalForm\n    {...props}\n    mutators={{ ...arrayMutators }}\n    render={fieldRenderProps => {\n      const { handleSubmit, invalid, submitting, componentProps, onChange } = fieldRenderProps;\n\n      const submitDisabled = invalid || submitting;\n\n      return (\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            handleSubmit(e);\n          }}\n        >\n          <FormSpy onChange={onChange} />\n          <FieldCheckboxGroup {...componentProps} />\n\n          <Button style={{ marginTop: 24 }} type=\"submit\" disabled={submitDisabled}>\n            Submit\n          </Button>\n        </form>\n      );\n    }}\n  />\n);\n\nexport const Optional = {\n  component: formComponent(formName),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    initialValues: { [optionalProps.name]: ['jacuzzi', 'towels'] },\n    componentProps: optionalProps,\n  },\n  group: 'inputs',\n};\n\nexport const Required = {\n  component: formComponent(formNameRequired),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    componentProps: requiredProps,\n  },\n  group: 'inputs',\n};\n\nexport const ToSAccepted = {\n  component: formComponent(formNameRequired),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    componentProps: tosProps,\n  },\n  group: 'inputs',\n};\n"]},"metadata":{},"sourceType":"module"}