{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { updatedEntities, denormalisedEntities } from '../../util/data';\nimport { storableError } from '../../util/errors'; // ================ Action types ================ //\n\nexport const FETCH_LISTINGS_REQUEST = 'app/ManageListingsPage/FETCH_LISTINGS_REQUEST';\nexport const FETCH_LISTINGS_SUCCESS = 'app/ManageListingsPage/FETCH_LISTINGS_SUCCESS';\nexport const FETCH_LISTINGS_ERROR = 'app/ManageListingsPage/FETCH_LISTINGS_ERROR';\nexport const OPEN_LISTING_REQUEST = 'app/ManageListingsPage/OPEN_LISTING_REQUEST';\nexport const OPEN_LISTING_SUCCESS = 'app/ManageListingsPage/OPEN_LISTING_SUCCESS';\nexport const OPEN_LISTING_ERROR = 'app/ManageListingsPage/OPEN_LISTING_ERROR';\nexport const CLOSE_LISTING_REQUEST = 'app/ManageListingsPage/CLOSE_LISTING_REQUEST';\nexport const CLOSE_LISTING_SUCCESS = 'app/ManageListingsPage/CLOSE_LISTING_SUCCESS';\nexport const CLOSE_LISTING_ERROR = 'app/ManageListingsPage/CLOSE_LISTING_ERROR';\nexport const ADD_OWN_ENTITIES = 'app/ManageListingsPage/ADD_OWN_ENTITIES'; // ================ Reducer ================ //\n\nconst initialState = {\n  pagination: null,\n  queryParams: null,\n  queryInProgress: false,\n  queryListingsError: null,\n  currentPageResultIds: [],\n  ownEntities: {},\n  openingListing: null,\n  openingListingError: null,\n  closingListing: null,\n  closingListingError: null\n};\n\nconst resultIds = data => data.data.map(l => l.id);\n\nconst merge = (state, sdkResponse) => {\n  const apiResponse = sdkResponse.data;\n  return _objectSpread({}, state, {\n    ownEntities: updatedEntities(_objectSpread({}, state.ownEntities), apiResponse)\n  });\n};\n\nconst updateListingAttributes = (state, listingEntity) => {\n  const oldListing = state.ownEntities.ownListing[listingEntity.id.uuid];\n\n  const updatedListing = _objectSpread({}, oldListing, {\n    attributes: listingEntity.attributes\n  });\n\n  const ownListingEntities = _objectSpread({}, state.ownEntities.ownListing, {\n    [listingEntity.id.uuid]: updatedListing\n  });\n\n  return _objectSpread({}, state, {\n    ownEntities: _objectSpread({}, state.ownEntities, {\n      ownListing: ownListingEntities\n    })\n  });\n};\n\nconst manageListingsPageReducer = (state = initialState, action = {}) => {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case FETCH_LISTINGS_REQUEST:\n      return _objectSpread({}, state, {\n        queryParams: payload.queryParams,\n        queryInProgress: true,\n        queryListingsError: null,\n        currentPageResultIds: []\n      });\n\n    case FETCH_LISTINGS_SUCCESS:\n      return _objectSpread({}, state, {\n        currentPageResultIds: resultIds(payload.data),\n        pagination: payload.data.meta,\n        queryInProgress: false\n      });\n\n    case FETCH_LISTINGS_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return _objectSpread({}, state, {\n        queryInProgress: false,\n        queryListingsError: payload\n      });\n\n    case OPEN_LISTING_REQUEST:\n      return _objectSpread({}, state, {\n        openingListing: payload.listingId,\n        openingListingError: null\n      });\n\n    case OPEN_LISTING_SUCCESS:\n      return _objectSpread({}, updateListingAttributes(state, payload.data), {\n        openingListing: null\n      });\n\n    case OPEN_LISTING_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        console.error(payload);\n        return _objectSpread({}, state, {\n          openingListing: null,\n          openingListingError: {\n            listingId: state.openingListing,\n            error: payload\n          }\n        });\n      }\n\n    case CLOSE_LISTING_REQUEST:\n      return _objectSpread({}, state, {\n        closingListing: payload.listingId,\n        closingListingError: null\n      });\n\n    case CLOSE_LISTING_SUCCESS:\n      return _objectSpread({}, updateListingAttributes(state, payload.data), {\n        closingListing: null\n      });\n\n    case CLOSE_LISTING_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        console.error(payload);\n        return _objectSpread({}, state, {\n          closingListing: null,\n          closingListingError: {\n            listingId: state.closingListing,\n            error: payload\n          }\n        });\n      }\n\n    case ADD_OWN_ENTITIES:\n      return merge(state, payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default manageListingsPageReducer; // ================ Selectors ================ //\n\n/**\n * Get the denormalised own listing entities with the given IDs\n *\n * @param {Object} state the full Redux store\n * @param {Array<UUID>} listingIds listing IDs to select from the store\n */\n\nexport const getOwnListingsById = (state, listingIds) => {\n  const ownEntities = state.ManageListingsPage.ownEntities;\n  const resources = listingIds.map(id => ({\n    id,\n    type: 'ownListing'\n  }));\n  const throwIfNotFound = false;\n  return denormalisedEntities(ownEntities, resources, throwIfNotFound);\n}; // ================ Action creators ================ //\n// This works the same way as addMarketplaceEntities,\n// but we don't want to mix own listings with searched listings\n// (own listings data contains different info - e.g. exact location etc.)\n\nexport const addOwnEntities = sdkResponse => ({\n  type: ADD_OWN_ENTITIES,\n  payload: sdkResponse\n});\nexport const openListingRequest = listingId => ({\n  type: OPEN_LISTING_REQUEST,\n  payload: {\n    listingId\n  }\n});\nexport const openListingSuccess = response => ({\n  type: OPEN_LISTING_SUCCESS,\n  payload: response.data\n});\nexport const openListingError = e => ({\n  type: OPEN_LISTING_ERROR,\n  error: true,\n  payload: e\n});\nexport const closeListingRequest = listingId => ({\n  type: CLOSE_LISTING_REQUEST,\n  payload: {\n    listingId\n  }\n});\nexport const closeListingSuccess = response => ({\n  type: CLOSE_LISTING_SUCCESS,\n  payload: response.data\n});\nexport const closeListingError = e => ({\n  type: CLOSE_LISTING_ERROR,\n  error: true,\n  payload: e\n});\nexport const queryListingsRequest = queryParams => ({\n  type: FETCH_LISTINGS_REQUEST,\n  payload: {\n    queryParams\n  }\n});\nexport const queryListingsSuccess = response => ({\n  type: FETCH_LISTINGS_SUCCESS,\n  payload: {\n    data: response.data\n  }\n});\nexport const queryListingsError = e => ({\n  type: FETCH_LISTINGS_ERROR,\n  error: true,\n  payload: e\n}); // Throwing error for new (loadData may need that info)\n\nexport const queryOwnListings = queryParams => (dispatch, getState, sdk) => {\n  dispatch(queryListingsRequest(queryParams));\n\n  const perPage = queryParams.perPage,\n        rest = _objectWithoutProperties(queryParams, [\"perPage\"]);\n\n  const params = _objectSpread({}, rest, {\n    per_page: perPage\n  });\n\n  return sdk.ownListings.query(params).then(response => {\n    dispatch(addOwnEntities(response));\n    dispatch(queryListingsSuccess(response));\n    return response;\n  }).catch(e => {\n    dispatch(queryListingsError(storableError(e)));\n    throw e;\n  });\n};\nexport const closeListing = listingId => (dispatch, getState, sdk) => {\n  dispatch(closeListingRequest(listingId));\n  return sdk.ownListings.close({\n    id: listingId\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(closeListingSuccess(response));\n    return response;\n  }).catch(e => {\n    dispatch(closeListingError(storableError(e)));\n  });\n};\nexport const openListing = listingId => (dispatch, getState, sdk) => {\n  dispatch(openListingRequest(listingId));\n  return sdk.ownListings.open({\n    id: listingId\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(openListingSuccess(response));\n    return response;\n  }).catch(e => {\n    dispatch(openListingError(storableError(e)));\n  });\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ManageListingsPage/ManageListingsPage.duck.js"],"names":["updatedEntities","denormalisedEntities","storableError","FETCH_LISTINGS_REQUEST","FETCH_LISTINGS_SUCCESS","FETCH_LISTINGS_ERROR","OPEN_LISTING_REQUEST","OPEN_LISTING_SUCCESS","OPEN_LISTING_ERROR","CLOSE_LISTING_REQUEST","CLOSE_LISTING_SUCCESS","CLOSE_LISTING_ERROR","ADD_OWN_ENTITIES","initialState","pagination","queryParams","queryInProgress","queryListingsError","currentPageResultIds","ownEntities","openingListing","openingListingError","closingListing","closingListingError","resultIds","data","map","l","id","merge","state","sdkResponse","apiResponse","updateListingAttributes","listingEntity","oldListing","ownListing","uuid","updatedListing","attributes","ownListingEntities","manageListingsPageReducer","action","type","payload","meta","console","error","listingId","getOwnListingsById","listingIds","ManageListingsPage","resources","throwIfNotFound","addOwnEntities","openListingRequest","openListingSuccess","response","openListingError","e","closeListingRequest","closeListingSuccess","closeListingError","queryListingsRequest","queryListingsSuccess","queryOwnListings","dispatch","getState","sdk","perPage","rest","params","per_page","ownListings","query","then","catch","closeListing","close","expand","openListing","open"],"mappings":"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","sourcesContent":["import { updatedEntities, denormalisedEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\n\n// ================ Action types ================ //\n\nexport const FETCH_LISTINGS_REQUEST = 'app/ManageListingsPage/FETCH_LISTINGS_REQUEST';\nexport const FETCH_LISTINGS_SUCCESS = 'app/ManageListingsPage/FETCH_LISTINGS_SUCCESS';\nexport const FETCH_LISTINGS_ERROR = 'app/ManageListingsPage/FETCH_LISTINGS_ERROR';\n\nexport const OPEN_LISTING_REQUEST = 'app/ManageListingsPage/OPEN_LISTING_REQUEST';\nexport const OPEN_LISTING_SUCCESS = 'app/ManageListingsPage/OPEN_LISTING_SUCCESS';\nexport const OPEN_LISTING_ERROR = 'app/ManageListingsPage/OPEN_LISTING_ERROR';\n\nexport const CLOSE_LISTING_REQUEST = 'app/ManageListingsPage/CLOSE_LISTING_REQUEST';\nexport const CLOSE_LISTING_SUCCESS = 'app/ManageListingsPage/CLOSE_LISTING_SUCCESS';\nexport const CLOSE_LISTING_ERROR = 'app/ManageListingsPage/CLOSE_LISTING_ERROR';\n\nexport const ADD_OWN_ENTITIES = 'app/ManageListingsPage/ADD_OWN_ENTITIES';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  pagination: null,\n  queryParams: null,\n  queryInProgress: false,\n  queryListingsError: null,\n  currentPageResultIds: [],\n  ownEntities: {},\n  openingListing: null,\n  openingListingError: null,\n  closingListing: null,\n  closingListingError: null,\n};\n\nconst resultIds = data => data.data.map(l => l.id);\n\nconst merge = (state, sdkResponse) => {\n  const apiResponse = sdkResponse.data;\n  return {\n    ...state,\n    ownEntities: updatedEntities({ ...state.ownEntities }, apiResponse),\n  };\n};\n\nconst updateListingAttributes = (state, listingEntity) => {\n  const oldListing = state.ownEntities.ownListing[listingEntity.id.uuid];\n  const updatedListing = { ...oldListing, attributes: listingEntity.attributes };\n  const ownListingEntities = {\n    ...state.ownEntities.ownListing,\n    [listingEntity.id.uuid]: updatedListing,\n  };\n  return {\n    ...state,\n    ownEntities: { ...state.ownEntities, ownListing: ownListingEntities },\n  };\n};\n\nconst manageListingsPageReducer = (state = initialState, action = {}) => {\n  const { type, payload } = action;\n  switch (type) {\n    case FETCH_LISTINGS_REQUEST:\n      return {\n        ...state,\n        queryParams: payload.queryParams,\n        queryInProgress: true,\n        queryListingsError: null,\n        currentPageResultIds: [],\n      };\n    case FETCH_LISTINGS_SUCCESS:\n      return {\n        ...state,\n        currentPageResultIds: resultIds(payload.data),\n        pagination: payload.data.meta,\n        queryInProgress: false,\n      };\n    case FETCH_LISTINGS_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return { ...state, queryInProgress: false, queryListingsError: payload };\n\n    case OPEN_LISTING_REQUEST:\n      return {\n        ...state,\n        openingListing: payload.listingId,\n        openingListingError: null,\n      };\n    case OPEN_LISTING_SUCCESS:\n      return {\n        ...updateListingAttributes(state, payload.data),\n        openingListing: null,\n      };\n    case OPEN_LISTING_ERROR: {\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return {\n        ...state,\n        openingListing: null,\n        openingListingError: {\n          listingId: state.openingListing,\n          error: payload,\n        },\n      };\n    }\n\n    case CLOSE_LISTING_REQUEST:\n      return {\n        ...state,\n        closingListing: payload.listingId,\n        closingListingError: null,\n      };\n    case CLOSE_LISTING_SUCCESS:\n      return {\n        ...updateListingAttributes(state, payload.data),\n        closingListing: null,\n      };\n    case CLOSE_LISTING_ERROR: {\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return {\n        ...state,\n        closingListing: null,\n        closingListingError: {\n          listingId: state.closingListing,\n          error: payload,\n        },\n      };\n    }\n\n    case ADD_OWN_ENTITIES:\n      return merge(state, payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default manageListingsPageReducer;\n\n// ================ Selectors ================ //\n\n/**\n * Get the denormalised own listing entities with the given IDs\n *\n * @param {Object} state the full Redux store\n * @param {Array<UUID>} listingIds listing IDs to select from the store\n */\nexport const getOwnListingsById = (state, listingIds) => {\n  const { ownEntities } = state.ManageListingsPage;\n  const resources = listingIds.map(id => ({\n    id,\n    type: 'ownListing',\n  }));\n  const throwIfNotFound = false;\n  return denormalisedEntities(ownEntities, resources, throwIfNotFound);\n};\n\n// ================ Action creators ================ //\n\n// This works the same way as addMarketplaceEntities,\n// but we don't want to mix own listings with searched listings\n// (own listings data contains different info - e.g. exact location etc.)\nexport const addOwnEntities = sdkResponse => ({\n  type: ADD_OWN_ENTITIES,\n  payload: sdkResponse,\n});\n\nexport const openListingRequest = listingId => ({\n  type: OPEN_LISTING_REQUEST,\n  payload: { listingId },\n});\n\nexport const openListingSuccess = response => ({\n  type: OPEN_LISTING_SUCCESS,\n  payload: response.data,\n});\n\nexport const openListingError = e => ({\n  type: OPEN_LISTING_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const closeListingRequest = listingId => ({\n  type: CLOSE_LISTING_REQUEST,\n  payload: { listingId },\n});\n\nexport const closeListingSuccess = response => ({\n  type: CLOSE_LISTING_SUCCESS,\n  payload: response.data,\n});\n\nexport const closeListingError = e => ({\n  type: CLOSE_LISTING_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const queryListingsRequest = queryParams => ({\n  type: FETCH_LISTINGS_REQUEST,\n  payload: { queryParams },\n});\n\nexport const queryListingsSuccess = response => ({\n  type: FETCH_LISTINGS_SUCCESS,\n  payload: { data: response.data },\n});\n\nexport const queryListingsError = e => ({\n  type: FETCH_LISTINGS_ERROR,\n  error: true,\n  payload: e,\n});\n\n// Throwing error for new (loadData may need that info)\nexport const queryOwnListings = queryParams => (dispatch, getState, sdk) => {\n  dispatch(queryListingsRequest(queryParams));\n\n  const { perPage, ...rest } = queryParams;\n  const params = { ...rest, per_page: perPage };\n\n  return sdk.ownListings\n    .query(params)\n    .then(response => {\n      dispatch(addOwnEntities(response));\n      dispatch(queryListingsSuccess(response));\n      return response;\n    })\n    .catch(e => {\n      dispatch(queryListingsError(storableError(e)));\n      throw e;\n    });\n};\n\nexport const closeListing = listingId => (dispatch, getState, sdk) => {\n  dispatch(closeListingRequest(listingId));\n\n  return sdk.ownListings\n    .close({ id: listingId }, { expand: true })\n    .then(response => {\n      dispatch(closeListingSuccess(response));\n      return response;\n    })\n    .catch(e => {\n      dispatch(closeListingError(storableError(e)));\n    });\n};\n\nexport const openListing = listingId => (dispatch, getState, sdk) => {\n  dispatch(openListingRequest(listingId));\n\n  return sdk.ownListings\n    .open({ id: listingId }, { expand: true })\n    .then(response => {\n      dispatch(openListingSuccess(response));\n      return response;\n    })\n    .catch(e => {\n      dispatch(openListingError(storableError(e)));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}