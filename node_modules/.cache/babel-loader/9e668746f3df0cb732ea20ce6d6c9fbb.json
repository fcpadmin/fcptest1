{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PasswordResetForm/PasswordResetForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { Form, PrimaryButton, FieldTextInput } from '../../components';\nimport * as validators from '../../util/validators';\nimport css from './PasswordResetForm.css';\n\nconst PasswordResetFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const rootClassName = fieldRenderProps.rootClassName,\n          className = fieldRenderProps.className,\n          formId = fieldRenderProps.formId,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          inProgress = fieldRenderProps.inProgress,\n          intl = fieldRenderProps.intl,\n          invalid = fieldRenderProps.invalid; // password\n\n    const passwordLabel = intl.formatMessage({\n      id: 'PasswordResetForm.passwordLabel'\n    });\n    const passwordPlaceholder = intl.formatMessage({\n      id: 'PasswordResetForm.passwordPlaceholder'\n    });\n    const passwordRequiredMessage = intl.formatMessage({\n      id: 'PasswordResetForm.passwordRequired'\n    });\n    const passwordMinLengthMessage = intl.formatMessage({\n      id: 'PasswordResetForm.passwordTooShort'\n    }, {\n      minLength: validators.PASSWORD_MIN_LENGTH\n    });\n    const passwordMaxLengthMessage = intl.formatMessage({\n      id: 'PasswordResetForm.passwordTooLong'\n    }, {\n      maxLength: validators.PASSWORD_MAX_LENGTH\n    });\n    const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n    const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n    const passwordMaxLength = validators.maxLength(passwordMaxLengthMessage, validators.PASSWORD_MAX_LENGTH);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n    return React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(FieldTextInput, {\n      className: css.password,\n      type: \"password\",\n      id: formId ? \"\".concat(formId, \".password\") : 'password',\n      name: \"password\",\n      autoComplete: \"new-password\",\n      label: passwordLabel,\n      placeholder: passwordPlaceholder,\n      validate: validators.composeValidators(passwordRequired, passwordMinLength, passwordMaxLength),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetForm.submitButtonText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}));\n\nPasswordResetFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  formId: null\n};\nconst string = PropTypes.string,\n      bool = PropTypes.bool;\nPasswordResetFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  formId: string\n};\nconst PasswordResetForm = compose(injectIntl)(PasswordResetFormComponent);\nPasswordResetForm.displayName = 'PasswordResetForm';\nexport default PasswordResetForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PasswordResetForm/PasswordResetForm.js"],"names":["React","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","classNames","PrimaryButton","FieldTextInput","validators","css","PasswordResetFormComponent","props","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","intl","invalid","passwordLabel","formatMessage","id","passwordPlaceholder","passwordRequiredMessage","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMaxLengthMessage","maxLength","PASSWORD_MAX_LENGTH","passwordRequired","requiredStringNoTrim","passwordMinLength","passwordMaxLength","classes","root","submitInProgress","submitDisabled","password","composeValidators","defaultProps","string","bool","propTypes","isRequired","PasswordResetForm","displayName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,YAAxD;AACA,SAASC,IAAI,IAAIC,SAAjB,QAAkC,kBAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASF,IAAT,EAAeG,aAAf,EAA8BC,cAA9B,QAAoD,kBAApD;AACA,OAAO,KAAKC,UAAZ,MAA4B,uBAA5B;AAEA,OAAOC,GAAP,MAAgB,yBAAhB;;AAEA,MAAMC,0BAA0B,GAAGC,KAAK,IACtC,oBAAC,SAAD,oBACMA,KADN;AAEE,EAAA,MAAM,EAAEC,gBAAgB,IAAI;AAAA,UAExBC,aAFwB,GAStBD,gBATsB,CAExBC,aAFwB;AAAA,UAGxBC,SAHwB,GAStBF,gBATsB,CAGxBE,SAHwB;AAAA,UAIxBC,MAJwB,GAStBH,gBATsB,CAIxBG,MAJwB;AAAA,UAKxBC,YALwB,GAStBJ,gBATsB,CAKxBI,YALwB;AAAA,UAMxBC,UANwB,GAStBL,gBATsB,CAMxBK,UANwB;AAAA,UAOxBC,IAPwB,GAStBN,gBATsB,CAOxBM,IAPwB;AAAA,UAQxBC,OARwB,GAStBP,gBATsB,CAQxBO,OARwB,EAW1B;;AACA,UAAMC,aAAa,GAAGF,IAAI,CAACG,aAAL,CAAmB;AACvCC,MAAAA,EAAE,EAAE;AADmC,KAAnB,CAAtB;AAGA,UAAMC,mBAAmB,GAAGL,IAAI,CAACG,aAAL,CAAmB;AAC7CC,MAAAA,EAAE,EAAE;AADyC,KAAnB,CAA5B;AAGA,UAAME,uBAAuB,GAAGN,IAAI,CAACG,aAAL,CAAmB;AACjDC,MAAAA,EAAE,EAAE;AAD6C,KAAnB,CAAhC;AAGA,UAAMG,wBAAwB,GAAGP,IAAI,CAACG,aAAL,CAC/B;AACEC,MAAAA,EAAE,EAAE;AADN,KAD+B,EAI/B;AACEI,MAAAA,SAAS,EAAElB,UAAU,CAACmB;AADxB,KAJ+B,CAAjC;AAQA,UAAMC,wBAAwB,GAAGV,IAAI,CAACG,aAAL,CAC/B;AACEC,MAAAA,EAAE,EAAE;AADN,KAD+B,EAI/B;AACEO,MAAAA,SAAS,EAAErB,UAAU,CAACsB;AADxB,KAJ+B,CAAjC;AAQA,UAAMC,gBAAgB,GAAGvB,UAAU,CAACwB,oBAAX,CAAgCR,uBAAhC,CAAzB;AACA,UAAMS,iBAAiB,GAAGzB,UAAU,CAACkB,SAAX,CACxBD,wBADwB,EAExBjB,UAAU,CAACmB,mBAFa,CAA1B;AAIA,UAAMO,iBAAiB,GAAG1B,UAAU,CAACqB,SAAX,CACxBD,wBADwB,EAExBpB,UAAU,CAACsB,mBAFa,CAA1B;AAKA,UAAMK,OAAO,GAAG9B,UAAU,CAACQ,aAAa,IAAIJ,GAAG,CAAC2B,IAAtB,EAA4BtB,SAA5B,CAA1B;AAEA,UAAMuB,gBAAgB,GAAGpB,UAAzB;AACA,UAAMqB,cAAc,GAAGnB,OAAO,IAAIkB,gBAAlC;AAEA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEF,OAAjB;AAA0B,MAAA,QAAQ,EAAEnB,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,SAAS,EAAEP,GAAG,CAAC8B,QADjB;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,EAAE,EAAExB,MAAM,aAAMA,MAAN,iBAA0B,UAHtC;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,YAAY,EAAC,cALf;AAME,MAAA,KAAK,EAAEK,aANT;AAOE,MAAA,WAAW,EAAEG,mBAPf;AAQE,MAAA,QAAQ,EAAEf,UAAU,CAACgC,iBAAX,CACRT,gBADQ,EAERE,iBAFQ,EAGRC,iBAHQ,CARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAeE,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAC,QAApB;AAA6B,MAAA,UAAU,EAAEG,gBAAzC;AAA2D,MAAA,QAAQ,EAAEC,cAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,oCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAfF,CADF;AAqBD,GA3EH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAgFA5B,0BAA0B,CAAC+B,YAA3B,GAA0C;AACxC5B,EAAAA,aAAa,EAAE,IADyB;AAExCC,EAAAA,SAAS,EAAE,IAF6B;AAGxCG,EAAAA,UAAU,EAAE,KAH4B;AAIxCF,EAAAA,MAAM,EAAE;AAJgC,CAA1C;MAOQ2B,M,GAAiB5C,S,CAAjB4C,M;MAAQC,I,GAAS7C,S,CAAT6C,I;AAEhBjC,0BAA0B,CAACkC,SAA3B,GAAuC;AACrC/B,EAAAA,aAAa,EAAE6B,MADsB;AAErC5B,EAAAA,SAAS,EAAE4B,MAF0B;AAGrCzB,EAAAA,UAAU,EAAE0B,IAHyB;AAIrCzB,EAAAA,IAAI,EAAEhB,SAAS,CAAC2C,UAJqB;AAKrC9B,EAAAA,MAAM,EAAE2B;AAL6B,CAAvC;AAQA,MAAMI,iBAAiB,GAAG/C,OAAO,CAACE,UAAD,CAAP,CAAoBS,0BAApB,CAA1B;AACAoC,iBAAiB,CAACC,WAAlB,GAAgC,mBAAhC;AAEA,eAAeD,iBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { Form, PrimaryButton, FieldTextInput } from '../../components';\nimport * as validators from '../../util/validators';\n\nimport css from './PasswordResetForm.css';\n\nconst PasswordResetFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        rootClassName,\n        className,\n        formId,\n        handleSubmit,\n        inProgress,\n        intl,\n        invalid,\n      } = fieldRenderProps;\n\n      // password\n      const passwordLabel = intl.formatMessage({\n        id: 'PasswordResetForm.passwordLabel',\n      });\n      const passwordPlaceholder = intl.formatMessage({\n        id: 'PasswordResetForm.passwordPlaceholder',\n      });\n      const passwordRequiredMessage = intl.formatMessage({\n        id: 'PasswordResetForm.passwordRequired',\n      });\n      const passwordMinLengthMessage = intl.formatMessage(\n        {\n          id: 'PasswordResetForm.passwordTooShort',\n        },\n        {\n          minLength: validators.PASSWORD_MIN_LENGTH,\n        }\n      );\n      const passwordMaxLengthMessage = intl.formatMessage(\n        {\n          id: 'PasswordResetForm.passwordTooLong',\n        },\n        {\n          maxLength: validators.PASSWORD_MAX_LENGTH,\n        }\n      );\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n      const passwordMinLength = validators.minLength(\n        passwordMinLengthMessage,\n        validators.PASSWORD_MIN_LENGTH\n      );\n      const passwordMaxLength = validators.maxLength(\n        passwordMaxLengthMessage,\n        validators.PASSWORD_MAX_LENGTH\n      );\n\n      const classes = classNames(rootClassName || css.root, className);\n\n      const submitInProgress = inProgress;\n      const submitDisabled = invalid || submitInProgress;\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          <FieldTextInput\n            className={css.password}\n            type=\"password\"\n            id={formId ? `${formId}.password` : 'password'}\n            name=\"password\"\n            autoComplete=\"new-password\"\n            label={passwordLabel}\n            placeholder={passwordPlaceholder}\n            validate={validators.composeValidators(\n              passwordRequired,\n              passwordMinLength,\n              passwordMaxLength\n            )}\n          />\n          <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\n            <FormattedMessage id=\"PasswordResetForm.submitButtonText\" />\n          </PrimaryButton>\n        </Form>\n      );\n    }}\n  />\n);\n\nPasswordResetFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  formId: null,\n};\n\nconst { string, bool } = PropTypes;\n\nPasswordResetFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  formId: string,\n};\n\nconst PasswordResetForm = compose(injectIntl)(PasswordResetFormComponent);\nPasswordResetForm.displayName = 'PasswordResetForm';\n\nexport default PasswordResetForm;\n"]},"metadata":{},"sourceType":"module"}