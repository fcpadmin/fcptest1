{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ProfileSettingsPage/ProfileSettingsPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Page, UserNav, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer, NamedLink } from '../../components';\nimport { ProfileSettingsForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\nimport { updateProfile, uploadImage } from './ProfileSettingsPage.duck';\nimport css from './ProfileSettingsPage.css';\n\nconst onImageUploadHandler = (values, fn) => {\n  const id = values.id,\n        imageId = values.imageId,\n        file = values.file;\n\n  if (file) {\n    fn({\n      id,\n      imageId,\n      file\n    });\n  }\n};\n\nexport class ProfileSettingsPageComponent extends Component {\n  render() {\n    const _this$props = this.props,\n          currentUser = _this$props.currentUser,\n          image = _this$props.image,\n          onImageUpload = _this$props.onImageUpload,\n          onUpdateProfile = _this$props.onUpdateProfile,\n          scrollingDisabled = _this$props.scrollingDisabled,\n          updateInProgress = _this$props.updateInProgress,\n          updateProfileError = _this$props.updateProfileError,\n          uploadImageError = _this$props.uploadImageError,\n          uploadInProgress = _this$props.uploadInProgress,\n          intl = _this$props.intl;\n\n    const handleSubmit = values => {\n      const firstName = values.firstName,\n            lastName = values.lastName,\n            rawBio = values.bio; // Ensure that the optional bio is a string\n\n      const bio = rawBio || '';\n      const profile = {\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        bio\n      };\n      const uploadedImage = this.props.image; // Update profileImage only if file system has been accessed\n\n      const updatedValues = uploadedImage && uploadedImage.imageId && uploadedImage.file ? _objectSpread({}, profile, {\n        profileImageId: uploadedImage.imageId\n      }) : profile;\n      onUpdateProfile(updatedValues);\n    };\n\n    const user = ensureCurrentUser(currentUser);\n    const _user$attributes$prof = user.attributes.profile,\n          firstName = _user$attributes$prof.firstName,\n          lastName = _user$attributes$prof.lastName,\n          bio = _user$attributes$prof.bio;\n    const profileImageId = user.profileImage ? user.profileImage.id : null;\n    const profileImage = image || {\n      imageId: profileImageId\n    };\n    const profileSettingsForm = user.id ? React.createElement(ProfileSettingsForm, {\n      className: css.form,\n      currentUser: currentUser,\n      initialValues: {\n        firstName,\n        lastName,\n        bio,\n        profileImage: user.profileImage\n      },\n      profileImage: profileImage,\n      onImageUpload: e => onImageUploadHandler(e, onImageUpload),\n      uploadInProgress: uploadInProgress,\n      updateInProgress: updateInProgress,\n      uploadImageError: uploadImageError,\n      updateProfileError: updateProfileError,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }) : null;\n    const title = intl.formatMessage({\n      id: 'ProfileSettingsPage.title'\n    });\n    return React.createElement(Page, {\n      className: css.root,\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(LayoutSingleColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(LayoutWrapperTopbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(TopbarContainer, {\n      currentPage: \"ProfileSettingsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(UserNav, {\n      selectedPageName: \"ProfileSettingsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(LayoutWrapperMain, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.headingContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: css.heading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfileSettingsPage.heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), user.id ? React.createElement(NamedLink, {\n      className: css.profileLink,\n      name: \"ProfilePage\",\n      params: {\n        id: user.id.uuid\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfileSettingsPage.viewProfileLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })) : null), profileSettingsForm)), React.createElement(LayoutWrapperFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))));\n  }\n\n}\nProfileSettingsPageComponent.defaultProps = {\n  currentUser: null,\n  uploadImageError: null,\n  updateProfileError: null,\n  image: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      object = PropTypes.object,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nProfileSettingsPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  image: shape({\n    id: string,\n    imageId: propTypes.uuid,\n    file: object,\n    uploadedImage: propTypes.image\n  }),\n  onImageUpload: func.isRequired,\n  onUpdateProfile: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  updateProfileError: propTypes.error,\n  uploadImageError: propTypes.error,\n  uploadInProgress: bool.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const currentUser = state.user.currentUser;\n  const _state$ProfileSetting = state.ProfileSettingsPage,\n        image = _state$ProfileSetting.image,\n        uploadImageError = _state$ProfileSetting.uploadImageError,\n        uploadInProgress = _state$ProfileSetting.uploadInProgress,\n        updateInProgress = _state$ProfileSetting.updateInProgress,\n        updateProfileError = _state$ProfileSetting.updateProfileError;\n  return {\n    currentUser,\n    image,\n    scrollingDisabled: isScrollingDisabled(state),\n    updateInProgress,\n    updateProfileError,\n    uploadImageError,\n    uploadInProgress\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onImageUpload: data => dispatch(uploadImage(data)),\n  onUpdateProfile: data => dispatch(updateProfile(data))\n});\n\nconst ProfileSettingsPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(ProfileSettingsPageComponent);\nexport default ProfileSettingsPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ProfileSettingsPage/ProfileSettingsPage.js"],"names":["React","Component","PropTypes","compose","connect","injectIntl","intlShape","FormattedMessage","propTypes","ensureCurrentUser","isScrollingDisabled","Page","UserNav","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","NamedLink","ProfileSettingsForm","TopbarContainer","updateProfile","uploadImage","css","onImageUploadHandler","values","fn","id","imageId","file","ProfileSettingsPageComponent","render","props","currentUser","image","onImageUpload","onUpdateProfile","scrollingDisabled","updateInProgress","updateProfileError","uploadImageError","uploadInProgress","intl","handleSubmit","firstName","lastName","rawBio","bio","profile","trim","uploadedImage","updatedValues","profileImageId","user","attributes","profileImage","profileSettingsForm","form","e","title","formatMessage","root","content","headingContainer","heading","profileLink","uuid","defaultProps","bool","func","object","shape","string","isRequired","error","mapStateToProps","state","ProfileSettingsPage","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  Page,\n  UserNav,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n  NamedLink,\n} from '../../components';\nimport { ProfileSettingsForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\n\nimport { updateProfile, uploadImage } from './ProfileSettingsPage.duck';\nimport css from './ProfileSettingsPage.css';\n\nconst onImageUploadHandler = (values, fn) => {\n  const { id, imageId, file } = values;\n  if (file) {\n    fn({ id, imageId, file });\n  }\n};\n\nexport class ProfileSettingsPageComponent extends Component {\n  render() {\n    const {\n      currentUser,\n      image,\n      onImageUpload,\n      onUpdateProfile,\n      scrollingDisabled,\n      updateInProgress,\n      updateProfileError,\n      uploadImageError,\n      uploadInProgress,\n      intl,\n    } = this.props;\n\n    const handleSubmit = values => {\n      const { firstName, lastName, bio: rawBio } = values;\n\n      // Ensure that the optional bio is a string\n      const bio = rawBio || '';\n\n      const profile = {\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        bio,\n      };\n      const uploadedImage = this.props.image;\n\n      // Update profileImage only if file system has been accessed\n      const updatedValues =\n        uploadedImage && uploadedImage.imageId && uploadedImage.file\n          ? { ...profile, profileImageId: uploadedImage.imageId }\n          : profile;\n\n      onUpdateProfile(updatedValues);\n    };\n\n    const user = ensureCurrentUser(currentUser);\n    const { firstName, lastName, bio } = user.attributes.profile;\n    const profileImageId = user.profileImage ? user.profileImage.id : null;\n    const profileImage = image || { imageId: profileImageId };\n\n    const profileSettingsForm = user.id ? (\n      <ProfileSettingsForm\n        className={css.form}\n        currentUser={currentUser}\n        initialValues={{ firstName, lastName, bio, profileImage: user.profileImage }}\n        profileImage={profileImage}\n        onImageUpload={e => onImageUploadHandler(e, onImageUpload)}\n        uploadInProgress={uploadInProgress}\n        updateInProgress={updateInProgress}\n        uploadImageError={uploadImageError}\n        updateProfileError={updateProfileError}\n        onSubmit={handleSubmit}\n      />\n    ) : null;\n\n    const title = intl.formatMessage({ id: 'ProfileSettingsPage.title' });\n\n    return (\n      <Page className={css.root} title={title} scrollingDisabled={scrollingDisabled}>\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer currentPage=\"ProfileSettingsPage\" />\n            <UserNav selectedPageName=\"ProfileSettingsPage\" />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain>\n            <div className={css.content}>\n              <div className={css.headingContainer}>\n                <h1 className={css.heading}>\n                  <FormattedMessage id=\"ProfileSettingsPage.heading\" />\n                </h1>\n                {user.id ? (\n                  <NamedLink\n                    className={css.profileLink}\n                    name=\"ProfilePage\"\n                    params={{ id: user.id.uuid }}\n                  >\n                    <FormattedMessage id=\"ProfileSettingsPage.viewProfileLink\" />\n                  </NamedLink>\n                ) : null}\n              </div>\n              {profileSettingsForm}\n            </div>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nProfileSettingsPageComponent.defaultProps = {\n  currentUser: null,\n  uploadImageError: null,\n  updateProfileError: null,\n  image: null,\n};\n\nconst { bool, func, object, shape, string } = PropTypes;\n\nProfileSettingsPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  image: shape({\n    id: string,\n    imageId: propTypes.uuid,\n    file: object,\n    uploadedImage: propTypes.image,\n  }),\n  onImageUpload: func.isRequired,\n  onUpdateProfile: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  updateProfileError: propTypes.error,\n  uploadImageError: propTypes.error,\n  uploadInProgress: bool.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n  const {\n    image,\n    uploadImageError,\n    uploadInProgress,\n    updateInProgress,\n    updateProfileError,\n  } = state.ProfileSettingsPage;\n  return {\n    currentUser,\n    image,\n    scrollingDisabled: isScrollingDisabled(state),\n    updateInProgress,\n    updateProfileError,\n    uploadImageError,\n    uploadInProgress,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onImageUpload: data => dispatch(uploadImage(data)),\n  onUpdateProfile: data => dispatch(updateProfile(data)),\n});\n\nconst ProfileSettingsPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(ProfileSettingsPageComponent);\n\nexport default ProfileSettingsPage;\n"]},"metadata":{},"sourceType":"module"}