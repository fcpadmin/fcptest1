{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PayoutDetailsForm/PayoutDetailsBankDetails.js\";\nimport React from 'react';\nimport { bool, string } from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport * as validators from '../../util/validators';\nimport { StripeBankAccountTokenInputField } from '../../components';\nimport { stripeCountryConfigs } from './PayoutDetailsForm';\nimport css from './PayoutDetailsForm.css';\n\nconst countryCurrency = countryCode => {\n  const country = stripeCountryConfigs(countryCode);\n  return country.currency;\n};\n\nconst PayoutDetailsBankDetails = props => {\n  const country = props.country,\n        disabled = props.disabled,\n        fieldId = props.fieldId; // StripeBankAccountTokenInputField handles the error messages\n  // internally, we just have to make sure we require a valid token\n  // out of the field. Therefore the empty validation message.\n\n  const bankAccountRequired = validators.required(' ');\n  return React.createElement(\"div\", {\n    className: css.sectionContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: css.subTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"PayoutDetailsForm.bankDetails\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), React.createElement(StripeBankAccountTokenInputField, {\n    className: css.bankDetailsStripeField,\n    disabled: disabled,\n    name: \"\".concat(fieldId, \".bankAccountToken\"),\n    formName: \"PayoutDetailsForm\",\n    country: country,\n    currency: countryCurrency(country),\n    validate: bankAccountRequired,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nPayoutDetailsBankDetails.defaultProps = {\n  country: null,\n  disabled: false,\n  fieldId: null\n};\nPayoutDetailsBankDetails.propTypes = {\n  country: string,\n  disabled: bool,\n  fieldId: string\n};\nexport default PayoutDetailsBankDetails;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PayoutDetailsForm/PayoutDetailsBankDetails.js"],"names":["React","bool","string","FormattedMessage","validators","StripeBankAccountTokenInputField","stripeCountryConfigs","css","countryCurrency","countryCode","country","currency","PayoutDetailsBankDetails","props","disabled","fieldId","bankAccountRequired","required","sectionContainer","subTitle","bankDetailsStripeField","defaultProps","propTypes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,YAA7B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAO,KAAKC,UAAZ,MAA4B,uBAA5B;AACA,SAASC,gCAAT,QAAiD,kBAAjD;AAEA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,GAAP,MAAgB,yBAAhB;;AAEA,MAAMC,eAAe,GAAGC,WAAW,IAAI;AACrC,QAAMC,OAAO,GAAGJ,oBAAoB,CAACG,WAAD,CAApC;AACA,SAAOC,OAAO,CAACC,QAAf;AACD,CAHD;;AAKA,MAAMC,wBAAwB,GAAGC,KAAK,IAAI;AAAA,QAChCH,OADgC,GACDG,KADC,CAChCH,OADgC;AAAA,QACvBI,QADuB,GACDD,KADC,CACvBC,QADuB;AAAA,QACbC,OADa,GACDF,KADC,CACbE,OADa,EAGxC;AACA;AACA;;AACA,QAAMC,mBAAmB,GAAGZ,UAAU,CAACa,QAAX,CAAoB,GAApB,CAA5B;AAEA,SACE;AAAK,IAAA,SAAS,EAAEV,GAAG,CAACW,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAEX,GAAG,CAACY,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,+BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,gCAAD;AACE,IAAA,SAAS,EAAEZ,GAAG,CAACa,sBADjB;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,IAAI,YAAKC,OAAL,sBAHN;AAIE,IAAA,QAAQ,EAAC,mBAJX;AAKE,IAAA,OAAO,EAAEL,OALX;AAME,IAAA,QAAQ,EAAEF,eAAe,CAACE,OAAD,CAN3B;AAOE,IAAA,QAAQ,EAAEM,mBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAgBD,CAxBD;;AAyBAJ,wBAAwB,CAACS,YAAzB,GAAwC;AACtCX,EAAAA,OAAO,EAAE,IAD6B;AAEtCI,EAAAA,QAAQ,EAAE,KAF4B;AAGtCC,EAAAA,OAAO,EAAE;AAH6B,CAAxC;AAMAH,wBAAwB,CAACU,SAAzB,GAAqC;AACnCZ,EAAAA,OAAO,EAAER,MAD0B;AAEnCY,EAAAA,QAAQ,EAAEb,IAFyB;AAGnCc,EAAAA,OAAO,EAAEb;AAH0B,CAArC;AAMA,eAAeU,wBAAf","sourcesContent":["import React from 'react';\nimport { bool, string } from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport * as validators from '../../util/validators';\nimport { StripeBankAccountTokenInputField } from '../../components';\n\nimport { stripeCountryConfigs } from './PayoutDetailsForm';\nimport css from './PayoutDetailsForm.css';\n\nconst countryCurrency = countryCode => {\n  const country = stripeCountryConfigs(countryCode);\n  return country.currency;\n};\n\nconst PayoutDetailsBankDetails = props => {\n  const { country, disabled, fieldId } = props;\n\n  // StripeBankAccountTokenInputField handles the error messages\n  // internally, we just have to make sure we require a valid token\n  // out of the field. Therefore the empty validation message.\n  const bankAccountRequired = validators.required(' ');\n\n  return (\n    <div className={css.sectionContainer}>\n      <h3 className={css.subTitle}>\n        <FormattedMessage id=\"PayoutDetailsForm.bankDetails\" />\n      </h3>\n      <StripeBankAccountTokenInputField\n        className={css.bankDetailsStripeField}\n        disabled={disabled}\n        name={`${fieldId}.bankAccountToken`}\n        formName=\"PayoutDetailsForm\"\n        country={country}\n        currency={countryCurrency(country)}\n        validate={bankAccountRequired}\n      />\n    </div>\n  );\n};\nPayoutDetailsBankDetails.defaultProps = {\n  country: null,\n  disabled: false,\n  fieldId: null,\n};\n\nPayoutDetailsBankDetails.propTypes = {\n  country: string,\n  disabled: bool,\n  fieldId: string,\n};\n\nexport default PayoutDetailsBankDetails;\n"]},"metadata":{},"sourceType":"module"}