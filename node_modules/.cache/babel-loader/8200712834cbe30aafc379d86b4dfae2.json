{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/ReviewForm/ReviewForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { isTransactionsTransitionAlreadyReviewed } from '../../util/errors';\nimport { propTypes } from '../../util/types';\nimport { required } from '../../util/validators';\nimport { FieldReviewRating, Form, PrimaryButton, FieldTextInput } from '../../components';\nimport css from './ReviewForm.css';\n\nconst ReviewFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const className = fieldRenderProps.className,\n          rootClassName = fieldRenderProps.rootClassName,\n          disabled = fieldRenderProps.disabled,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          intl = fieldRenderProps.intl,\n          formId = fieldRenderProps.formId,\n          invalid = fieldRenderProps.invalid,\n          reviewSent = fieldRenderProps.reviewSent,\n          sendReviewError = fieldRenderProps.sendReviewError,\n          sendReviewInProgress = fieldRenderProps.sendReviewInProgress;\n    const reviewRating = intl.formatMessage({\n      id: 'ReviewForm.reviewRatingLabel'\n    });\n    const reviewRatingRequiredMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewRatingRequired'\n    });\n    const reviewContent = intl.formatMessage({\n      id: 'ReviewForm.reviewContentLabel'\n    });\n    const reviewContentPlaceholderMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewContentPlaceholder'\n    });\n    const reviewContentRequiredMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewContentRequired'\n    });\n    const errorMessage = isTransactionsTransitionAlreadyReviewed(sendReviewError) ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ReviewForm.reviewSubmitAlreadySent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })) : React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ReviewForm.reviewSubmitFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n    const errorArea = sendReviewError ? errorMessage : React.createElement(\"p\", {\n      className: css.errorPlaceholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n    const reviewSubmitMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewSubmit'\n    });\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = sendReviewInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n    return React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(FieldReviewRating, {\n      className: css.reviewRating,\n      id: formId ? \"\".concat(formId, \".starRating\") : 'starRating',\n      name: \"reviewRating\",\n      label: reviewRating,\n      validate: required(reviewRatingRequiredMessage),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(FieldTextInput, {\n      className: css.reviewContent,\n      type: \"textarea\",\n      id: formId ? \"\".concat(formId, \".reviewContent\") : 'reviewContent',\n      name: \"reviewContent\",\n      label: reviewContent,\n      placeholder: reviewContentPlaceholderMessage,\n      validate: required(reviewContentRequiredMessage),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), errorArea, React.createElement(PrimaryButton, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: reviewSent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, reviewSubmitMessage));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}));\n\nReviewFormComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  sendReviewError: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      string = PropTypes.string;\nReviewFormComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  reviewSent: bool.isRequired,\n  sendReviewError: propTypes.error,\n  sendReviewInProgress: bool.isRequired\n};\nconst ReviewForm = compose(injectIntl)(ReviewFormComponent);\nReviewForm.displayName = 'ReviewForm';\nexport default ReviewForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/ReviewForm/ReviewForm.js"],"names":["React","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","classNames","isTransactionsTransitionAlreadyReviewed","propTypes","required","FieldReviewRating","PrimaryButton","FieldTextInput","css","ReviewFormComponent","props","fieldRenderProps","className","rootClassName","disabled","handleSubmit","intl","formId","invalid","reviewSent","sendReviewError","sendReviewInProgress","reviewRating","formatMessage","id","reviewRatingRequiredMessage","reviewContent","reviewContentPlaceholderMessage","reviewContentRequiredMessage","errorMessage","error","errorArea","errorPlaceholder","reviewSubmitMessage","classes","root","submitInProgress","submitDisabled","submitButton","defaultProps","bool","func","string","isRequired","onSubmit","ReviewForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { isTransactionsTransitionAlreadyReviewed } from '../../util/errors';\nimport { propTypes } from '../../util/types';\nimport { required } from '../../util/validators';\nimport { FieldReviewRating, Form, PrimaryButton, FieldTextInput } from '../../components';\n\nimport css from './ReviewForm.css';\n\nconst ReviewFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        className,\n        rootClassName,\n        disabled,\n        handleSubmit,\n        intl,\n        formId,\n        invalid,\n        reviewSent,\n        sendReviewError,\n        sendReviewInProgress,\n      } = fieldRenderProps;\n\n      const reviewRating = intl.formatMessage({ id: 'ReviewForm.reviewRatingLabel' });\n      const reviewRatingRequiredMessage = intl.formatMessage({\n        id: 'ReviewForm.reviewRatingRequired',\n      });\n\n      const reviewContent = intl.formatMessage({ id: 'ReviewForm.reviewContentLabel' });\n      const reviewContentPlaceholderMessage = intl.formatMessage({\n        id: 'ReviewForm.reviewContentPlaceholder',\n      });\n      const reviewContentRequiredMessage = intl.formatMessage({\n        id: 'ReviewForm.reviewContentRequired',\n      });\n\n      const errorMessage = isTransactionsTransitionAlreadyReviewed(sendReviewError) ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"ReviewForm.reviewSubmitAlreadySent\" />\n        </p>\n      ) : (\n        <p className={css.error}>\n          <FormattedMessage id=\"ReviewForm.reviewSubmitFailed\" />\n        </p>\n      );\n      const errorArea = sendReviewError ? errorMessage : <p className={css.errorPlaceholder} />;\n\n      const reviewSubmitMessage = intl.formatMessage({\n        id: 'ReviewForm.reviewSubmit',\n      });\n\n      const classes = classNames(rootClassName || css.root, className);\n      const submitInProgress = sendReviewInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress;\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          <FieldReviewRating\n            className={css.reviewRating}\n            id={formId ? `${formId}.starRating` : 'starRating'}\n            name=\"reviewRating\"\n            label={reviewRating}\n            validate={required(reviewRatingRequiredMessage)}\n          />\n\n          <FieldTextInput\n            className={css.reviewContent}\n            type=\"textarea\"\n            id={formId ? `${formId}.reviewContent` : 'reviewContent'}\n            name=\"reviewContent\"\n            label={reviewContent}\n            placeholder={reviewContentPlaceholderMessage}\n            validate={required(reviewContentRequiredMessage)}\n          />\n\n          {errorArea}\n          <PrimaryButton\n            className={css.submitButton}\n            type=\"submit\"\n            inProgress={submitInProgress}\n            disabled={submitDisabled}\n            ready={reviewSent}\n          >\n            {reviewSubmitMessage}\n          </PrimaryButton>\n        </Form>\n      );\n    }}\n  />\n);\n\nReviewFormComponent.defaultProps = { className: null, rootClassName: null, sendReviewError: null };\n\nconst { bool, func, string } = PropTypes;\n\nReviewFormComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  reviewSent: bool.isRequired,\n  sendReviewError: propTypes.error,\n  sendReviewInProgress: bool.isRequired,\n};\n\nconst ReviewForm = compose(injectIntl)(ReviewFormComponent);\nReviewForm.displayName = 'ReviewForm';\n\nexport default ReviewForm;\n"]},"metadata":{},"sourceType":"module"}