{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ManageListingCard/ManageListingCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routeConfiguration';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY, LISTING_STATE_PENDING_APPROVAL, LISTING_STATE_CLOSED, LISTING_STATE_DRAFT, propTypes } from '../../util/types';\nimport { formatMoney } from '../../util/currency';\nimport { ensureOwnListing } from '../../util/data';\nimport { LISTING_PAGE_PENDING_APPROVAL_VARIANT, LISTING_PAGE_DRAFT_VARIANT, LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_EDIT, createSlug } from '../../util/urlHelpers';\nimport { createResourceLocatorString } from '../../util/routes';\nimport config from '../../config';\nimport { InlineTextButton, Menu, MenuLabel, MenuContent, MenuItem, NamedLink, IconSpinner, ResponsiveImage } from '../../components';\nimport MenuIcon from './MenuIcon';\nimport Overlay from './Overlay';\nimport css from './ManageListingCard.css'; // Menu content needs the same padding\n\nconst MENU_CONTENT_OFFSET = -12;\nconst MAX_LENGTH_FOR_WORDS_IN_TITLE = 7;\n\nconst priceData = (price, intl) => {\n  if (price && price.currency === config.currency) {\n    const formattedPrice = formatMoney(intl, price);\n    return {\n      formattedPrice,\n      priceTitle: formattedPrice\n    };\n  } else if (price) {\n    return {\n      formattedPrice: intl.formatMessage({\n        id: 'ManageListingCard.unsupportedPrice'\n      }, {\n        currency: price.currency\n      }),\n      priceTitle: intl.formatMessage({\n        id: 'ManageListingCard.unsupportedPriceTitle'\n      }, {\n        currency: price.currency\n      })\n    };\n  }\n\n  return {};\n};\n\nconst createListingURL = (routes, listing) => {\n  const id = listing.id.uuid;\n  const slug = createSlug(listing.attributes.title);\n  const isPendingApproval = listing.attributes.state === LISTING_STATE_PENDING_APPROVAL;\n  const isDraft = listing.attributes.state === LISTING_STATE_DRAFT;\n  const variant = isDraft ? LISTING_PAGE_DRAFT_VARIANT : isPendingApproval ? LISTING_PAGE_PENDING_APPROVAL_VARIANT : null;\n  const linkProps = isPendingApproval || isDraft ? {\n    name: 'ListingPageVariant',\n    params: {\n      id,\n      slug,\n      variant\n    }\n  } : {\n    name: 'ListingPage',\n    params: {\n      id,\n      slug\n    }\n  };\n  return createResourceLocatorString(linkProps.name, routes, linkProps.params, {});\n}; // Cards are not fixed sizes - So, long words in title make flexboxed items to grow too big.\n// 1. We split title to an array of words and spaces.\n//    \"foo bar\".split(/([^\\s]+)/gi) => [\"\", \"foo\", \" \", \"bar\", \"\"]\n// 2. Then we break long words by adding a '<span>' with word-break: 'break-all';\n\n\nconst formatTitle = (title, maxLength) => {\n  const nonWhiteSpaceSequence = /([^\\s]+)/gi;\n  return title.split(nonWhiteSpaceSequence).map((word, index) => {\n    return word.length > maxLength ? React.createElement(\"span\", {\n      key: index,\n      style: {\n        wordBreak: 'break-all'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, word) : word;\n  });\n};\n\nexport const ManageListingCardComponent = props => {\n  const className = props.className,\n        rootClassName = props.rootClassName,\n        hasClosingError = props.hasClosingError,\n        hasOpeningError = props.hasOpeningError,\n        history = props.history,\n        intl = props.intl,\n        isMenuOpen = props.isMenuOpen,\n        actionsInProgressListingId = props.actionsInProgressListingId,\n        listing = props.listing,\n        onCloseListing = props.onCloseListing,\n        onOpenListing = props.onOpenListing,\n        onToggleMenu = props.onToggleMenu,\n        renderSizes = props.renderSizes,\n        availabilityEnabled = props.availabilityEnabled;\n  const classes = classNames(rootClassName || css.root, className);\n  const currentListing = ensureOwnListing(listing);\n  const id = currentListing.id.uuid;\n  const _currentListing$attri = currentListing.attributes,\n        _currentListing$attri2 = _currentListing$attri.title,\n        title = _currentListing$attri2 === void 0 ? '' : _currentListing$attri2,\n        price = _currentListing$attri.price,\n        state = _currentListing$attri.state;\n  const slug = createSlug(title);\n  const isPendingApproval = state === LISTING_STATE_PENDING_APPROVAL;\n  const isClosed = state === LISTING_STATE_CLOSED;\n  const isDraft = state === LISTING_STATE_DRAFT;\n  const firstImage = currentListing.images && currentListing.images.length > 0 ? currentListing.images[0] : null;\n  const menuItemClasses = classNames(css.menuItem, {\n    [css.menuItemDisabled]: !!actionsInProgressListingId\n  });\n\n  const _priceData = priceData(price, intl),\n        formattedPrice = _priceData.formattedPrice,\n        priceTitle = _priceData.priceTitle;\n\n  const hasError = hasOpeningError || hasClosingError;\n  const thisListingInProgress = actionsInProgressListingId && actionsInProgressListingId.uuid === id;\n  const titleClasses = classNames(css.title, {\n    [css.titlePending]: isPendingApproval,\n    [css.titleDraft]: isDraft\n  });\n  const editListingLinkType = isDraft ? LISTING_PAGE_PARAM_TYPE_DRAFT : LISTING_PAGE_PARAM_TYPE_EDIT;\n  const unitType = config.bookingUnitType;\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n  const unitTranslationKey = isNightly ? 'ManageListingCard.perNight' : isDaily ? 'ManageListingCard.perDay' : 'ManageListingCard.perUnit';\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.threeToTwoWrapper,\n    tabIndex: 0,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation(); // ManageListingCard contains links, buttons and elements that are working with routing.\n      // This card doesn't work if <a> or <button> is used to wrap events that are card 'clicks'.\n      //\n      // NOTE: It might be better to absolute-position those buttons over a card-links.\n      // (So, that they have no parent-child relationship - like '<a>bla<a>blaa</a></a>')\n\n      history.push(createListingURL(routeConfiguration(), listing));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.aspectWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(ResponsiveImage, {\n    rootClassName: css.rootForImage,\n    alt: title,\n    image: firstImage,\n    variants: ['landscape-crop', 'landscape-crop2x'],\n    sizes: renderSizes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classNames(css.menuOverlayWrapper, {\n      [css.menuOverlayOpen]: isMenuOpen\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames(css.menuOverlay),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: css.menuOverlayContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.viewListing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: css.menubarWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.menubarGradient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: css.menubar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(Menu, {\n    className: classNames(css.menu, {\n      [css.cardIsOpen]: !isClosed\n    }),\n    contentPlacementOffset: MENU_CONTENT_OFFSET,\n    contentPosition: \"left\",\n    useArrow: false,\n    onToggleActive: isOpen => {\n      const listingOpen = isOpen ? currentListing : null;\n      onToggleMenu(listingOpen);\n    },\n    isOpen: isMenuOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(MenuLabel, {\n    className: css.menuLabel,\n    isOpenClassName: css.listingMenuIsOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.iconWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(MenuIcon, {\n    className: css.menuIcon,\n    isActive: isMenuOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }))), React.createElement(MenuContent, {\n    rootClassName: css.menuContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    key: \"close-listing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(InlineTextButton, {\n    rootClassName: menuItemClasses,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!actionsInProgressListingId) {\n        onToggleMenu(null);\n        onCloseListing(currentListing.id);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.closeListing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }))))))), isDraft ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames({\n      [css.draftNoImage]: !firstImage\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.draftOverlayText'\n    }, {\n      listingTitle: title\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(NamedLink, {\n    className: css.finishListingDraftLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: LISTING_PAGE_PARAM_TYPE_DRAFT,\n      tab: 'photos'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.finishListingDraft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  })))) : null, isClosed ? React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.closedListing'\n    }, {\n      listingTitle: title\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: css.openListingButton,\n    disabled: !!actionsInProgressListingId,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!actionsInProgressListingId) {\n        onOpenListing(currentListing.id);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.openListing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }))) : null, isPendingApproval ? React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.pendingApproval'\n    }, {\n      listingTitle: title\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }) : null, thisListingInProgress ? React.createElement(Overlay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, React.createElement(IconSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  })) : hasError ? React.createElement(Overlay, {\n    errorMessage: intl.formatMessage({\n      id: 'ManageListingCard.actionFailed'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }) : null), React.createElement(\"div\", {\n    className: css.info,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.price,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, formattedPrice ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.priceValue,\n    title: priceTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, formattedPrice), React.createElement(\"div\", {\n    className: css.perUnit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: unitTranslationKey,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    className: css.noPrice,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.priceNotSet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: css.mainInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.titleWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, React.createElement(InlineTextButton, {\n    rootClassName: titleClasses,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation();\n      history.push(createListingURL(routeConfiguration(), listing));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, formatTitle(title, MAX_LENGTH_FOR_WORDS_IN_TITLE)))), React.createElement(\"div\", {\n    className: css.manageLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }, React.createElement(NamedLink, {\n    className: css.manageLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: editListingLinkType,\n      tab: 'description'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.editListing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  })), availabilityEnabled ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: css.manageLinksSeparator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }, ' • '), React.createElement(NamedLink, {\n    className: css.manageLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: editListingLinkType,\n      tab: 'availability'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.manageAvailability\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }))) : null)));\n};\nManageListingCardComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  actionsInProgressListingId: null,\n  renderSizes: null,\n  availabilityEnabled: config.enableAvailability\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nManageListingCardComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  hasClosingError: bool.isRequired,\n  hasOpeningError: bool.isRequired,\n  intl: intlShape.isRequired,\n  listing: propTypes.ownListing.isRequired,\n  isMenuOpen: bool.isRequired,\n  actionsInProgressListingId: shape({\n    uuid: string.isRequired\n  }),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  onToggleMenu: func.isRequired,\n  availabilityEnabled: bool,\n  // Responsive image sizes hint\n  renderSizes: string,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\nexport default compose(withRouter, injectIntl)(ManageListingCardComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ManageListingCard/ManageListingCard.js"],"names":["React","PropTypes","compose","withRouter","FormattedMessage","intlShape","injectIntl","classNames","routeConfiguration","LINE_ITEM_NIGHT","LINE_ITEM_DAY","LISTING_STATE_PENDING_APPROVAL","LISTING_STATE_CLOSED","LISTING_STATE_DRAFT","propTypes","formatMoney","ensureOwnListing","LISTING_PAGE_PENDING_APPROVAL_VARIANT","LISTING_PAGE_DRAFT_VARIANT","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_EDIT","createSlug","createResourceLocatorString","config","InlineTextButton","Menu","MenuLabel","MenuContent","MenuItem","NamedLink","IconSpinner","ResponsiveImage","MenuIcon","Overlay","css","MENU_CONTENT_OFFSET","MAX_LENGTH_FOR_WORDS_IN_TITLE","priceData","price","intl","currency","formattedPrice","priceTitle","formatMessage","id","createListingURL","routes","listing","uuid","slug","attributes","title","isPendingApproval","state","isDraft","variant","linkProps","name","params","formatTitle","maxLength","nonWhiteSpaceSequence","split","map","word","index","length","wordBreak","ManageListingCardComponent","props","className","rootClassName","hasClosingError","hasOpeningError","history","isMenuOpen","actionsInProgressListingId","onCloseListing","onOpenListing","onToggleMenu","renderSizes","availabilityEnabled","classes","root","currentListing","isClosed","firstImage","images","menuItemClasses","menuItem","menuItemDisabled","hasError","thisListingInProgress","titleClasses","titlePending","titleDraft","editListingLinkType","unitType","bookingUnitType","isNightly","isDaily","unitTranslationKey","threeToTwoWrapper","event","preventDefault","stopPropagation","push","aspectWrapper","rootForImage","menuOverlayWrapper","menuOverlayOpen","menuOverlay","menuOverlayContent","menubarWrapper","menubarGradient","menubar","menu","cardIsOpen","isOpen","listingOpen","menuLabel","listingMenuIsOpen","iconWrapper","menuIcon","menuContent","draftNoImage","listingTitle","finishListingDraftLink","type","tab","openListingButton","info","priceValue","perUnit","noPrice","mainInfo","titleWrapper","manageLinks","manageLink","manageLinksSeparator","defaultProps","enableAvailability","bool","func","shape","string","isRequired","ownListing"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routeConfiguration';\nimport {\n  LINE_ITEM_NIGHT,\n  LINE_ITEM_DAY,\n  LISTING_STATE_PENDING_APPROVAL,\n  LISTING_STATE_CLOSED,\n  LISTING_STATE_DRAFT,\n  propTypes,\n} from '../../util/types';\nimport { formatMoney } from '../../util/currency';\nimport { ensureOwnListing } from '../../util/data';\nimport {\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n  LISTING_PAGE_DRAFT_VARIANT,\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\n  LISTING_PAGE_PARAM_TYPE_EDIT,\n  createSlug,\n} from '../../util/urlHelpers';\nimport { createResourceLocatorString } from '../../util/routes';\nimport config from '../../config';\nimport {\n  InlineTextButton,\n  Menu,\n  MenuLabel,\n  MenuContent,\n  MenuItem,\n  NamedLink,\n  IconSpinner,\n  ResponsiveImage,\n} from '../../components';\n\nimport MenuIcon from './MenuIcon';\nimport Overlay from './Overlay';\nimport css from './ManageListingCard.css';\n\n// Menu content needs the same padding\nconst MENU_CONTENT_OFFSET = -12;\nconst MAX_LENGTH_FOR_WORDS_IN_TITLE = 7;\n\nconst priceData = (price, intl) => {\n  if (price && price.currency === config.currency) {\n    const formattedPrice = formatMoney(intl, price);\n    return { formattedPrice, priceTitle: formattedPrice };\n  } else if (price) {\n    return {\n      formattedPrice: intl.formatMessage(\n        { id: 'ManageListingCard.unsupportedPrice' },\n        { currency: price.currency }\n      ),\n      priceTitle: intl.formatMessage(\n        { id: 'ManageListingCard.unsupportedPriceTitle' },\n        { currency: price.currency }\n      ),\n    };\n  }\n  return {};\n};\n\nconst createListingURL = (routes, listing) => {\n  const id = listing.id.uuid;\n  const slug = createSlug(listing.attributes.title);\n  const isPendingApproval = listing.attributes.state === LISTING_STATE_PENDING_APPROVAL;\n  const isDraft = listing.attributes.state === LISTING_STATE_DRAFT;\n  const variant = isDraft\n    ? LISTING_PAGE_DRAFT_VARIANT\n    : isPendingApproval\n    ? LISTING_PAGE_PENDING_APPROVAL_VARIANT\n    : null;\n\n  const linkProps =\n    isPendingApproval || isDraft\n      ? {\n          name: 'ListingPageVariant',\n          params: {\n            id,\n            slug,\n            variant,\n          },\n        }\n      : {\n          name: 'ListingPage',\n          params: { id, slug },\n        };\n\n  return createResourceLocatorString(linkProps.name, routes, linkProps.params, {});\n};\n\n// Cards are not fixed sizes - So, long words in title make flexboxed items to grow too big.\n// 1. We split title to an array of words and spaces.\n//    \"foo bar\".split(/([^\\s]+)/gi) => [\"\", \"foo\", \" \", \"bar\", \"\"]\n// 2. Then we break long words by adding a '<span>' with word-break: 'break-all';\nconst formatTitle = (title, maxLength) => {\n  const nonWhiteSpaceSequence = /([^\\s]+)/gi;\n  return title.split(nonWhiteSpaceSequence).map((word, index) => {\n    return word.length > maxLength ? (\n      <span key={index} style={{ wordBreak: 'break-all' }}>\n        {word}\n      </span>\n    ) : (\n      word\n    );\n  });\n};\n\nexport const ManageListingCardComponent = props => {\n  const {\n    className,\n    rootClassName,\n    hasClosingError,\n    hasOpeningError,\n    history,\n    intl,\n    isMenuOpen,\n    actionsInProgressListingId,\n    listing,\n    onCloseListing,\n    onOpenListing,\n    onToggleMenu,\n    renderSizes,\n    availabilityEnabled,\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const currentListing = ensureOwnListing(listing);\n  const id = currentListing.id.uuid;\n  const { title = '', price, state } = currentListing.attributes;\n  const slug = createSlug(title);\n  const isPendingApproval = state === LISTING_STATE_PENDING_APPROVAL;\n  const isClosed = state === LISTING_STATE_CLOSED;\n  const isDraft = state === LISTING_STATE_DRAFT;\n  const firstImage =\n    currentListing.images && currentListing.images.length > 0 ? currentListing.images[0] : null;\n\n  const menuItemClasses = classNames(css.menuItem, {\n    [css.menuItemDisabled]: !!actionsInProgressListingId,\n  });\n\n  const { formattedPrice, priceTitle } = priceData(price, intl);\n\n  const hasError = hasOpeningError || hasClosingError;\n  const thisListingInProgress =\n    actionsInProgressListingId && actionsInProgressListingId.uuid === id;\n\n  const titleClasses = classNames(css.title, {\n    [css.titlePending]: isPendingApproval,\n    [css.titleDraft]: isDraft,\n  });\n\n  const editListingLinkType = isDraft\n    ? LISTING_PAGE_PARAM_TYPE_DRAFT\n    : LISTING_PAGE_PARAM_TYPE_EDIT;\n\n  const unitType = config.bookingUnitType;\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n\n  const unitTranslationKey = isNightly\n    ? 'ManageListingCard.perNight'\n    : isDaily\n    ? 'ManageListingCard.perDay'\n    : 'ManageListingCard.perUnit';\n\n  return (\n    <div className={classes}>\n      <div\n        className={css.threeToTwoWrapper}\n        tabIndex={0}\n        onClick={event => {\n          event.preventDefault();\n          event.stopPropagation();\n\n          // ManageListingCard contains links, buttons and elements that are working with routing.\n          // This card doesn't work if <a> or <button> is used to wrap events that are card 'clicks'.\n          //\n          // NOTE: It might be better to absolute-position those buttons over a card-links.\n          // (So, that they have no parent-child relationship - like '<a>bla<a>blaa</a></a>')\n          history.push(createListingURL(routeConfiguration(), listing));\n        }}\n      >\n        <div className={css.aspectWrapper}>\n          <ResponsiveImage\n            rootClassName={css.rootForImage}\n            alt={title}\n            image={firstImage}\n            variants={['landscape-crop', 'landscape-crop2x']}\n            sizes={renderSizes}\n          />\n        </div>\n        <div className={classNames(css.menuOverlayWrapper, { [css.menuOverlayOpen]: isMenuOpen })}>\n          <div className={classNames(css.menuOverlay)} />\n          <div className={css.menuOverlayContent}>\n            <FormattedMessage id=\"ManageListingCard.viewListing\" />\n          </div>\n        </div>\n        <div className={css.menubarWrapper}>\n          <div className={css.menubarGradient} />\n          <div className={css.menubar}>\n            <Menu\n              className={classNames(css.menu, { [css.cardIsOpen]: !isClosed })}\n              contentPlacementOffset={MENU_CONTENT_OFFSET}\n              contentPosition=\"left\"\n              useArrow={false}\n              onToggleActive={isOpen => {\n                const listingOpen = isOpen ? currentListing : null;\n                onToggleMenu(listingOpen);\n              }}\n              isOpen={isMenuOpen}\n            >\n              <MenuLabel className={css.menuLabel} isOpenClassName={css.listingMenuIsOpen}>\n                <div className={css.iconWrapper}>\n                  <MenuIcon className={css.menuIcon} isActive={isMenuOpen} />\n                </div>\n              </MenuLabel>\n              <MenuContent rootClassName={css.menuContent}>\n                <MenuItem key=\"close-listing\">\n                  <InlineTextButton\n                    rootClassName={menuItemClasses}\n                    onClick={event => {\n                      event.preventDefault();\n                      event.stopPropagation();\n                      if (!actionsInProgressListingId) {\n                        onToggleMenu(null);\n                        onCloseListing(currentListing.id);\n                      }\n                    }}\n                  >\n                    <FormattedMessage id=\"ManageListingCard.closeListing\" />\n                  </InlineTextButton>\n                </MenuItem>\n              </MenuContent>\n            </Menu>\n          </div>\n        </div>\n        {isDraft ? (\n          <React.Fragment>\n            <div className={classNames({ [css.draftNoImage]: !firstImage })} />\n            <Overlay\n              message={intl.formatMessage(\n                { id: 'ManageListingCard.draftOverlayText' },\n                { listingTitle: title }\n              )}\n            >\n              <NamedLink\n                className={css.finishListingDraftLink}\n                name=\"EditListingPage\"\n                params={{ id, slug, type: LISTING_PAGE_PARAM_TYPE_DRAFT, tab: 'photos' }}\n              >\n                <FormattedMessage id=\"ManageListingCard.finishListingDraft\" />\n              </NamedLink>\n            </Overlay>\n          </React.Fragment>\n        ) : null}\n        {isClosed ? (\n          <Overlay\n            message={intl.formatMessage(\n              { id: 'ManageListingCard.closedListing' },\n              { listingTitle: title }\n            )}\n          >\n            <button\n              className={css.openListingButton}\n              disabled={!!actionsInProgressListingId}\n              onClick={event => {\n                event.preventDefault();\n                event.stopPropagation();\n                if (!actionsInProgressListingId) {\n                  onOpenListing(currentListing.id);\n                }\n              }}\n            >\n              <FormattedMessage id=\"ManageListingCard.openListing\" />\n            </button>\n          </Overlay>\n        ) : null}\n        {isPendingApproval ? (\n          <Overlay\n            message={intl.formatMessage(\n              { id: 'ManageListingCard.pendingApproval' },\n              { listingTitle: title }\n            )}\n          />\n        ) : null}\n        {thisListingInProgress ? (\n          <Overlay>\n            <IconSpinner />\n          </Overlay>\n        ) : hasError ? (\n          <Overlay errorMessage={intl.formatMessage({ id: 'ManageListingCard.actionFailed' })} />\n        ) : null}\n      </div>\n\n      <div className={css.info}>\n        <div className={css.price}>\n          {formattedPrice ? (\n            <React.Fragment>\n              <div className={css.priceValue} title={priceTitle}>\n                {formattedPrice}\n              </div>\n              <div className={css.perUnit}>\n                <FormattedMessage id={unitTranslationKey} />\n              </div>\n            </React.Fragment>\n          ) : (\n            <div className={css.noPrice}>\n              <FormattedMessage id=\"ManageListingCard.priceNotSet\" />\n            </div>\n          )}\n        </div>\n\n        <div className={css.mainInfo}>\n          <div className={css.titleWrapper}>\n            <InlineTextButton\n              rootClassName={titleClasses}\n              onClick={event => {\n                event.preventDefault();\n                event.stopPropagation();\n                history.push(createListingURL(routeConfiguration(), listing));\n              }}\n            >\n              {formatTitle(title, MAX_LENGTH_FOR_WORDS_IN_TITLE)}\n            </InlineTextButton>\n          </div>\n        </div>\n\n        <div className={css.manageLinks}>\n          <NamedLink\n            className={css.manageLink}\n            name=\"EditListingPage\"\n            params={{ id, slug, type: editListingLinkType, tab: 'description' }}\n          >\n            <FormattedMessage id=\"ManageListingCard.editListing\" />\n          </NamedLink>\n\n          {availabilityEnabled ? (\n            <React.Fragment>\n              <span className={css.manageLinksSeparator}>{' • '}</span>\n\n              <NamedLink\n                className={css.manageLink}\n                name=\"EditListingPage\"\n                params={{ id, slug, type: editListingLinkType, tab: 'availability' }}\n              >\n                <FormattedMessage id=\"ManageListingCard.manageAvailability\" />\n              </NamedLink>\n            </React.Fragment>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nManageListingCardComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  actionsInProgressListingId: null,\n  renderSizes: null,\n  availabilityEnabled: config.enableAvailability,\n};\n\nconst { bool, func, shape, string } = PropTypes;\n\nManageListingCardComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  hasClosingError: bool.isRequired,\n  hasOpeningError: bool.isRequired,\n  intl: intlShape.isRequired,\n  listing: propTypes.ownListing.isRequired,\n  isMenuOpen: bool.isRequired,\n  actionsInProgressListingId: shape({ uuid: string.isRequired }),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  onToggleMenu: func.isRequired,\n  availabilityEnabled: bool,\n\n  // Responsive image sizes hint\n  renderSizes: string,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default compose(\n  withRouter,\n  injectIntl\n)(ManageListingCardComponent);\n"]},"metadata":{},"sourceType":"module"}