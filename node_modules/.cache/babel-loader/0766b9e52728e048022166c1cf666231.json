{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingPhotosForm/EditListingPhotosForm.js\";\nimport React, { Component } from 'react';\nimport { array, bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { nonEmptyArray, composeValidators } from '../../util/validators';\nimport { isUploadImageOverLimitError } from '../../util/errors';\nimport { AddImages, Button, Form, ValidationError } from '../../components';\nimport css from './EditListingPhotosForm.css';\nconst ACCEPT_IMAGES = 'image/*';\nexport class EditListingPhotosFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageUploadRequested: false\n    };\n    this.onImageUploadHandler = this.onImageUploadHandler.bind(this);\n    this.submittedImages = [];\n  }\n\n  onImageUploadHandler(file) {\n    if (file) {\n      this.setState({\n        imageUploadRequested: true\n      });\n      this.props.onImageUpload({\n        id: \"\".concat(file.name, \"_\").concat(Date.now()),\n        file\n      }).then(() => {\n        this.setState({\n          imageUploadRequested: false\n        });\n      }).catch(() => {\n        this.setState({\n          imageUploadRequested: false\n        });\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      onImageUploadHandler: this.onImageUploadHandler,\n      imageUploadRequested: this.state.imageUploadRequested,\n      initialValues: {\n        images: this.props.images\n      },\n      render: fieldRenderProps => {\n        const form = fieldRenderProps.form,\n              className = fieldRenderProps.className,\n              disabled = fieldRenderProps.disabled,\n              fetchErrors = fieldRenderProps.fetchErrors,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              images = fieldRenderProps.images,\n              imageUploadRequested = fieldRenderProps.imageUploadRequested,\n              intl = fieldRenderProps.intl,\n              invalid = fieldRenderProps.invalid,\n              onImageUploadHandler = fieldRenderProps.onImageUploadHandler,\n              onRemoveImage = fieldRenderProps.onRemoveImage,\n              ready = fieldRenderProps.ready,\n              saveActionMsg = fieldRenderProps.saveActionMsg,\n              updated = fieldRenderProps.updated,\n              updateInProgress = fieldRenderProps.updateInProgress;\n        const chooseImageText = React.createElement(\"span\", {\n          className: css.chooseImageText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: css.chooseImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.chooseImage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        })), React.createElement(\"span\", {\n          className: css.imageTypes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.imageTypes\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        })));\n        const imageRequiredMessage = intl.formatMessage({\n          id: 'EditListingPhotosForm.imageRequired'\n        });\n\n        const _ref = fetchErrors || {},\n              publishListingError = _ref.publishListingError,\n              showListingsError = _ref.showListingsError,\n              updateListingError = _ref.updateListingError,\n              uploadImageError = _ref.uploadImageError;\n\n        const uploadOverLimit = isUploadImageOverLimitError(uploadImageError);\n        let uploadImageFailed = null;\n\n        if (uploadOverLimit) {\n          uploadImageFailed = React.createElement(\"p\", {\n            className: css.error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"EditListingPhotosForm.imageUploadFailed.uploadOverLimit\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }));\n        } else if (uploadImageError) {\n          uploadImageFailed = React.createElement(\"p\", {\n            className: css.error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"EditListingPhotosForm.imageUploadFailed.uploadFailed\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }));\n        } // NOTE: These error messages are here since Photos panel is the last visible panel\n        // before creating a new listing. If that order is changed, these should be changed too.\n        // Create and show listing errors are shown above submit button\n\n\n        const publishListingFailed = publishListingError ? React.createElement(\"p\", {\n          className: css.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.publishListingFailed\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        })) : null;\n        const showListingFailed = showListingsError ? React.createElement(\"p\", {\n          className: css.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.showListingFailed\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        })) : null;\n        const submittedOnce = this.submittedImages.length > 0; // imgs can contain added images (with temp ids) and submitted images with uniq ids.\n\n        const arrayOfImgIds = imgs => imgs.map(i => typeof i.id === 'string' ? i.imageId : i.id);\n\n        const imageIdsFromProps = arrayOfImgIds(images);\n        const imageIdsFromPreviousSubmit = arrayOfImgIds(this.submittedImages);\n        const imageArrayHasSameImages = isEqual(imageIdsFromProps, imageIdsFromPreviousSubmit);\n        const pristineSinceLastSubmit = submittedOnce && imageArrayHasSameImages;\n        const submitReady = updated && pristineSinceLastSubmit || ready;\n        const submitInProgress = updateInProgress;\n        const submitDisabled = invalid || disabled || submitInProgress || imageUploadRequested || ready;\n        const classes = classNames(css.root, className);\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedImages = images;\n            handleSubmit(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, updateListingError ? React.createElement(\"p\", {\n          className: css.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.updateFailed\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        })) : null, React.createElement(AddImages, {\n          className: css.imagesField,\n          images: images,\n          thumbnailClassName: css.thumbnail,\n          savedImageAltText: intl.formatMessage({\n            id: 'EditListingPhotosForm.savedImageAltText'\n          }),\n          onRemoveImage: onRemoveImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(Field, {\n          id: \"addImage\",\n          name: \"addImage\",\n          accept: ACCEPT_IMAGES,\n          form: null,\n          label: chooseImageText,\n          type: \"file\",\n          disabled: imageUploadRequested,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, fieldprops => {\n          const accept = fieldprops.accept,\n                input = fieldprops.input,\n                label = fieldprops.label,\n                type = fieldprops.type,\n                disabled = fieldprops.disabled;\n          const name = input.name;\n\n          const onChange = e => {\n            const file = e.target.files[0];\n            form.change(\"addImage\", file);\n            form.blur(\"addImage\");\n            onImageUploadHandler(file);\n          };\n\n          const inputProps = {\n            accept,\n            id: name,\n            name,\n            onChange,\n            type\n          };\n          return React.createElement(\"div\", {\n            className: css.addImageWrapper,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: css.aspectRatioWrapper,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, disabled ? null : React.createElement(\"input\", Object.assign({}, inputProps, {\n            className: css.addImageInput,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          })), React.createElement(\"label\", {\n            htmlFor: name,\n            className: css.addImage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, label)));\n        }), React.createElement(Field, {\n          component: props => {\n            const input = props.input,\n                  type = props.type,\n                  meta = props.meta;\n            return React.createElement(\"div\", {\n              className: css.imageRequiredWrapper,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190\n              },\n              __self: this\n            }, React.createElement(\"input\", Object.assign({}, input, {\n              type: type,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 191\n              },\n              __self: this\n            })), React.createElement(ValidationError, {\n              fieldMeta: meta,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 192\n              },\n              __self: this\n            }));\n          },\n          name: \"images\",\n          type: \"hidden\",\n          validate: composeValidators(nonEmptyArray(imageRequiredMessage)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        })), uploadImageFailed, React.createElement(\"p\", {\n          className: css.tip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.addImagesTip\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        })), publishListingFailed, showListingFailed, React.createElement(Button, {\n          className: css.submitButton,\n          type: \"submit\",\n          inProgress: submitInProgress,\n          disabled: submitDisabled,\n          ready: submitReady,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, saveActionMsg));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n}\nEditListingPhotosFormComponent.defaultProps = {\n  fetchErrors: null,\n  images: []\n};\nEditListingPhotosFormComponent.propTypes = {\n  fetchErrors: shape({\n    publishListingError: propTypes.error,\n    showListingsError: propTypes.error,\n    uploadImageError: propTypes.error,\n    updateListingError: propTypes.error\n  }),\n  images: array,\n  intl: intlShape.isRequired,\n  onImageUpload: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  ready: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  onRemoveImage: func.isRequired\n};\nexport default compose(injectIntl)(EditListingPhotosFormComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingPhotosForm/EditListingPhotosForm.js"],"names":["React","Component","array","bool","func","shape","string","compose","Form","FinalForm","Field","FormattedMessage","intlShape","injectIntl","isEqual","classNames","propTypes","nonEmptyArray","composeValidators","isUploadImageOverLimitError","AddImages","Button","ValidationError","css","ACCEPT_IMAGES","EditListingPhotosFormComponent","constructor","props","state","imageUploadRequested","onImageUploadHandler","bind","submittedImages","file","setState","onImageUpload","id","name","Date","now","then","catch","render","images","fieldRenderProps","form","className","disabled","fetchErrors","handleSubmit","intl","invalid","onRemoveImage","ready","saveActionMsg","updated","updateInProgress","chooseImageText","chooseImage","imageTypes","imageRequiredMessage","formatMessage","publishListingError","showListingsError","updateListingError","uploadImageError","uploadOverLimit","uploadImageFailed","error","publishListingFailed","showListingFailed","submittedOnce","length","arrayOfImgIds","imgs","map","i","imageId","imageIdsFromProps","imageIdsFromPreviousSubmit","imageArrayHasSameImages","pristineSinceLastSubmit","submitReady","submitInProgress","submitDisabled","classes","root","e","imagesField","thumbnail","fieldprops","accept","input","label","type","onChange","target","files","change","blur","inputProps","addImageWrapper","aspectRatioWrapper","addImageInput","addImage","meta","imageRequiredWrapper","tip","submitButton","defaultProps","isRequired","onUpdateImageOrder","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { array, bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { nonEmptyArray, composeValidators } from '../../util/validators';\nimport { isUploadImageOverLimitError } from '../../util/errors';\nimport { AddImages, Button, Form, ValidationError } from '../../components';\n\nimport css from './EditListingPhotosForm.css';\n\nconst ACCEPT_IMAGES = 'image/*';\n\nexport class EditListingPhotosFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { imageUploadRequested: false };\n    this.onImageUploadHandler = this.onImageUploadHandler.bind(this);\n    this.submittedImages = [];\n  }\n\n  onImageUploadHandler(file) {\n    if (file) {\n      this.setState({ imageUploadRequested: true });\n      this.props\n        .onImageUpload({ id: `${file.name}_${Date.now()}`, file })\n        .then(() => {\n          this.setState({ imageUploadRequested: false });\n        })\n        .catch(() => {\n          this.setState({ imageUploadRequested: false });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        onImageUploadHandler={this.onImageUploadHandler}\n        imageUploadRequested={this.state.imageUploadRequested}\n        initialValues={{ images: this.props.images }}\n        render={fieldRenderProps => {\n          const {\n            form,\n            className,\n            disabled,\n            fetchErrors,\n            handleSubmit,\n            images,\n            imageUploadRequested,\n            intl,\n            invalid,\n            onImageUploadHandler,\n            onRemoveImage,\n            ready,\n            saveActionMsg,\n            updated,\n            updateInProgress,\n          } = fieldRenderProps;\n\n          const chooseImageText = (\n            <span className={css.chooseImageText}>\n              <span className={css.chooseImage}>\n                <FormattedMessage id=\"EditListingPhotosForm.chooseImage\" />\n              </span>\n              <span className={css.imageTypes}>\n                <FormattedMessage id=\"EditListingPhotosForm.imageTypes\" />\n              </span>\n            </span>\n          );\n\n          const imageRequiredMessage = intl.formatMessage({\n            id: 'EditListingPhotosForm.imageRequired',\n          });\n\n          const { publishListingError, showListingsError, updateListingError, uploadImageError } =\n            fetchErrors || {};\n          const uploadOverLimit = isUploadImageOverLimitError(uploadImageError);\n\n          let uploadImageFailed = null;\n\n          if (uploadOverLimit) {\n            uploadImageFailed = (\n              <p className={css.error}>\n                <FormattedMessage id=\"EditListingPhotosForm.imageUploadFailed.uploadOverLimit\" />\n              </p>\n            );\n          } else if (uploadImageError) {\n            uploadImageFailed = (\n              <p className={css.error}>\n                <FormattedMessage id=\"EditListingPhotosForm.imageUploadFailed.uploadFailed\" />\n              </p>\n            );\n          }\n\n          // NOTE: These error messages are here since Photos panel is the last visible panel\n          // before creating a new listing. If that order is changed, these should be changed too.\n          // Create and show listing errors are shown above submit button\n          const publishListingFailed = publishListingError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingPhotosForm.publishListingFailed\" />\n            </p>\n          ) : null;\n          const showListingFailed = showListingsError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingPhotosForm.showListingFailed\" />\n            </p>\n          ) : null;\n\n          const submittedOnce = this.submittedImages.length > 0;\n          // imgs can contain added images (with temp ids) and submitted images with uniq ids.\n          const arrayOfImgIds = imgs =>\n            imgs.map(i => (typeof i.id === 'string' ? i.imageId : i.id));\n          const imageIdsFromProps = arrayOfImgIds(images);\n          const imageIdsFromPreviousSubmit = arrayOfImgIds(this.submittedImages);\n          const imageArrayHasSameImages = isEqual(imageIdsFromProps, imageIdsFromPreviousSubmit);\n          const pristineSinceLastSubmit = submittedOnce && imageArrayHasSameImages;\n\n          const submitReady = (updated && pristineSinceLastSubmit) || ready;\n          const submitInProgress = updateInProgress;\n          const submitDisabled =\n            invalid || disabled || submitInProgress || imageUploadRequested || ready;\n\n          const classes = classNames(css.root, className);\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedImages = images;\n                handleSubmit(e);\n              }}\n            >\n              {updateListingError ? (\n                <p className={css.error}>\n                  <FormattedMessage id=\"EditListingPhotosForm.updateFailed\" />\n                </p>\n              ) : null}\n              <AddImages\n                className={css.imagesField}\n                images={images}\n                thumbnailClassName={css.thumbnail}\n                savedImageAltText={intl.formatMessage({\n                  id: 'EditListingPhotosForm.savedImageAltText',\n                })}\n                onRemoveImage={onRemoveImage}\n              >\n                <Field\n                  id=\"addImage\"\n                  name=\"addImage\"\n                  accept={ACCEPT_IMAGES}\n                  form={null}\n                  label={chooseImageText}\n                  type=\"file\"\n                  disabled={imageUploadRequested}\n                >\n                  {fieldprops => {\n                    const { accept, input, label, type, disabled } = fieldprops;\n                    const { name } = input;\n                    const onChange = e => {\n                      const file = e.target.files[0];\n                      form.change(`addImage`, file);\n                      form.blur(`addImage`);\n                      onImageUploadHandler(file);\n                    };\n                    const inputProps = { accept, id: name, name, onChange, type };\n                    return (\n                      <div className={css.addImageWrapper}>\n                        <div className={css.aspectRatioWrapper}>\n                          {disabled ? null : (\n                            <input {...inputProps} className={css.addImageInput} />\n                          )}\n                          <label htmlFor={name} className={css.addImage}>\n                            {label}\n                          </label>\n                        </div>\n                      </div>\n                    );\n                  }}\n                </Field>\n\n                <Field\n                  component={props => {\n                    const { input, type, meta } = props;\n                    return (\n                      <div className={css.imageRequiredWrapper}>\n                        <input {...input} type={type} />\n                        <ValidationError fieldMeta={meta} />\n                      </div>\n                    );\n                  }}\n                  name=\"images\"\n                  type=\"hidden\"\n                  validate={composeValidators(nonEmptyArray(imageRequiredMessage))}\n                />\n              </AddImages>\n              {uploadImageFailed}\n\n              <p className={css.tip}>\n                <FormattedMessage id=\"EditListingPhotosForm.addImagesTip\" />\n              </p>\n              {publishListingFailed}\n              {showListingFailed}\n\n              <Button\n                className={css.submitButton}\n                type=\"submit\"\n                inProgress={submitInProgress}\n                disabled={submitDisabled}\n                ready={submitReady}\n              >\n                {saveActionMsg}\n              </Button>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nEditListingPhotosFormComponent.defaultProps = { fetchErrors: null, images: [] };\n\nEditListingPhotosFormComponent.propTypes = {\n  fetchErrors: shape({\n    publishListingError: propTypes.error,\n    showListingsError: propTypes.error,\n    uploadImageError: propTypes.error,\n    updateListingError: propTypes.error,\n  }),\n  images: array,\n  intl: intlShape.isRequired,\n  onImageUpload: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  ready: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  onRemoveImage: func.isRequired,\n};\n\nexport default compose(injectIntl)(EditListingPhotosFormComponent);\n"]},"metadata":{},"sourceType":"module"}