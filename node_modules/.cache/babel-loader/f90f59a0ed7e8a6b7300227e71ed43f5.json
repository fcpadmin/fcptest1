{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/BookingBreakdown/LineItemUnknownItemsMaybe.js\";\n\n/**\n * Renders non-reversal line items that are not listed in the\n * `LINE_ITEMS` array in util/types.js\n *\n * The line items are rendered so that the line item code is formatted to human\n * readable form and the line total is printed as price.\n *\n * If you require another kind of presentation for your line items, add them to\n * the `LINE_ITEMS` array in util/types.js and create a specific line item\n * component for them that can be used in the `BookingBreakdown` component.\n */\nimport React from 'react';\nimport { intlShape } from 'react-intl';\nimport { formatMoney } from '../../util/currency';\nimport { humanizeLineItemCode } from '../../util/data';\nimport { LINE_ITEMS, propTypes } from '../../util/types';\nimport css from './BookingBreakdown.css';\n\nconst LineItemUnknownItemsMaybe = props => {\n  const transaction = props.transaction,\n        intl = props.intl; // resolve unknown non-reversal line items\n\n  const items = transaction.attributes.lineItems.filter(item => LINE_ITEMS.indexOf(item.code) === -1 && !item.reversal);\n  return items.length > 0 ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, items.map((item, i) => {\n    const label = humanizeLineItemCode(item.code);\n    const formattedTotal = formatMoney(intl, item.lineTotal);\n    return React.createElement(\"div\", {\n      key: \"\".concat(i, \"-item.code\"),\n      className: css.lineItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, label), React.createElement(\"span\", {\n      className: css.itemValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, formattedTotal));\n  })) : null;\n};\n\nLineItemUnknownItemsMaybe.propTypes = {\n  transaction: propTypes.transaction.isRequired,\n  intl: intlShape.isRequired\n};\nexport default LineItemUnknownItemsMaybe;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/BookingBreakdown/LineItemUnknownItemsMaybe.js"],"names":["React","intlShape","formatMoney","humanizeLineItemCode","LINE_ITEMS","propTypes","css","LineItemUnknownItemsMaybe","props","transaction","intl","items","attributes","lineItems","filter","item","indexOf","code","reversal","length","map","i","label","formattedTotal","lineTotal","lineItem","itemLabel","itemValue","isRequired"],"mappings":";;AAAA;;;;;;;;;;;AAWA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AAEA,OAAOC,GAAP,MAAgB,wBAAhB;;AAEA,MAAMC,yBAAyB,GAAGC,KAAK,IAAI;AAAA,QACjCC,WADiC,GACXD,KADW,CACjCC,WADiC;AAAA,QACpBC,IADoB,GACXF,KADW,CACpBE,IADoB,EAGzC;;AACA,QAAMC,KAAK,GAAGF,WAAW,CAACG,UAAZ,CAAuBC,SAAvB,CAAiCC,MAAjC,CACZC,IAAI,IAAIX,UAAU,CAACY,OAAX,CAAmBD,IAAI,CAACE,IAAxB,MAAkC,CAAC,CAAnC,IAAwC,CAACF,IAAI,CAACG,QAD1C,CAAd;AAIA,SAAOP,KAAK,CAACQ,MAAN,GAAe,CAAf,GACL,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KAAK,CAACS,GAAN,CAAU,CAACL,IAAD,EAAOM,CAAP,KAAa;AACtB,UAAMC,KAAK,GAAGnB,oBAAoB,CAACY,IAAI,CAACE,IAAN,CAAlC;AACA,UAAMM,cAAc,GAAGrB,WAAW,CAACQ,IAAD,EAAOK,IAAI,CAACS,SAAZ,CAAlC;AACA,WACE;AAAK,MAAA,GAAG,YAAKH,CAAL,eAAR;AAA4B,MAAA,SAAS,EAAEf,GAAG,CAACmB,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAEnB,GAAG,CAACoB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCJ,KAAjC,CADF,EAEE;AAAM,MAAA,SAAS,EAAEhB,GAAG,CAACqB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCJ,cAAjC,CAFF,CADF;AAMD,GATA,CADH,CADK,GAaH,IAbJ;AAcD,CAtBD;;AAwBAhB,yBAAyB,CAACF,SAA1B,GAAsC;AACpCI,EAAAA,WAAW,EAAEJ,SAAS,CAACI,WAAV,CAAsBmB,UADC;AAEpClB,EAAAA,IAAI,EAAET,SAAS,CAAC2B;AAFoB,CAAtC;AAKA,eAAerB,yBAAf","sourcesContent":["/**\n * Renders non-reversal line items that are not listed in the\n * `LINE_ITEMS` array in util/types.js\n *\n * The line items are rendered so that the line item code is formatted to human\n * readable form and the line total is printed as price.\n *\n * If you require another kind of presentation for your line items, add them to\n * the `LINE_ITEMS` array in util/types.js and create a specific line item\n * component for them that can be used in the `BookingBreakdown` component.\n */\nimport React from 'react';\nimport { intlShape } from 'react-intl';\nimport { formatMoney } from '../../util/currency';\nimport { humanizeLineItemCode } from '../../util/data';\nimport { LINE_ITEMS, propTypes } from '../../util/types';\n\nimport css from './BookingBreakdown.css';\n\nconst LineItemUnknownItemsMaybe = props => {\n  const { transaction, intl } = props;\n\n  // resolve unknown non-reversal line items\n  const items = transaction.attributes.lineItems.filter(\n    item => LINE_ITEMS.indexOf(item.code) === -1 && !item.reversal\n  );\n\n  return items.length > 0 ? (\n    <React.Fragment>\n      {items.map((item, i) => {\n        const label = humanizeLineItemCode(item.code);\n        const formattedTotal = formatMoney(intl, item.lineTotal);\n        return (\n          <div key={`${i}-item.code`} className={css.lineItem}>\n            <span className={css.itemLabel}>{label}</span>\n            <span className={css.itemValue}>{formattedTotal}</span>\n          </div>\n        );\n      })}\n    </React.Fragment>\n  ) : null;\n};\n\nLineItemUnknownItemsMaybe.propTypes = {\n  transaction: propTypes.transaction.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default LineItemUnknownItemsMaybe;\n"]},"metadata":{},"sourceType":"module"}