{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PayoutDetailsForm/PayoutDetailsAddress.js\";\nimport React from 'react';\nimport { intlShape } from 'react-intl';\nimport { bool, object, string } from 'prop-types';\nimport * as validators from '../../util/validators';\nimport { FieldSelect, FieldTextInput } from '../../components';\nimport { stripeCountryConfigs } from './PayoutDetailsForm';\nimport css from './PayoutDetailsForm.css';\nconst CANADIAN_PROVINCES = ['AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT'];\n\nconst PayoutDetailsAddress = props => {\n  const className = props.className,\n        country = props.country,\n        intl = props.intl,\n        disabled = props.disabled,\n        form = props.form,\n        fieldId = props.fieldId;\n  const countryConfig = country ? stripeCountryConfigs(country).addressConfig : null;\n\n  const isRequired = (countryConfig, field) => {\n    return countryConfig[field];\n  };\n\n  const showTitle = fieldId === 'company.address' || fieldId === 'individual' || fieldId === 'company.personalAddress';\n  const addressTitle = intl.formatMessage({\n    id: fieldId === 'company.address' ? 'PayoutDetailsForm.companyAddressTitle' : 'PayoutDetailsForm.streetAddressLabel'\n  });\n  const showAddressLine = country && isRequired(countryConfig, 'addressLine');\n  const streetAddressLabel = intl.formatMessage({\n    id: 'PayoutDetailsForm.streetAddressLabel'\n  });\n  const streetAddressPlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.streetAddressPlaceholder'\n  });\n  const streetAddressRequired = validators.required(intl.formatMessage({\n    id: 'PayoutDetailsForm.streetAddressRequired'\n  }));\n  const showPostalCode = country && isRequired(countryConfig, 'postalCode');\n  const postalCodeLabel = intl.formatMessage({\n    id: 'PayoutDetailsForm.postalCodeLabel'\n  });\n  const postalCodePlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.postalCodePlaceholder'\n  });\n  const postalCodeRequired = validators.required(intl.formatMessage({\n    id: 'PayoutDetailsForm.postalCodeRequired'\n  }));\n  const showCity = country && isRequired(countryConfig, 'city');\n  const cityLabel = intl.formatMessage({\n    id: 'PayoutDetailsForm.cityLabel'\n  });\n  const cityPlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.cityPlaceholder'\n  });\n  const cityRequired = validators.required(intl.formatMessage({\n    id: 'PayoutDetailsForm.cityRequired'\n  }));\n  const showState = country && isRequired(countryConfig, 'state');\n  const stateLabel = intl.formatMessage({\n    id: 'PayoutDetailsForm.stateLabel'\n  });\n  const statePlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.statePlaceholder'\n  });\n  const stateRequired = validators.required(intl.formatMessage({\n    id: 'PayoutDetailsForm.stateRequired'\n  }));\n  const showProvince = country && isRequired(countryConfig, 'province');\n  const provinceLabel = intl.formatMessage({\n    id: 'PayoutDetailsForm.canadianProvinceLabel'\n  });\n  const provincePlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.canadianProvincePlaceholder'\n  });\n  const provinceRequired = validators.required(intl.formatMessage({\n    id: 'PayoutDetailsForm.canadianProvinceRequired'\n  }));\n  return React.createElement(\"div\", {\n    className: className ? className : css.sectionContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, showTitle ? React.createElement(\"h3\", {\n    className: css.subTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, addressTitle) : null, showAddressLine ? React.createElement(FieldTextInput, {\n    id: \"\".concat(fieldId, \".streetAddress\"),\n    name: \"\".concat(fieldId, \".streetAddress\"),\n    disabled: disabled,\n    className: css.field,\n    type: \"text\",\n    autoComplete: \"street-address\",\n    label: streetAddressLabel,\n    placeholder: streetAddressPlaceholder,\n    validate: streetAddressRequired,\n    onUnmount: () => form.change(\"\".concat(fieldId, \".streetAddress\"), undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }) : null, React.createElement(\"div\", {\n    className: css.formRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, showPostalCode ? React.createElement(FieldTextInput, {\n    id: \"\".concat(fieldId, \".postalCode\"),\n    name: \"\".concat(fieldId, \".postalCode\"),\n    disabled: disabled,\n    className: css.postalCode,\n    type: \"text\",\n    autoComplete: \"postal-code\",\n    label: postalCodeLabel,\n    placeholder: postalCodePlaceholder,\n    validate: postalCodeRequired,\n    onUnmount: () => form.change(\"\".concat(fieldId, \".postalCode\"), undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }) : null, showCity ? React.createElement(FieldTextInput, {\n    id: \"\".concat(fieldId, \".city\"),\n    name: \"\".concat(fieldId, \".city\"),\n    disabled: disabled,\n    className: css.city,\n    type: \"text\",\n    autoComplete: \"address-level2\",\n    label: cityLabel,\n    placeholder: cityPlaceholder,\n    validate: cityRequired,\n    onUnmount: () => form.change(\"\".concat(fieldId, \".city\"), undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }) : null), showState ? React.createElement(FieldTextInput, {\n    id: \"\".concat(fieldId, \".state\"),\n    name: \"\".concat(fieldId, \".state\"),\n    disabled: disabled,\n    className: css.state,\n    type: \"text\",\n    autoComplete: \"address-level1\",\n    label: stateLabel,\n    placeholder: statePlaceholder,\n    validate: stateRequired,\n    onUnmount: () => form.change(\"\".concat(fieldId, \".state\"), undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }) : null, showProvince ? React.createElement(FieldSelect, {\n    id: \"\".concat(fieldId, \".province\"),\n    name: \"\".concat(fieldId, \".province\"),\n    disabled: disabled,\n    className: css.selectCountry,\n    autoComplete: \"address-level1\",\n    label: provinceLabel,\n    validate: provinceRequired,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, provincePlaceholder), CANADIAN_PROVINCES.map(p => React.createElement(\"option\", {\n    key: p,\n    value: p,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, intl.formatMessage({\n    id: \"PayoutDetailsForm.canadianProvinceNames.\".concat(p)\n  })))) : null);\n};\n\nPayoutDetailsAddress.defaultProps = {\n  country: null,\n  disabled: false,\n  fieldId: null\n};\nPayoutDetailsAddress.propTypes = {\n  country: string,\n  disabled: bool,\n  form: object.isRequired,\n  fieldId: string,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default PayoutDetailsAddress;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PayoutDetailsForm/PayoutDetailsAddress.js"],"names":["React","intlShape","bool","object","string","validators","FieldSelect","FieldTextInput","stripeCountryConfigs","css","CANADIAN_PROVINCES","PayoutDetailsAddress","props","className","country","intl","disabled","form","fieldId","countryConfig","addressConfig","isRequired","field","showTitle","addressTitle","formatMessage","id","showAddressLine","streetAddressLabel","streetAddressPlaceholder","streetAddressRequired","required","showPostalCode","postalCodeLabel","postalCodePlaceholder","postalCodeRequired","showCity","cityLabel","cityPlaceholder","cityRequired","showState","stateLabel","statePlaceholder","stateRequired","showProvince","provinceLabel","provincePlaceholder","provinceRequired","sectionContainer","subTitle","change","undefined","formRow","postalCode","city","state","selectCountry","map","p","defaultProps","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { intlShape } from 'react-intl';\nimport { bool, object, string } from 'prop-types';\nimport * as validators from '../../util/validators';\nimport { FieldSelect, FieldTextInput } from '../../components';\n\nimport { stripeCountryConfigs } from './PayoutDetailsForm';\nimport css from './PayoutDetailsForm.css';\n\nconst CANADIAN_PROVINCES = [\n  'AB',\n  'BC',\n  'MB',\n  'NB',\n  'NL',\n  'NS',\n  'NT',\n  'NU',\n  'ON',\n  'PE',\n  'QC',\n  'SK',\n  'YT',\n];\n\nconst PayoutDetailsAddress = props => {\n  const { className, country, intl, disabled, form, fieldId } = props;\n  const countryConfig = country ? stripeCountryConfigs(country).addressConfig : null;\n\n  const isRequired = (countryConfig, field) => {\n    return countryConfig[field];\n  };\n\n  const showTitle =\n    fieldId === 'company.address' ||\n    fieldId === 'individual' ||\n    fieldId === 'company.personalAddress';\n  const addressTitle = intl.formatMessage({\n    id:\n      fieldId === 'company.address'\n        ? 'PayoutDetailsForm.companyAddressTitle'\n        : 'PayoutDetailsForm.streetAddressLabel',\n  });\n\n  const showAddressLine = country && isRequired(countryConfig, 'addressLine');\n\n  const streetAddressLabel = intl.formatMessage({\n    id: 'PayoutDetailsForm.streetAddressLabel',\n  });\n  const streetAddressPlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.streetAddressPlaceholder',\n  });\n  const streetAddressRequired = validators.required(\n    intl.formatMessage({\n      id: 'PayoutDetailsForm.streetAddressRequired',\n    })\n  );\n\n  const showPostalCode = country && isRequired(countryConfig, 'postalCode');\n\n  const postalCodeLabel = intl.formatMessage({ id: 'PayoutDetailsForm.postalCodeLabel' });\n  const postalCodePlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.postalCodePlaceholder',\n  });\n  const postalCodeRequired = validators.required(\n    intl.formatMessage({\n      id: 'PayoutDetailsForm.postalCodeRequired',\n    })\n  );\n\n  const showCity = country && isRequired(countryConfig, 'city');\n\n  const cityLabel = intl.formatMessage({ id: 'PayoutDetailsForm.cityLabel' });\n  const cityPlaceholder = intl.formatMessage({ id: 'PayoutDetailsForm.cityPlaceholder' });\n  const cityRequired = validators.required(\n    intl.formatMessage({\n      id: 'PayoutDetailsForm.cityRequired',\n    })\n  );\n\n  const showState = country && isRequired(countryConfig, 'state');\n\n  const stateLabel = intl.formatMessage({ id: 'PayoutDetailsForm.stateLabel' });\n  const statePlaceholder = intl.formatMessage({ id: 'PayoutDetailsForm.statePlaceholder' });\n  const stateRequired = validators.required(\n    intl.formatMessage({\n      id: 'PayoutDetailsForm.stateRequired',\n    })\n  );\n\n  const showProvince = country && isRequired(countryConfig, 'province');\n\n  const provinceLabel = intl.formatMessage({ id: 'PayoutDetailsForm.canadianProvinceLabel' });\n  const provincePlaceholder = intl.formatMessage({\n    id: 'PayoutDetailsForm.canadianProvincePlaceholder',\n  });\n  const provinceRequired = validators.required(\n    intl.formatMessage({\n      id: 'PayoutDetailsForm.canadianProvinceRequired',\n    })\n  );\n\n  return (\n    <div className={className ? className : css.sectionContainer}>\n      {showTitle ? <h3 className={css.subTitle}>{addressTitle}</h3> : null}\n\n      {showAddressLine ? (\n        <FieldTextInput\n          id={`${fieldId}.streetAddress`}\n          name={`${fieldId}.streetAddress`}\n          disabled={disabled}\n          className={css.field}\n          type=\"text\"\n          autoComplete=\"street-address\"\n          label={streetAddressLabel}\n          placeholder={streetAddressPlaceholder}\n          validate={streetAddressRequired}\n          onUnmount={() => form.change(`${fieldId}.streetAddress`, undefined)}\n        />\n      ) : null}\n      <div className={css.formRow}>\n        {showPostalCode ? (\n          <FieldTextInput\n            id={`${fieldId}.postalCode`}\n            name={`${fieldId}.postalCode`}\n            disabled={disabled}\n            className={css.postalCode}\n            type=\"text\"\n            autoComplete=\"postal-code\"\n            label={postalCodeLabel}\n            placeholder={postalCodePlaceholder}\n            validate={postalCodeRequired}\n            onUnmount={() => form.change(`${fieldId}.postalCode`, undefined)}\n          />\n        ) : null}\n        {showCity ? (\n          <FieldTextInput\n            id={`${fieldId}.city`}\n            name={`${fieldId}.city`}\n            disabled={disabled}\n            className={css.city}\n            type=\"text\"\n            autoComplete=\"address-level2\"\n            label={cityLabel}\n            placeholder={cityPlaceholder}\n            validate={cityRequired}\n            onUnmount={() => form.change(`${fieldId}.city`, undefined)}\n          />\n        ) : null}\n      </div>\n      {showState ? (\n        <FieldTextInput\n          id={`${fieldId}.state`}\n          name={`${fieldId}.state`}\n          disabled={disabled}\n          className={css.state}\n          type=\"text\"\n          autoComplete=\"address-level1\"\n          label={stateLabel}\n          placeholder={statePlaceholder}\n          validate={stateRequired}\n          onUnmount={() => form.change(`${fieldId}.state`, undefined)}\n        />\n      ) : null}\n\n      {showProvince ? (\n        <FieldSelect\n          id={`${fieldId}.province`}\n          name={`${fieldId}.province`}\n          disabled={disabled}\n          className={css.selectCountry}\n          autoComplete=\"address-level1\"\n          label={provinceLabel}\n          validate={provinceRequired}\n        >\n          <option disabled value=\"\">\n            {provincePlaceholder}\n          </option>\n          {CANADIAN_PROVINCES.map(p => (\n            <option key={p} value={p}>\n              {intl.formatMessage({ id: `PayoutDetailsForm.canadianProvinceNames.${p}` })}\n            </option>\n          ))}\n        </FieldSelect>\n      ) : null}\n    </div>\n  );\n};\nPayoutDetailsAddress.defaultProps = {\n  country: null,\n  disabled: false,\n  fieldId: null,\n};\n\nPayoutDetailsAddress.propTypes = {\n  country: string,\n  disabled: bool,\n  form: object.isRequired,\n  fieldId: string,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nexport default PayoutDetailsAddress;\n"]},"metadata":{},"sourceType":"module"}