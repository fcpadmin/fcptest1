{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/BookingBreakdown/LineItemBookingPeriod.js\";\nimport React from 'react';\nimport { FormattedMessage, FormattedHTMLMessage, FormattedDate } from 'react-intl';\nimport moment from 'moment';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY, propTypes } from '../../util/types';\nimport { daysBetween, dateFromAPIToLocalNoon } from '../../util/dates';\nimport css from './BookingBreakdown.css';\n\nconst BookingPeriod = props => {\n  const isSingleDay = props.isSingleDay,\n        startDate = props.startDate,\n        endDate = props.endDate;\n  const dateFormatOptions = {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric'\n  };\n\n  if (isSingleDay) {\n    return React.createElement(FormattedDate, Object.assign({\n      value: startDate\n    }, dateFormatOptions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(FormattedMessage, {\n    id: \"BookingBreakdown.bookingPeriod\",\n    values: {\n      bookingStart: React.createElement(\"span\", {\n        className: css.nowrap,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(FormattedDate, Object.assign({\n        value: startDate\n      }, dateFormatOptions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }))),\n      bookingEnd: React.createElement(\"span\", {\n        className: css.nowrap,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(FormattedDate, Object.assign({\n        value: endDate\n      }, dateFormatOptions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  });\n};\n\nconst LineItemBookingPeriod = props => {\n  const transaction = props.transaction,\n        booking = props.booking,\n        unitType = props.unitType; // Attributes: displayStart and displayEnd can be used to differentiate shown time range\n  // from actual start and end times used for availability reservation. It can help in situations\n  // where there are preparation time needed between bookings.\n  // Read more: https://www.sharetribe.com/api-reference/#bookings\n\n  const _booking$attributes = booking.attributes,\n        start = _booking$attributes.start,\n        end = _booking$attributes.end,\n        displayStart = _booking$attributes.displayStart,\n        displayEnd = _booking$attributes.displayEnd;\n  const localStartDate = dateFromAPIToLocalNoon(displayStart || start);\n  const localEndDateRaw = dateFromAPIToLocalNoon(displayEnd || end);\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n  const dayCount = daysBetween(localStartDate, localEndDateRaw);\n  const isSingleDay = !isNightly && dayCount === 1;\n  const endDay = isNightly ? localEndDateRaw : moment(localEndDateRaw).subtract(1, 'days');\n  const unitPurchase = transaction.attributes.lineItems.find(item => item.code === unitType && !item.reversal);\n  const useQuantityForDayCount = isNightly || isDaily;\n  const count = useQuantityForDayCount && unitPurchase ? unitPurchase.quantity.toFixed() : dayCount;\n  const unitCountMessage = React.createElement(FormattedHTMLMessage, {\n    id: isNightly ? 'BookingBreakdown.nightCount' : 'BookingBreakdown.dayCount',\n    values: {\n      count\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: css.lineItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: css.itemLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(BookingPeriod, {\n    isSingleDay: isSingleDay,\n    startDate: localStartDate,\n    endDate: endDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: css.itemValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, unitCountMessage));\n};\n\nLineItemBookingPeriod.propTypes = {\n  transaction: propTypes.transaction.isRequired,\n  booking: propTypes.booking.isRequired\n};\nexport default LineItemBookingPeriod;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/BookingBreakdown/LineItemBookingPeriod.js"],"names":["React","FormattedMessage","FormattedHTMLMessage","FormattedDate","moment","LINE_ITEM_NIGHT","LINE_ITEM_DAY","propTypes","daysBetween","dateFromAPIToLocalNoon","css","BookingPeriod","props","isSingleDay","startDate","endDate","dateFormatOptions","weekday","month","day","bookingStart","nowrap","bookingEnd","LineItemBookingPeriod","transaction","booking","unitType","attributes","start","end","displayStart","displayEnd","localStartDate","localEndDateRaw","isNightly","isDaily","dayCount","endDay","subtract","unitPurchase","lineItems","find","item","code","reversal","useQuantityForDayCount","count","quantity","toFixed","unitCountMessage","lineItem","itemLabel","itemValue","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormattedMessage, FormattedHTMLMessage, FormattedDate } from 'react-intl';\nimport moment from 'moment';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY, propTypes } from '../../util/types';\nimport { daysBetween, dateFromAPIToLocalNoon } from '../../util/dates';\n\nimport css from './BookingBreakdown.css';\n\nconst BookingPeriod = props => {\n  const { isSingleDay, startDate, endDate } = props;\n  const dateFormatOptions = {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric',\n  };\n\n  if (isSingleDay) {\n    return <FormattedDate value={startDate} {...dateFormatOptions} />;\n  }\n\n  return (\n    <FormattedMessage\n      id=\"BookingBreakdown.bookingPeriod\"\n      values={{\n        bookingStart: (\n          <span className={css.nowrap}>\n            <FormattedDate value={startDate} {...dateFormatOptions} />\n          </span>\n        ),\n        bookingEnd: (\n          <span className={css.nowrap}>\n            <FormattedDate value={endDate} {...dateFormatOptions} />\n          </span>\n        ),\n      }}\n    />\n  );\n};\n\nconst LineItemBookingPeriod = props => {\n  const { transaction, booking, unitType } = props;\n\n  // Attributes: displayStart and displayEnd can be used to differentiate shown time range\n  // from actual start and end times used for availability reservation. It can help in situations\n  // where there are preparation time needed between bookings.\n  // Read more: https://www.sharetribe.com/api-reference/#bookings\n  const { start, end, displayStart, displayEnd } = booking.attributes;\n  const localStartDate = dateFromAPIToLocalNoon(displayStart || start);\n  const localEndDateRaw = dateFromAPIToLocalNoon(displayEnd || end);\n\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n\n  const dayCount = daysBetween(localStartDate, localEndDateRaw);\n  const isSingleDay = !isNightly && dayCount === 1;\n  const endDay = isNightly ? localEndDateRaw : moment(localEndDateRaw).subtract(1, 'days');\n\n  const unitPurchase = transaction.attributes.lineItems.find(\n    item => item.code === unitType && !item.reversal\n  );\n\n  const useQuantityForDayCount = isNightly || isDaily;\n  const count = useQuantityForDayCount && unitPurchase ? unitPurchase.quantity.toFixed() : dayCount;\n\n  const unitCountMessage = (\n    <FormattedHTMLMessage\n      id={isNightly ? 'BookingBreakdown.nightCount' : 'BookingBreakdown.dayCount'}\n      values={{ count }}\n    />\n  );\n\n  return (\n    <div className={css.lineItem}>\n      <span className={css.itemLabel}>\n        <BookingPeriod isSingleDay={isSingleDay} startDate={localStartDate} endDate={endDay} />\n      </span>\n      <span className={css.itemValue}>{unitCountMessage}</span>\n    </div>\n  );\n};\n\nLineItemBookingPeriod.propTypes = {\n  transaction: propTypes.transaction.isRequired,\n  booking: propTypes.booking.isRequired,\n};\n\nexport default LineItemBookingPeriod;\n"]},"metadata":{},"sourceType":"module"}