{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/**\n * By default, React DOM escapes any values embedded in JSX before rendering them,\n * but sometimes it is necessary to sanitize the user-generated content of received entities.\n * If you use this data in component props without any sanitization or encoding,\n * it might create XSS vulnerabilities.\n *\n * You should especially consider how you are using extended data inside the app.\n */\nconst ESCAPE_TEXT_REGEXP = /[<>]/g;\nconst ESCAPE_TEXT_REPLACEMENTS = {\n  //fullwidth lesser-than character\n  '<': '\\uff1c',\n  //fullwidth greater-than character\n  '>': '\\uff1e'\n}; // An example how you could sanitize text content.\n// This swaps some coding related characters to less dangerous ones\n\nconst sanitizeText = str => str == null ? str : typeof str === 'string' ? str.replace(ESCAPE_TEXT_REGEXP, ch => ESCAPE_TEXT_REPLACEMENTS[ch]) : '';\n/**\n * Sanitize user entity.\n * If you add public data, you should probably sanitize it here.\n * By default, React DOM escapes any values embedded in JSX before rendering them,\n * but if you use this data on props, it might create XSS vulnerabilities\n * E.g. you should sanitize and encode URI if you are creating links from public data.\n */\n\n\nexport const sanitizeUser = entity => {\n  const _ref = entity || {},\n        attributes = _ref.attributes,\n        restEntity = _objectWithoutProperties(_ref, [\"attributes\"]);\n\n  const _ref2 = attributes || {},\n        profile = _ref2.profile,\n        restAttributes = _objectWithoutProperties(_ref2, [\"profile\"]);\n\n  const _ref3 = profile || {},\n        bio = _ref3.bio,\n        displayName = _ref3.displayName,\n        abbreviatedName = _ref3.abbreviatedName,\n        publicData = _ref3.publicData;\n\n  const sanitizePublicData = publicData => {\n    // TODO: If you add public data, you should probably sanitize it here.\n    return publicData ? {\n      publicData\n    } : {};\n  };\n\n  const profileMaybe = profile ? {\n    profile: _objectSpread({\n      abbreviatedName: sanitizeText(abbreviatedName),\n      displayName: sanitizeText(displayName),\n      bio: sanitizeText(bio)\n    }, sanitizePublicData(publicData))\n  } : {};\n  const attributesMaybe = attributes ? {\n    attributes: _objectSpread({}, profileMaybe, restAttributes)\n  } : {};\n  return _objectSpread({}, attributesMaybe, restEntity);\n};\n/**\n * Sanitize listing entity.\n * If you add public data, you should probably sanitize it here.\n * By default, React DOM escapes any values embedded in JSX before rendering them,\n * but if you use this data on props, it might create XSS vulnerabilities\n * E.g. you should sanitize and encode URI if you are creating links from public data.\n */\n\nexport const sanitizeListing = entity => {\n  const attributes = entity.attributes,\n        restEntity = _objectWithoutProperties(entity, [\"attributes\"]);\n\n  const _ref4 = attributes || {},\n        title = _ref4.title,\n        description = _ref4.description,\n        publicData = _ref4.publicData,\n        restAttributes = _objectWithoutProperties(_ref4, [\"title\", \"description\", \"publicData\"]);\n\n  const sanitizeLocation = location => {\n    const _ref5 = location || {},\n          address = _ref5.address,\n          building = _ref5.building;\n\n    return {\n      address: sanitizeText(address),\n      building: sanitizeText(building)\n    };\n  };\n\n  const sanitizePublicData = publicData => {\n    // Here's an example how you could sanitize location and rules from publicData:\n    // TODO: If you add public data, you should probably sanitize it here.\n    const _ref6 = publicData || {},\n          location = _ref6.location,\n          rules = _ref6.rules,\n          restPublicData = _objectWithoutProperties(_ref6, [\"location\", \"rules\"]);\n\n    const locationMaybe = location ? {\n      location: sanitizeLocation(location)\n    } : {};\n    const rulesMaybe = rules ? {\n      rules: sanitizeText(rules)\n    } : {};\n    return publicData ? {\n      publicData: _objectSpread({}, locationMaybe, rulesMaybe, restPublicData)\n    } : {};\n  };\n\n  const attributesMaybe = attributes ? {\n    attributes: _objectSpread({\n      title: sanitizeText(title),\n      description: sanitizeText(description)\n    }, sanitizePublicData(publicData), restAttributes)\n  } : {};\n  return _objectSpread({}, attributesMaybe, restEntity);\n};\n/**\n * Sanitize entities if needed.\n * Remember to add your own sanitization rules for your extended data\n */\n\nexport const sanitizeEntity = entity => {\n  const type = entity.type;\n\n  switch (type) {\n    case 'listing':\n      return sanitizeListing(entity);\n\n    case 'user':\n      return sanitizeUser(entity);\n\n    default:\n      return entity;\n  }\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/util/sanitize.js"],"names":["ESCAPE_TEXT_REGEXP","ESCAPE_TEXT_REPLACEMENTS","sanitizeText","str","replace","ch","sanitizeUser","entity","attributes","restEntity","profile","restAttributes","bio","displayName","abbreviatedName","publicData","sanitizePublicData","profileMaybe","attributesMaybe","sanitizeListing","title","description","sanitizeLocation","location","address","building","rules","restPublicData","locationMaybe","rulesMaybe","sanitizeEntity","type"],"mappings":"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","sourcesContent":["/**\n * By default, React DOM escapes any values embedded in JSX before rendering them,\n * but sometimes it is necessary to sanitize the user-generated content of received entities.\n * If you use this data in component props without any sanitization or encoding,\n * it might create XSS vulnerabilities.\n *\n * You should especially consider how you are using extended data inside the app.\n */\n\nconst ESCAPE_TEXT_REGEXP = /[<>]/g;\nconst ESCAPE_TEXT_REPLACEMENTS = {\n  //fullwidth lesser-than character\n  '<': '\\uff1c',\n  //fullwidth greater-than character\n  '>': '\\uff1e',\n};\n\n// An example how you could sanitize text content.\n// This swaps some coding related characters to less dangerous ones\nconst sanitizeText = str =>\n  str == null\n    ? str\n    : typeof str === 'string'\n    ? str.replace(ESCAPE_TEXT_REGEXP, ch => ESCAPE_TEXT_REPLACEMENTS[ch])\n    : '';\n\n/**\n * Sanitize user entity.\n * If you add public data, you should probably sanitize it here.\n * By default, React DOM escapes any values embedded in JSX before rendering them,\n * but if you use this data on props, it might create XSS vulnerabilities\n * E.g. you should sanitize and encode URI if you are creating links from public data.\n */\nexport const sanitizeUser = entity => {\n  const { attributes, ...restEntity } = entity || {};\n  const { profile, ...restAttributes } = attributes || {};\n  const { bio, displayName, abbreviatedName, publicData } = profile || {};\n\n  const sanitizePublicData = publicData => {\n    // TODO: If you add public data, you should probably sanitize it here.\n    return publicData ? { publicData } : {};\n  };\n\n  const profileMaybe = profile\n    ? {\n        profile: {\n          abbreviatedName: sanitizeText(abbreviatedName),\n          displayName: sanitizeText(displayName),\n          bio: sanitizeText(bio),\n          ...sanitizePublicData(publicData),\n        },\n      }\n    : {};\n  const attributesMaybe = attributes ? { attributes: { ...profileMaybe, ...restAttributes } } : {};\n\n  return { ...attributesMaybe, ...restEntity };\n};\n\n/**\n * Sanitize listing entity.\n * If you add public data, you should probably sanitize it here.\n * By default, React DOM escapes any values embedded in JSX before rendering them,\n * but if you use this data on props, it might create XSS vulnerabilities\n * E.g. you should sanitize and encode URI if you are creating links from public data.\n */\nexport const sanitizeListing = entity => {\n  const { attributes, ...restEntity } = entity;\n  const { title, description, publicData, ...restAttributes } = attributes || {};\n\n  const sanitizeLocation = location => {\n    const { address, building } = location || {};\n    return { address: sanitizeText(address), building: sanitizeText(building) };\n  };\n\n  const sanitizePublicData = publicData => {\n    // Here's an example how you could sanitize location and rules from publicData:\n    // TODO: If you add public data, you should probably sanitize it here.\n    const { location, rules, ...restPublicData } = publicData || {};\n    const locationMaybe = location ? { location: sanitizeLocation(location) } : {};\n    const rulesMaybe = rules ? { rules: sanitizeText(rules) } : {};\n\n    return publicData ? { publicData: { ...locationMaybe, ...rulesMaybe, ...restPublicData } } : {};\n  };\n\n  const attributesMaybe = attributes\n    ? {\n        attributes: {\n          title: sanitizeText(title),\n          description: sanitizeText(description),\n          ...sanitizePublicData(publicData),\n          ...restAttributes,\n        },\n      }\n    : {};\n\n  return { ...attributesMaybe, ...restEntity };\n};\n\n/**\n * Sanitize entities if needed.\n * Remember to add your own sanitization rules for your extended data\n */\nexport const sanitizeEntity = entity => {\n  const { type } = entity;\n  switch (type) {\n    case 'listing':\n      return sanitizeListing(entity);\n    case 'user':\n      return sanitizeUser(entity);\n    default:\n      return entity;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}