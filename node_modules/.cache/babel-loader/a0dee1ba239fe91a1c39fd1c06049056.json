{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldDateRangeInput/FieldDateRangeInput.example.js\";\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport moment from 'moment';\nimport { Button } from '../../components';\nimport { required, bookingDatesRequired, composeValidators } from '../../util/validators';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY } from '../../util/types';\nimport { createTimeSlots } from '../../util/test-data';\nimport FieldDateRangeInput from './FieldDateRangeInput';\n\nconst createAvailableTimeSlots = (dayCount, availableDayCount) => {\n  const slots = createTimeSlots(new Date(), dayCount);\n  const availableSlotIndices = [];\n\n  while (availableSlotIndices.length < availableDayCount) {\n    const newIndex = Math.floor(Math.random() * dayCount);\n    if (availableSlotIndices.indexOf(newIndex) > -1) continue;\n    availableSlotIndices[availableSlotIndices.length] = newIndex;\n  }\n\n  return availableSlotIndices.sort((a, b) => a - b).map(i => slots[i]);\n};\n\nconst FormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const style = fieldRenderProps.style,\n          form = fieldRenderProps.form,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          onChange = fieldRenderProps.onChange,\n          pristine = fieldRenderProps.pristine,\n          submitting = fieldRenderProps.submitting,\n          dateInputProps = fieldRenderProps.dateInputProps;\n    const submitDisabled = pristine || submitting;\n    return React.createElement(\"form\", {\n      style: style,\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(FormSpy, {\n      onChange: onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(FieldDateRangeInput, Object.assign({}, dateInputProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(Button, {\n      type: \"submit\",\n      disabled: submitDisabled,\n      style: {\n        marginTop: '24px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Select\"));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}));\n\nexport const Empty = {\n  component: FormComponent,\n  props: {\n    style: {\n      marginBottom: '140px'\n    },\n    dateInputProps: {\n      name: 'bookingDates',\n      unitType: LINE_ITEM_NIGHT,\n      startDateId: 'EmptyDateRange.bookingStartDate',\n      startDateLabel: 'Start date',\n      startDatePlaceholderText: moment().format('ddd, MMMM D'),\n      endDateId: 'EmptyDateRangeInputForm.bookingEndDate',\n      endDateLabel: 'End date',\n      endDatePlaceholderText: moment().add(1, 'days').format('ddd, MMMM D'),\n      format: null,\n      validate: composeValidators(required('Required'), bookingDatesRequired('Start date is not valid', 'End date is not valid')),\n      onBlur: () => console.log('onBlur called from DateRangeInput props.'),\n      onFocus: () => console.log('onFocus called from DateRangeInput props.')\n    },\n    onChange: formState => {\n      const _formState$values = formState.values,\n            startDate = _formState$values.startDate,\n            endDate = _formState$values.endDate;\n\n      if (startDate || endDate) {\n        console.log('Changed to', moment(startDate).format('L'), moment(endDate).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    }\n  },\n  group: 'custom inputs'\n};\nexport const WithAvailableTimeSlotsNighlyBooking = {\n  component: FormComponent,\n  props: {\n    style: {\n      marginBottom: '140px'\n    },\n    dateInputProps: {\n      name: 'bookingDates',\n      unitType: LINE_ITEM_NIGHT,\n      startDateId: 'WithAvailableTimeSlotsDateRangeNightly.bookingStartDate',\n      startDateLabel: 'Start date',\n      startDatePlaceholderText: moment().format('ddd, MMMM D'),\n      endDateId: 'WithAvailableTimeSlotsDateRangeInputForm.bookingEndDate',\n      endDateLabel: 'End date',\n      endDatePlaceholderText: moment().add(1, 'days').format('ddd, MMMM D'),\n      format: null,\n      timeSlots: createAvailableTimeSlots(90, 60),\n      validate: composeValidators(required('Required'), bookingDatesRequired('Start date is not valid', 'End date is not valid')),\n      onBlur: () => console.log('onBlur called from DateRangeInput props.'),\n      onFocus: () => console.log('onFocus called from DateRangeInput props.')\n    },\n    onChange: formState => {\n      const _formState$values2 = formState.values,\n            startDate = _formState$values2.startDate,\n            endDate = _formState$values2.endDate;\n\n      if (startDate || endDate) {\n        console.log('Changed to', moment(startDate).format('L'), moment(endDate).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    }\n  },\n  group: 'custom inputs'\n};\nexport const WithAvailableTimeSlotsDailyBooking = {\n  component: FormComponent,\n  props: {\n    dateInputProps: {\n      name: 'bookingDates',\n      unitType: LINE_ITEM_DAY,\n      startDateId: 'WithAvailableTimeSlotsDateRangeDaily.bookingStartDate',\n      startDateLabel: 'Start date',\n      startDatePlaceholderText: moment().format('ddd, MMMM D'),\n      endDateId: 'WithAvailableTimeSlotsDateRangeInputForm.bookingEndDate',\n      endDateLabel: 'End date',\n      endDatePlaceholderText: moment().add(1, 'days').format('ddd, MMMM D'),\n      format: null,\n      timeSlots: createAvailableTimeSlots(90, 60),\n      validate: composeValidators(required('Required'), bookingDatesRequired('Start date is not valid', 'End date is not valid')),\n      onBlur: () => console.log('onBlur called from DateRangeInput props.'),\n      onFocus: () => console.log('onFocus called from DateRangeInput props.')\n    },\n    onChange: formState => {\n      const _formState$values3 = formState.values,\n            startDate = _formState$values3.startDate,\n            endDate = _formState$values3.endDate;\n\n      if (startDate || endDate) {\n        console.log('Changed to', moment(startDate).format('L'), moment(endDate).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    }\n  },\n  group: 'custom inputs'\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldDateRangeInput/FieldDateRangeInput.example.js"],"names":["React","Form","FinalForm","FormSpy","moment","Button","required","bookingDatesRequired","composeValidators","LINE_ITEM_NIGHT","LINE_ITEM_DAY","createTimeSlots","FieldDateRangeInput","createAvailableTimeSlots","dayCount","availableDayCount","slots","Date","availableSlotIndices","length","newIndex","Math","floor","random","indexOf","sort","a","b","map","i","FormComponent","props","fieldRenderProps","style","form","handleSubmit","onChange","pristine","submitting","dateInputProps","submitDisabled","e","preventDefault","marginTop","Empty","component","marginBottom","name","unitType","startDateId","startDateLabel","startDatePlaceholderText","format","endDateId","endDateLabel","endDatePlaceholderText","add","validate","onBlur","console","log","onFocus","formState","values","startDate","endDate","onSubmit","group","WithAvailableTimeSlotsNighlyBooking","timeSlots","WithAvailableTimeSlotsDailyBooking"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport moment from 'moment';\nimport { Button } from '../../components';\nimport { required, bookingDatesRequired, composeValidators } from '../../util/validators';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY } from '../../util/types';\nimport { createTimeSlots } from '../../util/test-data';\nimport FieldDateRangeInput from './FieldDateRangeInput';\n\nconst createAvailableTimeSlots = (dayCount, availableDayCount) => {\n  const slots = createTimeSlots(new Date(), dayCount);\n\n  const availableSlotIndices = [];\n  while (availableSlotIndices.length < availableDayCount) {\n    const newIndex = Math.floor(Math.random() * dayCount);\n    if (availableSlotIndices.indexOf(newIndex) > -1) continue;\n    availableSlotIndices[availableSlotIndices.length] = newIndex;\n  }\n\n  return availableSlotIndices.sort((a, b) => a - b).map(i => slots[i]);\n};\n\nconst FormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        style,\n        form,\n        handleSubmit,\n        onChange,\n        pristine,\n        submitting,\n        dateInputProps,\n      } = fieldRenderProps;\n      const submitDisabled = pristine || submitting;\n\n      return (\n        <form\n          style={style}\n          onSubmit={e => {\n            e.preventDefault();\n            handleSubmit(e);\n          }}\n        >\n          <FormSpy onChange={onChange} />\n          <FieldDateRangeInput {...dateInputProps} />\n          <Button type=\"submit\" disabled={submitDisabled} style={{ marginTop: '24px' }}>\n            Select\n          </Button>\n        </form>\n      );\n    }}\n  />\n);\n\nexport const Empty = {\n  component: FormComponent,\n  props: {\n    style: { marginBottom: '140px' },\n    dateInputProps: {\n      name: 'bookingDates',\n      unitType: LINE_ITEM_NIGHT,\n      startDateId: 'EmptyDateRange.bookingStartDate',\n      startDateLabel: 'Start date',\n      startDatePlaceholderText: moment().format('ddd, MMMM D'),\n      endDateId: 'EmptyDateRangeInputForm.bookingEndDate',\n      endDateLabel: 'End date',\n      endDatePlaceholderText: moment()\n        .add(1, 'days')\n        .format('ddd, MMMM D'),\n      format: null,\n      validate: composeValidators(\n        required('Required'),\n        bookingDatesRequired('Start date is not valid', 'End date is not valid')\n      ),\n      onBlur: () => console.log('onBlur called from DateRangeInput props.'),\n      onFocus: () => console.log('onFocus called from DateRangeInput props.'),\n    },\n    onChange: formState => {\n      const { startDate, endDate } = formState.values;\n      if (startDate || endDate) {\n        console.log('Changed to', moment(startDate).format('L'), moment(endDate).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    },\n  },\n  group: 'custom inputs',\n};\n\nexport const WithAvailableTimeSlotsNighlyBooking = {\n  component: FormComponent,\n  props: {\n    style: { marginBottom: '140px' },\n    dateInputProps: {\n      name: 'bookingDates',\n      unitType: LINE_ITEM_NIGHT,\n      startDateId: 'WithAvailableTimeSlotsDateRangeNightly.bookingStartDate',\n      startDateLabel: 'Start date',\n      startDatePlaceholderText: moment().format('ddd, MMMM D'),\n      endDateId: 'WithAvailableTimeSlotsDateRangeInputForm.bookingEndDate',\n      endDateLabel: 'End date',\n      endDatePlaceholderText: moment()\n        .add(1, 'days')\n        .format('ddd, MMMM D'),\n      format: null,\n      timeSlots: createAvailableTimeSlots(90, 60),\n      validate: composeValidators(\n        required('Required'),\n        bookingDatesRequired('Start date is not valid', 'End date is not valid')\n      ),\n      onBlur: () => console.log('onBlur called from DateRangeInput props.'),\n      onFocus: () => console.log('onFocus called from DateRangeInput props.'),\n    },\n    onChange: formState => {\n      const { startDate, endDate } = formState.values;\n      if (startDate || endDate) {\n        console.log('Changed to', moment(startDate).format('L'), moment(endDate).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    },\n  },\n  group: 'custom inputs',\n};\n\nexport const WithAvailableTimeSlotsDailyBooking = {\n  component: FormComponent,\n  props: {\n    dateInputProps: {\n      name: 'bookingDates',\n      unitType: LINE_ITEM_DAY,\n      startDateId: 'WithAvailableTimeSlotsDateRangeDaily.bookingStartDate',\n      startDateLabel: 'Start date',\n      startDatePlaceholderText: moment().format('ddd, MMMM D'),\n      endDateId: 'WithAvailableTimeSlotsDateRangeInputForm.bookingEndDate',\n      endDateLabel: 'End date',\n      endDatePlaceholderText: moment()\n        .add(1, 'days')\n        .format('ddd, MMMM D'),\n      format: null,\n      timeSlots: createAvailableTimeSlots(90, 60),\n      validate: composeValidators(\n        required('Required'),\n        bookingDatesRequired('Start date is not valid', 'End date is not valid')\n      ),\n      onBlur: () => console.log('onBlur called from DateRangeInput props.'),\n      onFocus: () => console.log('onFocus called from DateRangeInput props.'),\n    },\n    onChange: formState => {\n      const { startDate, endDate } = formState.values;\n      if (startDate || endDate) {\n        console.log('Changed to', moment(startDate).format('L'), moment(endDate).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    },\n  },\n  group: 'custom inputs',\n};\n"]},"metadata":{},"sourceType":"module"}