{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/EditListingPage/EditListingPage.js\";\nimport React from 'react';\nimport { bool, func, object, shape, string, oneOf } from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { intlShape, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPES, LISTING_PAGE_PENDING_APPROVAL_VARIANT, createSlug } from '../../util/urlHelpers';\nimport { LISTING_STATE_DRAFT, LISTING_STATE_PENDING_APPROVAL, propTypes } from '../../util/types';\nimport { ensureOwnListing } from '../../util/data';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { stripeAccountClearError, createStripeAccount } from '../../ducks/stripe.duck';\nimport { EditListingWizard, NamedRedirect, Page } from '../../components';\nimport { TopbarContainer } from '../../containers';\nimport { requestFetchBookings, requestFetchAvailabilityExceptions, requestCreateAvailabilityException, requestDeleteAvailabilityException, requestCreateListingDraft, requestPublishListingDraft, requestUpdateListing, requestImageUpload, updateImageOrder, removeListingImage, loadData, clearUpdatedTab } from './EditListingPage.duck';\nimport css from './EditListingPage.css';\nconst UUID = sdkTypes.UUID; // N.B. All the presentational content needs to be extracted to their own components\n\nexport const EditListingPageComponent = props => {\n  const currentUser = props.currentUser,\n        createStripeAccountError = props.createStripeAccountError,\n        fetchInProgress = props.fetchInProgress,\n        getOwnListing = props.getOwnListing,\n        history = props.history,\n        intl = props.intl,\n        onFetchAvailabilityExceptions = props.onFetchAvailabilityExceptions,\n        onCreateAvailabilityException = props.onCreateAvailabilityException,\n        onDeleteAvailabilityException = props.onDeleteAvailabilityException,\n        onFetchBookings = props.onFetchBookings,\n        onCreateListingDraft = props.onCreateListingDraft,\n        onPublishListingDraft = props.onPublishListingDraft,\n        onUpdateListing = props.onUpdateListing,\n        onImageUpload = props.onImageUpload,\n        onRemoveListingImage = props.onRemoveListingImage,\n        onManageDisableScrolling = props.onManageDisableScrolling,\n        onPayoutDetailsSubmit = props.onPayoutDetailsSubmit,\n        onPayoutDetailsFormChange = props.onPayoutDetailsFormChange,\n        onUpdateImageOrder = props.onUpdateImageOrder,\n        onChange = props.onChange,\n        page = props.page,\n        params = props.params,\n        scrollingDisabled = props.scrollingDisabled;\n  const id = params.id,\n        type = params.type;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n  const listingId = page.submittedListingId || (id ? new UUID(id) : null);\n  const currentListing = ensureOwnListing(getOwnListing(listingId));\n  const currentListingState = currentListing.attributes.state;\n  const isPastDraft = currentListingState && currentListingState !== LISTING_STATE_DRAFT;\n  const shouldRedirect = (isNewURI || isDraftURI) && listingId && isPastDraft;\n  const showForm = isNewURI || currentListing.id;\n\n  if (shouldRedirect) {\n    const isPendingApproval = currentListing && currentListingState === LISTING_STATE_PENDING_APPROVAL; // If page has already listingId (after submit) and current listings exist\n    // redirect to listing page\n\n    const listingSlug = currentListing ? createSlug(currentListing.attributes.title) : null;\n    const redirectProps = isPendingApproval ? {\n      name: 'ListingPageVariant',\n      params: {\n        id: listingId.uuid,\n        slug: listingSlug,\n        variant: LISTING_PAGE_PENDING_APPROVAL_VARIANT\n      }\n    } : {\n      name: 'ListingPage',\n      params: {\n        id: listingId.uuid,\n        slug: listingSlug\n      }\n    };\n    return React.createElement(NamedRedirect, Object.assign({}, redirectProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  } else if (showForm) {\n    const _page$createListingDr = page.createListingDraftError,\n          createListingDraftError = _page$createListingDr === void 0 ? null : _page$createListingDr,\n          _page$publishListingE = page.publishListingError,\n          publishListingError = _page$publishListingE === void 0 ? null : _page$publishListingE,\n          _page$updateListingEr = page.updateListingError,\n          updateListingError = _page$updateListingEr === void 0 ? null : _page$updateListingEr,\n          _page$showListingsErr = page.showListingsError,\n          showListingsError = _page$showListingsErr === void 0 ? null : _page$showListingsErr,\n          _page$uploadImageErro = page.uploadImageError,\n          uploadImageError = _page$uploadImageErro === void 0 ? null : _page$uploadImageErro;\n    const errors = {\n      createListingDraftError,\n      publishListingError,\n      updateListingError,\n      showListingsError,\n      uploadImageError,\n      createStripeAccountError\n    };\n    const newListingPublished = isDraftURI && currentListing && currentListingState !== LISTING_STATE_DRAFT; // Show form if user is posting a new listing or editing existing one\n\n    const disableForm = page.redirectToListing && !showListingsError; // Images are passed to EditListingForm so that it can generate thumbnails out of them\n\n    const currentListingImages = currentListing && currentListing.images ? currentListing.images : []; // Images not yet connected to the listing\n\n    const imageOrder = page.imageOrder || [];\n    const unattachedImages = imageOrder.map(i => page.images[i]);\n    const allImages = currentListingImages.concat(unattachedImages);\n    const removedImageIds = page.removedImageIds || [];\n    const images = allImages.filter(img => {\n      return !removedImageIds.includes(img.id);\n    });\n    const title = isNewURI || isDraftURI ? intl.formatMessage({\n      id: 'EditListingPage.titleCreateListing'\n    }) : intl.formatMessage({\n      id: 'EditListingPage.titleEditListing'\n    });\n    return React.createElement(Page, {\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(TopbarContainer, {\n      className: css.topbar,\n      mobileRootClassName: css.mobileTopbar,\n      desktopClassName: css.desktopTopbar,\n      mobileClassName: css.mobileTopbar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(EditListingWizard, {\n      id: \"EditListingWizard\",\n      className: css.wizard,\n      params: params,\n      disabled: disableForm,\n      errors: errors,\n      fetchInProgress: fetchInProgress,\n      newListingPublished: newListingPublished,\n      history: history,\n      images: images,\n      listing: currentListing,\n      availability: {\n        calendar: page.availabilityCalendar,\n        onFetchAvailabilityExceptions,\n        onCreateAvailabilityException,\n        onDeleteAvailabilityException,\n        onFetchBookings\n      },\n      onUpdateListing: onUpdateListing,\n      onCreateListingDraft: onCreateListingDraft,\n      onPublishListingDraft: onPublishListingDraft,\n      onPayoutDetailsFormChange: onPayoutDetailsFormChange,\n      onPayoutDetailsSubmit: onPayoutDetailsSubmit,\n      onImageUpload: onImageUpload,\n      onUpdateImageOrder: onUpdateImageOrder,\n      onRemoveImage: onRemoveListingImage,\n      onChange: onChange,\n      currentUser: currentUser,\n      onManageDisableScrolling: onManageDisableScrolling,\n      updatedTab: page.updatedTab,\n      updateInProgress: page.updateInProgress || page.createListingDraftInProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n  } else {\n    // If user has come to this page through a direct linkto edit existing listing,\n    // we need to load it first.\n    const loadingPageMsg = {\n      id: 'EditListingPage.loadingListingData'\n    };\n    return React.createElement(Page, {\n      title: intl.formatMessage(loadingPageMsg),\n      scrollingDisabled: scrollingDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    });\n  }\n};\nEditListingPageComponent.defaultProps = {\n  createStripeAccountError: null,\n  currentUser: null,\n  currentUserHasOrders: null,\n  listing: null,\n  listingDraft: null,\n  notificationCount: 0,\n  sendVerificationEmailError: null\n};\nEditListingPageComponent.propTypes = {\n  createStripeAccountError: propTypes.error,\n  currentUser: propTypes.currentUser,\n  fetchInProgress: bool.isRequired,\n  getOwnListing: func.isRequired,\n  onFetchAvailabilityExceptions: func.isRequired,\n  onCreateAvailabilityException: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onPublishListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onRemoveListingImage: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onChange: func.isRequired,\n  page: object.isRequired,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: string.isRequired\n  }).isRequired,\n  scrollingDisabled: bool.isRequired,\n\n  /* from withRouter */\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n\n  /* from injectIntl */\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const page = state.EditListingPage;\n  const _state$stripe = state.stripe,\n        createStripeAccountInProgress = _state$stripe.createStripeAccountInProgress,\n        createStripeAccountError = _state$stripe.createStripeAccountError;\n  const currentUser = state.user.currentUser;\n  const fetchInProgress = createStripeAccountInProgress;\n\n  const getOwnListing = id => {\n    const listings = getMarketplaceEntities(state, [{\n      id,\n      type: 'ownListing'\n    }]);\n    return listings.length === 1 ? listings[0] : null;\n  };\n\n  return {\n    createStripeAccountError,\n    currentUser,\n    fetchInProgress,\n    getOwnListing,\n    page,\n    scrollingDisabled: isScrollingDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onUpdateListing: (tab, values) => dispatch(requestUpdateListing(tab, values)),\n  onFetchBookings: params => dispatch(requestFetchBookings(params)),\n  onFetchAvailabilityExceptions: params => dispatch(requestFetchAvailabilityExceptions(params)),\n  onCreateAvailabilityException: params => dispatch(requestCreateAvailabilityException(params)),\n  onDeleteAvailabilityException: params => dispatch(requestDeleteAvailabilityException(params)),\n  onCreateListingDraft: values => dispatch(requestCreateListingDraft(values)),\n  onPublishListingDraft: listingId => dispatch(requestPublishListingDraft(listingId)),\n  onImageUpload: data => dispatch(requestImageUpload(data)),\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onPayoutDetailsFormChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsSubmit: values => dispatch(createStripeAccount(values)),\n  onUpdateImageOrder: imageOrder => dispatch(updateImageOrder(imageOrder)),\n  onRemoveListingImage: imageId => dispatch(removeListingImage(imageId)),\n  onChange: () => dispatch(clearUpdatedTab())\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst EditListingPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(injectIntl(EditListingPageComponent));\nEditListingPage.loadData = loadData;\nexport default EditListingPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/EditListingPage/EditListingPage.js"],"names":["React","bool","func","object","shape","string","oneOf","compose","withRouter","intlShape","injectIntl","connect","types","sdkTypes","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","LISTING_PAGE_PARAM_TYPES","LISTING_PAGE_PENDING_APPROVAL_VARIANT","createSlug","LISTING_STATE_DRAFT","LISTING_STATE_PENDING_APPROVAL","propTypes","ensureOwnListing","getMarketplaceEntities","manageDisableScrolling","isScrollingDisabled","stripeAccountClearError","createStripeAccount","EditListingWizard","NamedRedirect","Page","TopbarContainer","requestFetchBookings","requestFetchAvailabilityExceptions","requestCreateAvailabilityException","requestDeleteAvailabilityException","requestCreateListingDraft","requestPublishListingDraft","requestUpdateListing","requestImageUpload","updateImageOrder","removeListingImage","loadData","clearUpdatedTab","css","UUID","EditListingPageComponent","props","currentUser","createStripeAccountError","fetchInProgress","getOwnListing","history","intl","onFetchAvailabilityExceptions","onCreateAvailabilityException","onDeleteAvailabilityException","onFetchBookings","onCreateListingDraft","onPublishListingDraft","onUpdateListing","onImageUpload","onRemoveListingImage","onManageDisableScrolling","onPayoutDetailsSubmit","onPayoutDetailsFormChange","onUpdateImageOrder","onChange","page","params","scrollingDisabled","id","type","isNewURI","isDraftURI","listingId","submittedListingId","currentListing","currentListingState","attributes","state","isPastDraft","shouldRedirect","showForm","isPendingApproval","listingSlug","title","redirectProps","name","uuid","slug","variant","createListingDraftError","publishListingError","updateListingError","showListingsError","uploadImageError","errors","newListingPublished","disableForm","redirectToListing","currentListingImages","images","imageOrder","unattachedImages","map","i","allImages","concat","removedImageIds","filter","img","includes","formatMessage","topbar","mobileTopbar","desktopTopbar","wizard","calendar","availabilityCalendar","updatedTab","updateInProgress","createListingDraftInProgress","loadingPageMsg","defaultProps","currentUserHasOrders","listing","listingDraft","notificationCount","sendVerificationEmailError","error","isRequired","tab","push","mapStateToProps","EditListingPage","stripe","createStripeAccountInProgress","user","listings","length","mapDispatchToProps","dispatch","values","data","componentId","disableScrolling","imageId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func, object, shape, string, oneOf } from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { intlShape, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport {\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\n  LISTING_PAGE_PARAM_TYPE_NEW,\n  LISTING_PAGE_PARAM_TYPES,\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n  createSlug,\n} from '../../util/urlHelpers';\nimport { LISTING_STATE_DRAFT, LISTING_STATE_PENDING_APPROVAL, propTypes } from '../../util/types';\nimport { ensureOwnListing } from '../../util/data';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { stripeAccountClearError, createStripeAccount } from '../../ducks/stripe.duck';\nimport { EditListingWizard, NamedRedirect, Page } from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport {\n  requestFetchBookings,\n  requestFetchAvailabilityExceptions,\n  requestCreateAvailabilityException,\n  requestDeleteAvailabilityException,\n  requestCreateListingDraft,\n  requestPublishListingDraft,\n  requestUpdateListing,\n  requestImageUpload,\n  updateImageOrder,\n  removeListingImage,\n  loadData,\n  clearUpdatedTab,\n} from './EditListingPage.duck';\n\nimport css from './EditListingPage.css';\n\nconst { UUID } = sdkTypes;\n\n// N.B. All the presentational content needs to be extracted to their own components\nexport const EditListingPageComponent = props => {\n  const {\n    currentUser,\n    createStripeAccountError,\n    fetchInProgress,\n    getOwnListing,\n    history,\n    intl,\n    onFetchAvailabilityExceptions,\n    onCreateAvailabilityException,\n    onDeleteAvailabilityException,\n    onFetchBookings,\n    onCreateListingDraft,\n    onPublishListingDraft,\n    onUpdateListing,\n    onImageUpload,\n    onRemoveListingImage,\n    onManageDisableScrolling,\n    onPayoutDetailsSubmit,\n    onPayoutDetailsFormChange,\n    onUpdateImageOrder,\n    onChange,\n    page,\n    params,\n    scrollingDisabled,\n  } = props;\n\n  const { id, type } = params;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n\n  const listingId = page.submittedListingId || (id ? new UUID(id) : null);\n  const currentListing = ensureOwnListing(getOwnListing(listingId));\n  const { state: currentListingState } = currentListing.attributes;\n\n  const isPastDraft = currentListingState && currentListingState !== LISTING_STATE_DRAFT;\n  const shouldRedirect = (isNewURI || isDraftURI) && listingId && isPastDraft;\n  const showForm = isNewURI || currentListing.id;\n\n  if (shouldRedirect) {\n    const isPendingApproval =\n      currentListing && currentListingState === LISTING_STATE_PENDING_APPROVAL;\n\n    // If page has already listingId (after submit) and current listings exist\n    // redirect to listing page\n    const listingSlug = currentListing ? createSlug(currentListing.attributes.title) : null;\n\n    const redirectProps = isPendingApproval\n      ? {\n          name: 'ListingPageVariant',\n          params: {\n            id: listingId.uuid,\n            slug: listingSlug,\n            variant: LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n          },\n        }\n      : {\n          name: 'ListingPage',\n          params: {\n            id: listingId.uuid,\n            slug: listingSlug,\n          },\n        };\n\n    return <NamedRedirect {...redirectProps} />;\n  } else if (showForm) {\n    const {\n      createListingDraftError = null,\n      publishListingError = null,\n      updateListingError = null,\n      showListingsError = null,\n      uploadImageError = null,\n    } = page;\n    const errors = {\n      createListingDraftError,\n      publishListingError,\n      updateListingError,\n      showListingsError,\n      uploadImageError,\n      createStripeAccountError,\n    };\n    const newListingPublished =\n      isDraftURI && currentListing && currentListingState !== LISTING_STATE_DRAFT;\n\n    // Show form if user is posting a new listing or editing existing one\n    const disableForm = page.redirectToListing && !showListingsError;\n\n    // Images are passed to EditListingForm so that it can generate thumbnails out of them\n    const currentListingImages =\n      currentListing && currentListing.images ? currentListing.images : [];\n\n    // Images not yet connected to the listing\n    const imageOrder = page.imageOrder || [];\n    const unattachedImages = imageOrder.map(i => page.images[i]);\n\n    const allImages = currentListingImages.concat(unattachedImages);\n    const removedImageIds = page.removedImageIds || [];\n    const images = allImages.filter(img => {\n      return !removedImageIds.includes(img.id);\n    });\n\n    const title =\n      isNewURI || isDraftURI\n        ? intl.formatMessage({ id: 'EditListingPage.titleCreateListing' })\n        : intl.formatMessage({ id: 'EditListingPage.titleEditListing' });\n\n    return (\n      <Page title={title} scrollingDisabled={scrollingDisabled}>\n        <TopbarContainer\n          className={css.topbar}\n          mobileRootClassName={css.mobileTopbar}\n          desktopClassName={css.desktopTopbar}\n          mobileClassName={css.mobileTopbar}\n        />\n        <EditListingWizard\n          id=\"EditListingWizard\"\n          className={css.wizard}\n          params={params}\n          disabled={disableForm}\n          errors={errors}\n          fetchInProgress={fetchInProgress}\n          newListingPublished={newListingPublished}\n          history={history}\n          images={images}\n          listing={currentListing}\n          availability={{\n            calendar: page.availabilityCalendar,\n            onFetchAvailabilityExceptions,\n            onCreateAvailabilityException,\n            onDeleteAvailabilityException,\n            onFetchBookings,\n          }}\n          onUpdateListing={onUpdateListing}\n          onCreateListingDraft={onCreateListingDraft}\n          onPublishListingDraft={onPublishListingDraft}\n          onPayoutDetailsFormChange={onPayoutDetailsFormChange}\n          onPayoutDetailsSubmit={onPayoutDetailsSubmit}\n          onImageUpload={onImageUpload}\n          onUpdateImageOrder={onUpdateImageOrder}\n          onRemoveImage={onRemoveListingImage}\n          onChange={onChange}\n          currentUser={currentUser}\n          onManageDisableScrolling={onManageDisableScrolling}\n          updatedTab={page.updatedTab}\n          updateInProgress={page.updateInProgress || page.createListingDraftInProgress}\n        />\n      </Page>\n    );\n  } else {\n    // If user has come to this page through a direct linkto edit existing listing,\n    // we need to load it first.\n    const loadingPageMsg = {\n      id: 'EditListingPage.loadingListingData',\n    };\n    return (\n      <Page title={intl.formatMessage(loadingPageMsg)} scrollingDisabled={scrollingDisabled} />\n    );\n  }\n};\n\nEditListingPageComponent.defaultProps = {\n  createStripeAccountError: null,\n  currentUser: null,\n  currentUserHasOrders: null,\n  listing: null,\n  listingDraft: null,\n  notificationCount: 0,\n  sendVerificationEmailError: null,\n};\n\nEditListingPageComponent.propTypes = {\n  createStripeAccountError: propTypes.error,\n  currentUser: propTypes.currentUser,\n  fetchInProgress: bool.isRequired,\n  getOwnListing: func.isRequired,\n  onFetchAvailabilityExceptions: func.isRequired,\n  onCreateAvailabilityException: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onPublishListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onRemoveListingImage: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onChange: func.isRequired,\n  page: object.isRequired,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: string.isRequired,\n  }).isRequired,\n  scrollingDisabled: bool.isRequired,\n\n  /* from withRouter */\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n\n  /* from injectIntl */\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const page = state.EditListingPage;\n  const { createStripeAccountInProgress, createStripeAccountError } = state.stripe;\n  const { currentUser } = state.user;\n\n  const fetchInProgress = createStripeAccountInProgress;\n\n  const getOwnListing = id => {\n    const listings = getMarketplaceEntities(state, [{ id, type: 'ownListing' }]);\n\n    return listings.length === 1 ? listings[0] : null;\n  };\n  return {\n    createStripeAccountError,\n    currentUser,\n    fetchInProgress,\n    getOwnListing,\n    page,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onUpdateListing: (tab, values) => dispatch(requestUpdateListing(tab, values)),\n  onFetchBookings: params => dispatch(requestFetchBookings(params)),\n  onFetchAvailabilityExceptions: params => dispatch(requestFetchAvailabilityExceptions(params)),\n  onCreateAvailabilityException: params => dispatch(requestCreateAvailabilityException(params)),\n  onDeleteAvailabilityException: params => dispatch(requestDeleteAvailabilityException(params)),\n  onCreateListingDraft: values => dispatch(requestCreateListingDraft(values)),\n  onPublishListingDraft: listingId => dispatch(requestPublishListingDraft(listingId)),\n  onImageUpload: data => dispatch(requestImageUpload(data)),\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onPayoutDetailsFormChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsSubmit: values => dispatch(createStripeAccount(values)),\n  onUpdateImageOrder: imageOrder => dispatch(updateImageOrder(imageOrder)),\n  onRemoveListingImage: imageId => dispatch(removeListingImage(imageId)),\n  onChange: () => dispatch(clearUpdatedTab()),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst EditListingPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(injectIntl(EditListingPageComponent));\n\nEditListingPage.loadData = loadData;\n\nexport default EditListingPage;\n"]},"metadata":{},"sourceType":"module"}