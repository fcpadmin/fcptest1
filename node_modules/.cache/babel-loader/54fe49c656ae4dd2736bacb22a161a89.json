{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Decimal from 'decimal.js';\nimport moment from 'moment';\nimport { types as sdkTypes } from './sdkLoader';\nimport { nightsBetween } from '../util/dates';\nimport { TRANSITION_ACCEPT, TRANSITION_REQUEST, TX_TRANSITION_ACTOR_CUSTOMER, TX_TRANSITION_ACTOR_PROVIDER } from '../util/transaction';\nimport { LISTING_STATE_PUBLISHED, TIME_SLOT_DAY } from '../util/types';\nconst UUID = sdkTypes.UUID,\n      LatLng = sdkTypes.LatLng,\n      Money = sdkTypes.Money; // Create a booking that conforms to the util/types booking schema\n\nexport const createBooking = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'booking',\n  attributes: _objectSpread({\n    start: new Date(Date.UTC(2017, 5, 10)),\n    displayStart: new Date(Date.UTC(2017, 5, 10)),\n    end: new Date(Date.UTC(2017, 5, 10)),\n    displayEnd: new Date(Date.UTC(2017, 5, 10))\n  }, attributes)\n}); // Create a stripeAccount that conforms to the util/types stripeAccount schema\n\nexport const createStripeAccount = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'stripeAccount',\n  attributes: _objectSpread({\n    stripeAccountId: 'acc_testiaccountid'\n  }, attributes)\n}); // Create a user that conforms to the util/types user schema\n\nexport const createUser = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'user',\n  attributes: _objectSpread({\n    banned: false,\n    deleted: false,\n    profile: {\n      displayName: \"\".concat(id, \" display name\"),\n      abbreviatedName: 'TT'\n    }\n  }, attributes)\n}); // Create a user that conforms to the util/types currentUser schema\n\nexport const createCurrentUser = (id, attributes = {}, includes = {}) => _objectSpread({\n  id: new UUID(id),\n  type: 'currentUser',\n  attributes: _objectSpread({\n    banned: false,\n    deleted: false,\n    email: \"\".concat(id, \"@example.com\"),\n    emailVerified: true,\n    profile: {\n      firstName: \"\".concat(id, \" first name\"),\n      lastName: \"\".concat(id, \" last name\"),\n      displayName: \"\".concat(id, \" display name\"),\n      abbreviatedName: \"\".concat(id, \" abbreviated name\")\n    }\n  }, attributes)\n}, includes); // Create a user that conforms to the util/types user schema\n\nexport const createImage = id => ({\n  id: new UUID(id),\n  type: 'image',\n  attributes: {\n    variants: {\n      // TODO: add all possible variants here\n      square: {\n        name: 'square',\n        height: 408,\n        width: 408,\n        url: 'https://via.placeholder.com/408x408'\n      },\n      square2x: {\n        name: 'square2x',\n        height: 816,\n        width: 816,\n        url: 'https://via.placeholder.com/816x816'\n      }\n    }\n  }\n}); // Create a user that conforms to the util/types listing schema\n\nexport const createListing = (id, attributes = {}, includes = {}) => _objectSpread({\n  id: new UUID(id),\n  type: 'listing',\n  attributes: _objectSpread({\n    title: \"\".concat(id, \" title\"),\n    description: \"\".concat(id, \" description\"),\n    geolocation: new LatLng(40, 60),\n    deleted: false,\n    state: LISTING_STATE_PUBLISHED,\n    price: new Money(5500, 'USD'),\n    publicData: {}\n  }, attributes)\n}, includes); // Create a user that conforms to the util/types ownListing schema\n\nexport const createOwnListing = (id, attributes = {}, includes = {}) => _objectSpread({\n  id: new UUID(id),\n  type: 'ownListing',\n  attributes: _objectSpread({\n    title: \"\".concat(id, \" title\"),\n    description: \"\".concat(id, \" description\"),\n    geolocation: new LatLng(40, 60),\n    deleted: false,\n    state: LISTING_STATE_PUBLISHED,\n    price: new Money(5500, 'USD'),\n    availabilityPlan: {\n      type: 'availability-plan/day',\n      entries: [{\n        dayOfWeek: 'mon',\n        seats: 1\n      }, {\n        dayOfWeek: 'tue',\n        seats: 1\n      }, {\n        dayOfWeek: 'wed',\n        seats: 1\n      }, {\n        dayOfWeek: 'thu',\n        seats: 1\n      }, {\n        dayOfWeek: 'fri',\n        seats: 1\n      }, {\n        dayOfWeek: 'sat',\n        seats: 1\n      }, {\n        dayOfWeek: 'sun',\n        seats: 1\n      }]\n    },\n    publicData: {}\n  }, attributes)\n}, includes);\nexport const createTxTransition = options => {\n  return _objectSpread({\n    createdAt: new Date(Date.UTC(2017, 4, 1)),\n    by: TX_TRANSITION_ACTOR_CUSTOMER,\n    transition: TRANSITION_REQUEST\n  }, options);\n};\nexport const createTransaction = options => {\n  const id = options.id,\n        _options$lastTransiti = options.lastTransition,\n        lastTransition = _options$lastTransiti === void 0 ? TRANSITION_ACCEPT : _options$lastTransiti,\n        _options$total = options.total,\n        total = _options$total === void 0 ? new Money(1000, 'USD') : _options$total,\n        _options$commission = options.commission,\n        commission = _options$commission === void 0 ? new Money(100, 'USD') : _options$commission,\n        _options$booking = options.booking,\n        booking = _options$booking === void 0 ? null : _options$booking,\n        _options$listing = options.listing,\n        listing = _options$listing === void 0 ? null : _options$listing,\n        _options$customer = options.customer,\n        customer = _options$customer === void 0 ? null : _options$customer,\n        _options$provider = options.provider,\n        provider = _options$provider === void 0 ? null : _options$provider,\n        _options$reviews = options.reviews,\n        reviews = _options$reviews === void 0 ? [] : _options$reviews,\n        _options$lastTransiti2 = options.lastTransitionedAt,\n        lastTransitionedAt = _options$lastTransiti2 === void 0 ? new Date(Date.UTC(2017, 5, 1)) : _options$lastTransiti2,\n        _options$transitions = options.transitions,\n        transitions = _options$transitions === void 0 ? [createTxTransition({\n    createdAt: new Date(Date.UTC(2017, 4, 1)),\n    by: TX_TRANSITION_ACTOR_CUSTOMER,\n    transition: TRANSITION_REQUEST\n  }), createTxTransition({\n    createdAt: new Date(Date.UTC(2017, 5, 1)),\n    by: TX_TRANSITION_ACTOR_PROVIDER,\n    transition: TRANSITION_ACCEPT\n  })] : _options$transitions;\n  const nightCount = booking ? nightsBetween(booking.attributes.start, booking.attributes.end) : 1;\n  return {\n    id: new UUID(id),\n    type: 'transaction',\n    attributes: {\n      createdAt: new Date(Date.UTC(2017, 4, 1)),\n      lastTransitionedAt,\n      lastTransition,\n      payinTotal: total,\n      payoutTotal: new Money(total.amount - commission.amount, total.currency),\n      lineItems: [{\n        code: 'line-item/night',\n        includeFor: ['customer', 'provider'],\n        quantity: new Decimal(nightCount),\n        unitPrice: new Money(total.amount / nightCount, total.currency),\n        lineTotal: total,\n        reversal: false\n      }, {\n        code: 'line-item/provider-commission',\n        includeFor: ['provider'],\n        unitPrice: new Money(commission.amount * -1, commission.currency),\n        lineTotal: new Money(commission.amount * -1, commission.currency),\n        reversal: false\n      }],\n      transitions\n    },\n    booking,\n    listing,\n    customer,\n    provider,\n    reviews\n  };\n};\nexport const createMessage = (id, attributes = {}, includes = {}) => {\n  return _objectSpread({\n    id: new UUID(id),\n    type: 'message',\n    attributes: _objectSpread({\n      createdAt: new Date(Date.UTC(2017, 10, 9, 8, 12)),\n      content: \"Message \".concat(id, \"\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\")\n    }, attributes)\n  }, includes);\n};\nexport const createReview = (id, attributes = {}, includes = {}) => {\n  return _objectSpread({\n    id: new UUID(id),\n    attributes: _objectSpread({\n      createdAt: new Date(),\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      rating: 3,\n      state: 'public',\n      type: 'ofProvider'\n    }, attributes)\n  }, includes);\n};\n/**\n * Creates an array of time slot objects.\n *\n * @param {Date} startDate date when the time slots start\n * @param {Number} numberOfDays number of time slots to create\n *\n * @return {Array} array of time slots\n */\n\nexport const createTimeSlots = (startDate, numberOfDays) => {\n  const startTime = moment.utc(startDate).startOf('day');\n  return Array.from({\n    length: numberOfDays\n  }, (v, i) => i).map(i => {\n    return {\n      id: new UUID(i),\n      type: 'timeSlot',\n      attributes: {\n        start: moment(startTime).add(i, 'days').toDate(),\n        end: moment(startTime).add(i + 1, 'days').toDate(),\n        type: TIME_SLOT_DAY\n      }\n    };\n  });\n}; // Default config for currency formatting in tests and examples.\n\nexport const currencyConfig = {\n  style: 'currency',\n  currency: 'USD',\n  currencyDisplay: 'symbol',\n  useGrouping: true,\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n};\n\nconst pad = num => {\n  return num >= 0 && num < 10 ? \"0\".concat(num) : \"\".concat(num);\n}; // Create fake Internalization object to help with shallow rendering.\n\n\nexport const fakeIntl = {\n  formatDate: d => \"\".concat(d.getUTCFullYear(), \"-\").concat(pad(d.getUTCMonth() + 1), \"-\").concat(pad(d.getUTCDate())),\n  formatHTMLMessage: d => d,\n  formatMessage: msg => msg.id,\n  formatNumber: d => d,\n  formatPlural: d => d,\n  formatRelative: d => d,\n  formatTime: d => \"\".concat(pad(d.getUTCHours()), \":\").concat(pad(d.getUTCMinutes())),\n  now: () => Date.UTC(2017, 10, 23, 12, 59)\n};\n\nconst noop = () => null;\n\nexport const fakeFormProps = {\n  anyTouched: false,\n  asyncValidating: false,\n  dirty: false,\n  form: 'fakeTestForm',\n  invalid: false,\n  pristine: true,\n  clearSubmit: noop,\n  touch: noop,\n  untouch: noop,\n  submit: noop,\n  reset: noop,\n  resetSection: noop,\n  initialize: noop,\n  handleSubmit: noop,\n  destroy: noop,\n  clearAsyncError: noop,\n  clearFields: noop,\n  clearSubmitErrors: noop,\n  change: noop,\n  blur: noop,\n  autofill: noop,\n  asyncValidate: noop,\n  valid: true,\n  submitSucceeded: false,\n  submitFailed: false,\n  submitting: false,\n  pure: true,\n  initialized: true\n}; // Create fake viewport to help with shallow rendering\n\nexport const fakeViewport = {\n  width: 2100,\n  height: 1339\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/util/test-data.js"],"names":["Decimal","moment","types","sdkTypes","nightsBetween","TRANSITION_ACCEPT","TRANSITION_REQUEST","TX_TRANSITION_ACTOR_CUSTOMER","TX_TRANSITION_ACTOR_PROVIDER","LISTING_STATE_PUBLISHED","TIME_SLOT_DAY","UUID","LatLng","Money","createBooking","id","attributes","type","start","Date","UTC","displayStart","end","displayEnd","createStripeAccount","stripeAccountId","createUser","banned","deleted","profile","displayName","abbreviatedName","createCurrentUser","includes","email","emailVerified","firstName","lastName","createImage","variants","square","name","height","width","url","square2x","createListing","title","description","geolocation","state","price","publicData","createOwnListing","availabilityPlan","entries","dayOfWeek","seats","createTxTransition","options","createdAt","by","transition","createTransaction","lastTransition","total","commission","booking","listing","customer","provider","reviews","lastTransitionedAt","transitions","nightCount","payinTotal","payoutTotal","amount","currency","lineItems","code","includeFor","quantity","unitPrice","lineTotal","reversal","createMessage","content","createReview","rating","createTimeSlots","startDate","numberOfDays","startTime","utc","startOf","Array","from","length","v","i","map","add","toDate","currencyConfig","style","currencyDisplay","useGrouping","minimumFractionDigits","maximumFractionDigits","pad","num","fakeIntl","formatDate","d","getUTCFullYear","getUTCMonth","getUTCDate","formatHTMLMessage","formatMessage","msg","formatNumber","formatPlural","formatRelative","formatTime","getUTCHours","getUTCMinutes","now","noop","fakeFormProps","anyTouched","asyncValidating","dirty","form","invalid","pristine","clearSubmit","touch","untouch","submit","reset","resetSection","initialize","handleSubmit","destroy","clearAsyncError","clearFields","clearSubmitErrors","change","blur","autofill","asyncValidate","valid","submitSucceeded","submitFailed","submitting","pure","initialized","fakeViewport"],"mappings":"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","sourcesContent":["import Decimal from 'decimal.js';\nimport moment from 'moment';\nimport { types as sdkTypes } from './sdkLoader';\nimport { nightsBetween } from '../util/dates';\nimport {\n  TRANSITION_ACCEPT,\n  TRANSITION_REQUEST,\n  TX_TRANSITION_ACTOR_CUSTOMER,\n  TX_TRANSITION_ACTOR_PROVIDER,\n} from '../util/transaction';\nimport { LISTING_STATE_PUBLISHED, TIME_SLOT_DAY } from '../util/types';\n\nconst { UUID, LatLng, Money } = sdkTypes;\n\n// Create a booking that conforms to the util/types booking schema\nexport const createBooking = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'booking',\n  attributes: {\n    start: new Date(Date.UTC(2017, 5, 10)),\n    displayStart: new Date(Date.UTC(2017, 5, 10)),\n    end: new Date(Date.UTC(2017, 5, 10)),\n    displayEnd: new Date(Date.UTC(2017, 5, 10)),\n    ...attributes,\n  },\n});\n\n// Create a stripeAccount that conforms to the util/types stripeAccount schema\nexport const createStripeAccount = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'stripeAccount',\n  attributes: {\n    stripeAccountId: 'acc_testiaccountid',\n    ...attributes,\n  },\n});\n\n// Create a user that conforms to the util/types user schema\nexport const createUser = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'user',\n  attributes: {\n    banned: false,\n    deleted: false,\n    profile: {\n      displayName: `${id} display name`,\n      abbreviatedName: 'TT',\n    },\n    ...attributes,\n  },\n});\n\n// Create a user that conforms to the util/types currentUser schema\nexport const createCurrentUser = (id, attributes = {}, includes = {}) => ({\n  id: new UUID(id),\n  type: 'currentUser',\n  attributes: {\n    banned: false,\n    deleted: false,\n    email: `${id}@example.com`,\n    emailVerified: true,\n    profile: {\n      firstName: `${id} first name`,\n      lastName: `${id} last name`,\n      displayName: `${id} display name`,\n      abbreviatedName: `${id} abbreviated name`,\n    },\n    ...attributes,\n  },\n  ...includes,\n});\n\n// Create a user that conforms to the util/types user schema\nexport const createImage = id => ({\n  id: new UUID(id),\n  type: 'image',\n  attributes: {\n    variants: {\n      // TODO: add all possible variants here\n      square: {\n        name: 'square',\n        height: 408,\n        width: 408,\n        url: 'https://via.placeholder.com/408x408',\n      },\n      square2x: {\n        name: 'square2x',\n        height: 816,\n        width: 816,\n        url: 'https://via.placeholder.com/816x816',\n      },\n    },\n  },\n});\n\n// Create a user that conforms to the util/types listing schema\nexport const createListing = (id, attributes = {}, includes = {}) => ({\n  id: new UUID(id),\n  type: 'listing',\n  attributes: {\n    title: `${id} title`,\n    description: `${id} description`,\n    geolocation: new LatLng(40, 60),\n    deleted: false,\n    state: LISTING_STATE_PUBLISHED,\n    price: new Money(5500, 'USD'),\n    publicData: {},\n    ...attributes,\n  },\n  ...includes,\n});\n\n// Create a user that conforms to the util/types ownListing schema\nexport const createOwnListing = (id, attributes = {}, includes = {}) => ({\n  id: new UUID(id),\n  type: 'ownListing',\n  attributes: {\n    title: `${id} title`,\n    description: `${id} description`,\n    geolocation: new LatLng(40, 60),\n    deleted: false,\n    state: LISTING_STATE_PUBLISHED,\n    price: new Money(5500, 'USD'),\n    availabilityPlan: {\n      type: 'availability-plan/day',\n      entries: [\n        { dayOfWeek: 'mon', seats: 1 },\n        { dayOfWeek: 'tue', seats: 1 },\n        { dayOfWeek: 'wed', seats: 1 },\n        { dayOfWeek: 'thu', seats: 1 },\n        { dayOfWeek: 'fri', seats: 1 },\n        { dayOfWeek: 'sat', seats: 1 },\n        { dayOfWeek: 'sun', seats: 1 },\n      ],\n    },\n    publicData: {},\n    ...attributes,\n  },\n  ...includes,\n});\n\nexport const createTxTransition = options => {\n  return {\n    createdAt: new Date(Date.UTC(2017, 4, 1)),\n    by: TX_TRANSITION_ACTOR_CUSTOMER,\n    transition: TRANSITION_REQUEST,\n    ...options,\n  };\n};\n\nexport const createTransaction = options => {\n  const {\n    id,\n    lastTransition = TRANSITION_ACCEPT,\n    total = new Money(1000, 'USD'),\n    commission = new Money(100, 'USD'),\n    booking = null,\n    listing = null,\n    customer = null,\n    provider = null,\n    reviews = [],\n    lastTransitionedAt = new Date(Date.UTC(2017, 5, 1)),\n    transitions = [\n      createTxTransition({\n        createdAt: new Date(Date.UTC(2017, 4, 1)),\n        by: TX_TRANSITION_ACTOR_CUSTOMER,\n        transition: TRANSITION_REQUEST,\n      }),\n      createTxTransition({\n        createdAt: new Date(Date.UTC(2017, 5, 1)),\n        by: TX_TRANSITION_ACTOR_PROVIDER,\n        transition: TRANSITION_ACCEPT,\n      }),\n    ],\n  } = options;\n  const nightCount = booking ? nightsBetween(booking.attributes.start, booking.attributes.end) : 1;\n  return {\n    id: new UUID(id),\n    type: 'transaction',\n    attributes: {\n      createdAt: new Date(Date.UTC(2017, 4, 1)),\n      lastTransitionedAt,\n      lastTransition,\n      payinTotal: total,\n      payoutTotal: new Money(total.amount - commission.amount, total.currency),\n      lineItems: [\n        {\n          code: 'line-item/night',\n          includeFor: ['customer', 'provider'],\n          quantity: new Decimal(nightCount),\n          unitPrice: new Money(total.amount / nightCount, total.currency),\n          lineTotal: total,\n          reversal: false,\n        },\n        {\n          code: 'line-item/provider-commission',\n          includeFor: ['provider'],\n          unitPrice: new Money(commission.amount * -1, commission.currency),\n          lineTotal: new Money(commission.amount * -1, commission.currency),\n          reversal: false,\n        },\n      ],\n      transitions,\n    },\n    booking,\n    listing,\n    customer,\n    provider,\n    reviews,\n  };\n};\n\nexport const createMessage = (id, attributes = {}, includes = {}) => {\n  return {\n    id: new UUID(id),\n    type: 'message',\n    attributes: {\n      createdAt: new Date(Date.UTC(2017, 10, 9, 8, 12)),\n      content: `Message ${id}\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.`,\n      ...attributes,\n    },\n    ...includes,\n  };\n};\n\nexport const createReview = (id, attributes = {}, includes = {}) => {\n  return {\n    id: new UUID(id),\n    attributes: {\n      createdAt: new Date(),\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      rating: 3,\n      state: 'public',\n      type: 'ofProvider',\n      ...attributes,\n    },\n    ...includes,\n  };\n};\n\n/**\n * Creates an array of time slot objects.\n *\n * @param {Date} startDate date when the time slots start\n * @param {Number} numberOfDays number of time slots to create\n *\n * @return {Array} array of time slots\n */\nexport const createTimeSlots = (startDate, numberOfDays) => {\n  const startTime = moment.utc(startDate).startOf('day');\n\n  return Array.from({ length: numberOfDays }, (v, i) => i).map(i => {\n    return {\n      id: new UUID(i),\n      type: 'timeSlot',\n      attributes: {\n        start: moment(startTime)\n          .add(i, 'days')\n          .toDate(),\n        end: moment(startTime)\n          .add(i + 1, 'days')\n          .toDate(),\n        type: TIME_SLOT_DAY,\n      },\n    };\n  });\n};\n\n// Default config for currency formatting in tests and examples.\nexport const currencyConfig = {\n  style: 'currency',\n  currency: 'USD',\n  currencyDisplay: 'symbol',\n  useGrouping: true,\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n};\n\nconst pad = num => {\n  return num >= 0 && num < 10 ? `0${num}` : `${num}`;\n};\n\n// Create fake Internalization object to help with shallow rendering.\nexport const fakeIntl = {\n  formatDate: d => `${d.getUTCFullYear()}-${pad(d.getUTCMonth() + 1)}-${pad(d.getUTCDate())}`,\n  formatHTMLMessage: d => d,\n  formatMessage: msg => msg.id,\n  formatNumber: d => d,\n  formatPlural: d => d,\n  formatRelative: d => d,\n  formatTime: d => `${pad(d.getUTCHours())}:${pad(d.getUTCMinutes())}`,\n  now: () => Date.UTC(2017, 10, 23, 12, 59),\n};\n\nconst noop = () => null;\n\nexport const fakeFormProps = {\n  anyTouched: false,\n  asyncValidating: false,\n  dirty: false,\n  form: 'fakeTestForm',\n  invalid: false,\n  pristine: true,\n  clearSubmit: noop,\n  touch: noop,\n  untouch: noop,\n  submit: noop,\n  reset: noop,\n  resetSection: noop,\n  initialize: noop,\n  handleSubmit: noop,\n  destroy: noop,\n  clearAsyncError: noop,\n  clearFields: noop,\n  clearSubmitErrors: noop,\n  change: noop,\n  blur: noop,\n  autofill: noop,\n  asyncValidate: noop,\n  valid: true,\n  submitSucceeded: false,\n  submitFailed: false,\n  submitting: false,\n  pure: true,\n  initialized: true,\n};\n\n// Create fake viewport to help with shallow rendering\nexport const fakeViewport = {\n  width: 2100,\n  height: 1339,\n};\n"]},"metadata":{},"sourceType":"module"}