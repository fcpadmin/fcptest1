{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ModalInMobile/ModalInMobile.js\";\n\n/**\n * ModalInMobile gives possibility separate part of existing DOM so that in mobile views that\n * fragment is shown in a separate modal layer on top of the page.\n *\n * Currently, this does not implement resize listener for window.\n *\n * Example:\n * <Parent>\n *   <ModalInMobile isModalOpenOnMobile={this.state.modalOpen} onClose={handleClose}>\n *     <FormX />\n *   </ModalInMobile>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Modal } from '../../components';\nimport { withViewport } from '../../util/contextHelpers';\nimport css from './ModalInMobile.css';\n\nclass ModalInMobileComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.changeOpenStatus = this.changeOpenStatus.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          isModalOpenOnMobile = _this$props.isModalOpenOnMobile,\n          showAsModalMaxWidth = _this$props.showAsModalMaxWidth,\n          viewport = _this$props.viewport; // After Mounting, component can adapt to responsive screen size\n\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n\n    if (isMobileLayout && isModalOpenOnMobile) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const isModalOpenOnMobile = nextProps.isModalOpenOnMobile,\n          showAsModalMaxWidth = nextProps.showAsModalMaxWidth,\n          viewport = nextProps.viewport;\n    const isChanging = isModalOpenOnMobile !== this.state.isOpen;\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const shouldBeClosedAsModal = !isMobileLayout && !isModalOpenOnMobile; // Handle change if status is changing on mobile layout or it is closing (on desktop layout)\n\n    if (isChanging && (isMobileLayout || shouldBeClosedAsModal)) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  changeOpenStatus(isOpen) {\n    this.setState({\n      isOpen\n    });\n  }\n\n  handleClose(event) {\n    const onClose = this.props.onClose;\n    this.changeOpenStatus(false);\n\n    if (onClose) {\n      onClose(event);\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          containerClassName = _this$props2.containerClassName,\n          id = _this$props2.id,\n          showAsModalMaxWidth = _this$props2.showAsModalMaxWidth,\n          closeButtonMessage = _this$props2.closeButtonMessage,\n          onManageDisableScrolling = _this$props2.onManageDisableScrolling,\n          viewport = _this$props2.viewport;\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const isOpenInMobile = this.state.isOpen;\n    const isClosedInMobile = isMobileLayout && !isOpenInMobile;\n    const isOpen = isOpenInMobile && isMobileLayout; // We have 3 view states:\n    // - default desktop layout (just an extra wrapper)\n    // - mobile layout: content visible inside modal popup\n    // - mobile layout: content hidden\n\n    const closedClassName = isClosedInMobile ? css.modalHidden : null;\n    const classes = classNames({\n      [css.modalInMobile]: isOpenInMobile\n    }, css.root, className);\n    return React.createElement(Modal, {\n      className: classes,\n      containerClassName: containerClassName || css.modalContainer,\n      contentClassName: css.modalContent,\n      id: id,\n      isOpen: isOpen,\n      isClosedClassName: closedClassName,\n      onClose: this.handleClose,\n      closeButtonMessage: closeButtonMessage,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, children);\n  }\n\n}\n\nModalInMobileComponent.defaultProps = {\n  children: null,\n  className: '',\n  containerClassName: null,\n  onClose: null,\n  showAsModalMaxWidth: 0,\n  closeButtonMessage: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      node = PropTypes.node,\n      number = PropTypes.number,\n      string = PropTypes.string,\n      shape = PropTypes.shape;\nModalInMobileComponent.propTypes = {\n  children: node,\n  className: string,\n  containerClassName: string,\n  id: string.isRequired,\n  isModalOpenOnMobile: bool.isRequired,\n  onClose: func,\n  showAsModalMaxWidth: number,\n  closeButtonMessage: node,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired\n};\nconst ModalInMobile = withViewport(ModalInMobileComponent);\nexport default ModalInMobile;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ModalInMobile/ModalInMobile.js"],"names":["React","Component","PropTypes","classNames","Modal","withViewport","css","ModalInMobileComponent","constructor","props","state","isOpen","handleClose","bind","changeOpenStatus","componentDidMount","isModalOpenOnMobile","showAsModalMaxWidth","viewport","isMobileLayout","width","componentWillReceiveProps","nextProps","isChanging","shouldBeClosedAsModal","setState","event","onClose","render","children","className","containerClassName","id","closeButtonMessage","onManageDisableScrolling","isOpenInMobile","isClosedInMobile","closedClassName","modalHidden","classes","modalInMobile","root","modalContainer","modalContent","defaultProps","bool","func","node","number","string","shape","propTypes","isRequired","height","ModalInMobile"],"mappings":"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","sourcesContent":["/**\n * ModalInMobile gives possibility separate part of existing DOM so that in mobile views that\n * fragment is shown in a separate modal layer on top of the page.\n *\n * Currently, this does not implement resize listener for window.\n *\n * Example:\n * <Parent>\n *   <ModalInMobile isModalOpenOnMobile={this.state.modalOpen} onClose={handleClose}>\n *     <FormX />\n *   </ModalInMobile>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Modal } from '../../components';\nimport { withViewport } from '../../util/contextHelpers';\n\nimport css from './ModalInMobile.css';\n\nclass ModalInMobileComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.changeOpenStatus = this.changeOpenStatus.bind(this);\n  }\n\n  componentDidMount() {\n    const { isModalOpenOnMobile, showAsModalMaxWidth, viewport } = this.props;\n\n    // After Mounting, component can adapt to responsive screen size\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n\n    if (isMobileLayout && isModalOpenOnMobile) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { isModalOpenOnMobile, showAsModalMaxWidth, viewport } = nextProps;\n\n    const isChanging = isModalOpenOnMobile !== this.state.isOpen;\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const shouldBeClosedAsModal = !isMobileLayout && !isModalOpenOnMobile;\n\n    // Handle change if status is changing on mobile layout or it is closing (on desktop layout)\n    if (isChanging && (isMobileLayout || shouldBeClosedAsModal)) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  changeOpenStatus(isOpen) {\n    this.setState({ isOpen });\n  }\n\n  handleClose(event) {\n    const { onClose } = this.props;\n    this.changeOpenStatus(false);\n    if (onClose) {\n      onClose(event);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      containerClassName,\n      id,\n      showAsModalMaxWidth,\n      closeButtonMessage,\n      onManageDisableScrolling,\n      viewport,\n    } = this.props;\n\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const isOpenInMobile = this.state.isOpen;\n    const isClosedInMobile = isMobileLayout && !isOpenInMobile;\n    const isOpen = isOpenInMobile && isMobileLayout;\n\n    // We have 3 view states:\n    // - default desktop layout (just an extra wrapper)\n    // - mobile layout: content visible inside modal popup\n    // - mobile layout: content hidden\n    const closedClassName = isClosedInMobile ? css.modalHidden : null;\n    const classes = classNames({ [css.modalInMobile]: isOpenInMobile }, css.root, className);\n\n    return (\n      <Modal\n        className={classes}\n        containerClassName={containerClassName || css.modalContainer}\n        contentClassName={css.modalContent}\n        id={id}\n        isOpen={isOpen}\n        isClosedClassName={closedClassName}\n        onClose={this.handleClose}\n        closeButtonMessage={closeButtonMessage}\n        onManageDisableScrolling={onManageDisableScrolling}\n      >\n        {children}\n      </Modal>\n    );\n  }\n}\n\nModalInMobileComponent.defaultProps = {\n  children: null,\n  className: '',\n  containerClassName: null,\n  onClose: null,\n  showAsModalMaxWidth: 0,\n  closeButtonMessage: null,\n};\n\nconst { bool, func, node, number, string, shape } = PropTypes;\n\nModalInMobileComponent.propTypes = {\n  children: node,\n  className: string,\n  containerClassName: string,\n  id: string.isRequired,\n  isModalOpenOnMobile: bool.isRequired,\n  onClose: func,\n  showAsModalMaxWidth: number,\n  closeButtonMessage: node,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired,\n\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n};\n\nconst ModalInMobile = withViewport(ModalInMobileComponent);\n\nexport default ModalInMobile;\n"]},"metadata":{},"sourceType":"module"}