{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingPricingForm/EditListingPricingForm.js\";\nimport React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY, propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { formatMoney } from '../../util/currency';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { Button, Form, FieldCurrencyInput } from '../../components';\nimport css from './EditListingPricingForm.css';\nconst Money = sdkTypes.Money;\nexport const EditListingPricingFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const className = fieldRenderProps.className,\n          disabled = fieldRenderProps.disabled,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          intl = fieldRenderProps.intl,\n          invalid = fieldRenderProps.invalid,\n          pristine = fieldRenderProps.pristine,\n          saveActionMsg = fieldRenderProps.saveActionMsg,\n          updated = fieldRenderProps.updated,\n          updateInProgress = fieldRenderProps.updateInProgress,\n          fetchErrors = fieldRenderProps.fetchErrors;\n    const unitType = config.bookingUnitType;\n    const isNightly = unitType === LINE_ITEM_NIGHT;\n    const isDaily = unitType === LINE_ITEM_DAY;\n    const translationKey = isNightly ? 'EditListingPricingForm.pricePerNight' : isDaily ? 'EditListingPricingForm.pricePerDay' : 'EditListingPricingForm.pricePerUnit';\n    const pricePerUnitMessage = intl.formatMessage({\n      id: translationKey\n    });\n    const pricePlaceholderMessage = intl.formatMessage({\n      id: 'EditListingPricingForm.priceInputPlaceholder'\n    });\n    const priceRequired = validators.required(intl.formatMessage({\n      id: 'EditListingPricingForm.priceRequired'\n    }));\n    const minPrice = new Money(config.listingMinimumPriceSubUnits, config.currency);\n    const minPriceRequired = validators.moneySubUnitAmountAtLeast(intl.formatMessage({\n      id: 'EditListingPricingForm.priceTooLow'\n    }, {\n      minPrice: formatMoney(intl, minPrice)\n    }), config.listingMinimumPriceSubUnits);\n    const priceValidators = config.listingMinimumPriceSubUnits ? validators.composeValidators(priceRequired, minPriceRequired) : priceRequired;\n    const classes = classNames(css.root, className);\n    const submitReady = updated && pristine;\n    const submitInProgress = updateInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n\n    const _ref = fetchErrors || {},\n          updateListingError = _ref.updateListingError,\n          showListingsError = _ref.showListingsError;\n\n    return React.createElement(Form, {\n      onSubmit: handleSubmit,\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, updateListingError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingPricingForm.updateFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })) : null, showListingsError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingPricingForm.showListingFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })) : null, React.createElement(FieldCurrencyInput, {\n      id: \"price\",\n      name: \"price\",\n      className: css.priceInput,\n      autoFocus: true,\n      label: pricePerUnitMessage,\n      placeholder: pricePlaceholderMessage,\n      currencyConfig: config.currencyConfig,\n      validate: priceValidators,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: submitReady,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, saveActionMsg));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}));\nEditListingPricingFormComponent.defaultProps = {\n  fetchErrors: null\n};\nEditListingPricingFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error\n  })\n};\nexport default compose(injectIntl)(EditListingPricingFormComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingPricingForm/EditListingPricingForm.js"],"names":["React","bool","func","shape","string","compose","Form","FinalForm","intlShape","injectIntl","FormattedMessage","classNames","config","LINE_ITEM_NIGHT","LINE_ITEM_DAY","propTypes","validators","formatMoney","types","sdkTypes","Button","FieldCurrencyInput","css","Money","EditListingPricingFormComponent","props","fieldRenderProps","className","disabled","handleSubmit","intl","invalid","pristine","saveActionMsg","updated","updateInProgress","fetchErrors","unitType","bookingUnitType","isNightly","isDaily","translationKey","pricePerUnitMessage","formatMessage","id","pricePlaceholderMessage","priceRequired","required","minPrice","listingMinimumPriceSubUnits","currency","minPriceRequired","moneySubUnitAmountAtLeast","priceValidators","composeValidators","classes","root","submitReady","submitInProgress","submitDisabled","updateListingError","showListingsError","error","priceInput","currencyConfig","submitButton","defaultProps","isRequired","onSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY, propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { formatMoney } from '../../util/currency';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { Button, Form, FieldCurrencyInput } from '../../components';\nimport css from './EditListingPricingForm.css';\n\nconst { Money } = sdkTypes;\n\nexport const EditListingPricingFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        className,\n        disabled,\n        handleSubmit,\n        intl,\n        invalid,\n        pristine,\n        saveActionMsg,\n        updated,\n        updateInProgress,\n        fetchErrors,\n      } = fieldRenderProps;\n\n      const unitType = config.bookingUnitType;\n      const isNightly = unitType === LINE_ITEM_NIGHT;\n      const isDaily = unitType === LINE_ITEM_DAY;\n\n      const translationKey = isNightly\n        ? 'EditListingPricingForm.pricePerNight'\n        : isDaily\n        ? 'EditListingPricingForm.pricePerDay'\n        : 'EditListingPricingForm.pricePerUnit';\n\n      const pricePerUnitMessage = intl.formatMessage({\n        id: translationKey,\n      });\n\n      const pricePlaceholderMessage = intl.formatMessage({\n        id: 'EditListingPricingForm.priceInputPlaceholder',\n      });\n\n      const priceRequired = validators.required(\n        intl.formatMessage({\n          id: 'EditListingPricingForm.priceRequired',\n        })\n      );\n      const minPrice = new Money(config.listingMinimumPriceSubUnits, config.currency);\n      const minPriceRequired = validators.moneySubUnitAmountAtLeast(\n        intl.formatMessage(\n          {\n            id: 'EditListingPricingForm.priceTooLow',\n          },\n          {\n            minPrice: formatMoney(intl, minPrice),\n          }\n        ),\n        config.listingMinimumPriceSubUnits\n      );\n      const priceValidators = config.listingMinimumPriceSubUnits\n        ? validators.composeValidators(priceRequired, minPriceRequired)\n        : priceRequired;\n\n      const classes = classNames(css.root, className);\n      const submitReady = updated && pristine;\n      const submitInProgress = updateInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress;\n      const { updateListingError, showListingsError } = fetchErrors || {};\n\n      return (\n        <Form onSubmit={handleSubmit} className={classes}>\n          {updateListingError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingPricingForm.updateFailed\" />\n            </p>\n          ) : null}\n          {showListingsError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingPricingForm.showListingFailed\" />\n            </p>\n          ) : null}\n          <FieldCurrencyInput\n            id=\"price\"\n            name=\"price\"\n            className={css.priceInput}\n            autoFocus\n            label={pricePerUnitMessage}\n            placeholder={pricePlaceholderMessage}\n            currencyConfig={config.currencyConfig}\n            validate={priceValidators}\n          />\n\n          <Button\n            className={css.submitButton}\n            type=\"submit\"\n            inProgress={submitInProgress}\n            disabled={submitDisabled}\n            ready={submitReady}\n          >\n            {saveActionMsg}\n          </Button>\n        </Form>\n      );\n    }}\n  />\n);\n\nEditListingPricingFormComponent.defaultProps = { fetchErrors: null };\n\nEditListingPricingFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error,\n  }),\n};\n\nexport default compose(injectIntl)(EditListingPricingFormComponent);\n"]},"metadata":{},"sourceType":"module"}