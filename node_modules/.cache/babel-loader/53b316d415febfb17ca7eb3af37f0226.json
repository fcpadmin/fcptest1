{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/ProfileSettingsForm/ProfileSettingsForm.js\";\nimport React, { Component } from 'react';\nimport { bool, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Field, Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { isUploadImageOverLimitError } from '../../util/errors';\nimport { Form, Avatar, Button, ImageFromFile, IconSpinner, FieldTextInput } from '../../components';\nimport css from './ProfileSettingsForm.css';\nconst ACCEPT_IMAGES = 'image/*';\nconst UPLOAD_CHANGE_DELAY = 2000; // Show spinner so that browser has time to load img srcset\n\nclass ProfileSettingsFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.uploadDelayTimeoutId = null;\n    this.state = {\n      uploadDelay: false\n    };\n    this.submittedValues = {};\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Upload delay is additional time window where Avatar is added to the DOM,\n    // but not yet visible (time to load image URL from srcset)\n    if (this.props.uploadInProgress && !nextProps.uploadInProgress) {\n      this.setState({\n        uploadDelay: true\n      });\n      this.uploadDelayTimeoutId = window.setTimeout(() => {\n        this.setState({\n          uploadDelay: false\n        });\n      }, UPLOAD_CHANGE_DELAY);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const className = fieldRenderProps.className,\n              currentUser = fieldRenderProps.currentUser,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              intl = fieldRenderProps.intl,\n              invalid = fieldRenderProps.invalid,\n              onImageUpload = fieldRenderProps.onImageUpload,\n              pristine = fieldRenderProps.pristine,\n              profileImage = fieldRenderProps.profileImage,\n              rootClassName = fieldRenderProps.rootClassName,\n              updateInProgress = fieldRenderProps.updateInProgress,\n              updateProfileError = fieldRenderProps.updateProfileError,\n              uploadImageError = fieldRenderProps.uploadImageError,\n              uploadInProgress = fieldRenderProps.uploadInProgress,\n              form = fieldRenderProps.form,\n              values = fieldRenderProps.values;\n        const user = ensureCurrentUser(currentUser); // First name\n\n        const firstNameLabel = intl.formatMessage({\n          id: 'ProfileSettingsForm.firstNameLabel'\n        });\n        const firstNamePlaceholder = intl.formatMessage({\n          id: 'ProfileSettingsForm.firstNamePlaceholder'\n        });\n        const firstNameRequiredMessage = intl.formatMessage({\n          id: 'ProfileSettingsForm.firstNameRequired'\n        });\n        const firstNameRequired = validators.required(firstNameRequiredMessage); // Last name\n\n        const lastNameLabel = intl.formatMessage({\n          id: 'ProfileSettingsForm.lastNameLabel'\n        });\n        const lastNamePlaceholder = intl.formatMessage({\n          id: 'ProfileSettingsForm.lastNamePlaceholder'\n        });\n        const lastNameRequiredMessage = intl.formatMessage({\n          id: 'ProfileSettingsForm.lastNameRequired'\n        });\n        const lastNameRequired = validators.required(lastNameRequiredMessage); // Bio\n\n        const bioLabel = intl.formatMessage({\n          id: 'ProfileSettingsForm.bioLabel'\n        });\n        const bioPlaceholder = intl.formatMessage({\n          id: 'ProfileSettingsForm.bioPlaceholder'\n        });\n        const uploadingOverlay = uploadInProgress || this.state.uploadDelay ? React.createElement(\"div\", {\n          className: css.uploadingImageOverlay,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(IconSpinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        })) : null;\n        const hasUploadError = !!uploadImageError && !uploadInProgress;\n        const errorClasses = classNames({\n          [css.avatarUploadError]: hasUploadError\n        });\n        const transientUserProfileImage = profileImage.uploadedImage || user.profileImage;\n\n        const transientUser = _objectSpread({}, user, {\n          profileImage: transientUserProfileImage\n        }); // Ensure that file exists if imageFromFile is used\n\n\n        const fileExists = !!profileImage.file;\n        const fileUploadInProgress = uploadInProgress && fileExists;\n        const delayAfterUpload = profileImage.imageId && this.state.uploadDelay;\n        const imageFromFile = fileExists && (fileUploadInProgress || delayAfterUpload) ? React.createElement(ImageFromFile, {\n          id: profileImage.id,\n          className: errorClasses,\n          rootClassName: css.uploadingImage,\n          aspectRatioClassName: css.squareAspectRatio,\n          file: profileImage.file,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, uploadingOverlay) : null; // Avatar is rendered in hidden during the upload delay\n        // Upload delay smoothes image change process:\n        // responsive img has time to load srcset stuff before it is shown to user.\n\n        const avatarClasses = classNames(errorClasses, css.avatar, {\n          [css.avatarInvisible]: this.state.uploadDelay\n        });\n        const avatarComponent = !fileUploadInProgress && profileImage.imageId ? React.createElement(Avatar, {\n          className: avatarClasses,\n          renderSizes: \"(max-width: 767px) 96px, 240px\",\n          user: transientUser,\n          disableProfileLink: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }) : null;\n        const chooseAvatarLabel = profileImage.imageId || fileUploadInProgress ? React.createElement(\"div\", {\n          className: css.avatarContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, imageFromFile, avatarComponent, React.createElement(\"div\", {\n          className: css.changeAvatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.changeAvatar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }))) : React.createElement(\"div\", {\n          className: css.avatarPlaceholder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: css.avatarPlaceholderText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.addYourProfilePicture\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: css.avatarPlaceholderTextMobile,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.addYourProfilePictureMobile\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        })));\n        const submitError = updateProfileError ? React.createElement(\"div\", {\n          className: css.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.updateProfileFailed\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        })) : null;\n        const classes = classNames(rootClassName || css.root, className);\n        const submitInProgress = updateInProgress;\n        const submittedOnce = Object.keys(this.submittedValues).length > 0;\n        const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n        const submitDisabled = invalid || pristine || pristineSinceLastSubmit || uploadInProgress || submitInProgress;\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedValues = values;\n            handleSubmit(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: css.sectionContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: css.sectionTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.yourProfilePicture\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        })), React.createElement(Field, {\n          accept: ACCEPT_IMAGES,\n          id: \"profileImage\",\n          name: \"profileImage\",\n          label: chooseAvatarLabel,\n          type: \"file\",\n          form: null,\n          uploadImageError: uploadImageError,\n          disabled: uploadInProgress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, fieldProps => {\n          const accept = fieldProps.accept,\n                id = fieldProps.id,\n                input = fieldProps.input,\n                label = fieldProps.label,\n                type = fieldProps.type,\n                disabled = fieldProps.disabled,\n                uploadImageError = fieldProps.uploadImageError;\n          const name = input.name;\n\n          const onChange = e => {\n            const file = e.target.files[0];\n            form.change(\"profileImage\", file);\n            form.blur(\"profileImage\");\n\n            if (file != null) {\n              const tempId = \"\".concat(file.name, \"_\").concat(Date.now());\n              onImageUpload({\n                id: tempId,\n                file\n              });\n            }\n          };\n\n          let error = null;\n\n          if (isUploadImageOverLimitError(uploadImageError)) {\n            error = React.createElement(\"div\", {\n              className: css.error,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 225\n              },\n              __self: this\n            }, React.createElement(FormattedMessage, {\n              id: \"ProfileSettingsForm.imageUploadFailedFileTooLarge\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 226\n              },\n              __self: this\n            }));\n          } else if (uploadImageError) {\n            error = React.createElement(\"div\", {\n              className: css.error,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 231\n              },\n              __self: this\n            }, React.createElement(FormattedMessage, {\n              id: \"ProfileSettingsForm.imageUploadFailed\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 232\n              },\n              __self: this\n            }));\n          }\n\n          return React.createElement(\"div\", {\n            className: css.uploadAvatarWrapper,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            className: css.label,\n            htmlFor: id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239\n            },\n            __self: this\n          }, label), React.createElement(\"input\", {\n            accept: accept,\n            id: id,\n            name: name,\n            className: css.uploadAvatarInput,\n            disabled: disabled,\n            onChange: onChange,\n            type: type,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }), error);\n        }), React.createElement(\"div\", {\n          className: css.tip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.tip\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: css.fileInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.fileInfo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: css.sectionContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: css.sectionTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.yourName\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: css.nameContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, React.createElement(FieldTextInput, {\n          className: css.firstName,\n          type: \"text\",\n          id: \"firstName\",\n          name: \"firstName\",\n          label: firstNameLabel,\n          placeholder: firstNamePlaceholder,\n          validate: firstNameRequired,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }), React.createElement(FieldTextInput, {\n          className: css.lastName,\n          type: \"text\",\n          id: \"lastName\",\n          name: \"lastName\",\n          label: lastNameLabel,\n          placeholder: lastNamePlaceholder,\n          validate: lastNameRequired,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: classNames(css.sectionContainer, css.lastSection),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: css.sectionTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.bioHeading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        })), React.createElement(FieldTextInput, {\n          type: \"textarea\",\n          id: \"bio\",\n          name: \"bio\",\n          label: bioLabel,\n          placeholder: bioPlaceholder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: css.bioInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.bioInfo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300\n          },\n          __self: this\n        }))), submitError, React.createElement(Button, {\n          className: css.submitButton,\n          type: \"submit\",\n          inProgress: submitInProgress,\n          disabled: submitDisabled,\n          ready: pristineSinceLastSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ProfileSettingsForm.saveChanges\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311\n          },\n          __self: this\n        })));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nProfileSettingsFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  uploadImageError: null,\n  updateProfileError: null,\n  updateProfileReady: false\n};\nProfileSettingsFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  uploadImageError: propTypes.error,\n  uploadInProgress: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  updateProfileError: propTypes.error,\n  updateProfileReady: bool,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst ProfileSettingsForm = compose(injectIntl)(ProfileSettingsFormComponent);\nProfileSettingsForm.displayName = 'ProfileSettingsForm';\nexport default ProfileSettingsForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/ProfileSettingsForm/ProfileSettingsForm.js"],"names":["React","Component","bool","string","compose","FormattedMessage","injectIntl","intlShape","Field","Form","FinalForm","isEqual","classNames","ensureCurrentUser","propTypes","validators","isUploadImageOverLimitError","Avatar","Button","ImageFromFile","IconSpinner","FieldTextInput","css","ACCEPT_IMAGES","UPLOAD_CHANGE_DELAY","ProfileSettingsFormComponent","constructor","props","uploadDelayTimeoutId","state","uploadDelay","submittedValues","componentWillReceiveProps","nextProps","uploadInProgress","setState","window","setTimeout","componentWillUnmount","clearTimeout","blurTimeoutId","render","fieldRenderProps","className","currentUser","handleSubmit","intl","invalid","onImageUpload","pristine","profileImage","rootClassName","updateInProgress","updateProfileError","uploadImageError","form","values","user","firstNameLabel","formatMessage","id","firstNamePlaceholder","firstNameRequiredMessage","firstNameRequired","required","lastNameLabel","lastNamePlaceholder","lastNameRequiredMessage","lastNameRequired","bioLabel","bioPlaceholder","uploadingOverlay","uploadingImageOverlay","hasUploadError","errorClasses","avatarUploadError","transientUserProfileImage","uploadedImage","transientUser","fileExists","file","fileUploadInProgress","delayAfterUpload","imageId","imageFromFile","uploadingImage","squareAspectRatio","avatarClasses","avatar","avatarInvisible","avatarComponent","chooseAvatarLabel","avatarContainer","changeAvatar","avatarPlaceholder","avatarPlaceholderText","avatarPlaceholderTextMobile","submitError","error","classes","root","submitInProgress","submittedOnce","Object","keys","length","pristineSinceLastSubmit","submitDisabled","e","sectionContainer","sectionTitle","fieldProps","accept","input","label","type","disabled","name","onChange","target","files","change","blur","tempId","Date","now","uploadAvatarWrapper","uploadAvatarInput","tip","fileInfo","nameContainer","firstName","lastName","lastSection","bioInfo","submitButton","defaultProps","updateProfileReady","isRequired","ProfileSettingsForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bool, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Field, Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { isUploadImageOverLimitError } from '../../util/errors';\nimport { Form, Avatar, Button, ImageFromFile, IconSpinner, FieldTextInput } from '../../components';\n\nimport css from './ProfileSettingsForm.css';\n\nconst ACCEPT_IMAGES = 'image/*';\nconst UPLOAD_CHANGE_DELAY = 2000; // Show spinner so that browser has time to load img srcset\n\nclass ProfileSettingsFormComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.uploadDelayTimeoutId = null;\n    this.state = { uploadDelay: false };\n    this.submittedValues = {};\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Upload delay is additional time window where Avatar is added to the DOM,\n    // but not yet visible (time to load image URL from srcset)\n    if (this.props.uploadInProgress && !nextProps.uploadInProgress) {\n      this.setState({ uploadDelay: true });\n      this.uploadDelayTimeoutId = window.setTimeout(() => {\n        this.setState({ uploadDelay: false });\n      }, UPLOAD_CHANGE_DELAY);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={fieldRenderProps => {\n          const {\n            className,\n            currentUser,\n            handleSubmit,\n            intl,\n            invalid,\n            onImageUpload,\n            pristine,\n            profileImage,\n            rootClassName,\n            updateInProgress,\n            updateProfileError,\n            uploadImageError,\n            uploadInProgress,\n            form,\n            values,\n          } = fieldRenderProps;\n\n          const user = ensureCurrentUser(currentUser);\n\n          // First name\n          const firstNameLabel = intl.formatMessage({\n            id: 'ProfileSettingsForm.firstNameLabel',\n          });\n          const firstNamePlaceholder = intl.formatMessage({\n            id: 'ProfileSettingsForm.firstNamePlaceholder',\n          });\n          const firstNameRequiredMessage = intl.formatMessage({\n            id: 'ProfileSettingsForm.firstNameRequired',\n          });\n          const firstNameRequired = validators.required(firstNameRequiredMessage);\n\n          // Last name\n          const lastNameLabel = intl.formatMessage({\n            id: 'ProfileSettingsForm.lastNameLabel',\n          });\n          const lastNamePlaceholder = intl.formatMessage({\n            id: 'ProfileSettingsForm.lastNamePlaceholder',\n          });\n          const lastNameRequiredMessage = intl.formatMessage({\n            id: 'ProfileSettingsForm.lastNameRequired',\n          });\n          const lastNameRequired = validators.required(lastNameRequiredMessage);\n\n          // Bio\n          const bioLabel = intl.formatMessage({\n            id: 'ProfileSettingsForm.bioLabel',\n          });\n          const bioPlaceholder = intl.formatMessage({\n            id: 'ProfileSettingsForm.bioPlaceholder',\n          });\n\n          const uploadingOverlay =\n            uploadInProgress || this.state.uploadDelay ? (\n              <div className={css.uploadingImageOverlay}>\n                <IconSpinner />\n              </div>\n            ) : null;\n\n          const hasUploadError = !!uploadImageError && !uploadInProgress;\n          const errorClasses = classNames({ [css.avatarUploadError]: hasUploadError });\n          const transientUserProfileImage = profileImage.uploadedImage || user.profileImage;\n          const transientUser = { ...user, profileImage: transientUserProfileImage };\n\n          // Ensure that file exists if imageFromFile is used\n          const fileExists = !!profileImage.file;\n          const fileUploadInProgress = uploadInProgress && fileExists;\n          const delayAfterUpload = profileImage.imageId && this.state.uploadDelay;\n          const imageFromFile =\n            fileExists && (fileUploadInProgress || delayAfterUpload) ? (\n              <ImageFromFile\n                id={profileImage.id}\n                className={errorClasses}\n                rootClassName={css.uploadingImage}\n                aspectRatioClassName={css.squareAspectRatio}\n                file={profileImage.file}\n              >\n                {uploadingOverlay}\n              </ImageFromFile>\n            ) : null;\n\n          // Avatar is rendered in hidden during the upload delay\n          // Upload delay smoothes image change process:\n          // responsive img has time to load srcset stuff before it is shown to user.\n          const avatarClasses = classNames(errorClasses, css.avatar, {\n            [css.avatarInvisible]: this.state.uploadDelay,\n          });\n          const avatarComponent =\n            !fileUploadInProgress && profileImage.imageId ? (\n              <Avatar\n                className={avatarClasses}\n                renderSizes=\"(max-width: 767px) 96px, 240px\"\n                user={transientUser}\n                disableProfileLink\n              />\n            ) : null;\n\n          const chooseAvatarLabel =\n            profileImage.imageId || fileUploadInProgress ? (\n              <div className={css.avatarContainer}>\n                {imageFromFile}\n                {avatarComponent}\n                <div className={css.changeAvatar}>\n                  <FormattedMessage id=\"ProfileSettingsForm.changeAvatar\" />\n                </div>\n              </div>\n            ) : (\n              <div className={css.avatarPlaceholder}>\n                <div className={css.avatarPlaceholderText}>\n                  <FormattedMessage id=\"ProfileSettingsForm.addYourProfilePicture\" />\n                </div>\n                <div className={css.avatarPlaceholderTextMobile}>\n                  <FormattedMessage id=\"ProfileSettingsForm.addYourProfilePictureMobile\" />\n                </div>\n              </div>\n            );\n\n          const submitError = updateProfileError ? (\n            <div className={css.error}>\n              <FormattedMessage id=\"ProfileSettingsForm.updateProfileFailed\" />\n            </div>\n          ) : null;\n\n          const classes = classNames(rootClassName || css.root, className);\n          const submitInProgress = updateInProgress;\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n          const submitDisabled =\n            invalid || pristine || pristineSinceLastSubmit || uploadInProgress || submitInProgress;\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedValues = values;\n                handleSubmit(e);\n              }}\n            >\n              <div className={css.sectionContainer}>\n                <h3 className={css.sectionTitle}>\n                  <FormattedMessage id=\"ProfileSettingsForm.yourProfilePicture\" />\n                </h3>\n                <Field\n                  accept={ACCEPT_IMAGES}\n                  id=\"profileImage\"\n                  name=\"profileImage\"\n                  label={chooseAvatarLabel}\n                  type=\"file\"\n                  form={null}\n                  uploadImageError={uploadImageError}\n                  disabled={uploadInProgress}\n                >\n                  {fieldProps => {\n                    const {\n                      accept,\n                      id,\n                      input,\n                      label,\n                      type,\n                      disabled,\n                      uploadImageError,\n                    } = fieldProps;\n                    const { name } = input;\n                    const onChange = e => {\n                      const file = e.target.files[0];\n                      form.change(`profileImage`, file);\n                      form.blur(`profileImage`);\n                      if (file != null) {\n                        const tempId = `${file.name}_${Date.now()}`;\n                        onImageUpload({ id: tempId, file });\n                      }\n                    };\n\n                    let error = null;\n\n                    if (isUploadImageOverLimitError(uploadImageError)) {\n                      error = (\n                        <div className={css.error}>\n                          <FormattedMessage id=\"ProfileSettingsForm.imageUploadFailedFileTooLarge\" />\n                        </div>\n                      );\n                    } else if (uploadImageError) {\n                      error = (\n                        <div className={css.error}>\n                          <FormattedMessage id=\"ProfileSettingsForm.imageUploadFailed\" />\n                        </div>\n                      );\n                    }\n\n                    return (\n                      <div className={css.uploadAvatarWrapper}>\n                        <label className={css.label} htmlFor={id}>\n                          {label}\n                        </label>\n                        <input\n                          accept={accept}\n                          id={id}\n                          name={name}\n                          className={css.uploadAvatarInput}\n                          disabled={disabled}\n                          onChange={onChange}\n                          type={type}\n                        />\n                        {error}\n                      </div>\n                    );\n                  }}\n                </Field>\n                <div className={css.tip}>\n                  <FormattedMessage id=\"ProfileSettingsForm.tip\" />\n                </div>\n                <div className={css.fileInfo}>\n                  <FormattedMessage id=\"ProfileSettingsForm.fileInfo\" />\n                </div>\n              </div>\n              <div className={css.sectionContainer}>\n                <h3 className={css.sectionTitle}>\n                  <FormattedMessage id=\"ProfileSettingsForm.yourName\" />\n                </h3>\n                <div className={css.nameContainer}>\n                  <FieldTextInput\n                    className={css.firstName}\n                    type=\"text\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label={firstNameLabel}\n                    placeholder={firstNamePlaceholder}\n                    validate={firstNameRequired}\n                  />\n                  <FieldTextInput\n                    className={css.lastName}\n                    type=\"text\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label={lastNameLabel}\n                    placeholder={lastNamePlaceholder}\n                    validate={lastNameRequired}\n                  />\n                </div>\n              </div>\n              <div className={classNames(css.sectionContainer, css.lastSection)}>\n                <h3 className={css.sectionTitle}>\n                  <FormattedMessage id=\"ProfileSettingsForm.bioHeading\" />\n                </h3>\n                <FieldTextInput\n                  type=\"textarea\"\n                  id=\"bio\"\n                  name=\"bio\"\n                  label={bioLabel}\n                  placeholder={bioPlaceholder}\n                />\n                <p className={css.bioInfo}>\n                  <FormattedMessage id=\"ProfileSettingsForm.bioInfo\" />\n                </p>\n              </div>\n              {submitError}\n              <Button\n                className={css.submitButton}\n                type=\"submit\"\n                inProgress={submitInProgress}\n                disabled={submitDisabled}\n                ready={pristineSinceLastSubmit}\n              >\n                <FormattedMessage id=\"ProfileSettingsForm.saveChanges\" />\n              </Button>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nProfileSettingsFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  uploadImageError: null,\n  updateProfileError: null,\n  updateProfileReady: false,\n};\n\nProfileSettingsFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n\n  uploadImageError: propTypes.error,\n  uploadInProgress: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  updateProfileError: propTypes.error,\n  updateProfileReady: bool,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst ProfileSettingsForm = compose(injectIntl)(ProfileSettingsFormComponent);\n\nProfileSettingsForm.displayName = 'ProfileSettingsForm';\n\nexport default ProfileSettingsForm;\n"]},"metadata":{},"sourceType":"module"}