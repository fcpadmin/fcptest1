{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Topbar/Topbar.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport pickBy from 'lodash/pickBy';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport routeConfiguration from '../../routeConfiguration';\nimport { withViewport } from '../../util/contextHelpers';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { propTypes } from '../../util/types';\nimport { Button, Logo, Modal, ModalMissingInformation, NamedLink, TopbarDesktop, TopbarMobileMenu } from '../../components';\nimport { TopbarSearchForm } from '../../forms';\nimport MenuIcon from './MenuIcon';\nimport SearchIcon from './SearchIcon';\nimport css from './Topbar.css';\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nconst redirectToURLWithModalState = (props, modalStateParam) => {\n  const history = props.history,\n        location = props.location;\n  const pathname = location.pathname,\n        search = location.search,\n        state = location.state;\n  const searchString = \"?\".concat(stringify(_objectSpread({\n    [modalStateParam]: 'open'\n  }, parse(search))));\n  history.push(\"\".concat(pathname).concat(searchString), state);\n};\n\nconst redirectToURLWithoutModalState = (props, modalStateParam) => {\n  const history = props.history,\n        location = props.location;\n  const pathname = location.pathname,\n        search = location.search,\n        state = location.state;\n  const queryParams = pickBy(parse(search), (v, k) => {\n    return k !== modalStateParam;\n  });\n  const stringified = stringify(queryParams);\n  const searchString = stringified ? \"?\".concat(stringified) : '';\n  history.push(\"\".concat(pathname).concat(searchString), state);\n};\n\nconst GenericError = props => {\n  const show = props.show;\n  const classes = classNames(css.genericError, {\n    [css.genericErrorVisible]: show\n  });\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.genericErrorContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: css.genericErrorText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"Topbar.genericError\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }))));\n};\n\nconst bool = PropTypes.bool;\nGenericError.propTypes = {\n  show: bool.isRequired\n};\n\nclass TopbarComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMobileMenuOpen = this.handleMobileMenuOpen.bind(this);\n    this.handleMobileMenuClose = this.handleMobileMenuClose.bind(this);\n    this.handleMobileSearchOpen = this.handleMobileSearchOpen.bind(this);\n    this.handleMobileSearchClose = this.handleMobileSearchClose.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n  handleMobileMenuOpen() {\n    redirectToURLWithModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileMenuClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileSearchOpen() {\n    redirectToURLWithModalState(this.props, 'mobilesearch');\n  }\n\n  handleMobileSearchClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilesearch');\n  }\n\n  handleSubmit(values) {\n    const currentSearchParams = this.props.currentSearchParams;\n    const _values$location = values.location,\n          search = _values$location.search,\n          selectedPlace = _values$location.selectedPlace;\n    const history = this.props.history;\n    const origin = selectedPlace.origin,\n          bounds = selectedPlace.bounds;\n    const originMaybe = config.sortSearchByDistance ? {\n      origin\n    } : {};\n\n    const searchParams = _objectSpread({}, currentSearchParams, originMaybe, {\n      address: search,\n      bounds\n    });\n\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, searchParams));\n  }\n\n  handleLogout() {\n    const _this$props = this.props,\n          onLogout = _this$props.onLogout,\n          history = _this$props.history;\n    onLogout().then(() => {\n      const path = pathByRouteName('LandingPage', routeConfiguration()); // In production we ensure that data is really lost,\n      // but in development mode we use stored values for debugging\n\n      if (config.dev) {\n        history.push(path);\n      } else if (typeof window !== 'undefined') {\n        window.location = path;\n      }\n\n      console.log('logged out'); // eslint-disable-line\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          className = _this$props2.className,\n          rootClassName = _this$props2.rootClassName,\n          desktopClassName = _this$props2.desktopClassName,\n          mobileRootClassName = _this$props2.mobileRootClassName,\n          mobileClassName = _this$props2.mobileClassName,\n          isAuthenticated = _this$props2.isAuthenticated,\n          authInProgress = _this$props2.authInProgress,\n          currentUser = _this$props2.currentUser,\n          currentUserHasListings = _this$props2.currentUserHasListings,\n          currentUserHasOrders = _this$props2.currentUserHasOrders,\n          currentPage = _this$props2.currentPage,\n          notificationCount = _this$props2.notificationCount,\n          viewport = _this$props2.viewport,\n          intl = _this$props2.intl,\n          location = _this$props2.location,\n          onManageDisableScrolling = _this$props2.onManageDisableScrolling,\n          onResendVerificationEmail = _this$props2.onResendVerificationEmail,\n          sendVerificationEmailInProgress = _this$props2.sendVerificationEmailInProgress,\n          sendVerificationEmailError = _this$props2.sendVerificationEmailError,\n          showGenericError = _this$props2.showGenericError;\n\n    const _parse = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds']\n    }),\n          mobilemenu = _parse.mobilemenu,\n          mobilesearch = _parse.mobilesearch,\n          address = _parse.address,\n          origin = _parse.origin,\n          bounds = _parse.bounds;\n\n    const notificationDot = notificationCount > 0 ? React.createElement(\"div\", {\n      className: css.notificationDot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }) : null;\n    const isMobileLayout = viewport.width < MAX_MOBILE_SCREEN_WIDTH;\n    const isMobileMenuOpen = isMobileLayout && mobilemenu === 'open';\n    const isMobileSearchOpen = isMobileLayout && mobilesearch === 'open';\n    const mobileMenu = React.createElement(TopbarMobileMenu, {\n      isAuthenticated: isAuthenticated,\n      currentUserHasListings: currentUserHasListings,\n      currentUser: currentUser,\n      onLogout: this.handleLogout,\n      notificationCount: notificationCount,\n      currentPage: currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }); // Only render current search if full place object is available in the URL params\n\n    const locationFieldsPresent = config.sortSearchByDistance ? address && origin && bounds : address && bounds;\n    const initialSearchFormValues = {\n      location: locationFieldsPresent ? {\n        search: address,\n        selectedPlace: {\n          address,\n          origin,\n          bounds\n        }\n      } : null\n    };\n    const classes = classNames(rootClassName || css.root, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames(mobileRootClassName || css.container, mobileClassName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Button, {\n      rootClassName: css.menu,\n      onClick: this.handleMobileMenuOpen,\n      title: intl.formatMessage({\n        id: 'Topbar.menuIcon'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      className: css.menuIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), notificationDot), React.createElement(NamedLink, {\n      className: css.home,\n      name: \"LandingPage\",\n      title: intl.formatMessage({\n        id: 'Topbar.logoIcon'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      format: \"mobile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })), React.createElement(Button, {\n      rootClassName: css.searchMenu,\n      onClick: this.handleMobileSearchOpen,\n      title: intl.formatMessage({\n        id: 'Topbar.searchIcon'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(SearchIcon, {\n      className: css.searchMenuIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: css.desktop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(TopbarDesktop, {\n      className: desktopClassName,\n      currentUserHasListings: currentUserHasListings,\n      currentUser: currentUser,\n      currentPage: currentPage,\n      initialSearchFormValues: initialSearchFormValues,\n      intl: intl,\n      isAuthenticated: isAuthenticated,\n      notificationCount: notificationCount,\n      onLogout: this.handleLogout,\n      onSearchSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })), React.createElement(Modal, {\n      id: \"TopbarMobileMenu\",\n      isOpen: isMobileMenuOpen,\n      onClose: this.handleMobileMenuClose,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, authInProgress ? null : mobileMenu), React.createElement(Modal, {\n      id: \"TopbarMobileSearch\",\n      containerClassName: css.modalContainer,\n      isOpen: isMobileSearchOpen,\n      onClose: this.handleMobileSearchClose,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.searchContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(TopbarSearchForm, {\n      form: \"TopbarSearchForm\",\n      onSubmit: this.handleSubmit,\n      initialValues: initialSearchFormValues,\n      isMobile: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: css.mobileHelp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"Topbar.mobileSearchHelp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })))), React.createElement(ModalMissingInformation, {\n      id: \"MissingInformationReminder\",\n      containerClassName: css.missingInformationModal,\n      currentUser: currentUser,\n      currentUserHasListings: currentUserHasListings,\n      currentUserHasOrders: currentUserHasOrders,\n      location: location,\n      onManageDisableScrolling: onManageDisableScrolling,\n      onResendVerificationEmail: onResendVerificationEmail,\n      sendVerificationEmailInProgress: sendVerificationEmailInProgress,\n      sendVerificationEmailError: sendVerificationEmailError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(GenericError, {\n      show: showGenericError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }));\n  }\n\n}\n\nTopbarComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  desktopClassName: null,\n  mobileRootClassName: null,\n  mobileClassName: null,\n  notificationCount: 0,\n  currentUser: null,\n  currentUserHasOrders: null,\n  currentPage: null,\n  sendVerificationEmailError: null\n};\nconst func = PropTypes.func,\n      number = PropTypes.number,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nTopbarComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  desktopClassName: string,\n  mobileRootClassName: string,\n  mobileClassName: string,\n  isAuthenticated: bool.isRequired,\n  authInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  currentUserHasListings: bool.isRequired,\n  currentUserHasOrders: bool,\n  currentPage: string,\n  notificationCount: number,\n  onLogout: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  sendVerificationEmailInProgress: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  showGenericError: bool.isRequired,\n  // These are passed from Page to keep Topbar rendering aware of location changes\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst Topbar = compose(withViewport, injectIntl)(TopbarComponent);\nTopbar.displayName = 'Topbar';\nexport default Topbar;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Topbar/Topbar.js"],"names":["React","Component","PropTypes","compose","FormattedMessage","intlShape","injectIntl","pickBy","classNames","config","routeConfiguration","withViewport","parse","stringify","createResourceLocatorString","pathByRouteName","propTypes","Button","Logo","Modal","ModalMissingInformation","NamedLink","TopbarDesktop","TopbarMobileMenu","TopbarSearchForm","MenuIcon","SearchIcon","css","MAX_MOBILE_SCREEN_WIDTH","redirectToURLWithModalState","props","modalStateParam","history","location","pathname","search","state","searchString","push","redirectToURLWithoutModalState","queryParams","v","k","stringified","GenericError","show","classes","genericError","genericErrorVisible","genericErrorContent","genericErrorText","bool","isRequired","TopbarComponent","constructor","handleMobileMenuOpen","bind","handleMobileMenuClose","handleMobileSearchOpen","handleMobileSearchClose","handleSubmit","handleLogout","values","currentSearchParams","selectedPlace","origin","bounds","originMaybe","sortSearchByDistance","searchParams","address","onLogout","then","path","dev","window","console","log","render","className","rootClassName","desktopClassName","mobileRootClassName","mobileClassName","isAuthenticated","authInProgress","currentUser","currentUserHasListings","currentUserHasOrders","currentPage","notificationCount","viewport","intl","onManageDisableScrolling","onResendVerificationEmail","sendVerificationEmailInProgress","sendVerificationEmailError","showGenericError","latlng","latlngBounds","mobilemenu","mobilesearch","notificationDot","isMobileLayout","width","isMobileMenuOpen","isMobileSearchOpen","mobileMenu","locationFieldsPresent","initialSearchFormValues","root","container","menu","formatMessage","id","menuIcon","home","searchMenu","searchMenuIcon","desktop","modalContainer","searchContainer","mobileHelp","missingInformationModal","defaultProps","func","number","shape","string","error","height","Topbar","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport pickBy from 'lodash/pickBy';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport routeConfiguration from '../../routeConfiguration';\nimport { withViewport } from '../../util/contextHelpers';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { propTypes } from '../../util/types';\nimport {\n  Button,\n  Logo,\n  Modal,\n  ModalMissingInformation,\n  NamedLink,\n  TopbarDesktop,\n  TopbarMobileMenu,\n} from '../../components';\nimport { TopbarSearchForm } from '../../forms';\n\nimport MenuIcon from './MenuIcon';\nimport SearchIcon from './SearchIcon';\nimport css from './Topbar.css';\n\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nconst redirectToURLWithModalState = (props, modalStateParam) => {\n  const { history, location } = props;\n  const { pathname, search, state } = location;\n  const searchString = `?${stringify({ [modalStateParam]: 'open', ...parse(search) })}`;\n  history.push(`${pathname}${searchString}`, state);\n};\n\nconst redirectToURLWithoutModalState = (props, modalStateParam) => {\n  const { history, location } = props;\n  const { pathname, search, state } = location;\n  const queryParams = pickBy(parse(search), (v, k) => {\n    return k !== modalStateParam;\n  });\n  const stringified = stringify(queryParams);\n  const searchString = stringified ? `?${stringified}` : '';\n  history.push(`${pathname}${searchString}`, state);\n};\n\nconst GenericError = props => {\n  const { show } = props;\n  const classes = classNames(css.genericError, {\n    [css.genericErrorVisible]: show,\n  });\n  return (\n    <div className={classes}>\n      <div className={css.genericErrorContent}>\n        <p className={css.genericErrorText}>\n          <FormattedMessage id=\"Topbar.genericError\" />\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst { bool } = PropTypes;\n\nGenericError.propTypes = {\n  show: bool.isRequired,\n};\n\nclass TopbarComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMobileMenuOpen = this.handleMobileMenuOpen.bind(this);\n    this.handleMobileMenuClose = this.handleMobileMenuClose.bind(this);\n    this.handleMobileSearchOpen = this.handleMobileSearchOpen.bind(this);\n    this.handleMobileSearchClose = this.handleMobileSearchClose.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n  handleMobileMenuOpen() {\n    redirectToURLWithModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileMenuClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileSearchOpen() {\n    redirectToURLWithModalState(this.props, 'mobilesearch');\n  }\n\n  handleMobileSearchClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilesearch');\n  }\n\n  handleSubmit(values) {\n    const { currentSearchParams } = this.props;\n    const { search, selectedPlace } = values.location;\n    const { history } = this.props;\n    const { origin, bounds } = selectedPlace;\n    const originMaybe = config.sortSearchByDistance ? { origin } : {};\n    const searchParams = {\n      ...currentSearchParams,\n      ...originMaybe,\n      address: search,\n      bounds,\n    };\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, searchParams));\n  }\n\n  handleLogout() {\n    const { onLogout, history } = this.props;\n    onLogout().then(() => {\n      const path = pathByRouteName('LandingPage', routeConfiguration());\n\n      // In production we ensure that data is really lost,\n      // but in development mode we use stored values for debugging\n      if (config.dev) {\n        history.push(path);\n      } else if (typeof window !== 'undefined') {\n        window.location = path;\n      }\n\n      console.log('logged out'); // eslint-disable-line\n    });\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      desktopClassName,\n      mobileRootClassName,\n      mobileClassName,\n      isAuthenticated,\n      authInProgress,\n      currentUser,\n      currentUserHasListings,\n      currentUserHasOrders,\n      currentPage,\n      notificationCount,\n      viewport,\n      intl,\n      location,\n      onManageDisableScrolling,\n      onResendVerificationEmail,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      showGenericError,\n    } = this.props;\n\n    const { mobilemenu, mobilesearch, address, origin, bounds } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds'],\n    });\n\n    const notificationDot = notificationCount > 0 ? <div className={css.notificationDot} /> : null;\n\n    const isMobileLayout = viewport.width < MAX_MOBILE_SCREEN_WIDTH;\n    const isMobileMenuOpen = isMobileLayout && mobilemenu === 'open';\n    const isMobileSearchOpen = isMobileLayout && mobilesearch === 'open';\n\n    const mobileMenu = (\n      <TopbarMobileMenu\n        isAuthenticated={isAuthenticated}\n        currentUserHasListings={currentUserHasListings}\n        currentUser={currentUser}\n        onLogout={this.handleLogout}\n        notificationCount={notificationCount}\n        currentPage={currentPage}\n      />\n    );\n\n    // Only render current search if full place object is available in the URL params\n    const locationFieldsPresent = config.sortSearchByDistance\n      ? address && origin && bounds\n      : address && bounds;\n    const initialSearchFormValues = {\n      location: locationFieldsPresent\n        ? {\n            search: address,\n            selectedPlace: { address, origin, bounds },\n          }\n        : null,\n    };\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    return (\n      <div className={classes}>\n        <div className={classNames(mobileRootClassName || css.container, mobileClassName)}>\n          <Button\n            rootClassName={css.menu}\n            onClick={this.handleMobileMenuOpen}\n            title={intl.formatMessage({ id: 'Topbar.menuIcon' })}\n          >\n            <MenuIcon className={css.menuIcon} />\n            {notificationDot}\n          </Button>\n          <NamedLink\n            className={css.home}\n            name=\"LandingPage\"\n            title={intl.formatMessage({ id: 'Topbar.logoIcon' })}\n          >\n            <Logo format=\"mobile\" />\n          </NamedLink>\n          <Button\n            rootClassName={css.searchMenu}\n            onClick={this.handleMobileSearchOpen}\n            title={intl.formatMessage({ id: 'Topbar.searchIcon' })}\n          >\n            <SearchIcon className={css.searchMenuIcon} />\n          </Button>\n        </div>\n        <div className={css.desktop}>\n          <TopbarDesktop\n            className={desktopClassName}\n            currentUserHasListings={currentUserHasListings}\n            currentUser={currentUser}\n            currentPage={currentPage}\n            initialSearchFormValues={initialSearchFormValues}\n            intl={intl}\n            isAuthenticated={isAuthenticated}\n            notificationCount={notificationCount}\n            onLogout={this.handleLogout}\n            onSearchSubmit={this.handleSubmit}\n          />\n        </div>\n        <Modal\n          id=\"TopbarMobileMenu\"\n          isOpen={isMobileMenuOpen}\n          onClose={this.handleMobileMenuClose}\n          onManageDisableScrolling={onManageDisableScrolling}\n        >\n          {authInProgress ? null : mobileMenu}\n        </Modal>\n        <Modal\n          id=\"TopbarMobileSearch\"\n          containerClassName={css.modalContainer}\n          isOpen={isMobileSearchOpen}\n          onClose={this.handleMobileSearchClose}\n          onManageDisableScrolling={onManageDisableScrolling}\n        >\n          <div className={css.searchContainer}>\n            <TopbarSearchForm\n              form=\"TopbarSearchForm\"\n              onSubmit={this.handleSubmit}\n              initialValues={initialSearchFormValues}\n              isMobile\n            />\n            <p className={css.mobileHelp}>\n              <FormattedMessage id=\"Topbar.mobileSearchHelp\" />\n            </p>\n          </div>\n        </Modal>\n        <ModalMissingInformation\n          id=\"MissingInformationReminder\"\n          containerClassName={css.missingInformationModal}\n          currentUser={currentUser}\n          currentUserHasListings={currentUserHasListings}\n          currentUserHasOrders={currentUserHasOrders}\n          location={location}\n          onManageDisableScrolling={onManageDisableScrolling}\n          onResendVerificationEmail={onResendVerificationEmail}\n          sendVerificationEmailInProgress={sendVerificationEmailInProgress}\n          sendVerificationEmailError={sendVerificationEmailError}\n        />\n\n        <GenericError show={showGenericError} />\n      </div>\n    );\n  }\n}\n\nTopbarComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  desktopClassName: null,\n  mobileRootClassName: null,\n  mobileClassName: null,\n  notificationCount: 0,\n  currentUser: null,\n  currentUserHasOrders: null,\n  currentPage: null,\n  sendVerificationEmailError: null,\n};\n\nconst { func, number, shape, string } = PropTypes;\n\nTopbarComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  desktopClassName: string,\n  mobileRootClassName: string,\n  mobileClassName: string,\n  isAuthenticated: bool.isRequired,\n  authInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  currentUserHasListings: bool.isRequired,\n  currentUserHasOrders: bool,\n  currentPage: string,\n  notificationCount: number,\n  onLogout: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  sendVerificationEmailInProgress: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  showGenericError: bool.isRequired,\n\n  // These are passed from Page to keep Topbar rendering aware of location changes\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst Topbar = compose(\n  withViewport,\n  injectIntl\n)(TopbarComponent);\n\nTopbar.displayName = 'Topbar';\n\nexport default Topbar;\n"]},"metadata":{},"sourceType":"module"}