{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport pick from 'lodash/pick';\nimport pickBy from 'lodash/pickBy';\nimport isEmpty from 'lodash/isEmpty';\nimport moment from 'moment';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { isTransactionsTransitionInvalidTransition, storableError } from '../../util/errors';\nimport { txIsEnquired, getReview1Transition, getReview2Transition, txIsInFirstReviewBy, TRANSITION_ACCEPT, TRANSITION_DECLINE } from '../../util/transaction';\nimport * as log from '../../util/log';\nimport { updatedEntities, denormalisedEntities, denormalisedResponseEntities } from '../../util/data';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { fetchCurrentUserNotifications } from '../../ducks/user.duck';\nconst UUID = sdkTypes.UUID;\nconst MESSAGES_PAGE_SIZE = 100;\nconst CUSTOMER = 'customer'; // ================ Action types ================ //\n\nexport const SET_INITAL_VALUES = 'app/TransactionPage/SET_INITIAL_VALUES';\nexport const FETCH_TRANSACTION_REQUEST = 'app/TransactionPage/FETCH_TRANSACTION_REQUEST';\nexport const FETCH_TRANSACTION_SUCCESS = 'app/TransactionPage/FETCH_TRANSACTION_SUCCESS';\nexport const FETCH_TRANSACTION_ERROR = 'app/TransactionPage/FETCH_TRANSACTION_ERROR';\nexport const ACCEPT_SALE_REQUEST = 'app/TransactionPage/ACCEPT_SALE_REQUEST';\nexport const ACCEPT_SALE_SUCCESS = 'app/TransactionPage/ACCEPT_SALE_SUCCESS';\nexport const ACCEPT_SALE_ERROR = 'app/TransactionPage/ACCEPT_SALE_ERROR';\nexport const DECLINE_SALE_REQUEST = 'app/TransactionPage/DECLINE_SALE_REQUEST';\nexport const DECLINE_SALE_SUCCESS = 'app/TransactionPage/DECLINE_SALE_SUCCESS';\nexport const DECLINE_SALE_ERROR = 'app/TransactionPage/DECLINE_SALE_ERROR';\nexport const FETCH_MESSAGES_REQUEST = 'app/TransactionPage/FETCH_MESSAGES_REQUEST';\nexport const FETCH_MESSAGES_SUCCESS = 'app/TransactionPage/FETCH_MESSAGES_SUCCESS';\nexport const FETCH_MESSAGES_ERROR = 'app/TransactionPage/FETCH_MESSAGES_ERROR';\nexport const SEND_MESSAGE_REQUEST = 'app/TransactionPage/SEND_MESSAGE_REQUEST';\nexport const SEND_MESSAGE_SUCCESS = 'app/TransactionPage/SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_ERROR = 'app/TransactionPage/SEND_MESSAGE_ERROR';\nexport const SEND_REVIEW_REQUEST = 'app/TransactionPage/SEND_REVIEW_REQUEST';\nexport const SEND_REVIEW_SUCCESS = 'app/TransactionPage/SEND_REVIEW_SUCCESS';\nexport const SEND_REVIEW_ERROR = 'app/TransactionPage/SEND_REVIEW_ERROR';\nexport const FETCH_TIME_SLOTS_REQUEST = 'app/TransactionPage/FETCH_TIME_SLOTS_REQUEST';\nexport const FETCH_TIME_SLOTS_SUCCESS = 'app/TransactionPage/FETCH_TIME_SLOTS_SUCCESS';\nexport const FETCH_TIME_SLOTS_ERROR = 'app/TransactionPage/FETCH_TIME_SLOTS_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  fetchTransactionInProgress: false,\n  fetchTransactionError: null,\n  transactionRef: null,\n  acceptInProgress: false,\n  acceptSaleError: null,\n  declineInProgress: false,\n  declineSaleError: null,\n  fetchMessagesInProgress: false,\n  fetchMessagesError: null,\n  totalMessages: 0,\n  totalMessagePages: 0,\n  oldestMessagePageFetched: 0,\n  messages: [],\n  initialMessageFailedToTransaction: null,\n  sendMessageInProgress: false,\n  sendMessageError: null,\n  sendReviewInProgress: false,\n  sendReviewError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null\n}; // Merge entity arrays using ids, so that conflicting items in newer array (b) overwrite old values (a).\n// const a = [{ id: { uuid: 1 } }, { id: { uuid: 3 } }];\n// const b = [{ id: : { uuid: 2 } }, { id: : { uuid: 1 } }];\n// mergeEntityArrays(a, b)\n// => [{ id: { uuid: 3 } }, { id: : { uuid: 2 } }, { id: : { uuid: 1 } }]\n\nconst mergeEntityArrays = (a, b) => {\n  return a.filter(aEntity => !b.find(bEntity => aEntity.id.uuid === bEntity.id.uuid)).concat(b);\n};\n\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case SET_INITAL_VALUES:\n      return _objectSpread({}, initialState, payload);\n\n    case FETCH_TRANSACTION_REQUEST:\n      return _objectSpread({}, state, {\n        fetchTransactionInProgress: true,\n        fetchTransactionError: null\n      });\n\n    case FETCH_TRANSACTION_SUCCESS:\n      {\n        const transactionRef = {\n          id: payload.data.data.id,\n          type: 'transaction'\n        };\n        return _objectSpread({}, state, {\n          fetchTransactionInProgress: false,\n          transactionRef\n        });\n      }\n\n    case FETCH_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return _objectSpread({}, state, {\n        fetchTransactionInProgress: false,\n        fetchTransactionError: payload\n      });\n\n    case ACCEPT_SALE_REQUEST:\n      return _objectSpread({}, state, {\n        acceptInProgress: true,\n        acceptSaleError: null,\n        declineSaleError: null\n      });\n\n    case ACCEPT_SALE_SUCCESS:\n      return _objectSpread({}, state, {\n        acceptInProgress: false\n      });\n\n    case ACCEPT_SALE_ERROR:\n      return _objectSpread({}, state, {\n        acceptInProgress: false,\n        acceptSaleError: payload\n      });\n\n    case DECLINE_SALE_REQUEST:\n      return _objectSpread({}, state, {\n        declineInProgress: true,\n        declineSaleError: null,\n        acceptSaleError: null\n      });\n\n    case DECLINE_SALE_SUCCESS:\n      return _objectSpread({}, state, {\n        declineInProgress: false\n      });\n\n    case DECLINE_SALE_ERROR:\n      return _objectSpread({}, state, {\n        declineInProgress: false,\n        declineSaleError: payload\n      });\n\n    case FETCH_MESSAGES_REQUEST:\n      return _objectSpread({}, state, {\n        fetchMessagesInProgress: true,\n        fetchMessagesError: null\n      });\n\n    case FETCH_MESSAGES_SUCCESS:\n      {\n        const oldestMessagePageFetched = state.oldestMessagePageFetched > payload.page ? state.oldestMessagePageFetched : payload.page;\n        return _objectSpread({}, state, {\n          fetchMessagesInProgress: false,\n          messages: mergeEntityArrays(state.messages, payload.messages),\n          totalMessages: payload.totalItems,\n          totalMessagePages: payload.totalPages,\n          oldestMessagePageFetched\n        });\n      }\n\n    case FETCH_MESSAGES_ERROR:\n      return _objectSpread({}, state, {\n        fetchMessagesInProgress: false,\n        fetchMessagesError: payload\n      });\n\n    case SEND_MESSAGE_REQUEST:\n      return _objectSpread({}, state, {\n        sendMessageInProgress: true,\n        sendMessageError: null,\n        initialMessageFailedToTransaction: null\n      });\n\n    case SEND_MESSAGE_SUCCESS:\n      return _objectSpread({}, state, {\n        sendMessageInProgress: false\n      });\n\n    case SEND_MESSAGE_ERROR:\n      return _objectSpread({}, state, {\n        sendMessageInProgress: false,\n        sendMessageError: payload\n      });\n\n    case SEND_REVIEW_REQUEST:\n      return _objectSpread({}, state, {\n        sendReviewInProgress: true,\n        sendReviewError: null\n      });\n\n    case SEND_REVIEW_SUCCESS:\n      return _objectSpread({}, state, {\n        sendReviewInProgress: false\n      });\n\n    case SEND_REVIEW_ERROR:\n      return _objectSpread({}, state, {\n        sendReviewInProgress: false,\n        sendReviewError: payload\n      });\n\n    case FETCH_TIME_SLOTS_REQUEST:\n      return _objectSpread({}, state, {\n        fetchTimeSlotsError: null\n      });\n\n    case FETCH_TIME_SLOTS_SUCCESS:\n      return _objectSpread({}, state, {\n        timeSlots: payload\n      });\n\n    case FETCH_TIME_SLOTS_ERROR:\n      return _objectSpread({}, state, {\n        fetchTimeSlotsError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const acceptOrDeclineInProgress = state => {\n  return state.TransactionPage.acceptInProgress || state.TransactionPage.declineInProgress;\n}; // ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\n\nconst fetchTransactionRequest = () => ({\n  type: FETCH_TRANSACTION_REQUEST\n});\n\nconst fetchTransactionSuccess = response => ({\n  type: FETCH_TRANSACTION_SUCCESS,\n  payload: response\n});\n\nconst fetchTransactionError = e => ({\n  type: FETCH_TRANSACTION_ERROR,\n  error: true,\n  payload: e\n});\n\nconst acceptSaleRequest = () => ({\n  type: ACCEPT_SALE_REQUEST\n});\n\nconst acceptSaleSuccess = () => ({\n  type: ACCEPT_SALE_SUCCESS\n});\n\nconst acceptSaleError = e => ({\n  type: ACCEPT_SALE_ERROR,\n  error: true,\n  payload: e\n});\n\nconst declineSaleRequest = () => ({\n  type: DECLINE_SALE_REQUEST\n});\n\nconst declineSaleSuccess = () => ({\n  type: DECLINE_SALE_SUCCESS\n});\n\nconst declineSaleError = e => ({\n  type: DECLINE_SALE_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchMessagesRequest = () => ({\n  type: FETCH_MESSAGES_REQUEST\n});\n\nconst fetchMessagesSuccess = (messages, pagination) => ({\n  type: FETCH_MESSAGES_SUCCESS,\n  payload: _objectSpread({\n    messages\n  }, pagination)\n});\n\nconst fetchMessagesError = e => ({\n  type: FETCH_MESSAGES_ERROR,\n  error: true,\n  payload: e\n});\n\nconst sendMessageRequest = () => ({\n  type: SEND_MESSAGE_REQUEST\n});\n\nconst sendMessageSuccess = () => ({\n  type: SEND_MESSAGE_SUCCESS\n});\n\nconst sendMessageError = e => ({\n  type: SEND_MESSAGE_ERROR,\n  error: true,\n  payload: e\n});\n\nconst sendReviewRequest = () => ({\n  type: SEND_REVIEW_REQUEST\n});\n\nconst sendReviewSuccess = () => ({\n  type: SEND_REVIEW_SUCCESS\n});\n\nconst sendReviewError = e => ({\n  type: SEND_REVIEW_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchTimeSlotsRequest = () => ({\n  type: FETCH_TIME_SLOTS_REQUEST\n});\n\nconst fetchTimeSlotsSuccess = timeSlots => ({\n  type: FETCH_TIME_SLOTS_SUCCESS,\n  payload: timeSlots\n});\n\nconst fetchTimeSlotsError = e => ({\n  type: FETCH_TIME_SLOTS_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\n\nconst listingRelationship = txResponse => {\n  return txResponse.data.data.relationships.listing.data;\n};\n\nexport const fetchTransaction = (id, txRole) => (dispatch, getState, sdk) => {\n  dispatch(fetchTransactionRequest());\n  let txResponse = null;\n  return sdk.transactions.show(_objectSpread({\n    id,\n    include: ['customer', 'customer.profileImage', 'provider', 'provider.profileImage', 'listing', 'booking', 'reviews', 'reviews.author', 'reviews.subject']\n  }, IMAGE_VARIANTS), {\n    expand: true\n  }).then(response => {\n    txResponse = response;\n    const listingId = listingRelationship(response).id;\n    const entities = updatedEntities({}, response.data);\n    const listingRef = {\n      id: listingId,\n      type: 'listing'\n    };\n    const transactionRef = {\n      id,\n      type: 'transaction'\n    };\n    const denormalised = denormalisedEntities(entities, [listingRef, transactionRef]);\n    const listing = denormalised[0];\n    const transaction = denormalised[1]; // Fetch time slots for transactions that are in enquired state\n\n    const canFetchTimeslots = txRole === 'customer' && config.enableAvailability && transaction && txIsEnquired(transaction);\n\n    if (canFetchTimeslots) {\n      dispatch(fetchTimeSlots(listingId));\n    }\n\n    const canFetchListing = listing && listing.attributes && !listing.attributes.deleted;\n\n    if (canFetchListing) {\n      return sdk.listings.show(_objectSpread({\n        id: listingId,\n        include: ['author', 'author.profileImage', 'images']\n      }, IMAGE_VARIANTS));\n    } else {\n      return response;\n    }\n  }).then(response => {\n    dispatch(addMarketplaceEntities(txResponse));\n    dispatch(addMarketplaceEntities(response));\n    dispatch(fetchTransactionSuccess(txResponse));\n    return response;\n  }).catch(e => {\n    dispatch(fetchTransactionError(storableError(e)));\n    throw e;\n  });\n};\nexport const acceptSale = id => (dispatch, getState, sdk) => {\n  if (acceptOrDeclineInProgress(getState())) {\n    return Promise.reject(new Error('Accept or decline already in progress'));\n  }\n\n  dispatch(acceptSaleRequest());\n  return sdk.transactions.transition({\n    id,\n    transition: TRANSITION_ACCEPT,\n    params: {}\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(acceptSaleSuccess());\n    dispatch(fetchCurrentUserNotifications());\n    return response;\n  }).catch(e => {\n    dispatch(acceptSaleError(storableError(e)));\n    log.error(e, 'accept-sale-failed', {\n      txId: id,\n      transition: TRANSITION_ACCEPT\n    });\n    throw e;\n  });\n};\nexport const declineSale = id => (dispatch, getState, sdk) => {\n  if (acceptOrDeclineInProgress(getState())) {\n    return Promise.reject(new Error('Accept or decline already in progress'));\n  }\n\n  dispatch(declineSaleRequest());\n  return sdk.transactions.transition({\n    id,\n    transition: TRANSITION_DECLINE,\n    params: {}\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(declineSaleSuccess());\n    dispatch(fetchCurrentUserNotifications());\n    return response;\n  }).catch(e => {\n    dispatch(declineSaleError(storableError(e)));\n    log.error(e, 'reject-sale-failed', {\n      txId: id,\n      transition: TRANSITION_DECLINE\n    });\n    throw e;\n  });\n};\n\nconst fetchMessages = (txId, page) => (dispatch, getState, sdk) => {\n  const paging = {\n    page,\n    per_page: MESSAGES_PAGE_SIZE\n  };\n  dispatch(fetchMessagesRequest());\n  return sdk.messages.query(_objectSpread({\n    transaction_id: txId,\n    include: ['sender', 'sender.profileImage']\n  }, IMAGE_VARIANTS, paging)).then(response => {\n    const messages = denormalisedResponseEntities(response);\n    const _response$data$meta = response.data.meta,\n          totalItems = _response$data$meta.totalItems,\n          totalPages = _response$data$meta.totalPages,\n          fetchedPage = _response$data$meta.page;\n    const pagination = {\n      totalItems,\n      totalPages,\n      page: fetchedPage\n    };\n    const totalMessages = getState().TransactionPage.totalMessages; // Original fetchMessages call succeeded\n\n    dispatch(fetchMessagesSuccess(messages, pagination)); // Check if totalItems has changed between fetched pagination pages\n    // if totalItems has changed, fetch first page again to include new incoming messages.\n    // TODO if there're more than 100 incoming messages,\n    // this should loop through most recent pages instead of fetching just the first one.\n\n    if (totalItems > totalMessages && page > 1) {\n      dispatch(fetchMessages(txId, 1)).then(() => {// Original fetch was enough as a response for user action,\n        // this just includes new incoming messages\n      }).catch(() => {// Background update, no need to to do anything atm.\n      });\n    }\n  }).catch(e => {\n    dispatch(fetchMessagesError(storableError(e)));\n    throw e;\n  });\n};\n\nexport const fetchMoreMessages = txId => (dispatch, getState, sdk) => {\n  const state = getState();\n  const _state$TransactionPag = state.TransactionPage,\n        oldestMessagePageFetched = _state$TransactionPag.oldestMessagePageFetched,\n        totalMessagePages = _state$TransactionPag.totalMessagePages;\n  const hasMoreOldMessages = totalMessagePages > oldestMessagePageFetched; // In case there're no more old pages left we default to fetching the current cursor position\n\n  const nextPage = hasMoreOldMessages ? oldestMessagePageFetched + 1 : oldestMessagePageFetched;\n  return dispatch(fetchMessages(txId, nextPage));\n};\nexport const sendMessage = (txId, message) => (dispatch, getState, sdk) => {\n  dispatch(sendMessageRequest());\n  return sdk.messages.send({\n    transactionId: txId,\n    content: message\n  }).then(response => {\n    const messageId = response.data.data.id; // We fetch the first page again to add sent message to the page data\n    // and update possible incoming messages too.\n    // TODO if there're more than 100 incoming messages,\n    // this should loop through most recent pages instead of fetching just the first one.\n\n    return dispatch(fetchMessages(txId, 1)).then(() => {\n      dispatch(sendMessageSuccess());\n      return messageId;\n    }).catch(() => dispatch(sendMessageSuccess()));\n  }).catch(e => {\n    dispatch(sendMessageError(storableError(e))); // Rethrow so the page can track whether the sending failed, and\n    // keep the message in the form for a retry.\n\n    throw e;\n  });\n};\nconst REVIEW_TX_INCLUDES = ['reviews', 'reviews.author', 'reviews.subject'];\nconst IMAGE_VARIANTS = {\n  'fields.image': [// Profile images\n  'variants.square-small', 'variants.square-small2x', // Listing images:\n  'variants.landscape-crop', 'variants.landscape-crop2x']\n}; // If other party has already sent a review, we need to make transition to\n// TRANSITION_REVIEW_2_BY_<CUSTOMER/PROVIDER>\n\nconst sendReviewAsSecond = (id, params, role, dispatch, sdk) => {\n  const transition = getReview2Transition(role === CUSTOMER);\n  const include = REVIEW_TX_INCLUDES;\n  return sdk.transactions.transition({\n    id,\n    transition,\n    params\n  }, _objectSpread({\n    expand: true,\n    include\n  }, IMAGE_VARIANTS)).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(sendReviewSuccess());\n    return response;\n  }).catch(e => {\n    dispatch(sendReviewError(storableError(e))); // Rethrow so the page can track whether the sending failed, and\n    // keep the message in the form for a retry.\n\n    throw e;\n  });\n}; // If other party has not yet sent a review, we need to make transition to\n// TRANSITION_REVIEW_1_BY_<CUSTOMER/PROVIDER>\n// However, the other party might have made the review after previous data synch point.\n// So, error is likely to happen and then we must try another state transition\n// by calling sendReviewAsSecond().\n\n\nconst sendReviewAsFirst = (id, params, role, dispatch, sdk) => {\n  const transition = getReview1Transition(role === CUSTOMER);\n  const include = REVIEW_TX_INCLUDES;\n  return sdk.transactions.transition({\n    id,\n    transition,\n    params\n  }, _objectSpread({\n    expand: true,\n    include\n  }, IMAGE_VARIANTS)).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(sendReviewSuccess());\n    return response;\n  }).catch(e => {\n    // If transaction transition is invalid, lets try another endpoint.\n    if (isTransactionsTransitionInvalidTransition(e)) {\n      return sendReviewAsSecond(id, params, role, dispatch, sdk);\n    } else {\n      dispatch(sendReviewError(storableError(e))); // Rethrow so the page can track whether the sending failed, and\n      // keep the message in the form for a retry.\n\n      throw e;\n    }\n  });\n};\n\nexport const sendReview = (role, tx, reviewRating, reviewContent) => (dispatch, getState, sdk) => {\n  const params = {\n    reviewRating,\n    reviewContent\n  };\n  const txStateOtherPartyFirst = txIsInFirstReviewBy(tx, role !== CUSTOMER);\n  dispatch(sendReviewRequest());\n  return txStateOtherPartyFirst ? sendReviewAsSecond(tx.id, params, role, dispatch, sdk) : sendReviewAsFirst(tx.id, params, role, dispatch, sdk);\n};\n\nconst isNonEmpty = value => {\n  return typeof value === 'object' || Array.isArray(value) ? !isEmpty(value) : !!value;\n};\n\nconst timeSlotsRequest = params => (dispatch, getState, sdk) => {\n  return sdk.timeslots.query(params).then(response => {\n    return denormalisedResponseEntities(response);\n  });\n};\n\nconst fetchTimeSlots = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchTimeSlotsRequest); // Time slots can be fetched for 90 days at a time,\n  // for at most 180 days from now. If max number of bookable\n  // day exceeds 90, a second request is made.\n\n  const maxTimeSlots = 90; // booking range: today + bookable days -1\n\n  const bookingRange = config.dayCountAvailableForBooking - 1;\n  const timeSlotsRange = Math.min(bookingRange, maxTimeSlots);\n  const start = moment.utc().startOf('day').toDate();\n  const end = moment().utc().startOf('day').add(timeSlotsRange, 'days').toDate();\n  const params = {\n    listingId,\n    start,\n    end\n  };\n  return dispatch(timeSlotsRequest(params)).then(timeSlots => {\n    const secondRequest = bookingRange > maxTimeSlots;\n\n    if (secondRequest) {\n      const secondRange = Math.min(maxTimeSlots, bookingRange - maxTimeSlots);\n      const secondParams = {\n        listingId,\n        start: end,\n        end: moment(end).add(secondRange, 'days').toDate()\n      };\n      return dispatch(timeSlotsRequest(secondParams)).then(secondBatch => {\n        const combined = timeSlots.concat(secondBatch);\n        dispatch(fetchTimeSlotsSuccess(combined));\n      });\n    } else {\n      dispatch(fetchTimeSlotsSuccess(timeSlots));\n    }\n  }).catch(e => {\n    dispatch(fetchTimeSlotsError(storableError(e)));\n  });\n}; // loadData is a collection of async calls that need to be made\n// before page has all the info it needs to render itself\n\n\nexport const loadData = params => (dispatch, getState) => {\n  const txId = new UUID(params.id);\n  const state = getState().TransactionPage;\n  const txRef = state.transactionRef;\n  const txRole = params.transactionRole; // In case a transaction reference is found from a previous\n  // data load -> clear the state. Otherwise keep the non-null\n  // and non-empty values which may have been set from a previous page.\n\n  const initialValues = txRef ? {} : pickBy(state, isNonEmpty);\n  dispatch(setInitialValues(initialValues)); // Sale / order (i.e. transaction entity in API)\n\n  return Promise.all([dispatch(fetchTransaction(txId, txRole)), dispatch(fetchMessages(txId, 1))]);\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/TransactionPage/TransactionPage.duck.js"],"names":["pick","pickBy","isEmpty","moment","config","types","sdkTypes","isTransactionsTransitionInvalidTransition","storableError","txIsEnquired","getReview1Transition","getReview2Transition","txIsInFirstReviewBy","TRANSITION_ACCEPT","TRANSITION_DECLINE","log","updatedEntities","denormalisedEntities","denormalisedResponseEntities","addMarketplaceEntities","fetchCurrentUserNotifications","UUID","MESSAGES_PAGE_SIZE","CUSTOMER","SET_INITAL_VALUES","FETCH_TRANSACTION_REQUEST","FETCH_TRANSACTION_SUCCESS","FETCH_TRANSACTION_ERROR","ACCEPT_SALE_REQUEST","ACCEPT_SALE_SUCCESS","ACCEPT_SALE_ERROR","DECLINE_SALE_REQUEST","DECLINE_SALE_SUCCESS","DECLINE_SALE_ERROR","FETCH_MESSAGES_REQUEST","FETCH_MESSAGES_SUCCESS","FETCH_MESSAGES_ERROR","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_ERROR","SEND_REVIEW_REQUEST","SEND_REVIEW_SUCCESS","SEND_REVIEW_ERROR","FETCH_TIME_SLOTS_REQUEST","FETCH_TIME_SLOTS_SUCCESS","FETCH_TIME_SLOTS_ERROR","initialState","fetchTransactionInProgress","fetchTransactionError","transactionRef","acceptInProgress","acceptSaleError","declineInProgress","declineSaleError","fetchMessagesInProgress","fetchMessagesError","totalMessages","totalMessagePages","oldestMessagePageFetched","messages","initialMessageFailedToTransaction","sendMessageInProgress","sendMessageError","sendReviewInProgress","sendReviewError","timeSlots","fetchTimeSlotsError","mergeEntityArrays","a","b","filter","aEntity","find","bEntity","id","uuid","concat","checkoutPageReducer","state","action","type","payload","data","console","error","page","totalItems","totalPages","acceptOrDeclineInProgress","TransactionPage","setInitialValues","initialValues","Object","keys","fetchTransactionRequest","fetchTransactionSuccess","response","e","acceptSaleRequest","acceptSaleSuccess","declineSaleRequest","declineSaleSuccess","fetchMessagesRequest","fetchMessagesSuccess","pagination","sendMessageRequest","sendMessageSuccess","sendReviewRequest","sendReviewSuccess","fetchTimeSlotsRequest","fetchTimeSlotsSuccess","listingRelationship","txResponse","relationships","listing","fetchTransaction","txRole","dispatch","getState","sdk","transactions","show","include","IMAGE_VARIANTS","expand","then","listingId","entities","listingRef","denormalised","transaction","canFetchTimeslots","enableAvailability","fetchTimeSlots","canFetchListing","attributes","deleted","listings","catch","acceptSale","Promise","reject","Error","transition","params","txId","declineSale","fetchMessages","paging","per_page","query","transaction_id","meta","fetchedPage","fetchMoreMessages","hasMoreOldMessages","nextPage","sendMessage","message","send","transactionId","content","messageId","REVIEW_TX_INCLUDES","sendReviewAsSecond","role","sendReviewAsFirst","sendReview","tx","reviewRating","reviewContent","txStateOtherPartyFirst","isNonEmpty","value","Array","isArray","timeSlotsRequest","timeslots","maxTimeSlots","bookingRange","dayCountAvailableForBooking","timeSlotsRange","Math","min","start","utc","startOf","toDate","end","add","secondRequest","secondRange","secondParams","secondBatch","combined","loadData","txRef","transactionRole","all"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport pickBy from 'lodash/pickBy';\nimport isEmpty from 'lodash/isEmpty';\nimport moment from 'moment';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { isTransactionsTransitionInvalidTransition, storableError } from '../../util/errors';\nimport {\n  txIsEnquired,\n  getReview1Transition,\n  getReview2Transition,\n  txIsInFirstReviewBy,\n  TRANSITION_ACCEPT,\n  TRANSITION_DECLINE,\n} from '../../util/transaction';\nimport * as log from '../../util/log';\nimport {\n  updatedEntities,\n  denormalisedEntities,\n  denormalisedResponseEntities,\n} from '../../util/data';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { fetchCurrentUserNotifications } from '../../ducks/user.duck';\n\nconst { UUID } = sdkTypes;\n\nconst MESSAGES_PAGE_SIZE = 100;\nconst CUSTOMER = 'customer';\n\n// ================ Action types ================ //\n\nexport const SET_INITAL_VALUES = 'app/TransactionPage/SET_INITIAL_VALUES';\n\nexport const FETCH_TRANSACTION_REQUEST = 'app/TransactionPage/FETCH_TRANSACTION_REQUEST';\nexport const FETCH_TRANSACTION_SUCCESS = 'app/TransactionPage/FETCH_TRANSACTION_SUCCESS';\nexport const FETCH_TRANSACTION_ERROR = 'app/TransactionPage/FETCH_TRANSACTION_ERROR';\n\nexport const ACCEPT_SALE_REQUEST = 'app/TransactionPage/ACCEPT_SALE_REQUEST';\nexport const ACCEPT_SALE_SUCCESS = 'app/TransactionPage/ACCEPT_SALE_SUCCESS';\nexport const ACCEPT_SALE_ERROR = 'app/TransactionPage/ACCEPT_SALE_ERROR';\n\nexport const DECLINE_SALE_REQUEST = 'app/TransactionPage/DECLINE_SALE_REQUEST';\nexport const DECLINE_SALE_SUCCESS = 'app/TransactionPage/DECLINE_SALE_SUCCESS';\nexport const DECLINE_SALE_ERROR = 'app/TransactionPage/DECLINE_SALE_ERROR';\n\nexport const FETCH_MESSAGES_REQUEST = 'app/TransactionPage/FETCH_MESSAGES_REQUEST';\nexport const FETCH_MESSAGES_SUCCESS = 'app/TransactionPage/FETCH_MESSAGES_SUCCESS';\nexport const FETCH_MESSAGES_ERROR = 'app/TransactionPage/FETCH_MESSAGES_ERROR';\n\nexport const SEND_MESSAGE_REQUEST = 'app/TransactionPage/SEND_MESSAGE_REQUEST';\nexport const SEND_MESSAGE_SUCCESS = 'app/TransactionPage/SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_ERROR = 'app/TransactionPage/SEND_MESSAGE_ERROR';\n\nexport const SEND_REVIEW_REQUEST = 'app/TransactionPage/SEND_REVIEW_REQUEST';\nexport const SEND_REVIEW_SUCCESS = 'app/TransactionPage/SEND_REVIEW_SUCCESS';\nexport const SEND_REVIEW_ERROR = 'app/TransactionPage/SEND_REVIEW_ERROR';\n\nexport const FETCH_TIME_SLOTS_REQUEST = 'app/TransactionPage/FETCH_TIME_SLOTS_REQUEST';\nexport const FETCH_TIME_SLOTS_SUCCESS = 'app/TransactionPage/FETCH_TIME_SLOTS_SUCCESS';\nexport const FETCH_TIME_SLOTS_ERROR = 'app/TransactionPage/FETCH_TIME_SLOTS_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  fetchTransactionInProgress: false,\n  fetchTransactionError: null,\n  transactionRef: null,\n  acceptInProgress: false,\n  acceptSaleError: null,\n  declineInProgress: false,\n  declineSaleError: null,\n  fetchMessagesInProgress: false,\n  fetchMessagesError: null,\n  totalMessages: 0,\n  totalMessagePages: 0,\n  oldestMessagePageFetched: 0,\n  messages: [],\n  initialMessageFailedToTransaction: null,\n  sendMessageInProgress: false,\n  sendMessageError: null,\n  sendReviewInProgress: false,\n  sendReviewError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n};\n\n// Merge entity arrays using ids, so that conflicting items in newer array (b) overwrite old values (a).\n// const a = [{ id: { uuid: 1 } }, { id: { uuid: 3 } }];\n// const b = [{ id: : { uuid: 2 } }, { id: : { uuid: 1 } }];\n// mergeEntityArrays(a, b)\n// => [{ id: { uuid: 3 } }, { id: : { uuid: 2 } }, { id: : { uuid: 1 } }]\nconst mergeEntityArrays = (a, b) => {\n  return a.filter(aEntity => !b.find(bEntity => aEntity.id.uuid === bEntity.id.uuid)).concat(b);\n};\n\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_INITAL_VALUES:\n      return { ...initialState, ...payload };\n\n    case FETCH_TRANSACTION_REQUEST:\n      return { ...state, fetchTransactionInProgress: true, fetchTransactionError: null };\n    case FETCH_TRANSACTION_SUCCESS: {\n      const transactionRef = { id: payload.data.data.id, type: 'transaction' };\n      return { ...state, fetchTransactionInProgress: false, transactionRef };\n    }\n    case FETCH_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line\n      return { ...state, fetchTransactionInProgress: false, fetchTransactionError: payload };\n\n    case ACCEPT_SALE_REQUEST:\n      return { ...state, acceptInProgress: true, acceptSaleError: null, declineSaleError: null };\n    case ACCEPT_SALE_SUCCESS:\n      return { ...state, acceptInProgress: false };\n    case ACCEPT_SALE_ERROR:\n      return { ...state, acceptInProgress: false, acceptSaleError: payload };\n\n    case DECLINE_SALE_REQUEST:\n      return { ...state, declineInProgress: true, declineSaleError: null, acceptSaleError: null };\n    case DECLINE_SALE_SUCCESS:\n      return { ...state, declineInProgress: false };\n    case DECLINE_SALE_ERROR:\n      return { ...state, declineInProgress: false, declineSaleError: payload };\n\n    case FETCH_MESSAGES_REQUEST:\n      return { ...state, fetchMessagesInProgress: true, fetchMessagesError: null };\n    case FETCH_MESSAGES_SUCCESS: {\n      const oldestMessagePageFetched =\n        state.oldestMessagePageFetched > payload.page\n          ? state.oldestMessagePageFetched\n          : payload.page;\n      return {\n        ...state,\n        fetchMessagesInProgress: false,\n        messages: mergeEntityArrays(state.messages, payload.messages),\n        totalMessages: payload.totalItems,\n        totalMessagePages: payload.totalPages,\n        oldestMessagePageFetched,\n      };\n    }\n    case FETCH_MESSAGES_ERROR:\n      return { ...state, fetchMessagesInProgress: false, fetchMessagesError: payload };\n\n    case SEND_MESSAGE_REQUEST:\n      return {\n        ...state,\n        sendMessageInProgress: true,\n        sendMessageError: null,\n        initialMessageFailedToTransaction: null,\n      };\n    case SEND_MESSAGE_SUCCESS:\n      return { ...state, sendMessageInProgress: false };\n    case SEND_MESSAGE_ERROR:\n      return { ...state, sendMessageInProgress: false, sendMessageError: payload };\n\n    case SEND_REVIEW_REQUEST:\n      return { ...state, sendReviewInProgress: true, sendReviewError: null };\n    case SEND_REVIEW_SUCCESS:\n      return { ...state, sendReviewInProgress: false };\n    case SEND_REVIEW_ERROR:\n      return { ...state, sendReviewInProgress: false, sendReviewError: payload };\n\n    case FETCH_TIME_SLOTS_REQUEST:\n      return { ...state, fetchTimeSlotsError: null };\n    case FETCH_TIME_SLOTS_SUCCESS:\n      return { ...state, timeSlots: payload };\n    case FETCH_TIME_SLOTS_ERROR:\n      return { ...state, fetchTimeSlotsError: payload };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\nexport const acceptOrDeclineInProgress = state => {\n  return state.TransactionPage.acceptInProgress || state.TransactionPage.declineInProgress;\n};\n\n// ================ Action creators ================ //\nexport const setInitialValues = initialValues => ({\n  type: SET_INITAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState)),\n});\n\nconst fetchTransactionRequest = () => ({ type: FETCH_TRANSACTION_REQUEST });\nconst fetchTransactionSuccess = response => ({\n  type: FETCH_TRANSACTION_SUCCESS,\n  payload: response,\n});\nconst fetchTransactionError = e => ({ type: FETCH_TRANSACTION_ERROR, error: true, payload: e });\n\nconst acceptSaleRequest = () => ({ type: ACCEPT_SALE_REQUEST });\nconst acceptSaleSuccess = () => ({ type: ACCEPT_SALE_SUCCESS });\nconst acceptSaleError = e => ({ type: ACCEPT_SALE_ERROR, error: true, payload: e });\n\nconst declineSaleRequest = () => ({ type: DECLINE_SALE_REQUEST });\nconst declineSaleSuccess = () => ({ type: DECLINE_SALE_SUCCESS });\nconst declineSaleError = e => ({ type: DECLINE_SALE_ERROR, error: true, payload: e });\n\nconst fetchMessagesRequest = () => ({ type: FETCH_MESSAGES_REQUEST });\nconst fetchMessagesSuccess = (messages, pagination) => ({\n  type: FETCH_MESSAGES_SUCCESS,\n  payload: { messages, ...pagination },\n});\nconst fetchMessagesError = e => ({ type: FETCH_MESSAGES_ERROR, error: true, payload: e });\n\nconst sendMessageRequest = () => ({ type: SEND_MESSAGE_REQUEST });\nconst sendMessageSuccess = () => ({ type: SEND_MESSAGE_SUCCESS });\nconst sendMessageError = e => ({ type: SEND_MESSAGE_ERROR, error: true, payload: e });\n\nconst sendReviewRequest = () => ({ type: SEND_REVIEW_REQUEST });\nconst sendReviewSuccess = () => ({ type: SEND_REVIEW_SUCCESS });\nconst sendReviewError = e => ({ type: SEND_REVIEW_ERROR, error: true, payload: e });\n\nconst fetchTimeSlotsRequest = () => ({ type: FETCH_TIME_SLOTS_REQUEST });\nconst fetchTimeSlotsSuccess = timeSlots => ({\n  type: FETCH_TIME_SLOTS_SUCCESS,\n  payload: timeSlots,\n});\nconst fetchTimeSlotsError = e => ({\n  type: FETCH_TIME_SLOTS_ERROR,\n  error: true,\n  payload: e,\n});\n\n// ================ Thunks ================ //\n\nconst listingRelationship = txResponse => {\n  return txResponse.data.data.relationships.listing.data;\n};\n\nexport const fetchTransaction = (id, txRole) => (dispatch, getState, sdk) => {\n  dispatch(fetchTransactionRequest());\n  let txResponse = null;\n\n  return sdk.transactions\n    .show(\n      {\n        id,\n        include: [\n          'customer',\n          'customer.profileImage',\n          'provider',\n          'provider.profileImage',\n          'listing',\n          'booking',\n          'reviews',\n          'reviews.author',\n          'reviews.subject',\n        ],\n        ...IMAGE_VARIANTS,\n      },\n      { expand: true }\n    )\n    .then(response => {\n      txResponse = response;\n      const listingId = listingRelationship(response).id;\n      const entities = updatedEntities({}, response.data);\n      const listingRef = { id: listingId, type: 'listing' };\n      const transactionRef = { id, type: 'transaction' };\n      const denormalised = denormalisedEntities(entities, [listingRef, transactionRef]);\n      const listing = denormalised[0];\n      const transaction = denormalised[1];\n\n      // Fetch time slots for transactions that are in enquired state\n      const canFetchTimeslots =\n        txRole === 'customer' &&\n        config.enableAvailability &&\n        transaction &&\n        txIsEnquired(transaction);\n\n      if (canFetchTimeslots) {\n        dispatch(fetchTimeSlots(listingId));\n      }\n\n      const canFetchListing = listing && listing.attributes && !listing.attributes.deleted;\n      if (canFetchListing) {\n        return sdk.listings.show({\n          id: listingId,\n          include: ['author', 'author.profileImage', 'images'],\n          ...IMAGE_VARIANTS,\n        });\n      } else {\n        return response;\n      }\n    })\n    .then(response => {\n      dispatch(addMarketplaceEntities(txResponse));\n      dispatch(addMarketplaceEntities(response));\n      dispatch(fetchTransactionSuccess(txResponse));\n      return response;\n    })\n    .catch(e => {\n      dispatch(fetchTransactionError(storableError(e)));\n      throw e;\n    });\n};\n\nexport const acceptSale = id => (dispatch, getState, sdk) => {\n  if (acceptOrDeclineInProgress(getState())) {\n    return Promise.reject(new Error('Accept or decline already in progress'));\n  }\n  dispatch(acceptSaleRequest());\n\n  return sdk.transactions\n    .transition({ id, transition: TRANSITION_ACCEPT, params: {} }, { expand: true })\n    .then(response => {\n      dispatch(addMarketplaceEntities(response));\n      dispatch(acceptSaleSuccess());\n      dispatch(fetchCurrentUserNotifications());\n      return response;\n    })\n    .catch(e => {\n      dispatch(acceptSaleError(storableError(e)));\n      log.error(e, 'accept-sale-failed', {\n        txId: id,\n        transition: TRANSITION_ACCEPT,\n      });\n      throw e;\n    });\n};\n\nexport const declineSale = id => (dispatch, getState, sdk) => {\n  if (acceptOrDeclineInProgress(getState())) {\n    return Promise.reject(new Error('Accept or decline already in progress'));\n  }\n  dispatch(declineSaleRequest());\n\n  return sdk.transactions\n    .transition({ id, transition: TRANSITION_DECLINE, params: {} }, { expand: true })\n    .then(response => {\n      dispatch(addMarketplaceEntities(response));\n      dispatch(declineSaleSuccess());\n      dispatch(fetchCurrentUserNotifications());\n      return response;\n    })\n    .catch(e => {\n      dispatch(declineSaleError(storableError(e)));\n      log.error(e, 'reject-sale-failed', {\n        txId: id,\n        transition: TRANSITION_DECLINE,\n      });\n      throw e;\n    });\n};\n\nconst fetchMessages = (txId, page) => (dispatch, getState, sdk) => {\n  const paging = { page, per_page: MESSAGES_PAGE_SIZE };\n  dispatch(fetchMessagesRequest());\n\n  return sdk.messages\n    .query({\n      transaction_id: txId,\n      include: ['sender', 'sender.profileImage'],\n      ...IMAGE_VARIANTS,\n      ...paging,\n    })\n    .then(response => {\n      const messages = denormalisedResponseEntities(response);\n      const { totalItems, totalPages, page: fetchedPage } = response.data.meta;\n      const pagination = { totalItems, totalPages, page: fetchedPage };\n      const totalMessages = getState().TransactionPage.totalMessages;\n\n      // Original fetchMessages call succeeded\n      dispatch(fetchMessagesSuccess(messages, pagination));\n\n      // Check if totalItems has changed between fetched pagination pages\n      // if totalItems has changed, fetch first page again to include new incoming messages.\n      // TODO if there're more than 100 incoming messages,\n      // this should loop through most recent pages instead of fetching just the first one.\n      if (totalItems > totalMessages && page > 1) {\n        dispatch(fetchMessages(txId, 1))\n          .then(() => {\n            // Original fetch was enough as a response for user action,\n            // this just includes new incoming messages\n          })\n          .catch(() => {\n            // Background update, no need to to do anything atm.\n          });\n      }\n    })\n    .catch(e => {\n      dispatch(fetchMessagesError(storableError(e)));\n      throw e;\n    });\n};\n\nexport const fetchMoreMessages = txId => (dispatch, getState, sdk) => {\n  const state = getState();\n  const { oldestMessagePageFetched, totalMessagePages } = state.TransactionPage;\n  const hasMoreOldMessages = totalMessagePages > oldestMessagePageFetched;\n\n  // In case there're no more old pages left we default to fetching the current cursor position\n  const nextPage = hasMoreOldMessages ? oldestMessagePageFetched + 1 : oldestMessagePageFetched;\n\n  return dispatch(fetchMessages(txId, nextPage));\n};\n\nexport const sendMessage = (txId, message) => (dispatch, getState, sdk) => {\n  dispatch(sendMessageRequest());\n\n  return sdk.messages\n    .send({ transactionId: txId, content: message })\n    .then(response => {\n      const messageId = response.data.data.id;\n\n      // We fetch the first page again to add sent message to the page data\n      // and update possible incoming messages too.\n      // TODO if there're more than 100 incoming messages,\n      // this should loop through most recent pages instead of fetching just the first one.\n      return dispatch(fetchMessages(txId, 1))\n        .then(() => {\n          dispatch(sendMessageSuccess());\n          return messageId;\n        })\n        .catch(() => dispatch(sendMessageSuccess()));\n    })\n    .catch(e => {\n      dispatch(sendMessageError(storableError(e)));\n      // Rethrow so the page can track whether the sending failed, and\n      // keep the message in the form for a retry.\n      throw e;\n    });\n};\n\nconst REVIEW_TX_INCLUDES = ['reviews', 'reviews.author', 'reviews.subject'];\nconst IMAGE_VARIANTS = {\n  'fields.image': [\n    // Profile images\n    'variants.square-small',\n    'variants.square-small2x',\n\n    // Listing images:\n    'variants.landscape-crop',\n    'variants.landscape-crop2x',\n  ],\n};\n\n// If other party has already sent a review, we need to make transition to\n// TRANSITION_REVIEW_2_BY_<CUSTOMER/PROVIDER>\nconst sendReviewAsSecond = (id, params, role, dispatch, sdk) => {\n  const transition = getReview2Transition(role === CUSTOMER);\n\n  const include = REVIEW_TX_INCLUDES;\n\n  return sdk.transactions\n    .transition({ id, transition, params }, { expand: true, include, ...IMAGE_VARIANTS })\n    .then(response => {\n      dispatch(addMarketplaceEntities(response));\n      dispatch(sendReviewSuccess());\n      return response;\n    })\n    .catch(e => {\n      dispatch(sendReviewError(storableError(e)));\n\n      // Rethrow so the page can track whether the sending failed, and\n      // keep the message in the form for a retry.\n      throw e;\n    });\n};\n\n// If other party has not yet sent a review, we need to make transition to\n// TRANSITION_REVIEW_1_BY_<CUSTOMER/PROVIDER>\n// However, the other party might have made the review after previous data synch point.\n// So, error is likely to happen and then we must try another state transition\n// by calling sendReviewAsSecond().\nconst sendReviewAsFirst = (id, params, role, dispatch, sdk) => {\n  const transition = getReview1Transition(role === CUSTOMER);\n  const include = REVIEW_TX_INCLUDES;\n\n  return sdk.transactions\n    .transition({ id, transition, params }, { expand: true, include, ...IMAGE_VARIANTS })\n    .then(response => {\n      dispatch(addMarketplaceEntities(response));\n      dispatch(sendReviewSuccess());\n      return response;\n    })\n    .catch(e => {\n      // If transaction transition is invalid, lets try another endpoint.\n      if (isTransactionsTransitionInvalidTransition(e)) {\n        return sendReviewAsSecond(id, params, role, dispatch, sdk);\n      } else {\n        dispatch(sendReviewError(storableError(e)));\n\n        // Rethrow so the page can track whether the sending failed, and\n        // keep the message in the form for a retry.\n        throw e;\n      }\n    });\n};\n\nexport const sendReview = (role, tx, reviewRating, reviewContent) => (dispatch, getState, sdk) => {\n  const params = { reviewRating, reviewContent };\n\n  const txStateOtherPartyFirst = txIsInFirstReviewBy(tx, role !== CUSTOMER);\n\n  dispatch(sendReviewRequest());\n\n  return txStateOtherPartyFirst\n    ? sendReviewAsSecond(tx.id, params, role, dispatch, sdk)\n    : sendReviewAsFirst(tx.id, params, role, dispatch, sdk);\n};\n\nconst isNonEmpty = value => {\n  return typeof value === 'object' || Array.isArray(value) ? !isEmpty(value) : !!value;\n};\n\nconst timeSlotsRequest = params => (dispatch, getState, sdk) => {\n  return sdk.timeslots.query(params).then(response => {\n    return denormalisedResponseEntities(response);\n  });\n};\n\nconst fetchTimeSlots = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchTimeSlotsRequest);\n\n  // Time slots can be fetched for 90 days at a time,\n  // for at most 180 days from now. If max number of bookable\n  // day exceeds 90, a second request is made.\n\n  const maxTimeSlots = 90;\n  // booking range: today + bookable days -1\n  const bookingRange = config.dayCountAvailableForBooking - 1;\n  const timeSlotsRange = Math.min(bookingRange, maxTimeSlots);\n\n  const start = moment\n    .utc()\n    .startOf('day')\n    .toDate();\n  const end = moment()\n    .utc()\n    .startOf('day')\n    .add(timeSlotsRange, 'days')\n    .toDate();\n  const params = { listingId, start, end };\n\n  return dispatch(timeSlotsRequest(params))\n    .then(timeSlots => {\n      const secondRequest = bookingRange > maxTimeSlots;\n\n      if (secondRequest) {\n        const secondRange = Math.min(maxTimeSlots, bookingRange - maxTimeSlots);\n        const secondParams = {\n          listingId,\n          start: end,\n          end: moment(end)\n            .add(secondRange, 'days')\n            .toDate(),\n        };\n\n        return dispatch(timeSlotsRequest(secondParams)).then(secondBatch => {\n          const combined = timeSlots.concat(secondBatch);\n          dispatch(fetchTimeSlotsSuccess(combined));\n        });\n      } else {\n        dispatch(fetchTimeSlotsSuccess(timeSlots));\n      }\n    })\n    .catch(e => {\n      dispatch(fetchTimeSlotsError(storableError(e)));\n    });\n};\n\n// loadData is a collection of async calls that need to be made\n// before page has all the info it needs to render itself\nexport const loadData = params => (dispatch, getState) => {\n  const txId = new UUID(params.id);\n  const state = getState().TransactionPage;\n  const txRef = state.transactionRef;\n  const txRole = params.transactionRole;\n\n  // In case a transaction reference is found from a previous\n  // data load -> clear the state. Otherwise keep the non-null\n  // and non-empty values which may have been set from a previous page.\n  const initialValues = txRef ? {} : pickBy(state, isNonEmpty);\n  dispatch(setInitialValues(initialValues));\n\n  // Sale / order (i.e. transaction entity in API)\n  return Promise.all([dispatch(fetchTransaction(txId, txRole)), dispatch(fetchMessages(txId, 1))]);\n};\n"]},"metadata":{},"sourceType":"module"}