{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport isEmpty from 'lodash/isEmpty';\nimport { clearCurrentUser, fetchCurrentUser } from './user.duck';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log';\n\nconst authenticated = authInfo => authInfo && authInfo.grantType === 'refresh_token'; // ================ Action types ================ //\n\n\nexport const AUTH_INFO_REQUEST = 'app/Auth/AUTH_INFO_REQUEST';\nexport const AUTH_INFO_SUCCESS = 'app/Auth/AUTH_INFO_SUCCESS';\nexport const LOGIN_REQUEST = 'app/Auth/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'app/Auth/LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'app/Auth/LOGIN_ERROR';\nexport const LOGOUT_REQUEST = 'app/Auth/LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'app/Auth/LOGOUT_SUCCESS';\nexport const LOGOUT_ERROR = 'app/Auth/LOGOUT_ERROR';\nexport const SIGNUP_REQUEST = 'app/Auth/SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'app/Auth/SIGNUP_SUCCESS';\nexport const SIGNUP_ERROR = 'app/Auth/SIGNUP_ERROR'; // Generic user_logout action that can be handled elsewhere\n// E.g. src/reducers.js clears store as a consequence\n\nexport const USER_LOGOUT = 'app/USER_LOGOUT'; // ================ Reducer ================ //\n\nconst initialState = {\n  isAuthenticated: false,\n  // auth info\n  authInfoLoaded: false,\n  // login\n  loginError: null,\n  loginInProgress: false,\n  // logout\n  logoutError: null,\n  logoutInProgress: false,\n  // signup\n  signupError: null,\n  signupInProgress: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case AUTH_INFO_REQUEST:\n      return state;\n\n    case AUTH_INFO_SUCCESS:\n      return _objectSpread({}, state, {\n        authInfoLoaded: true,\n        isAuthenticated: authenticated(payload)\n      });\n\n    case LOGIN_REQUEST:\n      return _objectSpread({}, state, {\n        loginInProgress: true,\n        loginError: null,\n        logoutError: null,\n        signupError: null\n      });\n\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state, {\n        loginInProgress: false,\n        isAuthenticated: true\n      });\n\n    case LOGIN_ERROR:\n      return _objectSpread({}, state, {\n        loginInProgress: false,\n        loginError: payload\n      });\n\n    case LOGOUT_REQUEST:\n      return _objectSpread({}, state, {\n        logoutInProgress: true,\n        loginError: null,\n        logoutError: null\n      });\n\n    case LOGOUT_SUCCESS:\n      return _objectSpread({}, state, {\n        logoutInProgress: false,\n        isAuthenticated: false\n      });\n\n    case LOGOUT_ERROR:\n      return _objectSpread({}, state, {\n        logoutInProgress: false,\n        logoutError: payload\n      });\n\n    case SIGNUP_REQUEST:\n      return _objectSpread({}, state, {\n        signupInProgress: true,\n        loginError: null,\n        signupError: null\n      });\n\n    case SIGNUP_SUCCESS:\n      return _objectSpread({}, state, {\n        signupInProgress: false\n      });\n\n    case SIGNUP_ERROR:\n      return _objectSpread({}, state, {\n        signupInProgress: false,\n        signupError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const authenticationInProgress = state => {\n  const _state$Auth = state.Auth,\n        loginInProgress = _state$Auth.loginInProgress,\n        logoutInProgress = _state$Auth.logoutInProgress,\n        signupInProgress = _state$Auth.signupInProgress;\n  return loginInProgress || logoutInProgress || signupInProgress;\n}; // ================ Action creators ================ //\n\nexport const authInfoRequest = () => ({\n  type: AUTH_INFO_REQUEST\n});\nexport const authInfoSuccess = info => ({\n  type: AUTH_INFO_SUCCESS,\n  payload: info\n});\nexport const loginRequest = () => ({\n  type: LOGIN_REQUEST\n});\nexport const loginSuccess = () => ({\n  type: LOGIN_SUCCESS\n});\nexport const loginError = error => ({\n  type: LOGIN_ERROR,\n  payload: error,\n  error: true\n});\nexport const logoutRequest = () => ({\n  type: LOGOUT_REQUEST\n});\nexport const logoutSuccess = () => ({\n  type: LOGOUT_SUCCESS\n});\nexport const logoutError = error => ({\n  type: LOGOUT_ERROR,\n  payload: error,\n  error: true\n});\nexport const signupRequest = () => ({\n  type: SIGNUP_REQUEST\n});\nexport const signupSuccess = () => ({\n  type: SIGNUP_SUCCESS\n});\nexport const signupError = error => ({\n  type: SIGNUP_ERROR,\n  payload: error,\n  error: true\n});\nexport const userLogout = () => ({\n  type: USER_LOGOUT\n}); // ================ Thunks ================ //\n\nexport const authInfo = () => (dispatch, getState, sdk) => {\n  dispatch(authInfoRequest());\n  return sdk.authInfo().then(info => dispatch(authInfoSuccess(info))).catch(e => {\n    // Requesting auth info just reads the token from the token\n    // store (i.e. cookies), and should not fail in normal\n    // circumstances. If it fails, it's due to a programming\n    // error. In that case we mark the operation done and dispatch\n    // `null` success action that marks the user as unauthenticated.\n    log.error(e, 'auth-info-failed');\n    dispatch(authInfoSuccess(null));\n  });\n};\nexport const login = (username, password) => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n\n  dispatch(loginRequest()); // Note that the thunk does not reject when the login fails, it\n  // just dispatches the login error action.\n\n  return sdk.login({\n    username,\n    password\n  }).then(() => dispatch(loginSuccess())).then(() => dispatch(fetchCurrentUser())).catch(e => dispatch(loginError(storableError(e))));\n};\nexport const logout = () => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n\n  dispatch(logoutRequest()); // Note that the thunk does not reject when the logout fails, it\n  // just dispatches the logout error action.\n\n  return sdk.logout().then(() => {\n    // The order of the dispatched actions\n    dispatch(logoutSuccess());\n    dispatch(clearCurrentUser());\n    log.clearUserId();\n    dispatch(userLogout());\n  }).catch(e => dispatch(logoutError(storableError(e))));\n};\nexport const signup = params => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n\n  dispatch(signupRequest());\n\n  const email = params.email,\n        password = params.password,\n        firstName = params.firstName,\n        lastName = params.lastName,\n        rest = _objectWithoutProperties(params, [\"email\", \"password\", \"firstName\", \"lastName\"]);\n\n  const createUserParams = isEmpty(rest) ? {\n    email,\n    password,\n    firstName,\n    lastName\n  } : {\n    email,\n    password,\n    firstName,\n    lastName,\n    protectedData: _objectSpread({}, rest)\n  }; // We must login the user if signup succeeds since the API doesn't\n  // do that automatically.\n\n  return sdk.currentUser.create(createUserParams).then(() => dispatch(signupSuccess())).then(() => dispatch(login(email, password))).catch(e => {\n    dispatch(signupError(storableError(e)));\n    log.error(e, 'signup-failed', {\n      email: params.email,\n      firstName: params.firstName,\n      lastName: params.lastName\n    });\n  });\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/ducks/Auth.duck.js"],"names":["isEmpty","clearCurrentUser","fetchCurrentUser","storableError","log","authenticated","authInfo","grantType","AUTH_INFO_REQUEST","AUTH_INFO_SUCCESS","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_ERROR","SIGNUP_REQUEST","SIGNUP_SUCCESS","SIGNUP_ERROR","USER_LOGOUT","initialState","isAuthenticated","authInfoLoaded","loginError","loginInProgress","logoutError","logoutInProgress","signupError","signupInProgress","reducer","state","action","type","payload","authenticationInProgress","Auth","authInfoRequest","authInfoSuccess","info","loginRequest","loginSuccess","error","logoutRequest","logoutSuccess","signupRequest","signupSuccess","userLogout","dispatch","getState","sdk","then","catch","e","login","username","password","Promise","reject","Error","logout","clearUserId","signup","params","email","firstName","lastName","rest","createUserParams","protectedData","currentUser","create"],"mappings":"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","sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport { clearCurrentUser, fetchCurrentUser } from './user.duck';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log';\n\nconst authenticated = authInfo => authInfo && authInfo.grantType === 'refresh_token';\n\n// ================ Action types ================ //\n\nexport const AUTH_INFO_REQUEST = 'app/Auth/AUTH_INFO_REQUEST';\nexport const AUTH_INFO_SUCCESS = 'app/Auth/AUTH_INFO_SUCCESS';\n\nexport const LOGIN_REQUEST = 'app/Auth/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'app/Auth/LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'app/Auth/LOGIN_ERROR';\n\nexport const LOGOUT_REQUEST = 'app/Auth/LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'app/Auth/LOGOUT_SUCCESS';\nexport const LOGOUT_ERROR = 'app/Auth/LOGOUT_ERROR';\n\nexport const SIGNUP_REQUEST = 'app/Auth/SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'app/Auth/SIGNUP_SUCCESS';\nexport const SIGNUP_ERROR = 'app/Auth/SIGNUP_ERROR';\n\n// Generic user_logout action that can be handled elsewhere\n// E.g. src/reducers.js clears store as a consequence\nexport const USER_LOGOUT = 'app/USER_LOGOUT';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  isAuthenticated: false,\n\n  // auth info\n  authInfoLoaded: false,\n\n  // login\n  loginError: null,\n  loginInProgress: false,\n\n  // logout\n  logoutError: null,\n  logoutInProgress: false,\n\n  // signup\n  signupError: null,\n  signupInProgress: false,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case AUTH_INFO_REQUEST:\n      return state;\n    case AUTH_INFO_SUCCESS:\n      return { ...state, authInfoLoaded: true, isAuthenticated: authenticated(payload) };\n\n    case LOGIN_REQUEST:\n      return {\n        ...state,\n        loginInProgress: true,\n        loginError: null,\n        logoutError: null,\n        signupError: null,\n      };\n    case LOGIN_SUCCESS:\n      return { ...state, loginInProgress: false, isAuthenticated: true };\n    case LOGIN_ERROR:\n      return { ...state, loginInProgress: false, loginError: payload };\n\n    case LOGOUT_REQUEST:\n      return { ...state, logoutInProgress: true, loginError: null, logoutError: null };\n    case LOGOUT_SUCCESS:\n      return { ...state, logoutInProgress: false, isAuthenticated: false };\n    case LOGOUT_ERROR:\n      return { ...state, logoutInProgress: false, logoutError: payload };\n\n    case SIGNUP_REQUEST:\n      return { ...state, signupInProgress: true, loginError: null, signupError: null };\n    case SIGNUP_SUCCESS:\n      return { ...state, signupInProgress: false };\n    case SIGNUP_ERROR:\n      return { ...state, signupInProgress: false, signupError: payload };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\nexport const authenticationInProgress = state => {\n  const { loginInProgress, logoutInProgress, signupInProgress } = state.Auth;\n  return loginInProgress || logoutInProgress || signupInProgress;\n};\n\n// ================ Action creators ================ //\n\nexport const authInfoRequest = () => ({ type: AUTH_INFO_REQUEST });\nexport const authInfoSuccess = info => ({ type: AUTH_INFO_SUCCESS, payload: info });\n\nexport const loginRequest = () => ({ type: LOGIN_REQUEST });\nexport const loginSuccess = () => ({ type: LOGIN_SUCCESS });\nexport const loginError = error => ({ type: LOGIN_ERROR, payload: error, error: true });\n\nexport const logoutRequest = () => ({ type: LOGOUT_REQUEST });\nexport const logoutSuccess = () => ({ type: LOGOUT_SUCCESS });\nexport const logoutError = error => ({ type: LOGOUT_ERROR, payload: error, error: true });\n\nexport const signupRequest = () => ({ type: SIGNUP_REQUEST });\nexport const signupSuccess = () => ({ type: SIGNUP_SUCCESS });\nexport const signupError = error => ({ type: SIGNUP_ERROR, payload: error, error: true });\n\nexport const userLogout = () => ({ type: USER_LOGOUT });\n\n// ================ Thunks ================ //\n\nexport const authInfo = () => (dispatch, getState, sdk) => {\n  dispatch(authInfoRequest());\n  return sdk\n    .authInfo()\n    .then(info => dispatch(authInfoSuccess(info)))\n    .catch(e => {\n      // Requesting auth info just reads the token from the token\n      // store (i.e. cookies), and should not fail in normal\n      // circumstances. If it fails, it's due to a programming\n      // error. In that case we mark the operation done and dispatch\n      // `null` success action that marks the user as unauthenticated.\n      log.error(e, 'auth-info-failed');\n      dispatch(authInfoSuccess(null));\n    });\n};\n\nexport const login = (username, password) => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n  dispatch(loginRequest());\n\n  // Note that the thunk does not reject when the login fails, it\n  // just dispatches the login error action.\n  return sdk\n    .login({ username, password })\n    .then(() => dispatch(loginSuccess()))\n    .then(() => dispatch(fetchCurrentUser()))\n    .catch(e => dispatch(loginError(storableError(e))));\n};\n\nexport const logout = () => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n  dispatch(logoutRequest());\n\n  // Note that the thunk does not reject when the logout fails, it\n  // just dispatches the logout error action.\n  return sdk\n    .logout()\n    .then(() => {\n      // The order of the dispatched actions\n      dispatch(logoutSuccess());\n      dispatch(clearCurrentUser());\n      log.clearUserId();\n      dispatch(userLogout());\n    })\n    .catch(e => dispatch(logoutError(storableError(e))));\n};\n\nexport const signup = params => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n  dispatch(signupRequest());\n  const { email, password, firstName, lastName, ...rest } = params;\n\n  const createUserParams = isEmpty(rest)\n    ? { email, password, firstName, lastName }\n    : { email, password, firstName, lastName, protectedData: { ...rest } };\n\n  // We must login the user if signup succeeds since the API doesn't\n  // do that automatically.\n  return sdk.currentUser\n    .create(createUserParams)\n    .then(() => dispatch(signupSuccess()))\n    .then(() => dispatch(login(email, password)))\n    .catch(e => {\n      dispatch(signupError(storableError(e)));\n      log.error(e, 'signup-failed', {\n        email: params.email,\n        firstName: params.firstName,\n        lastName: params.lastName,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}