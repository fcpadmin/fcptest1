{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Map/DynamicMapboxMap.js\";\nimport React, { Component } from 'react';\nimport { string, shape, number, object } from 'prop-types'; // This MultiTouch lib is used for 2-finger panning.\n// which prevents user to experience map-scroll trap, while scrolling the page.\n// https://github.com/mapbox/mapbox-gl-js/issues/2618\n// TODO: we should add an overlay with text \"use two fingers to pan\".\n\nimport MultiTouch from 'mapbox-gl-multitouch';\nimport uniqueId from 'lodash/uniqueId';\nimport { circlePolyline } from '../../util/maps';\nimport config from '../../config';\n\nconst mapMarker = mapsConfig => {\n  const _mapsConfig$customMar = mapsConfig.customMarker,\n        enabled = _mapsConfig$customMar.enabled,\n        url = _mapsConfig$customMar.url,\n        width = _mapsConfig$customMar.width,\n        height = _mapsConfig$customMar.height;\n\n  if (enabled) {\n    const element = document.createElement('div');\n    element.style.backgroundImage = \"url(\".concat(url, \")\");\n    element.style.width = \"\".concat(width, \"px\");\n    element.style.height = \"\".concat(height, \"px\");\n    return new window.mapboxgl.Marker({\n      element\n    });\n  } else {\n    return new window.mapboxgl.Marker();\n  }\n};\n\nconst circleLayer = (center, mapsConfig, layerId) => {\n  const path = circlePolyline(center, mapsConfig.fuzzy.offset).map(([lat, lng]) => [lng, lat]);\n  return {\n    id: layerId,\n    type: 'fill',\n    source: {\n      type: 'geojson',\n      data: {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [path]\n        }\n      }\n    },\n    paint: {\n      'fill-color': mapsConfig.fuzzy.circleColor,\n      'fill-opacity': 0.2\n    }\n  };\n};\n\nconst generateFuzzyLayerId = () => {\n  return uniqueId('fuzzy_layer_');\n};\n\nclass DynamicMapboxMap extends Component {\n  constructor(props) {\n    super(props);\n    this.mapContainer = null;\n    this.map = null;\n    this.centerMarker = null;\n    this.fuzzyLayerId = generateFuzzyLayerId();\n    this.updateFuzzyCirclelayer = this.updateFuzzyCirclelayer.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          center = _this$props.center,\n          zoom = _this$props.zoom,\n          mapsConfig = _this$props.mapsConfig;\n    const position = [center.lng, center.lat];\n    this.map = new window.mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v10',\n      center: position,\n      zoom,\n      scrollZoom: false\n    });\n    this.map.addControl(new window.mapboxgl.NavigationControl({\n      showCompass: false\n    }), 'top-left');\n    this.map.addControl(new MultiTouch());\n\n    if (mapsConfig.fuzzy.enabled) {\n      this.map.on('load', () => {\n        this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\n      });\n    } else {\n      this.centerMarker = mapMarker(mapsConfig);\n      this.centerMarker.setLngLat(position).addTo(this.map);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.map) {\n      this.centerMarker = null;\n      this.map.remove();\n      this.map = null;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.map) {\n      return;\n    }\n\n    const _this$props2 = this.props,\n          center = _this$props2.center,\n          zoom = _this$props2.zoom,\n          mapsConfig = _this$props2.mapsConfig;\n    const lat = center.lat,\n          lng = center.lng;\n    const position = [lng, lat]; // zoom change\n\n    if (zoom !== prevProps.zoom) {\n      this.map.setZoom(this.props.zoom);\n    }\n\n    const centerChanged = lat !== prevProps.center.lat || lng !== prevProps.center.lng; // center marker change\n\n    if (this.centerMarker && centerChanged) {\n      this.centerMarker.setLngLat(position);\n      this.map.setCenter(position);\n    } // fuzzy circle change\n\n\n    if (mapsConfig.fuzzy.enabled && centerChanged) {\n      if (this.map.loaded()) {\n        this.updateFuzzyCirclelayer();\n      } else {\n        this.map.on('load', this.updateFuzzyCirclelayer);\n      }\n    } // NOTE: mapsConfig changes are not handled\n\n  }\n\n  updateFuzzyCirclelayer() {\n    if (!this.map) {\n      // map already removed\n      return;\n    }\n\n    const _this$props3 = this.props,\n          center = _this$props3.center,\n          mapsConfig = _this$props3.mapsConfig;\n    const lat = center.lat,\n          lng = center.lng;\n    const position = [lng, lat];\n    this.map.removeLayer(this.fuzzyLayerId); // We have to use a different layer id to avoid Mapbox errors\n\n    this.fuzzyLayerId = generateFuzzyLayerId();\n    this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\n    this.map.setCenter(position);\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          containerClassName = _this$props4.containerClassName,\n          mapClassName = _this$props4.mapClassName;\n    return React.createElement(\"div\", {\n      className: containerClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: mapClassName,\n      ref: el => this.mapContainer = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }));\n  }\n\n}\n\nDynamicMapboxMap.defaultProps = {\n  address: '',\n  center: null,\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\n  mapsConfig: config.maps\n};\nDynamicMapboxMap.propTypes = {\n  address: string,\n  // not used\n  center: shape({\n    lat: number.isRequired,\n    lng: number.isRequired\n  }).isRequired,\n  zoom: number,\n  mapsConfig: object\n};\nexport default DynamicMapboxMap;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Map/DynamicMapboxMap.js"],"names":["React","Component","string","shape","number","object","MultiTouch","uniqueId","circlePolyline","config","mapMarker","mapsConfig","customMarker","enabled","url","width","height","element","document","createElement","style","backgroundImage","window","mapboxgl","Marker","circleLayer","center","layerId","path","fuzzy","offset","map","lat","lng","id","type","source","data","geometry","coordinates","paint","circleColor","generateFuzzyLayerId","DynamicMapboxMap","constructor","props","mapContainer","centerMarker","fuzzyLayerId","updateFuzzyCirclelayer","bind","componentDidMount","zoom","position","Map","container","scrollZoom","addControl","NavigationControl","showCompass","on","addLayer","setLngLat","addTo","componentWillUnmount","remove","componentDidUpdate","prevProps","setZoom","centerChanged","setCenter","loaded","removeLayer","render","containerClassName","mapClassName","el","defaultProps","address","maps","defaultZoomLevel","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, shape, number, object } from 'prop-types';\n// This MultiTouch lib is used for 2-finger panning.\n// which prevents user to experience map-scroll trap, while scrolling the page.\n// https://github.com/mapbox/mapbox-gl-js/issues/2618\n// TODO: we should add an overlay with text \"use two fingers to pan\".\nimport MultiTouch from 'mapbox-gl-multitouch';\nimport uniqueId from 'lodash/uniqueId';\nimport { circlePolyline } from '../../util/maps';\nimport config from '../../config';\n\nconst mapMarker = mapsConfig => {\n  const { enabled, url, width, height } = mapsConfig.customMarker;\n  if (enabled) {\n    const element = document.createElement('div');\n    element.style.backgroundImage = `url(${url})`;\n    element.style.width = `${width}px`;\n    element.style.height = `${height}px`;\n    return new window.mapboxgl.Marker({ element });\n  } else {\n    return new window.mapboxgl.Marker();\n  }\n};\n\nconst circleLayer = (center, mapsConfig, layerId) => {\n  const path = circlePolyline(center, mapsConfig.fuzzy.offset).map(([lat, lng]) => [lng, lat]);\n  return {\n    id: layerId,\n    type: 'fill',\n    source: {\n      type: 'geojson',\n      data: {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [path],\n        },\n      },\n    },\n    paint: {\n      'fill-color': mapsConfig.fuzzy.circleColor,\n      'fill-opacity': 0.2,\n    },\n  };\n};\n\nconst generateFuzzyLayerId = () => {\n  return uniqueId('fuzzy_layer_');\n};\n\nclass DynamicMapboxMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.mapContainer = null;\n    this.map = null;\n    this.centerMarker = null;\n    this.fuzzyLayerId = generateFuzzyLayerId();\n\n    this.updateFuzzyCirclelayer = this.updateFuzzyCirclelayer.bind(this);\n  }\n  componentDidMount() {\n    const { center, zoom, mapsConfig } = this.props;\n    const position = [center.lng, center.lat];\n\n    this.map = new window.mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v10',\n      center: position,\n      zoom,\n      scrollZoom: false,\n    });\n    this.map.addControl(new window.mapboxgl.NavigationControl({ showCompass: false }), 'top-left');\n    this.map.addControl(new MultiTouch());\n\n    if (mapsConfig.fuzzy.enabled) {\n      this.map.on('load', () => {\n        this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\n      });\n    } else {\n      this.centerMarker = mapMarker(mapsConfig);\n      this.centerMarker.setLngLat(position).addTo(this.map);\n    }\n  }\n  componentWillUnmount() {\n    if (this.map) {\n      this.centerMarker = null;\n      this.map.remove();\n      this.map = null;\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (!this.map) {\n      return;\n    }\n\n    const { center, zoom, mapsConfig } = this.props;\n    const { lat, lng } = center;\n    const position = [lng, lat];\n\n    // zoom change\n    if (zoom !== prevProps.zoom) {\n      this.map.setZoom(this.props.zoom);\n    }\n\n    const centerChanged = lat !== prevProps.center.lat || lng !== prevProps.center.lng;\n\n    // center marker change\n    if (this.centerMarker && centerChanged) {\n      this.centerMarker.setLngLat(position);\n      this.map.setCenter(position);\n    }\n\n    // fuzzy circle change\n    if (mapsConfig.fuzzy.enabled && centerChanged) {\n      if (this.map.loaded()) {\n        this.updateFuzzyCirclelayer();\n      } else {\n        this.map.on('load', this.updateFuzzyCirclelayer);\n      }\n    }\n\n    // NOTE: mapsConfig changes are not handled\n  }\n  updateFuzzyCirclelayer() {\n    if (!this.map) {\n      // map already removed\n      return;\n    }\n    const { center, mapsConfig } = this.props;\n    const { lat, lng } = center;\n    const position = [lng, lat];\n\n    this.map.removeLayer(this.fuzzyLayerId);\n\n    // We have to use a different layer id to avoid Mapbox errors\n    this.fuzzyLayerId = generateFuzzyLayerId();\n    this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\n\n    this.map.setCenter(position);\n  }\n  render() {\n    const { containerClassName, mapClassName } = this.props;\n    return (\n      <div className={containerClassName}>\n        <div className={mapClassName} ref={el => (this.mapContainer = el)} />\n      </div>\n    );\n  }\n}\n\nDynamicMapboxMap.defaultProps = {\n  address: '',\n  center: null,\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\n  mapsConfig: config.maps,\n};\n\nDynamicMapboxMap.propTypes = {\n  address: string, // not used\n  center: shape({\n    lat: number.isRequired,\n    lng: number.isRequired,\n  }).isRequired,\n  zoom: number,\n  mapsConfig: object,\n};\n\nexport default DynamicMapboxMap;\n"]},"metadata":{},"sourceType":"module"}