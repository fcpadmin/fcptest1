{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ImageFromFile/ImageFromFile.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { Promised } from '../../components';\nimport css from './ImageFromFile.css'; // readImage returns a promise which is resolved\n// when FileReader has loaded given file as dataURL\n\nconst readImage = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n\n  reader.onload = e => resolve(e.target.result);\n\n  reader.onerror = e => {\n    // eslint-disable-next-line\n    console.error('Error (', e, \") happened while reading \".concat(file.name, \": \").concat(e.target.result));\n    reject(new Error(\"Error reading \".concat(file.name, \": \").concat(e.target.result)));\n  };\n\n  reader.readAsDataURL(file);\n}); // Create elements out of given thumbnail file\n\n\nclass ImageFromFile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      promisedImage: readImage(this.props.file)\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          aspectRatioClassName = _this$props.aspectRatioClassName,\n          file = _this$props.file,\n          id = _this$props.id,\n          children = _this$props.children;\n    const classes = classNames(rootClassName || css.root, className);\n    const aspectRatioClasses = aspectRatioClassName || css.aspectWrapper;\n    return React.createElement(Promised, {\n      key: id,\n      promise: this.state.promisedImage,\n      renderFulfilled: dataURL => {\n        return React.createElement(\"div\", {\n          className: classes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: css.threeToTwoWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: aspectRatioClasses,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: dataURL,\n          alt: file.name,\n          className: css.rootForImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }))), children);\n      },\n      renderRejected: () => React.createElement(\"div\", {\n        className: classes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ImageFromFile.couldNotReadFile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  }\n\n}\n\nImageFromFile.defaultProps = {\n  className: null,\n  children: null,\n  rootClassName: null,\n  aspectRatioClassName: null\n};\nconst any = PropTypes.any,\n      node = PropTypes.node,\n      string = PropTypes.string;\nImageFromFile.propTypes = {\n  className: string,\n  rootClassName: string,\n  aspectRatioClassName: string,\n  file: any.isRequired,\n  id: string.isRequired,\n  children: node\n};\nexport default ImageFromFile;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ImageFromFile/ImageFromFile.js"],"names":["React","Component","PropTypes","FormattedMessage","classNames","Promised","css","readImage","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","console","error","name","Error","readAsDataURL","ImageFromFile","constructor","props","state","promisedImage","render","className","rootClassName","aspectRatioClassName","id","children","classes","root","aspectRatioClasses","aspectWrapper","dataURL","threeToTwoWrapper","rootForImage","defaultProps","any","node","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { Promised } from '../../components';\n\nimport css from './ImageFromFile.css';\n\n// readImage returns a promise which is resolved\n// when FileReader has loaded given file as dataURL\nconst readImage = file =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => resolve(e.target.result);\n    reader.onerror = e => {\n      // eslint-disable-next-line\n      console.error('Error (', e, `) happened while reading ${file.name}: ${e.target.result}`);\n      reject(new Error(`Error reading ${file.name}: ${e.target.result}`));\n    };\n    reader.readAsDataURL(file);\n  });\n\n// Create elements out of given thumbnail file\nclass ImageFromFile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      promisedImage: readImage(this.props.file),\n    };\n  }\n\n  render() {\n    const { className, rootClassName, aspectRatioClassName, file, id, children } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const aspectRatioClasses = aspectRatioClassName || css.aspectWrapper;\n    return (\n      <Promised\n        key={id}\n        promise={this.state.promisedImage}\n        renderFulfilled={dataURL => {\n          return (\n            <div className={classes}>\n              <div className={css.threeToTwoWrapper}>\n                <div className={aspectRatioClasses}>\n                  <img src={dataURL} alt={file.name} className={css.rootForImage} />\n                </div>\n              </div>\n              {children}\n            </div>\n          );\n        }}\n        renderRejected={() => (\n          <div className={classes}>\n            <FormattedMessage id=\"ImageFromFile.couldNotReadFile\" />\n          </div>\n        )}\n      />\n    );\n  }\n}\n\nImageFromFile.defaultProps = {\n  className: null,\n  children: null,\n  rootClassName: null,\n  aspectRatioClassName: null,\n};\n\nconst { any, node, string } = PropTypes;\n\nImageFromFile.propTypes = {\n  className: string,\n  rootClassName: string,\n  aspectRatioClassName: string,\n  file: any.isRequired,\n  id: string.isRequired,\n  children: node,\n};\n\nexport default ImageFromFile;\n"]},"metadata":{},"sourceType":"module"}