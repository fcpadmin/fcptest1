{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SelectMultipleFilter/SelectMultipleFilter.js\";\nimport React, { Component } from 'react';\nimport { array, arrayOf, func, number, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { FieldCheckbox } from '../../components';\nimport { FilterPopup, FilterPlain } from '../../components';\nimport css from './SelectMultipleFilter.css'; // SelectMultipleFilter doesn't need array mutators since it doesn't require validation.\n// TODO: Live edit didn't work with FieldCheckboxGroup\n//       There's a mutation problem: formstate.dirty is not reliable with it.\n\nconst GroupOfFieldCheckboxes = props => {\n  const id = props.id,\n        className = props.className,\n        name = props.name,\n        options = props.options;\n  return React.createElement(\"fieldset\", {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: css.list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, options.map((option, index) => {\n    const fieldId = \"\".concat(id, \".\").concat(option.key);\n    return React.createElement(\"li\", {\n      key: fieldId,\n      className: css.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(FieldCheckbox, {\n      id: fieldId,\n      name: name,\n      label: option.label,\n      value: option.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  })));\n};\n\nclass SelectMultipleFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.filter = null;\n    this.filterContent = null;\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      const offset = renderToRight ? {\n        left: contentPlacementOffset\n      } : {\n        right: contentPlacementOffset\n      }; // set a min-width if the content is narrower than the label\n\n      const minWidth = contentWidth < labelWidth ? {\n        minWidth: labelWidth\n      } : null;\n      return _objectSpread({}, offset, minWidth);\n    }\n\n    return {};\n  }\n\n  render() {\n    const _this$props = this.props,\n          rootClassName = _this$props.rootClassName,\n          className = _this$props.className,\n          id = _this$props.id,\n          name = _this$props.name,\n          label = _this$props.label,\n          options = _this$props.options,\n          initialValues = _this$props.initialValues,\n          contentPlacementOffset = _this$props.contentPlacementOffset,\n          onSubmit = _this$props.onSubmit,\n          urlParam = _this$props.urlParam,\n          intl = _this$props.intl,\n          showAsPopup = _this$props.showAsPopup,\n          rest = _objectWithoutProperties(_this$props, [\"rootClassName\", \"className\", \"id\", \"name\", \"label\", \"options\", \"initialValues\", \"contentPlacementOffset\", \"onSubmit\", \"urlParam\", \"intl\", \"showAsPopup\"]);\n\n    const classes = classNames(rootClassName || css.root, className);\n    const hasInitialValues = initialValues.length > 0;\n    const labelForPopup = hasInitialValues ? intl.formatMessage({\n      id: 'SelectMultipleFilter.labelSelected'\n    }, {\n      labelText: label,\n      count: initialValues.length\n    }) : label;\n    const labelForPlain = hasInitialValues ? intl.formatMessage({\n      id: 'SelectMultipleFilterPlainForm.labelSelected'\n    }, {\n      labelText: label,\n      count: initialValues.length\n    }) : label;\n    const contentStyle = this.positionStyleForContent(); // pass the initial values with the name key so that\n    // they can be passed to the correct field\n\n    const namedInitialValues = {\n      [name]: initialValues\n    };\n\n    const handleSubmit = (urlParam, values) => {\n      const usedValue = values ? values[name] : values;\n      onSubmit(urlParam, usedValue);\n    };\n\n    return showAsPopup ? React.createElement(FilterPopup, Object.assign({\n      className: classes,\n      rootClassName: rootClassName,\n      popupClassName: css.popupSize,\n      name: name,\n      label: labelForPopup,\n      isSelected: hasInitialValues,\n      id: \"\".concat(id, \".popup\"),\n      showAsPopup: true,\n      contentPlacementOffset: contentPlacementOffset,\n      onSubmit: handleSubmit,\n      initialValues: namedInitialValues,\n      urlParam: urlParam,\n      keepDirtyOnReinitialize: true\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(GroupOfFieldCheckboxes, {\n      className: css.fieldGroup,\n      name: name,\n      id: \"\".concat(id, \"-checkbox-group\"),\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })) : React.createElement(FilterPlain, Object.assign({\n      className: className,\n      rootClassName: rootClassName,\n      label: labelForPlain,\n      isSelected: hasInitialValues,\n      id: \"\".concat(id, \".plain\"),\n      liveEdit: true,\n      contentPlacementOffset: contentStyle,\n      onSubmit: handleSubmit,\n      initialValues: namedInitialValues,\n      urlParam: urlParam\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(GroupOfFieldCheckboxes, {\n      className: css.fieldGroupPlain,\n      name: name,\n      id: \"\".concat(id, \"-checkbox-group\"),\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSelectMultipleFilter.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: [],\n  contentPlacementOffset: 0\n};\nSelectMultipleFilter.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  name: string.isRequired,\n  urlParam: string.isRequired,\n  label: string.isRequired,\n  onSubmit: func.isRequired,\n  options: array.isRequired,\n  initialValues: arrayOf(string),\n  contentPlacementOffset: number,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nexport default injectIntl(SelectMultipleFilter);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SelectMultipleFilter/SelectMultipleFilter.js"],"names":["React","Component","array","arrayOf","func","number","string","classNames","injectIntl","intlShape","FieldCheckbox","FilterPopup","FilterPlain","css","GroupOfFieldCheckboxes","props","id","className","name","options","list","map","option","index","fieldId","key","item","label","SelectMultipleFilter","constructor","filter","filterContent","positionStyleForContent","bind","distanceToRight","window","innerWidth","getBoundingClientRect","right","labelWidth","offsetWidth","contentWidth","contentWidthBiggerThanLabel","renderToRight","contentPlacementOffset","offset","left","minWidth","render","rootClassName","initialValues","onSubmit","urlParam","intl","showAsPopup","rest","classes","root","hasInitialValues","length","labelForPopup","formatMessage","labelText","count","labelForPlain","contentStyle","namedInitialValues","handleSubmit","values","usedValue","popupSize","fieldGroup","fieldGroupPlain","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { array, arrayOf, func, number, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { FieldCheckbox } from '../../components';\n\nimport { FilterPopup, FilterPlain } from '../../components';\nimport css from './SelectMultipleFilter.css';\n\n// SelectMultipleFilter doesn't need array mutators since it doesn't require validation.\n// TODO: Live edit didn't work with FieldCheckboxGroup\n//       There's a mutation problem: formstate.dirty is not reliable with it.\nconst GroupOfFieldCheckboxes = props => {\n  const { id, className, name, options } = props;\n  return (\n    <fieldset className={className}>\n      <ul className={css.list}>\n        {options.map((option, index) => {\n          const fieldId = `${id}.${option.key}`;\n          return (\n            <li key={fieldId} className={css.item}>\n              <FieldCheckbox id={fieldId} name={name} label={option.label} value={option.key} />\n            </li>\n          );\n        })}\n      </ul>\n    </fieldset>\n  );\n};\n\nclass SelectMultipleFilter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.filter = null;\n    this.filterContent = null;\n\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n\n      const offset = renderToRight\n        ? { left: contentPlacementOffset }\n        : { right: contentPlacementOffset };\n      // set a min-width if the content is narrower than the label\n      const minWidth = contentWidth < labelWidth ? { minWidth: labelWidth } : null;\n\n      return { ...offset, ...minWidth };\n    }\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      name,\n      label,\n      options,\n      initialValues,\n      contentPlacementOffset,\n      onSubmit,\n      urlParam,\n      intl,\n      showAsPopup,\n      ...rest\n    } = this.props;\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    const hasInitialValues = initialValues.length > 0;\n    const labelForPopup = hasInitialValues\n      ? intl.formatMessage(\n          { id: 'SelectMultipleFilter.labelSelected' },\n          { labelText: label, count: initialValues.length }\n        )\n      : label;\n\n    const labelForPlain = hasInitialValues\n      ? intl.formatMessage(\n          { id: 'SelectMultipleFilterPlainForm.labelSelected' },\n          { labelText: label, count: initialValues.length }\n        )\n      : label;\n\n    const contentStyle = this.positionStyleForContent();\n\n    // pass the initial values with the name key so that\n    // they can be passed to the correct field\n    const namedInitialValues = { [name]: initialValues };\n\n    const handleSubmit = (urlParam, values) => {\n      const usedValue = values ? values[name] : values;\n      onSubmit(urlParam, usedValue);\n    };\n\n    return showAsPopup ? (\n      <FilterPopup\n        className={classes}\n        rootClassName={rootClassName}\n        popupClassName={css.popupSize}\n        name={name}\n        label={labelForPopup}\n        isSelected={hasInitialValues}\n        id={`${id}.popup`}\n        showAsPopup\n        contentPlacementOffset={contentPlacementOffset}\n        onSubmit={handleSubmit}\n        initialValues={namedInitialValues}\n        urlParam={urlParam}\n        keepDirtyOnReinitialize\n        {...rest}\n      >\n        <GroupOfFieldCheckboxes\n          className={css.fieldGroup}\n          name={name}\n          id={`${id}-checkbox-group`}\n          options={options}\n        />\n      </FilterPopup>\n    ) : (\n      <FilterPlain\n        className={className}\n        rootClassName={rootClassName}\n        label={labelForPlain}\n        isSelected={hasInitialValues}\n        id={`${id}.plain`}\n        liveEdit\n        contentPlacementOffset={contentStyle}\n        onSubmit={handleSubmit}\n        initialValues={namedInitialValues}\n        urlParam={urlParam}\n        {...rest}\n      >\n        <GroupOfFieldCheckboxes\n          className={css.fieldGroupPlain}\n          name={name}\n          id={`${id}-checkbox-group`}\n          options={options}\n        />\n      </FilterPlain>\n    );\n  }\n}\n\nSelectMultipleFilter.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: [],\n  contentPlacementOffset: 0,\n};\n\nSelectMultipleFilter.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  name: string.isRequired,\n  urlParam: string.isRequired,\n  label: string.isRequired,\n  onSubmit: func.isRequired,\n  options: array.isRequired,\n  initialValues: arrayOf(string),\n  contentPlacementOffset: number,\n\n  // form injectIntl\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SelectMultipleFilter);\n"]},"metadata":{},"sourceType":"module"}