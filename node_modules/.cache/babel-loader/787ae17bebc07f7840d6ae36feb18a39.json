{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldReviewRating/FieldReviewRating.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl } from 'react-intl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { IconReviewStar, ValidationError } from '../../components';\nimport css from './FieldReviewRating.css';\n\nclass FieldReviewRatingComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.input.onChange(event.target.value);\n  }\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const _this$props = this.props,\n          rootClassName = _this$props.rootClassName,\n          className = _this$props.className,\n          inputRootClass = _this$props.inputRootClass,\n          customErrorText = _this$props.customErrorText,\n          id = _this$props.id,\n          intl = _this$props.intl,\n          label = _this$props.label,\n          input = _this$props.input,\n          meta = _this$props.meta,\n          rest = _objectWithoutProperties(_this$props, [\"rootClassName\", \"className\", \"inputRootClass\", \"customErrorText\", \"id\", \"intl\", \"label\", \"input\", \"meta\"]);\n    /* eslint-enable no-unused-vars */\n\n\n    const touched = meta.touched,\n          error = meta.error;\n    const errorText = customErrorText || error;\n    const fieldMeta = {\n      touched,\n      error: errorText\n    };\n\n    const value = input.value,\n          restInputProps = _objectWithoutProperties(input, [\"value\"]);\n\n    const inputProps = _objectSpread({}, restInputProps, {\n      type: 'radio',\n      name: 'rating'\n    }, rest);\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    const createStarRating = starCount => {\n      let inputsAndLabels = []; // Star inpu order: reverse order expected (5 -> 1) and also input before label\n      // This is due to CSS selectors.\n      // Sibling combinator (~) selects following siblings, but we want to select previous siblings\n\n      for (let i = starCount; i > 0; i--) {\n        const inputValue = \"\".concat(i);\n        const starId = \"star\".concat(i);\n        const inputId = \"\".concat(id, \".\").concat(starId);\n        inputsAndLabels.push(React.createElement(\"input\", Object.assign({\n          key: inputId,\n          id: inputId,\n          className: css.rateInput,\n          value: inputValue,\n          checked: value === inputValue\n        }, inputProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        })));\n        inputsAndLabels.push(React.createElement(\"label\", {\n          key: \"label.\".concat(inputId),\n          className: css.label,\n          htmlFor: inputId,\n          title: intl.formatMessage({\n            id: \"FieldReviewRating.\".concat(starId)\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(IconReviewStar, {\n          rootClassName: css.star,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        })));\n      }\n\n      return inputsAndLabels;\n    };\n\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      className: css.ratingFieldSet,\n      ref: c => {\n        this.ratingFieldSet = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, label ? React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, label) : null, React.createElement(\"div\", {\n      className: css.rating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, createStarRating(5))), React.createElement(ValidationError, {\n      fieldMeta: fieldMeta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nFieldReviewRatingComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  customErrorText: null,\n  label: null\n};\nconst string = PropTypes.string,\n      shape = PropTypes.shape,\n      func = PropTypes.func,\n      object = PropTypes.object;\nFieldReviewRatingComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: string,\n  // Error message that can be manually passed to input field,\n  // overrides default validation message\n  customErrorText: string,\n  // Generated by final-form's Field component\n  input: shape({\n    onChange: func.isRequired\n  }).isRequired,\n  meta: object.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst FieldReviewRating = props => {\n  return React.createElement(Field, Object.assign({\n    component: FieldReviewRatingComponent\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }));\n};\n\nexport default injectIntl(FieldReviewRating);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldReviewRating/FieldReviewRating.js"],"names":["React","Component","PropTypes","intlShape","injectIntl","Field","classNames","IconReviewStar","ValidationError","css","FieldReviewRatingComponent","constructor","props","handleChange","bind","event","input","onChange","target","value","render","rootClassName","className","inputRootClass","customErrorText","id","intl","label","meta","rest","touched","error","errorText","fieldMeta","restInputProps","inputProps","type","name","classes","root","createStarRating","starCount","inputsAndLabels","i","inputValue","starId","inputId","push","rateInput","formatMessage","star","ratingFieldSet","c","rating","defaultProps","string","shape","func","object","propTypes","isRequired","FieldReviewRating"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl } from 'react-intl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { IconReviewStar, ValidationError } from '../../components';\n\nimport css from './FieldReviewRating.css';\n\nclass FieldReviewRatingComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.input.onChange(event.target.value);\n  }\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      rootClassName,\n      className,\n      inputRootClass,\n      customErrorText,\n      id,\n      intl,\n      label,\n      input,\n      meta,\n      ...rest\n    } = this.props;\n    /* eslint-enable no-unused-vars */\n\n    const { touched, error } = meta;\n    const errorText = customErrorText || error;\n    const fieldMeta = { touched, error: errorText };\n\n    const { value, ...restInputProps } = input;\n    const inputProps = { ...restInputProps, type: 'radio', name: 'rating', ...rest };\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    const createStarRating = starCount => {\n      let inputsAndLabels = [];\n\n      // Star inpu order: reverse order expected (5 -> 1) and also input before label\n      // This is due to CSS selectors.\n      // Sibling combinator (~) selects following siblings, but we want to select previous siblings\n      for (let i = starCount; i > 0; i--) {\n        const inputValue = `${i}`;\n        const starId = `star${i}`;\n        const inputId = `${id}.${starId}`;\n\n        inputsAndLabels.push(\n          <input\n            key={inputId}\n            id={inputId}\n            className={css.rateInput}\n            value={inputValue}\n            checked={value === inputValue}\n            {...inputProps}\n          />\n        );\n\n        inputsAndLabels.push(\n          <label\n            key={`label.${inputId}`}\n            className={css.label}\n            htmlFor={inputId}\n            title={intl.formatMessage({ id: `FieldReviewRating.${starId}` })}\n          >\n            <IconReviewStar rootClassName={css.star} />\n          </label>\n        );\n      }\n      return inputsAndLabels;\n    };\n\n    return (\n      <div className={classes}>\n        <fieldset\n          className={css.ratingFieldSet}\n          ref={c => {\n            this.ratingFieldSet = c;\n          }}\n        >\n          {label ? <legend>{label}</legend> : null}\n          <div className={css.rating}>{createStarRating(5)}</div>\n        </fieldset>\n        <ValidationError fieldMeta={fieldMeta} />\n      </div>\n    );\n  }\n}\n\nFieldReviewRatingComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  customErrorText: null,\n  label: null,\n};\n\nconst { string, shape, func, object } = PropTypes;\n\nFieldReviewRatingComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: string,\n\n  // Error message that can be manually passed to input field,\n  // overrides default validation message\n  customErrorText: string,\n\n  // Generated by final-form's Field component\n  input: shape({\n    onChange: func.isRequired,\n  }).isRequired,\n  meta: object.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst FieldReviewRating = props => {\n  return <Field component={FieldReviewRatingComponent} {...props} />;\n};\n\nexport default injectIntl(FieldReviewRating);\n"]},"metadata":{},"sourceType":"module"}