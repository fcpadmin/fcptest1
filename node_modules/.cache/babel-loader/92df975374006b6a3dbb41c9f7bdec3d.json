{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/index.js\";\n\n/**\n * This is the main entrypoint file for the application.\n *\n * When loaded in the client side, the application is rendered in the\n * #root element.\n *\n * When the bundle created from this file is imported in the server\n * side, the exported `renderApp` function can be used for server side\n * rendering.\n *\n * Note that this file is required for the build process.\n */\n// React 16 depends on the collection types Map and Set, as well as requestAnimationFrame.\n// https://reactjs.org/docs/javascript-environment-requirements.html\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'raf/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Decimal from 'decimal.js';\nimport { createInstance, types as sdkTypes } from './util/sdkLoader';\nimport { ClientApp, renderApp } from './app';\nimport configureStore from './store';\nimport { matchPathname } from './util/routes';\nimport * as sample from './util/sample';\nimport config from './config';\nimport { authInfo } from './ducks/Auth.duck';\nimport { fetchCurrentUser } from './ducks/user.duck';\nimport routeConfiguration from './routeConfiguration';\nimport * as log from './util/log';\nimport { LoggingAnalyticsHandler, GoogleAnalyticsHandler } from './analytics/handlers';\nimport './marketplaceIndex.css';\nconst BigDecimal = sdkTypes.BigDecimal;\n\nconst render = (store, shouldHydrate) => {\n  // If the server already loaded the auth information, render the app\n  // immediately. Otherwise wait for the flag to be loaded and render\n  // when auth information is present.\n  const authInfoLoaded = store.getState().Auth.authInfoLoaded;\n  const info = authInfoLoaded ? Promise.resolve({}) : store.dispatch(authInfo());\n  info.then(() => {\n    store.dispatch(fetchCurrentUser());\n\n    if (shouldHydrate) {\n      ReactDOM.hydrate(React.createElement(ClientApp, {\n        store: store,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), document.getElementById('root'));\n    } else {\n      ReactDOM.render(React.createElement(ClientApp, {\n        store: store,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), document.getElementById('root'));\n    }\n  }).catch(e => {\n    log.error(e, 'browser-side-render-failed');\n  });\n};\n\nconst setupAnalyticsHandlers = () => {\n  let handlers = []; // Log analytics page views and events in dev mode\n\n  if (config.dev) {\n    handlers.push(new LoggingAnalyticsHandler());\n  } // Add Google Analytics handler if tracker ID is found\n\n\n  if (process.env.REACT_APP_GOOGLE_ANALYTICS_ID) {\n    handlers.push(new GoogleAnalyticsHandler(window.ga));\n  }\n\n  return handlers;\n}; // If we're in a browser already, render the client application.\n\n\nif (typeof window !== 'undefined') {\n  // set up logger with Sentry DSN client key and environment\n  log.setup();\n  const baseUrl = config.sdk.baseUrl ? {\n    baseUrl: config.sdk.baseUrl\n  } : {}; // eslint-disable-next-line no-underscore-dangle\n\n  const preloadedState = window.__PRELOADED_STATE__ || '{}';\n  const initialState = JSON.parse(preloadedState, sdkTypes.reviver);\n  const sdk = createInstance(_objectSpread({\n    transitVerbose: config.sdk.transitVerbose,\n    clientId: config.sdk.clientId,\n    secure: config.usingSSL,\n    typeHandlers: [{\n      type: BigDecimal,\n      customType: Decimal,\n      writer: v => new BigDecimal(v.toString()),\n      reader: v => new Decimal(v.value)\n    }]\n  }, baseUrl));\n  const analyticsHandlers = setupAnalyticsHandlers();\n  const store = configureStore(initialState, sdk, analyticsHandlers);\n\n  require('./util/polyfills');\n\n  render(store, !!window.__PRELOADED_STATE__);\n\n  if (config.dev) {\n    // Expose stuff for the browser REPL\n    window.app = {\n      config,\n      sdk,\n      sdkTypes,\n      store,\n      sample,\n      routeConfiguration: routeConfiguration()\n    };\n  }\n} // Export the function for server side rendering.\n\n\nexport default renderApp; // exporting matchPathname and configureStore for server side rendering.\n// matchPathname helps to figure out which route is called and if it has preloading needs\n// configureStore is used for creating initial store state for Redux after preloading\n\nexport { matchPathname, configureStore, routeConfiguration, config };","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/index.js"],"names":["React","ReactDOM","Decimal","createInstance","types","sdkTypes","ClientApp","renderApp","configureStore","matchPathname","sample","config","authInfo","fetchCurrentUser","routeConfiguration","log","LoggingAnalyticsHandler","GoogleAnalyticsHandler","BigDecimal","render","store","shouldHydrate","authInfoLoaded","getState","Auth","info","Promise","resolve","dispatch","then","hydrate","document","getElementById","catch","e","error","setupAnalyticsHandlers","handlers","dev","push","process","env","REACT_APP_GOOGLE_ANALYTICS_ID","window","ga","setup","baseUrl","sdk","preloadedState","__PRELOADED_STATE__","initialState","JSON","parse","reviver","transitVerbose","clientId","secure","usingSSL","typeHandlers","type","customType","writer","v","toString","reader","value","analyticsHandlers","require","app"],"mappings":"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","sourcesContent":["/**\n * This is the main entrypoint file for the application.\n *\n * When loaded in the client side, the application is rendered in the\n * #root element.\n *\n * When the bundle created from this file is imported in the server\n * side, the exported `renderApp` function can be used for server side\n * rendering.\n *\n * Note that this file is required for the build process.\n */\n\n// React 16 depends on the collection types Map and Set, as well as requestAnimationFrame.\n// https://reactjs.org/docs/javascript-environment-requirements.html\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'raf/polyfill';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Decimal from 'decimal.js';\nimport { createInstance, types as sdkTypes } from './util/sdkLoader';\nimport { ClientApp, renderApp } from './app';\nimport configureStore from './store';\nimport { matchPathname } from './util/routes';\nimport * as sample from './util/sample';\nimport config from './config';\nimport { authInfo } from './ducks/Auth.duck';\nimport { fetchCurrentUser } from './ducks/user.duck';\nimport routeConfiguration from './routeConfiguration';\nimport * as log from './util/log';\nimport { LoggingAnalyticsHandler, GoogleAnalyticsHandler } from './analytics/handlers';\n\nimport './marketplaceIndex.css';\n\nconst { BigDecimal } = sdkTypes;\n\nconst render = (store, shouldHydrate) => {\n  // If the server already loaded the auth information, render the app\n  // immediately. Otherwise wait for the flag to be loaded and render\n  // when auth information is present.\n  const authInfoLoaded = store.getState().Auth.authInfoLoaded;\n  const info = authInfoLoaded ? Promise.resolve({}) : store.dispatch(authInfo());\n  info\n    .then(() => {\n      store.dispatch(fetchCurrentUser());\n      if (shouldHydrate) {\n        ReactDOM.hydrate(<ClientApp store={store} />, document.getElementById('root'));\n      } else {\n        ReactDOM.render(<ClientApp store={store} />, document.getElementById('root'));\n      }\n    })\n    .catch(e => {\n      log.error(e, 'browser-side-render-failed');\n    });\n};\n\nconst setupAnalyticsHandlers = () => {\n  let handlers = [];\n\n  // Log analytics page views and events in dev mode\n  if (config.dev) {\n    handlers.push(new LoggingAnalyticsHandler());\n  }\n\n  // Add Google Analytics handler if tracker ID is found\n  if (process.env.REACT_APP_GOOGLE_ANALYTICS_ID) {\n    handlers.push(new GoogleAnalyticsHandler(window.ga));\n  }\n\n  return handlers;\n};\n\n// If we're in a browser already, render the client application.\nif (typeof window !== 'undefined') {\n  // set up logger with Sentry DSN client key and environment\n  log.setup();\n\n  const baseUrl = config.sdk.baseUrl ? { baseUrl: config.sdk.baseUrl } : {};\n\n  // eslint-disable-next-line no-underscore-dangle\n  const preloadedState = window.__PRELOADED_STATE__ || '{}';\n  const initialState = JSON.parse(preloadedState, sdkTypes.reviver);\n  const sdk = createInstance({\n    transitVerbose: config.sdk.transitVerbose,\n    clientId: config.sdk.clientId,\n    secure: config.usingSSL,\n    typeHandlers: [\n      {\n        type: BigDecimal,\n        customType: Decimal,\n        writer: v => new BigDecimal(v.toString()),\n        reader: v => new Decimal(v.value),\n      },\n    ],\n    ...baseUrl,\n  });\n  const analyticsHandlers = setupAnalyticsHandlers();\n  const store = configureStore(initialState, sdk, analyticsHandlers);\n\n  require('./util/polyfills');\n  render(store, !!window.__PRELOADED_STATE__);\n\n  if (config.dev) {\n    // Expose stuff for the browser REPL\n    window.app = {\n      config,\n      sdk,\n      sdkTypes,\n      store,\n      sample,\n      routeConfiguration: routeConfiguration(),\n    };\n  }\n}\n\n// Export the function for server side rendering.\nexport default renderApp;\n\n// exporting matchPathname and configureStore for server side rendering.\n// matchPathname helps to figure out which route is called and if it has preloading needs\n// configureStore is used for creating initial store state for Redux after preloading\nexport { matchPathname, configureStore, routeConfiguration, config };\n"]},"metadata":{},"sourceType":"module"}