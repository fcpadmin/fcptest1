{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SelectSingleFilter/SelectSingleFilterPopup.js\";\nimport React, { Component } from 'react';\nimport { string, func, arrayOf, shape, number } from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { Menu, MenuContent, MenuItem, MenuLabel } from '..';\nimport css from './SelectSingleFilterPopup.css';\n\nconst optionLabel = (options, key) => {\n  const option = options.find(o => o.key === key);\n  return option ? option.label : key;\n};\n\nclass SelectSingleFilterPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggleActive = this.onToggleActive.bind(this);\n    this.selectOption = this.selectOption.bind(this);\n  }\n\n  onToggleActive(isOpen) {\n    this.setState({\n      isOpen: isOpen\n    });\n  }\n\n  selectOption(urlParam, option) {\n    this.setState({\n      isOpen: false\n    });\n    this.props.onSelect(urlParam, option);\n  }\n\n  render() {\n    const _this$props = this.props,\n          rootClassName = _this$props.rootClassName,\n          className = _this$props.className,\n          urlParam = _this$props.urlParam,\n          label = _this$props.label,\n          options = _this$props.options,\n          initialValue = _this$props.initialValue,\n          contentPlacementOffset = _this$props.contentPlacementOffset; // resolve menu label text and class\n\n    const menuLabel = initialValue ? optionLabel(options, initialValue) : label;\n    const menuLabelClass = initialValue ? css.menuLabelSelected : css.menuLabel;\n    const classes = classNames(rootClassName || css.root, className);\n    return React.createElement(Menu, {\n      className: classes,\n      useArrow: false,\n      contentPlacementOffset: contentPlacementOffset,\n      onToggleActive: this.onToggleActive,\n      isOpen: this.state.isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(MenuLabel, {\n      className: menuLabelClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, menuLabel), React.createElement(MenuContent, {\n      className: css.menuContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, options.map(option => {\n      // check if this option is selected\n      const selected = initialValue === option.key; // menu item border class\n\n      const menuItemBorderClass = selected ? css.menuItemBorderSelected : css.menuItemBorder;\n      return React.createElement(MenuItem, {\n        key: option.key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: css.menuItem,\n        onClick: () => this.selectOption(urlParam, option.key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: menuItemBorderClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), option.label));\n    }), React.createElement(MenuItem, {\n      key: 'clearLink',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: css.clearMenuItem,\n      onClick: () => this.selectOption(urlParam, null),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: 'SelectSingleFilter.popupClear',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nSelectSingleFilterPopup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValue: null,\n  contentPlacementOffset: 0\n};\nSelectSingleFilterPopup.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlParam: string.isRequired,\n  label: string.isRequired,\n  onSelect: func.isRequired,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: string.isRequired\n  })).isRequired,\n  initialValue: string,\n  contentPlacementOffset: number\n};\nexport default SelectSingleFilterPopup;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SelectSingleFilter/SelectSingleFilterPopup.js"],"names":["React","Component","string","func","arrayOf","shape","number","FormattedMessage","classNames","Menu","MenuContent","MenuItem","MenuLabel","css","optionLabel","options","key","option","find","o","label","SelectSingleFilterPopup","constructor","props","state","isOpen","onToggleActive","bind","selectOption","setState","urlParam","onSelect","render","rootClassName","className","initialValue","contentPlacementOffset","menuLabel","menuLabelClass","menuLabelSelected","classes","root","menuContent","map","selected","menuItemBorderClass","menuItemBorderSelected","menuItemBorder","menuItem","clearMenuItem","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, func, arrayOf, shape, number } from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport { Menu, MenuContent, MenuItem, MenuLabel } from '..';\nimport css from './SelectSingleFilterPopup.css';\n\nconst optionLabel = (options, key) => {\n  const option = options.find(o => o.key === key);\n  return option ? option.label : key;\n};\n\nclass SelectSingleFilterPopup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false };\n    this.onToggleActive = this.onToggleActive.bind(this);\n    this.selectOption = this.selectOption.bind(this);\n  }\n\n  onToggleActive(isOpen) {\n    this.setState({ isOpen: isOpen });\n  }\n\n  selectOption(urlParam, option) {\n    this.setState({ isOpen: false });\n    this.props.onSelect(urlParam, option);\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      urlParam,\n      label,\n      options,\n      initialValue,\n      contentPlacementOffset,\n    } = this.props;\n\n    // resolve menu label text and class\n    const menuLabel = initialValue ? optionLabel(options, initialValue) : label;\n    const menuLabelClass = initialValue ? css.menuLabelSelected : css.menuLabel;\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    return (\n      <Menu\n        className={classes}\n        useArrow={false}\n        contentPlacementOffset={contentPlacementOffset}\n        onToggleActive={this.onToggleActive}\n        isOpen={this.state.isOpen}\n      >\n        <MenuLabel className={menuLabelClass}>{menuLabel}</MenuLabel>\n        <MenuContent className={css.menuContent}>\n          {options.map(option => {\n            // check if this option is selected\n            const selected = initialValue === option.key;\n            // menu item border class\n            const menuItemBorderClass = selected ? css.menuItemBorderSelected : css.menuItemBorder;\n\n            return (\n              <MenuItem key={option.key}>\n                <button\n                  className={css.menuItem}\n                  onClick={() => this.selectOption(urlParam, option.key)}\n                >\n                  <span className={menuItemBorderClass} />\n                  {option.label}\n                </button>\n              </MenuItem>\n            );\n          })}\n          <MenuItem key={'clearLink'}>\n            <button className={css.clearMenuItem} onClick={() => this.selectOption(urlParam, null)}>\n              <FormattedMessage id={'SelectSingleFilter.popupClear'} />\n            </button>\n          </MenuItem>\n        </MenuContent>\n      </Menu>\n    );\n  }\n}\n\nSelectSingleFilterPopup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValue: null,\n  contentPlacementOffset: 0,\n};\n\nSelectSingleFilterPopup.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlParam: string.isRequired,\n  label: string.isRequired,\n  onSelect: func.isRequired,\n  options: arrayOf(\n    shape({\n      key: string.isRequired,\n      label: string.isRequired,\n    })\n  ).isRequired,\n  initialValue: string,\n  contentPlacementOffset: number,\n};\n\nexport default SelectSingleFilterPopup;\n"]},"metadata":{},"sourceType":"module"}