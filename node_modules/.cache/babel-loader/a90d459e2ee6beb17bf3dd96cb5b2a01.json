{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldDateInput/FieldDateInput.js\";\n\n/**\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\n *\n * NOTE: If you are using this component inside BookingDatesForm,\n * you should convert value.date to start date and end date before submitting it to API\n */\nimport React, { Component } from 'react';\nimport { bool, object, string, arrayOf } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\nimport { propTypes } from '../../util/types';\nimport DateInput from './DateInput';\nimport css from './FieldDateInput.css';\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nclass FieldDateInputComponent extends Component {\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          id = _this$props.id,\n          label = _this$props.label,\n          input = _this$props.input,\n          meta = _this$props.meta,\n          useMobileMargins = _this$props.useMobileMargins,\n          rest = _objectWithoutProperties(_this$props, [\"className\", \"rootClassName\", \"id\", \"label\", \"input\", \"meta\", \"useMobileMargins\"]);\n\n    if (label && !id) {\n      throw new Error('id required when a label is given');\n    }\n\n    const touched = meta.touched,\n          invalid = meta.invalid,\n          error = meta.error;\n    const value = input.value; // If startDate is valid label changes color and bottom border changes color too\n\n    const dateIsValid = value && value.date instanceof Date; // Error message and input error styles are only shown if the\n    // field has been touched and the validation has failed.\n\n    const hasError = touched && invalid && error;\n    const inputClasses = classNames({\n      [css.pickerSuccess]: dateIsValid,\n      [css.pickerError]: hasError\n    });\n\n    const onBlur = input.onBlur,\n          onFocus = input.onFocus,\n          restOfInput = _objectWithoutProperties(input, [\"onBlur\", \"onFocus\"]);\n\n    const inputProps = _objectSpread({\n      onBlur: input.onBlur,\n      onFocus: input.onFocus,\n      useMobileMargins,\n      id,\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH\n    }, restOfInput, rest);\n\n    const classes = classNames(rootClassName || css.fieldRoot, className);\n    const errorClasses = classNames({\n      [css.mobileMargins]: useMobileMargins\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, label ? React.createElement(\"label\", {\n      className: classNames({\n        [css.mobileMargins]: useMobileMargins\n      }),\n      htmlFor: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, label) : null, React.createElement(DateInput, Object.assign({\n      className: inputClasses\n    }, inputProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(ValidationError, {\n      className: errorClasses,\n      fieldMeta: meta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nFieldDateInputComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  useMobileMargins: false,\n  id: null,\n  label: null,\n  placeholderText: null,\n  timeSlots: null\n};\nFieldDateInputComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  useMobileMargins: bool,\n  id: string,\n  label: string,\n  placeholderText: string,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  input: object.isRequired,\n  meta: object.isRequired\n};\n\nconst FieldDateInput = props => {\n  return React.createElement(Field, Object.assign({\n    component: FieldDateInputComponent\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }));\n};\n\nexport { DateInput };\nexport default FieldDateInput;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldDateInput/FieldDateInput.js"],"names":["React","Component","bool","object","string","arrayOf","Field","classNames","ValidationError","propTypes","DateInput","css","MAX_MOBILE_SCREEN_WIDTH","FieldDateInputComponent","render","props","className","rootClassName","id","label","input","meta","useMobileMargins","rest","Error","touched","invalid","error","value","dateIsValid","date","Date","hasError","inputClasses","pickerSuccess","pickerError","onBlur","onFocus","restOfInput","inputProps","readOnly","window","innerWidth","classes","fieldRoot","errorClasses","mobileMargins","defaultProps","placeholderText","timeSlots","timeSlot","isRequired","FieldDateInput"],"mappings":"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","sourcesContent":["/**\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\n *\n * NOTE: If you are using this component inside BookingDatesForm,\n * you should convert value.date to start date and end date before submitting it to API\n */\nimport React, { Component } from 'react';\nimport { bool, object, string, arrayOf } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\nimport { propTypes } from '../../util/types';\n\nimport DateInput from './DateInput';\nimport css from './FieldDateInput.css';\n\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nclass FieldDateInputComponent extends Component {\n  render() {\n    const {\n      className,\n      rootClassName,\n      id,\n      label,\n      input,\n      meta,\n      useMobileMargins,\n      ...rest\n    } = this.props;\n\n    if (label && !id) {\n      throw new Error('id required when a label is given');\n    }\n\n    const { touched, invalid, error } = meta;\n    const value = input.value;\n\n    // If startDate is valid label changes color and bottom border changes color too\n    const dateIsValid = value && value.date instanceof Date;\n    // Error message and input error styles are only shown if the\n    // field has been touched and the validation has failed.\n    const hasError = touched && invalid && error;\n\n    const inputClasses = classNames({\n      [css.pickerSuccess]: dateIsValid,\n      [css.pickerError]: hasError,\n    });\n\n    const { onBlur, onFocus, ...restOfInput } = input;\n    const inputProps = {\n      onBlur: input.onBlur,\n      onFocus: input.onFocus,\n      useMobileMargins,\n      id,\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH,\n      ...restOfInput,\n      ...rest,\n    };\n    const classes = classNames(rootClassName || css.fieldRoot, className);\n    const errorClasses = classNames({ [css.mobileMargins]: useMobileMargins });\n\n    return (\n      <div className={classes}>\n        {label ? (\n          <label className={classNames({ [css.mobileMargins]: useMobileMargins })} htmlFor={id}>\n            {label}\n          </label>\n        ) : null}\n        <DateInput className={inputClasses} {...inputProps} />\n        <ValidationError className={errorClasses} fieldMeta={meta} />\n      </div>\n    );\n  }\n}\n\nFieldDateInputComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  useMobileMargins: false,\n  id: null,\n  label: null,\n  placeholderText: null,\n  timeSlots: null,\n};\n\nFieldDateInputComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  useMobileMargins: bool,\n  id: string,\n  label: string,\n  placeholderText: string,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  input: object.isRequired,\n  meta: object.isRequired,\n};\n\nconst FieldDateInput = props => {\n  return <Field component={FieldDateInputComponent} {...props} />;\n};\n\nexport { DateInput };\nexport default FieldDateInput;\n"]},"metadata":{},"sourceType":"module"}