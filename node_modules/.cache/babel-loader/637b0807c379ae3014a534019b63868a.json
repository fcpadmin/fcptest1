{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/PayoutPreferencesPage/PayoutPreferencesPage.js\";\nimport React from 'react';\nimport { bool, func } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { stripeAccountClearError } from '../../ducks/stripe.duck';\nimport { LayoutSideNavigation, LayoutWrapperMain, LayoutWrapperSideNav, LayoutWrapperTopbar, LayoutWrapperFooter, Footer, Page, UserNav } from '../../components';\nimport { PayoutDetailsForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\nimport { savePayoutDetails, loadData } from './PayoutPreferencesPage.duck';\nimport css from './PayoutPreferencesPage.css';\nexport const PayoutPreferencesPageComponent = props => {\n  const currentUser = props.currentUser,\n        scrollingDisabled = props.scrollingDisabled,\n        createStripeAccountError = props.createStripeAccountError,\n        onPayoutDetailsFormChange = props.onPayoutDetailsFormChange,\n        onPayoutDetailsFormSubmit = props.onPayoutDetailsFormSubmit,\n        payoutDetailsSaveInProgress = props.payoutDetailsSaveInProgress,\n        payoutDetailsSaved = props.payoutDetailsSaved,\n        intl = props.intl;\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n  const stripeConnected = currentUserLoaded && !!ensuredCurrentUser.stripeAccount && !!ensuredCurrentUser.stripeAccount.id;\n  const tabs = [{\n    text: React.createElement(FormattedMessage, {\n      id: \"PayoutPreferencesPage.contactDetailsTabTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }),\n    selected: false,\n    linkProps: {\n      name: 'ContactDetailsPage'\n    }\n  }, {\n    text: React.createElement(FormattedMessage, {\n      id: \"PayoutPreferencesPage.passwordTabTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }),\n    selected: false,\n    linkProps: {\n      name: 'PasswordChangePage'\n    }\n  }, {\n    text: React.createElement(FormattedMessage, {\n      id: \"PayoutPreferencesPage.paymentsTabTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }),\n    selected: true,\n    linkProps: {\n      name: 'PayoutPreferencesPage'\n    }\n  }];\n  const title = intl.formatMessage({\n    id: 'PayoutPreferencesPage.title'\n  });\n  const formDisabled = !currentUserLoaded || stripeConnected || payoutDetailsSaved;\n  let message = React.createElement(FormattedMessage, {\n    id: \"PayoutPreferencesPage.loadingData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  });\n\n  if (currentUserLoaded && payoutDetailsSaved) {\n    message = React.createElement(FormattedMessage, {\n      id: \"PayoutPreferencesPage.payoutDetailsSaved\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n  } else if (currentUserLoaded && stripeConnected) {\n    message = React.createElement(FormattedMessage, {\n      id: \"PayoutPreferencesPage.stripeAlreadyConnected\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    });\n  } else if (currentUserLoaded && !stripeConnected) {\n    message = React.createElement(FormattedMessage, {\n      id: \"PayoutPreferencesPage.stripeNotConnected\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  }\n\n  const showForm = currentUserLoaded && (payoutDetailsSaveInProgress || payoutDetailsSaved || !stripeConnected);\n  const form = showForm ? React.createElement(PayoutDetailsForm, {\n    disabled: formDisabled,\n    inProgress: payoutDetailsSaveInProgress,\n    ready: payoutDetailsSaved,\n    submitButtonText: intl.formatMessage({\n      id: 'PayoutPreferencesPage.submitButtonText'\n    }),\n    createStripeAccountError: createStripeAccountError,\n    onChange: onPayoutDetailsFormChange,\n    onSubmit: onPayoutDetailsFormSubmit,\n    currentUserId: ensuredCurrentUser.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }) : null;\n  return React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(LayoutSideNavigation, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(LayoutWrapperTopbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(TopbarContainer, {\n    currentPage: \"PayoutPreferencesPage\",\n    desktopClassName: css.desktopTopbar,\n    mobileClassName: css.mobileTopbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(UserNav, {\n    selectedPageName: \"PayoutPreferencesPage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(LayoutWrapperSideNav, {\n    tabs: tabs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(LayoutWrapperMain, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: css.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"PayoutPreferencesPage.heading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, message), form)), React.createElement(LayoutWrapperFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }))));\n};\nPayoutPreferencesPageComponent.defaultProps = {\n  currentUser: null,\n  createStripeAccountError: null\n};\nPayoutPreferencesPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  payoutDetailsSaveInProgress: bool.isRequired,\n  createStripeAccountError: propTypes.error,\n  payoutDetailsSaved: bool.isRequired,\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsFormSubmit: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const createStripeAccountError = state.stripe.createStripeAccountError;\n  const currentUser = state.user.currentUser;\n  const _state$PayoutPreferen = state.PayoutPreferencesPage,\n        payoutDetailsSaveInProgress = _state$PayoutPreferen.payoutDetailsSaveInProgress,\n        payoutDetailsSaved = _state$PayoutPreferen.payoutDetailsSaved;\n  return {\n    currentUser,\n    createStripeAccountError,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    scrollingDisabled: isScrollingDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onPayoutDetailsFormChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsFormSubmit: values => dispatch(savePayoutDetails(values))\n});\n\nconst PayoutPreferencesPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(PayoutPreferencesPageComponent);\nPayoutPreferencesPage.loadData = loadData;\nexport default PayoutPreferencesPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/PayoutPreferencesPage/PayoutPreferencesPage.js"],"names":["React","bool","func","compose","connect","injectIntl","intlShape","FormattedMessage","ensureCurrentUser","propTypes","isScrollingDisabled","stripeAccountClearError","LayoutSideNavigation","LayoutWrapperMain","LayoutWrapperSideNav","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","Page","UserNav","PayoutDetailsForm","TopbarContainer","savePayoutDetails","loadData","css","PayoutPreferencesPageComponent","props","currentUser","scrollingDisabled","createStripeAccountError","onPayoutDetailsFormChange","onPayoutDetailsFormSubmit","payoutDetailsSaveInProgress","payoutDetailsSaved","intl","ensuredCurrentUser","currentUserLoaded","id","stripeConnected","stripeAccount","tabs","text","selected","linkProps","name","title","formatMessage","formDisabled","message","showForm","form","desktopTopbar","mobileTopbar","content","defaultProps","isRequired","error","mapStateToProps","state","stripe","user","PayoutPreferencesPage","mapDispatchToProps","dispatch","values"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { stripeAccountClearError } from '../../ducks/stripe.duck';\nimport {\n  LayoutSideNavigation,\n  LayoutWrapperMain,\n  LayoutWrapperSideNav,\n  LayoutWrapperTopbar,\n  LayoutWrapperFooter,\n  Footer,\n  Page,\n  UserNav,\n} from '../../components';\nimport { PayoutDetailsForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\nimport { savePayoutDetails, loadData } from './PayoutPreferencesPage.duck';\n\nimport css from './PayoutPreferencesPage.css';\n\nexport const PayoutPreferencesPageComponent = props => {\n  const {\n    currentUser,\n    scrollingDisabled,\n    createStripeAccountError,\n    onPayoutDetailsFormChange,\n    onPayoutDetailsFormSubmit,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    intl,\n  } = props;\n\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n  const stripeConnected =\n    currentUserLoaded &&\n    !!ensuredCurrentUser.stripeAccount &&\n    !!ensuredCurrentUser.stripeAccount.id;\n\n  const tabs = [\n    {\n      text: <FormattedMessage id=\"PayoutPreferencesPage.contactDetailsTabTitle\" />,\n      selected: false,\n      linkProps: {\n        name: 'ContactDetailsPage',\n      },\n    },\n    {\n      text: <FormattedMessage id=\"PayoutPreferencesPage.passwordTabTitle\" />,\n      selected: false,\n      linkProps: {\n        name: 'PasswordChangePage',\n      },\n    },\n    {\n      text: <FormattedMessage id=\"PayoutPreferencesPage.paymentsTabTitle\" />,\n      selected: true,\n      linkProps: {\n        name: 'PayoutPreferencesPage',\n      },\n    },\n  ];\n\n  const title = intl.formatMessage({ id: 'PayoutPreferencesPage.title' });\n  const formDisabled = !currentUserLoaded || stripeConnected || payoutDetailsSaved;\n\n  let message = <FormattedMessage id=\"PayoutPreferencesPage.loadingData\" />;\n\n  if (currentUserLoaded && payoutDetailsSaved) {\n    message = <FormattedMessage id=\"PayoutPreferencesPage.payoutDetailsSaved\" />;\n  } else if (currentUserLoaded && stripeConnected) {\n    message = <FormattedMessage id=\"PayoutPreferencesPage.stripeAlreadyConnected\" />;\n  } else if (currentUserLoaded && !stripeConnected) {\n    message = <FormattedMessage id=\"PayoutPreferencesPage.stripeNotConnected\" />;\n  }\n\n  const showForm =\n    currentUserLoaded && (payoutDetailsSaveInProgress || payoutDetailsSaved || !stripeConnected);\n  const form = showForm ? (\n    <PayoutDetailsForm\n      disabled={formDisabled}\n      inProgress={payoutDetailsSaveInProgress}\n      ready={payoutDetailsSaved}\n      submitButtonText={intl.formatMessage({ id: 'PayoutPreferencesPage.submitButtonText' })}\n      createStripeAccountError={createStripeAccountError}\n      onChange={onPayoutDetailsFormChange}\n      onSubmit={onPayoutDetailsFormSubmit}\n      currentUserId={ensuredCurrentUser.id}\n    />\n  ) : null;\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\n      <LayoutSideNavigation>\n        <LayoutWrapperTopbar>\n          <TopbarContainer\n            currentPage=\"PayoutPreferencesPage\"\n            desktopClassName={css.desktopTopbar}\n            mobileClassName={css.mobileTopbar}\n          />\n          <UserNav selectedPageName=\"PayoutPreferencesPage\" />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperSideNav tabs={tabs} />\n        <LayoutWrapperMain>\n          <div className={css.content}>\n            <h1 className={css.title}>\n              <FormattedMessage id=\"PayoutPreferencesPage.heading\" />\n            </h1>\n            <p>{message}</p>\n            {form}\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSideNavigation>\n    </Page>\n  );\n};\n\nPayoutPreferencesPageComponent.defaultProps = {\n  currentUser: null,\n  createStripeAccountError: null,\n};\n\nPayoutPreferencesPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  payoutDetailsSaveInProgress: bool.isRequired,\n  createStripeAccountError: propTypes.error,\n  payoutDetailsSaved: bool.isRequired,\n\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsFormSubmit: func.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { createStripeAccountError } = state.stripe;\n  const { currentUser } = state.user;\n  const { payoutDetailsSaveInProgress, payoutDetailsSaved } = state.PayoutPreferencesPage;\n  return {\n    currentUser,\n    createStripeAccountError,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onPayoutDetailsFormChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsFormSubmit: values => dispatch(savePayoutDetails(values)),\n});\n\nconst PayoutPreferencesPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(PayoutPreferencesPageComponent);\n\nPayoutPreferencesPage.loadData = loadData;\n\nexport default PayoutPreferencesPage;\n"]},"metadata":{},"sourceType":"module"}