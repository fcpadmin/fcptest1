{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCurrencyInput/FieldCurrencyInput.example.js\";\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport en from 'react-intl/locale-data/en';\nimport fi from 'react-intl/locale-data/fi';\nimport { currencyConfig } from '../../util/test-data';\nimport * as validators from '../../util/validators';\nimport FieldCurrencyInput, { CurrencyInput } from './FieldCurrencyInput';\n\nconst currencyConfigUSD = _objectSpread({}, currencyConfig, {\n  currency: 'USD'\n});\n\nconst currencyConfigEUR = _objectSpread({}, currencyConfig, {\n  currency: 'EUR'\n}); // eslint-disable-next-line no-console\n\n\nconst onChange = price => console.log('CurrencyInput - value:', price); // Different locales need to be initialized before their currency formatting is in use\n\n\nconst CurrencyInputWithIntl = (_ref) => {\n  let locale = _ref.locale,\n      rest = _objectWithoutProperties(_ref, [\"locale\"]);\n\n  if (locale === 'en') {\n    addLocaleData([...en]);\n  } else {\n    addLocaleData([...fi]);\n  }\n\n  return React.createElement(IntlProvider, {\n    locale: locale,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(CurrencyInput, Object.assign({}, rest, {\n    input: {\n      onChange\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n};\n\nconst object = PropTypes.object,\n      string = PropTypes.string;\nCurrencyInputWithIntl.propTypes = {\n  currencyConfig: object.isRequired,\n  locale: string.isRequired\n};\nexport const EmptyWithEnUSD = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigUSD,\n    locale: 'en'\n  },\n  group: 'custom inputs'\n};\nexport const defaultValueWithEnUSD = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigUSD,\n    locale: 'en',\n    defaultValue: 9999.99\n  },\n  group: 'custom inputs'\n};\nexport const EmptyWithFiEUR = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigEUR,\n    locale: 'fi'\n  },\n  group: 'custom inputs'\n};\nexport const defaultValueWithFiEUR = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigEUR,\n    locale: 'fi',\n    defaultValue: 9999.99\n  },\n  group: 'custom inputs'\n};\n\nconst FormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const handleSubmit = fieldRenderProps.handleSubmit,\n          onChange = fieldRenderProps.onChange;\n    const required = validators.required('This field is required');\n    return React.createElement(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(FormSpy, {\n      onChange: onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(FieldCurrencyInput, {\n      id: \"FieldCurrencyInput.price\",\n      name: \"price\",\n      label: \"Set price:\",\n      placeholder: \"Type in amount in EUR...\",\n      currencyConfig: currencyConfigEUR,\n      validate: required,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85\n  },\n  __self: this\n}));\n\nexport const FieldInForm = {\n  component: FormComponent,\n  props: {\n    onChange: formState => {\n      if (formState.values && formState.values.price) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('FieldInForm submitted values:', values);\n      return false;\n    }\n  },\n  group: 'custom inputs'\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCurrencyInput/FieldCurrencyInput.example.js"],"names":["React","PropTypes","IntlProvider","addLocaleData","Form","FinalForm","FormSpy","en","fi","currencyConfig","validators","FieldCurrencyInput","CurrencyInput","currencyConfigUSD","currency","currencyConfigEUR","onChange","price","console","log","CurrencyInputWithIntl","locale","rest","object","string","propTypes","isRequired","EmptyWithEnUSD","component","props","group","defaultValueWithEnUSD","defaultValue","EmptyWithFiEUR","defaultValueWithFiEUR","FormComponent","fieldRenderProps","handleSubmit","required","e","preventDefault","FieldInForm","formState","values","onSubmit"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport en from 'react-intl/locale-data/en';\nimport fi from 'react-intl/locale-data/fi';\nimport { currencyConfig } from '../../util/test-data';\nimport * as validators from '../../util/validators';\nimport FieldCurrencyInput, { CurrencyInput } from './FieldCurrencyInput';\n\nconst currencyConfigUSD = {\n  ...currencyConfig,\n  currency: 'USD',\n};\n\nconst currencyConfigEUR = {\n  ...currencyConfig,\n  currency: 'EUR',\n};\n\n// eslint-disable-next-line no-console\nconst onChange = price => console.log('CurrencyInput - value:', price);\n\n// Different locales need to be initialized before their currency formatting is in use\nconst CurrencyInputWithIntl = ({ locale, ...rest }) => {\n  if (locale === 'en') {\n    addLocaleData([...en]);\n  } else {\n    addLocaleData([...fi]);\n  }\n  return (\n    <IntlProvider locale={locale}>\n      <CurrencyInput {...rest} input={{ onChange }} />\n    </IntlProvider>\n  );\n};\n\nconst { object, string } = PropTypes;\n\nCurrencyInputWithIntl.propTypes = {\n  currencyConfig: object.isRequired,\n  locale: string.isRequired,\n};\n\nexport const EmptyWithEnUSD = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigUSD,\n    locale: 'en',\n  },\n  group: 'custom inputs',\n};\n\nexport const defaultValueWithEnUSD = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigUSD,\n    locale: 'en',\n    defaultValue: 9999.99,\n  },\n  group: 'custom inputs',\n};\n\nexport const EmptyWithFiEUR = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigEUR,\n    locale: 'fi',\n  },\n  group: 'custom inputs',\n};\n\nexport const defaultValueWithFiEUR = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigEUR,\n    locale: 'fi',\n    defaultValue: 9999.99,\n  },\n  group: 'custom inputs',\n};\n\nconst FormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const { handleSubmit, onChange } = fieldRenderProps;\n      const required = validators.required('This field is required');\n\n      return (\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            handleSubmit(e);\n          }}\n        >\n          <FormSpy onChange={onChange} />\n          <FieldCurrencyInput\n            id=\"FieldCurrencyInput.price\"\n            name=\"price\"\n            label=\"Set price:\"\n            placeholder=\"Type in amount in EUR...\"\n            currencyConfig={currencyConfigEUR}\n            validate={required}\n          />\n        </form>\n      );\n    }}\n  />\n);\n\nexport const FieldInForm = {\n  component: FormComponent,\n  props: {\n    onChange: formState => {\n      if (formState.values && formState.values.price) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('FieldInForm submitted values:', values);\n      return false;\n    },\n  },\n  group: 'custom inputs',\n};\n"]},"metadata":{},"sourceType":"module"}