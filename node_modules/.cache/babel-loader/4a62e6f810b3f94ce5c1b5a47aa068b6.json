{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { storableError } from '../../util/errors'; // ================ Action types ================ //\n\nexport const RESET_PASSWORD_REQUEST = 'app/PasswordResetPage/RESET_PASSWORD_REQUEST';\nexport const RESET_PASSWORD_SUCCESS = 'app/PasswordResetPage/RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_ERROR = 'app/PasswordResetPage/RESET_PASSWORD_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  resetPasswordInProgress: false,\n  resetPasswordError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case RESET_PASSWORD_REQUEST:\n      return _objectSpread({}, state, {\n        resetPasswordInProgress: true,\n        resetPasswordError: null\n      });\n\n    case RESET_PASSWORD_SUCCESS:\n      return _objectSpread({}, state, {\n        resetPasswordInProgress: false\n      });\n\n    case RESET_PASSWORD_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return _objectSpread({}, state, {\n        resetPasswordInProgress: false,\n        resetPasswordError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const resetPasswordRequest = () => ({\n  type: RESET_PASSWORD_REQUEST\n});\nexport const resetPasswordSuccess = () => ({\n  type: RESET_PASSWORD_SUCCESS\n});\nexport const resetPasswordError = e => ({\n  type: RESET_PASSWORD_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const resetPassword = (email, passwordResetToken, newPassword) => (dispatch, getState, sdk) => {\n  dispatch(resetPasswordRequest());\n  const params = {\n    email,\n    passwordResetToken,\n    newPassword\n  };\n  return sdk.passwordReset.reset(params).then(() => dispatch(resetPasswordSuccess())).catch(e => dispatch(resetPasswordError(storableError(e))));\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/PasswordResetPage/PasswordResetPage.duck.js"],"names":["storableError","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","initialState","resetPasswordInProgress","resetPasswordError","reducer","state","action","type","payload","console","error","resetPasswordRequest","resetPasswordSuccess","e","resetPassword","email","passwordResetToken","newPassword","dispatch","getState","sdk","params","passwordReset","reset","then","catch"],"mappings":";AAAA,SAASA,aAAT,QAA8B,mBAA9B,C,CAEA;;AAEA,OAAO,MAAMC,sBAAsB,GAAG,8CAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,8CAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,4CAA7B,C,CAEP;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,uBAAuB,EAAE,KADN;AAEnBC,EAAAA,kBAAkB,EAAE;AAFD,CAArB;AAKA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGJ,YAAzB,EAAuCK,MAAM,GAAG,EAAhD,EAAoD;AAAA,QACzDC,IADyD,GACvCD,MADuC,CACzDC,IADyD;AAAA,QACnDC,OADmD,GACvCF,MADuC,CACnDE,OADmD;;AAEjE,UAAQD,IAAR;AACE,SAAKT,sBAAL;AACE,+BAAYO,KAAZ;AAAmBH,QAAAA,uBAAuB,EAAE,IAA5C;AAAkDC,QAAAA,kBAAkB,EAAE;AAAtE;;AACF,SAAKJ,sBAAL;AACE,+BAAYM,KAAZ;AAAmBH,QAAAA,uBAAuB,EAAE;AAA5C;;AACF,SAAKF,oBAAL;AACES,MAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd,EADF,CAC0B;;AACxB,+BAAYH,KAAZ;AAAmBH,QAAAA,uBAAuB,EAAE,KAA5C;AAAmDC,QAAAA,kBAAkB,EAAEK;AAAvE;;AACF;AACE,aAAOH,KAAP;AATJ;AAWD,C,CAED;;AAEA,OAAO,MAAMM,oBAAoB,GAAG,OAAO;AAAEJ,EAAAA,IAAI,EAAET;AAAR,CAAP,CAA7B;AAEP,OAAO,MAAMc,oBAAoB,GAAG,OAAO;AAAEL,EAAAA,IAAI,EAAER;AAAR,CAAP,CAA7B;AAEP,OAAO,MAAMI,kBAAkB,GAAGU,CAAC,KAAK;AACtCN,EAAAA,IAAI,EAAEP,oBADgC;AAEtCU,EAAAA,KAAK,EAAE,IAF+B;AAGtCF,EAAAA,OAAO,EAAEK;AAH6B,CAAL,CAA5B,C,CAMP;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,kBAAR,EAA4BC,WAA5B,KAA4C,CACvEC,QADuE,EAEvEC,QAFuE,EAGvEC,GAHuE,KAIpE;AACHF,EAAAA,QAAQ,CAACP,oBAAoB,EAArB,CAAR;AACA,QAAMU,MAAM,GAAG;AAAEN,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,GAAf;AACA,SAAOG,GAAG,CAACE,aAAJ,CACJC,KADI,CACEF,MADF,EAEJG,IAFI,CAEC,MAAMN,QAAQ,CAACN,oBAAoB,EAArB,CAFf,EAGJa,KAHI,CAGEZ,CAAC,IAAIK,QAAQ,CAACf,kBAAkB,CAACN,aAAa,CAACgB,CAAD,CAAd,CAAnB,CAHf,CAAP;AAID,CAXM","sourcesContent":["import { storableError } from '../../util/errors';\n\n// ================ Action types ================ //\n\nexport const RESET_PASSWORD_REQUEST = 'app/PasswordResetPage/RESET_PASSWORD_REQUEST';\nexport const RESET_PASSWORD_SUCCESS = 'app/PasswordResetPage/RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_ERROR = 'app/PasswordResetPage/RESET_PASSWORD_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  resetPasswordInProgress: false,\n  resetPasswordError: null,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_PASSWORD_REQUEST:\n      return { ...state, resetPasswordInProgress: true, resetPasswordError: null };\n    case RESET_PASSWORD_SUCCESS:\n      return { ...state, resetPasswordInProgress: false };\n    case RESET_PASSWORD_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return { ...state, resetPasswordInProgress: false, resetPasswordError: payload };\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const resetPasswordRequest = () => ({ type: RESET_PASSWORD_REQUEST });\n\nexport const resetPasswordSuccess = () => ({ type: RESET_PASSWORD_SUCCESS });\n\nexport const resetPasswordError = e => ({\n  type: RESET_PASSWORD_ERROR,\n  error: true,\n  payload: e,\n});\n\n// ================ Thunks ================ //\n\nexport const resetPassword = (email, passwordResetToken, newPassword) => (\n  dispatch,\n  getState,\n  sdk\n) => {\n  dispatch(resetPasswordRequest());\n  const params = { email, passwordResetToken, newPassword };\n  return sdk.passwordReset\n    .reset(params)\n    .then(() => dispatch(resetPasswordSuccess()))\n    .catch(e => dispatch(resetPasswordError(storableError(e))));\n};\n"]},"metadata":{},"sourceType":"module"}