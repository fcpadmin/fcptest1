{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PayoutDetailsForm/PayoutDetailsForm.js\";\nimport React from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { propTypes } from '../../util/types';\nimport { isStripeInvalidPostalCode, isStripeError } from '../../util/errors';\nimport * as validators from '../../util/validators';\nimport { Button, ExternalLink, FieldRadioButton, FieldSelect, Form } from '../../components';\nimport PayoutDetailsCompanyAccount from './PayoutDetailsCompanyAccount';\nimport PayoutDetailsIndividualAccount from './PayoutDetailsIndividualAccount';\nimport css from './PayoutDetailsForm.css';\nconst supportedCountries = config.stripe.supportedCountries.map(c => c.code);\nexport const stripeCountryConfigs = countryCode => {\n  const country = config.stripe.supportedCountries.find(c => c.code === countryCode);\n\n  if (!country) {\n    throw new Error(\"Country code not found in Stripe config \".concat(countryCode));\n  }\n\n  return country;\n};\n\nconst PayoutDetailsFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  mutators: _objectSpread({}, arrayMutators),\n  render: fieldRenderProps => {\n    const className = fieldRenderProps.className,\n          createStripeAccountError = fieldRenderProps.createStripeAccountError,\n          disabled = fieldRenderProps.disabled,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          inProgress = fieldRenderProps.inProgress,\n          intl = fieldRenderProps.intl,\n          invalid = fieldRenderProps.invalid,\n          pristine = fieldRenderProps.pristine,\n          ready = fieldRenderProps.ready,\n          submitButtonText = fieldRenderProps.submitButtonText,\n          currentUserId = fieldRenderProps.currentUserId,\n          values = fieldRenderProps.values;\n    const country = values.country;\n    const accountType = values.accountType;\n    const individualAccountLabel = intl.formatMessage({\n      id: 'PayoutDetailsForm.individualAccount'\n    });\n    const companyAccountLabel = intl.formatMessage({\n      id: 'PayoutDetailsForm.companyAccount'\n    });\n    const countryLabel = intl.formatMessage({\n      id: 'PayoutDetailsForm.countryLabel'\n    });\n    const countryPlaceholder = intl.formatMessage({\n      id: 'PayoutDetailsForm.countryPlaceholder'\n    });\n    const countryRequired = validators.required(intl.formatMessage({\n      id: 'PayoutDetailsForm.countryRequired'\n    }));\n    const classes = classNames(css.root, className, {\n      [css.disabled]: disabled\n    });\n    const submitInProgress = inProgress;\n    const submitDisabled = pristine || invalid || disabled || submitInProgress;\n    const showAsRequired = pristine;\n    const showIndividual = country && accountType && accountType === 'individual';\n    const showCompany = country && accountType && accountType === 'company';\n    let error = null;\n\n    if (isStripeInvalidPostalCode(createStripeAccountError)) {\n      error = React.createElement(\"div\", {\n        className: css.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"PayoutDetailsForm.createStripeAccountFailedInvalidPostalCode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    } else if (isStripeError(createStripeAccountError)) {\n      const stripeMessage = createStripeAccountError.apiErrors[0].meta.stripeMessage;\n      error = React.createElement(\"div\", {\n        className: css.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"PayoutDetailsForm.createStripeAccountFailedWithStripeError\",\n        values: {\n          stripeMessage\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    } else if (createStripeAccountError) {\n      error = React.createElement(\"div\", {\n        className: css.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"PayoutDetailsForm.createStripeAccountFailed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n\n    const stripeConnectedAccountTermsLink = React.createElement(ExternalLink, {\n      href: \"https://stripe.com/connect-account/legal\",\n      className: css.termsLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PayoutDetailsForm.stripeConnectedAccountTermsLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n    return config.stripe.publishableKey ? React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.sectionContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: css.subTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PayoutDetailsForm.accountTypeTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: css.radioButtonRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(FieldRadioButton, {\n      id: \"individual\",\n      name: \"accountType\",\n      label: individualAccountLabel,\n      value: \"individual\",\n      showAsRequired: showAsRequired,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(FieldRadioButton, {\n      id: \"company\",\n      name: \"accountType\",\n      label: companyAccountLabel,\n      value: \"company\",\n      showAsRequired: showAsRequired,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), accountType ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.sectionContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: css.subTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Country\"), React.createElement(FieldSelect, {\n      id: \"country\",\n      name: \"country\",\n      disabled: disabled,\n      className: css.selectCountry,\n      autoComplete: \"country\",\n      label: countryLabel,\n      validate: countryRequired,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      disabled: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, countryPlaceholder), supportedCountries.map(c => React.createElement(\"option\", {\n      key: c,\n      value: c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, intl.formatMessage({\n      id: \"PayoutDetailsForm.countryNames.\".concat(c)\n    }))))), showIndividual ? React.createElement(PayoutDetailsIndividualAccount, {\n      fieldRenderProps: fieldRenderProps,\n      country: country,\n      currentUserId: currentUserId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }) : showCompany ? React.createElement(PayoutDetailsCompanyAccount, {\n      fieldRenderProps: fieldRenderProps,\n      country: country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }) : null, error, React.createElement(\"p\", {\n      className: css.termsText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PayoutDetailsForm.stripeToSText\",\n      values: {\n        stripeConnectedAccountTermsLink\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: ready,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, submitButtonText ? submitButtonText : React.createElement(FormattedMessage, {\n      id: \"PayoutDetailsForm.submitButtonText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }))) : null) : React.createElement(\"div\", {\n      className: css.missingStripeKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PayoutDetailsForm.missingStripeKey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}));\n\nPayoutDetailsFormComponent.defaultProps = {\n  className: null,\n  createStripeAccountError: null,\n  disabled: false,\n  inProgress: false,\n  ready: false,\n  submitButtonText: null,\n  currentUserId: null,\n  fieldRenderProps: null\n};\nPayoutDetailsFormComponent.propTypes = {\n  className: string,\n  createStripeAccountError: object,\n  disabled: bool,\n  inProgress: bool,\n  ready: bool,\n  submitButtonText: string,\n  currentUserId: propTypes.uuid,\n  fieldRenderProps: shape({\n    handleSubmit: func,\n    invalid: bool,\n    pristine: bool,\n    values: object\n  }),\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst PayoutDetailsForm = compose(injectIntl)(PayoutDetailsFormComponent);\nexport default PayoutDetailsForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PayoutDetailsForm/PayoutDetailsForm.js"],"names":["React","bool","func","object","shape","string","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","arrayMutators","classNames","config","propTypes","isStripeInvalidPostalCode","isStripeError","validators","Button","ExternalLink","FieldRadioButton","FieldSelect","PayoutDetailsCompanyAccount","PayoutDetailsIndividualAccount","css","supportedCountries","stripe","map","c","code","stripeCountryConfigs","countryCode","country","find","Error","PayoutDetailsFormComponent","props","fieldRenderProps","className","createStripeAccountError","disabled","handleSubmit","inProgress","intl","invalid","pristine","ready","submitButtonText","currentUserId","values","accountType","individualAccountLabel","formatMessage","id","companyAccountLabel","countryLabel","countryPlaceholder","countryRequired","required","classes","root","submitInProgress","submitDisabled","showAsRequired","showIndividual","showCompany","error","stripeMessage","apiErrors","meta","stripeConnectedAccountTermsLink","termsLink","publishableKey","sectionContainer","subTitle","radioButtonRow","selectCountry","termsText","submitButton","missingStripeKey","defaultProps","uuid","isRequired","PayoutDetailsForm"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,QAAkD,YAAlD;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,YAAxD;AACA,SAASC,IAAI,IAAIC,SAAjB,QAAkC,kBAAlC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,yBAAT,EAAoCC,aAApC,QAAyD,mBAAzD;AACA,OAAO,KAAKC,UAAZ,MAA4B,uBAA5B;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,gBAA/B,EAAiDC,WAAjD,EAA8DZ,IAA9D,QAA0E,kBAA1E;AAEA,OAAOa,2BAAP,MAAwC,+BAAxC;AACA,OAAOC,8BAAP,MAA2C,kCAA3C;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AAEA,MAAMC,kBAAkB,GAAGZ,MAAM,CAACa,MAAP,CAAcD,kBAAd,CAAiCE,GAAjC,CAAqCC,CAAC,IAAIA,CAAC,CAACC,IAA5C,CAA3B;AAEA,OAAO,MAAMC,oBAAoB,GAAGC,WAAW,IAAI;AACjD,QAAMC,OAAO,GAAGnB,MAAM,CAACa,MAAP,CAAcD,kBAAd,CAAiCQ,IAAjC,CAAsCL,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWE,WAAtD,CAAhB;;AAEA,MAAI,CAACC,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,mDAAqDH,WAArD,EAAN;AACD;;AACD,SAAOC,OAAP;AACD,CAPM;;AASP,MAAMG,0BAA0B,GAAGC,KAAK,IACtC,oBAAC,SAAD,oBACMA,KADN;AAEE,EAAA,QAAQ,oBACHzB,aADG,CAFV;AAKE,EAAA,MAAM,EAAE0B,gBAAgB,IAAI;AAAA,UAExBC,SAFwB,GActBD,gBAdsB,CAExBC,SAFwB;AAAA,UAGxBC,wBAHwB,GActBF,gBAdsB,CAGxBE,wBAHwB;AAAA,UAIxBC,QAJwB,GActBH,gBAdsB,CAIxBG,QAJwB;AAAA,UAKxBC,YALwB,GActBJ,gBAdsB,CAKxBI,YALwB;AAAA,UAMxBC,UANwB,GActBL,gBAdsB,CAMxBK,UANwB;AAAA,UAOxBC,IAPwB,GActBN,gBAdsB,CAOxBM,IAPwB;AAAA,UAQxBC,OARwB,GActBP,gBAdsB,CAQxBO,OARwB;AAAA,UASxBC,QATwB,GActBR,gBAdsB,CASxBQ,QATwB;AAAA,UAUxBC,KAVwB,GActBT,gBAdsB,CAUxBS,KAVwB;AAAA,UAWxBC,gBAXwB,GActBV,gBAdsB,CAWxBU,gBAXwB;AAAA,UAYxBC,aAZwB,GActBX,gBAdsB,CAYxBW,aAZwB;AAAA,UAaxBC,MAbwB,GActBZ,gBAdsB,CAaxBY,MAbwB;AAAA,UAgBlBjB,OAhBkB,GAgBNiB,MAhBM,CAgBlBjB,OAhBkB;AAkB1B,UAAMkB,WAAW,GAAGD,MAAM,CAACC,WAA3B;AAEA,UAAMC,sBAAsB,GAAGR,IAAI,CAACS,aAAL,CAAmB;AAChDC,MAAAA,EAAE,EAAE;AAD4C,KAAnB,CAA/B;AAIA,UAAMC,mBAAmB,GAAGX,IAAI,CAACS,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAA5B;AAEA,UAAME,YAAY,GAAGZ,IAAI,CAACS,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAArB;AACA,UAAMG,kBAAkB,GAAGb,IAAI,CAACS,aAAL,CAAmB;AAC5CC,MAAAA,EAAE,EAAE;AADwC,KAAnB,CAA3B;AAGA,UAAMI,eAAe,GAAGxC,UAAU,CAACyC,QAAX,CACtBf,IAAI,CAACS,aAAL,CAAmB;AACjBC,MAAAA,EAAE,EAAE;AADa,KAAnB,CADsB,CAAxB;AAMA,UAAMM,OAAO,GAAG/C,UAAU,CAACY,GAAG,CAACoC,IAAL,EAAWtB,SAAX,EAAsB;AAC9C,OAACd,GAAG,CAACgB,QAAL,GAAgBA;AAD8B,KAAtB,CAA1B;AAIA,UAAMqB,gBAAgB,GAAGnB,UAAzB;AACA,UAAMoB,cAAc,GAAGjB,QAAQ,IAAID,OAAZ,IAAuBJ,QAAvB,IAAmCqB,gBAA1D;AACA,UAAME,cAAc,GAAGlB,QAAvB;AAEA,UAAMmB,cAAc,GAAGhC,OAAO,IAAIkB,WAAX,IAA0BA,WAAW,KAAK,YAAjE;AACA,UAAMe,WAAW,GAAGjC,OAAO,IAAIkB,WAAX,IAA0BA,WAAW,KAAK,SAA9D;AAEA,QAAIgB,KAAK,GAAG,IAAZ;;AAEA,QAAInD,yBAAyB,CAACwB,wBAAD,CAA7B,EAAyD;AACvD2B,MAAAA,KAAK,GACH;AAAK,QAAA,SAAS,EAAE1C,GAAG,CAAC0C,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,8DAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KAND,MAMO,IAAIlD,aAAa,CAACuB,wBAAD,CAAjB,EAA6C;AAClD,YAAM4B,aAAa,GAAG5B,wBAAwB,CAAC6B,SAAzB,CAAmC,CAAnC,EAAsCC,IAAtC,CAA2CF,aAAjE;AACAD,MAAAA,KAAK,GACH;AAAK,QAAA,SAAS,EAAE1C,GAAG,CAAC0C,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,EAAE,EAAC,4DADL;AAEE,QAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAQD,KAVM,MAUA,IAAI5B,wBAAJ,EAA8B;AACnC2B,MAAAA,KAAK,GACH;AAAK,QAAA,SAAS,EAAE1C,GAAG,CAAC0C,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,6CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;AAED,UAAMI,+BAA+B,GACnC,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,0CAAnB;AAA8D,MAAA,SAAS,EAAE9C,GAAG,CAAC+C,SAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,mDAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAMA,WAAO1D,MAAM,CAACa,MAAP,CAAc8C,cAAd,GACL,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEb,OAAjB;AAA0B,MAAA,QAAQ,EAAElB,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEjB,GAAG,CAACiD,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAEjD,GAAG,CAACkD,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,oCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAElD,GAAG,CAACmD,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,EAAE,EAAC,YADL;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,MAAA,KAAK,EAAExB,sBAHT;AAIE,MAAA,KAAK,EAAC,YAJR;AAKE,MAAA,cAAc,EAAEY,cALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,oBAAC,gBAAD;AACE,MAAA,EAAE,EAAC,SADL;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,MAAA,KAAK,EAAET,mBAHT;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,cAAc,EAAES,cALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CAJF,CADF,EAuBGb,WAAW,GACV,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAE1B,GAAG,CAACiD,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAEjD,GAAG,CAACkD,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,WAAD;AACE,MAAA,EAAE,EAAC,SADL;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,QAAQ,EAAElC,QAHZ;AAIE,MAAA,SAAS,EAAEhB,GAAG,CAACoD,aAJjB;AAKE,MAAA,YAAY,EAAC,SALf;AAME,MAAA,KAAK,EAAErB,YANT;AAOE,MAAA,QAAQ,EAAEE,eAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE;AAAQ,MAAA,QAAQ,MAAhB;AAAiB,MAAA,KAAK,EAAC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,kBADH,CATF,EAYG/B,kBAAkB,CAACE,GAAnB,CAAuBC,CAAC,IACvB;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,KAAK,EAAEA,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,IAAI,CAACS,aAAL,CAAmB;AAAEC,MAAAA,EAAE,2CAAoCzB,CAApC;AAAJ,KAAnB,CADH,CADD,CAZH,CAFF,CADF,EAuBGoC,cAAc,GACb,oBAAC,8BAAD;AACE,MAAA,gBAAgB,EAAE3B,gBADpB;AAEE,MAAA,OAAO,EAAEL,OAFX;AAGE,MAAA,aAAa,EAAEgB,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,GAMXiB,WAAW,GACb,oBAAC,2BAAD;AACE,MAAA,gBAAgB,EAAE5B,gBADpB;AAEE,MAAA,OAAO,EAAEL,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,GAKX,IAlCN,EAoCGkC,KApCH,EAsCE;AAAG,MAAA,SAAS,EAAE1C,GAAG,CAACqD,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,EAAE,EAAC,iCADL;AAEE,MAAA,MAAM,EAAE;AAAEP,QAAAA;AAAF,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtCF,EA4CE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAE9C,GAAG,CAACsD,YADjB;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,UAAU,EAAEjB,gBAHd;AAIE,MAAA,QAAQ,EAAEC,cAJZ;AAKE,MAAA,KAAK,EAAEhB,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGC,gBAAgB,GACfA,gBADe,GAGf,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,oCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,CA5CF,CADU,GA2DR,IAlFN,CADK,GAsFL;AAAK,MAAA,SAAS,EAAEvB,GAAG,CAACuD,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,oCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtFF;AA0FD,GA9KH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAmLA5C,0BAA0B,CAAC6C,YAA3B,GAA0C;AACxC1C,EAAAA,SAAS,EAAE,IAD6B;AAExCC,EAAAA,wBAAwB,EAAE,IAFc;AAGxCC,EAAAA,QAAQ,EAAE,KAH8B;AAIxCE,EAAAA,UAAU,EAAE,KAJ4B;AAKxCI,EAAAA,KAAK,EAAE,KALiC;AAMxCC,EAAAA,gBAAgB,EAAE,IANsB;AAOxCC,EAAAA,aAAa,EAAE,IAPyB;AAQxCX,EAAAA,gBAAgB,EAAE;AARsB,CAA1C;AAWAF,0BAA0B,CAACrB,SAA3B,GAAuC;AACrCwB,EAAAA,SAAS,EAAElC,MAD0B;AAErCmC,EAAAA,wBAAwB,EAAErC,MAFW;AAGrCsC,EAAAA,QAAQ,EAAExC,IAH2B;AAIrC0C,EAAAA,UAAU,EAAE1C,IAJyB;AAKrC8C,EAAAA,KAAK,EAAE9C,IAL8B;AAMrC+C,EAAAA,gBAAgB,EAAE3C,MANmB;AAOrC4C,EAAAA,aAAa,EAAElC,SAAS,CAACmE,IAPY;AAQrC5C,EAAAA,gBAAgB,EAAElC,KAAK,CAAC;AACtBsC,IAAAA,YAAY,EAAExC,IADQ;AAEtB2C,IAAAA,OAAO,EAAE5C,IAFa;AAGtB6C,IAAAA,QAAQ,EAAE7C,IAHY;AAItBiD,IAAAA,MAAM,EAAE/C;AAJc,GAAD,CARc;AAerC;AACAyC,EAAAA,IAAI,EAAEnC,SAAS,CAAC0E;AAhBqB,CAAvC;AAmBA,MAAMC,iBAAiB,GAAG9E,OAAO,CAACE,UAAD,CAAP,CAAoB4B,0BAApB,CAA1B;AAEA,eAAegD,iBAAf","sourcesContent":["import React from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { propTypes } from '../../util/types';\nimport { isStripeInvalidPostalCode, isStripeError } from '../../util/errors';\nimport * as validators from '../../util/validators';\nimport { Button, ExternalLink, FieldRadioButton, FieldSelect, Form } from '../../components';\n\nimport PayoutDetailsCompanyAccount from './PayoutDetailsCompanyAccount';\nimport PayoutDetailsIndividualAccount from './PayoutDetailsIndividualAccount';\nimport css from './PayoutDetailsForm.css';\n\nconst supportedCountries = config.stripe.supportedCountries.map(c => c.code);\n\nexport const stripeCountryConfigs = countryCode => {\n  const country = config.stripe.supportedCountries.find(c => c.code === countryCode);\n\n  if (!country) {\n    throw new Error(`Country code not found in Stripe config ${countryCode}`);\n  }\n  return country;\n};\n\nconst PayoutDetailsFormComponent = props => (\n  <FinalForm\n    {...props}\n    mutators={{\n      ...arrayMutators,\n    }}\n    render={fieldRenderProps => {\n      const {\n        className,\n        createStripeAccountError,\n        disabled,\n        handleSubmit,\n        inProgress,\n        intl,\n        invalid,\n        pristine,\n        ready,\n        submitButtonText,\n        currentUserId,\n        values,\n      } = fieldRenderProps;\n\n      const { country } = values;\n\n      const accountType = values.accountType;\n\n      const individualAccountLabel = intl.formatMessage({\n        id: 'PayoutDetailsForm.individualAccount',\n      });\n\n      const companyAccountLabel = intl.formatMessage({ id: 'PayoutDetailsForm.companyAccount' });\n\n      const countryLabel = intl.formatMessage({ id: 'PayoutDetailsForm.countryLabel' });\n      const countryPlaceholder = intl.formatMessage({\n        id: 'PayoutDetailsForm.countryPlaceholder',\n      });\n      const countryRequired = validators.required(\n        intl.formatMessage({\n          id: 'PayoutDetailsForm.countryRequired',\n        })\n      );\n\n      const classes = classNames(css.root, className, {\n        [css.disabled]: disabled,\n      });\n\n      const submitInProgress = inProgress;\n      const submitDisabled = pristine || invalid || disabled || submitInProgress;\n      const showAsRequired = pristine;\n\n      const showIndividual = country && accountType && accountType === 'individual';\n      const showCompany = country && accountType && accountType === 'company';\n\n      let error = null;\n\n      if (isStripeInvalidPostalCode(createStripeAccountError)) {\n        error = (\n          <div className={css.error}>\n            <FormattedMessage id=\"PayoutDetailsForm.createStripeAccountFailedInvalidPostalCode\" />\n          </div>\n        );\n      } else if (isStripeError(createStripeAccountError)) {\n        const stripeMessage = createStripeAccountError.apiErrors[0].meta.stripeMessage;\n        error = (\n          <div className={css.error}>\n            <FormattedMessage\n              id=\"PayoutDetailsForm.createStripeAccountFailedWithStripeError\"\n              values={{ stripeMessage }}\n            />\n          </div>\n        );\n      } else if (createStripeAccountError) {\n        error = (\n          <div className={css.error}>\n            <FormattedMessage id=\"PayoutDetailsForm.createStripeAccountFailed\" />\n          </div>\n        );\n      }\n\n      const stripeConnectedAccountTermsLink = (\n        <ExternalLink href=\"https://stripe.com/connect-account/legal\" className={css.termsLink}>\n          <FormattedMessage id=\"PayoutDetailsForm.stripeConnectedAccountTermsLink\" />\n        </ExternalLink>\n      );\n\n      return config.stripe.publishableKey ? (\n        <Form className={classes} onSubmit={handleSubmit}>\n          <div className={css.sectionContainer}>\n            <h3 className={css.subTitle}>\n              <FormattedMessage id=\"PayoutDetailsForm.accountTypeTitle\" />\n            </h3>\n            <div className={css.radioButtonRow}>\n              <FieldRadioButton\n                id=\"individual\"\n                name=\"accountType\"\n                label={individualAccountLabel}\n                value=\"individual\"\n                showAsRequired={showAsRequired}\n              />\n              <FieldRadioButton\n                id=\"company\"\n                name=\"accountType\"\n                label={companyAccountLabel}\n                value=\"company\"\n                showAsRequired={showAsRequired}\n              />\n            </div>\n          </div>\n\n          {accountType ? (\n            <React.Fragment>\n              <div className={css.sectionContainer}>\n                <h3 className={css.subTitle}>Country</h3>\n                <FieldSelect\n                  id=\"country\"\n                  name=\"country\"\n                  disabled={disabled}\n                  className={css.selectCountry}\n                  autoComplete=\"country\"\n                  label={countryLabel}\n                  validate={countryRequired}\n                >\n                  <option disabled value=\"\">\n                    {countryPlaceholder}\n                  </option>\n                  {supportedCountries.map(c => (\n                    <option key={c} value={c}>\n                      {intl.formatMessage({ id: `PayoutDetailsForm.countryNames.${c}` })}\n                    </option>\n                  ))}\n                </FieldSelect>\n              </div>\n\n              {showIndividual ? (\n                <PayoutDetailsIndividualAccount\n                  fieldRenderProps={fieldRenderProps}\n                  country={country}\n                  currentUserId={currentUserId}\n                />\n              ) : showCompany ? (\n                <PayoutDetailsCompanyAccount\n                  fieldRenderProps={fieldRenderProps}\n                  country={country}\n                />\n              ) : null}\n\n              {error}\n\n              <p className={css.termsText}>\n                <FormattedMessage\n                  id=\"PayoutDetailsForm.stripeToSText\"\n                  values={{ stripeConnectedAccountTermsLink }}\n                />\n              </p>\n              <Button\n                className={css.submitButton}\n                type=\"submit\"\n                inProgress={submitInProgress}\n                disabled={submitDisabled}\n                ready={ready}\n              >\n                {submitButtonText ? (\n                  submitButtonText\n                ) : (\n                  <FormattedMessage id=\"PayoutDetailsForm.submitButtonText\" />\n                )}\n              </Button>\n            </React.Fragment>\n          ) : null}\n        </Form>\n      ) : (\n        <div className={css.missingStripeKey}>\n          <FormattedMessage id=\"PayoutDetailsForm.missingStripeKey\" />\n        </div>\n      );\n    }}\n  />\n);\n\nPayoutDetailsFormComponent.defaultProps = {\n  className: null,\n  createStripeAccountError: null,\n  disabled: false,\n  inProgress: false,\n  ready: false,\n  submitButtonText: null,\n  currentUserId: null,\n  fieldRenderProps: null,\n};\n\nPayoutDetailsFormComponent.propTypes = {\n  className: string,\n  createStripeAccountError: object,\n  disabled: bool,\n  inProgress: bool,\n  ready: bool,\n  submitButtonText: string,\n  currentUserId: propTypes.uuid,\n  fieldRenderProps: shape({\n    handleSubmit: func,\n    invalid: bool,\n    pristine: bool,\n    values: object,\n  }),\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst PayoutDetailsForm = compose(injectIntl)(PayoutDetailsFormComponent);\n\nexport default PayoutDetailsForm;\n"]},"metadata":{},"sourceType":"module"}