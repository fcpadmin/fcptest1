{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport config from '../config';\n\nconst ensureOpenGraphLocale = locale => {\n  switch (locale) {\n    case 'en':\n      return 'en_US';\n\n    default:\n      return locale;\n  }\n};\n/**\n * These will be used with Helmet <meta {...openGraphMetaProps} />\n */\n\n\nexport const openGraphMetaProps = data => {\n  const canonicalRootURL = data.canonicalRootURL,\n        contentType = data.contentType,\n        description = data.description,\n        facebookAppId = data.facebookAppId,\n        facebookImages = data.facebookImages,\n        locale = data.locale,\n        published = data.published,\n        siteTitle = data.siteTitle,\n        tags = data.tags,\n        title = data.title,\n        updated = data.updated,\n        url = data.url;\n\n  if (!(title && description && contentType && url && facebookImages && facebookImages.length > 0 && canonicalRootURL)) {\n    /* eslint-disable no-console */\n    if (console && console.warning) {\n      console.warning(\"Can't create Openg Graph meta tags:\\n        title, description, contentType, url, facebookImages, and canonicalRootURL are needed.\");\n    }\n    /* eslint-enable no-console */\n\n\n    return [];\n  }\n\n  const openGraphMeta = [{\n    property: 'og:description',\n    content: description\n  }, {\n    property: 'og:title',\n    content: title\n  }, {\n    property: 'og:type',\n    content: contentType\n  }, {\n    property: 'og:url',\n    content: url\n  }, {\n    property: 'og:locale',\n    content: ensureOpenGraphLocale(locale)\n  }];\n  facebookImages.forEach(i => {\n    openGraphMeta.push({\n      property: 'og:image',\n      content: i.url\n    });\n\n    if (i.width && i.height) {\n      openGraphMeta.push({\n        property: 'og:image:width',\n        content: i.width\n      });\n      openGraphMeta.push({\n        property: 'og:image:height',\n        content: i.height\n      });\n    }\n  });\n\n  if (siteTitle) {\n    openGraphMeta.push({\n      property: 'og:site_name',\n      content: siteTitle\n    });\n  }\n\n  if (facebookAppId) {\n    openGraphMeta.push({\n      property: 'fb:app_id',\n      content: facebookAppId\n    });\n  }\n\n  if (published) {\n    openGraphMeta.push({\n      property: 'article:published_time',\n      content: published\n    });\n  }\n\n  if (updated) {\n    openGraphMeta.push({\n      property: 'article:modified_time',\n      content: updated\n    });\n  }\n\n  if (tags) {\n    openGraphMeta.push({\n      property: 'article:tag',\n      content: tags\n    });\n  }\n\n  return openGraphMeta;\n};\n/**\n * These will be used with Helmet <meta {...twitterMetaProps} />\n */\n\nexport const twitterMetaProps = data => {\n  const canonicalRootURL = data.canonicalRootURL,\n        description = data.description,\n        siteTwitterHandle = data.siteTwitterHandle,\n        title = data.title,\n        twitterHandle = data.twitterHandle,\n        twitterImages = data.twitterImages,\n        url = data.url;\n\n  if (!(title && description && siteTwitterHandle && url)) {\n    /* eslint-disable no-console */\n    if (console && console.warning) {\n      console.warning(\"Can't create twitter card meta tags:\\n        title, description, siteTwitterHandle, and url are needed.\");\n    }\n    /* eslint-enable no-console */\n\n\n    return [];\n  }\n\n  const twitterMeta = [{\n    name: 'twitter:card',\n    content: 'summary_large_image'\n  }, {\n    name: 'twitter:title',\n    content: title\n  }, {\n    name: 'twitter:description',\n    content: description\n  }, {\n    name: 'twitter:site',\n    content: siteTwitterHandle\n  }, {\n    name: 'twitter:url',\n    content: url\n  }];\n\n  if (canonicalRootURL && twitterImages && twitterImages.length > 0) {\n    twitterImages.forEach(i => {\n      twitterMeta.push({\n        name: 'twitter:image',\n        content: i.url\n      });\n    });\n  }\n\n  if (twitterHandle) {\n    // TODO: If we want to connect providers twitter account on ListingPage\n    // we needs to get this info among listing data (API support needed)\n    twitterMeta.push({\n      name: 'twitter:creator',\n      content: twitterHandle\n    });\n  }\n\n  if (canonicalRootURL) {\n    twitterMeta.push({\n      name: 'twitter:domain',\n      content: canonicalRootURL\n    });\n  }\n\n  return twitterMeta;\n};\n/**\n * These will be used with Helmet <meta {...metaTagProps} />\n * Creates data for Open Graph and Twitter meta tags.\n */\n\nexport const metaTagProps = tagData => {\n  const canonicalRootURL = config.canonicalRootURL,\n        facebookAppId = config.facebookAppId,\n        siteTitle = config.siteTitle,\n        siteTwitterHandle = config.siteTwitterHandle;\n  const author = tagData.author || siteTitle;\n  const defaultMeta = [{\n    name: 'description',\n    content: tagData.description\n  }, {\n    name: 'author',\n    content: author\n  }];\n  const openGraphMeta = openGraphMetaProps(_objectSpread({}, tagData, {\n    canonicalRootURL,\n    facebookAppId,\n    siteTitle\n  }));\n  const twitterMeta = twitterMetaProps(_objectSpread({}, tagData, {\n    canonicalRootURL,\n    siteTwitterHandle\n  }));\n  return [...defaultMeta, ...openGraphMeta, ...twitterMeta];\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/util/seo.js"],"names":["config","ensureOpenGraphLocale","locale","openGraphMetaProps","data","canonicalRootURL","contentType","description","facebookAppId","facebookImages","published","siteTitle","tags","title","updated","url","length","console","warning","openGraphMeta","property","content","forEach","i","push","width","height","twitterMetaProps","siteTwitterHandle","twitterHandle","twitterImages","twitterMeta","name","metaTagProps","tagData","author","defaultMeta"],"mappings":"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","sourcesContent":["import config from '../config';\n\nconst ensureOpenGraphLocale = locale => {\n  switch (locale) {\n    case 'en':\n      return 'en_US';\n    default:\n      return locale;\n  }\n};\n\n/**\n * These will be used with Helmet <meta {...openGraphMetaProps} />\n */\nexport const openGraphMetaProps = data => {\n  const {\n    canonicalRootURL,\n    contentType,\n    description,\n    facebookAppId,\n    facebookImages,\n    locale,\n    published,\n    siteTitle,\n    tags,\n    title,\n    updated,\n    url,\n  } = data;\n\n  if (\n    !(\n      title &&\n      description &&\n      contentType &&\n      url &&\n      facebookImages &&\n      facebookImages.length > 0 &&\n      canonicalRootURL\n    )\n  ) {\n    /* eslint-disable no-console */\n    if (console && console.warning) {\n      console.warning(\n        `Can't create Openg Graph meta tags:\n        title, description, contentType, url, facebookImages, and canonicalRootURL are needed.`\n      );\n    }\n    /* eslint-enable no-console */\n    return [];\n  }\n\n  const openGraphMeta = [\n    { property: 'og:description', content: description },\n    { property: 'og:title', content: title },\n    { property: 'og:type', content: contentType },\n    { property: 'og:url', content: url },\n    { property: 'og:locale', content: ensureOpenGraphLocale(locale) },\n  ];\n\n  facebookImages.forEach(i => {\n    openGraphMeta.push({\n      property: 'og:image',\n      content: i.url,\n    });\n\n    if (i.width && i.height) {\n      openGraphMeta.push({ property: 'og:image:width', content: i.width });\n      openGraphMeta.push({ property: 'og:image:height', content: i.height });\n    }\n  });\n\n  if (siteTitle) {\n    openGraphMeta.push({ property: 'og:site_name', content: siteTitle });\n  }\n\n  if (facebookAppId) {\n    openGraphMeta.push({ property: 'fb:app_id', content: facebookAppId });\n  }\n\n  if (published) {\n    openGraphMeta.push({ property: 'article:published_time', content: published });\n  }\n\n  if (updated) {\n    openGraphMeta.push({ property: 'article:modified_time', content: updated });\n  }\n\n  if (tags) {\n    openGraphMeta.push({ property: 'article:tag', content: tags });\n  }\n\n  return openGraphMeta;\n};\n\n/**\n * These will be used with Helmet <meta {...twitterMetaProps} />\n */\nexport const twitterMetaProps = data => {\n  const {\n    canonicalRootURL,\n    description,\n    siteTwitterHandle,\n    title,\n    twitterHandle,\n    twitterImages,\n    url,\n  } = data;\n\n  if (!(title && description && siteTwitterHandle && url)) {\n    /* eslint-disable no-console */\n    if (console && console.warning) {\n      console.warning(\n        `Can't create twitter card meta tags:\n        title, description, siteTwitterHandle, and url are needed.`\n      );\n    }\n    /* eslint-enable no-console */\n    return [];\n  }\n\n  const twitterMeta = [\n    { name: 'twitter:card', content: 'summary_large_image' },\n    { name: 'twitter:title', content: title },\n    { name: 'twitter:description', content: description },\n    { name: 'twitter:site', content: siteTwitterHandle },\n    { name: 'twitter:url', content: url },\n  ];\n\n  if (canonicalRootURL && twitterImages && twitterImages.length > 0) {\n    twitterImages.forEach(i => {\n      twitterMeta.push({\n        name: 'twitter:image',\n        content: i.url,\n      });\n    });\n  }\n\n  if (twitterHandle) {\n    // TODO: If we want to connect providers twitter account on ListingPage\n    // we needs to get this info among listing data (API support needed)\n    twitterMeta.push({ name: 'twitter:creator', content: twitterHandle });\n  }\n\n  if (canonicalRootURL) {\n    twitterMeta.push({ name: 'twitter:domain', content: canonicalRootURL });\n  }\n\n  return twitterMeta;\n};\n\n/**\n * These will be used with Helmet <meta {...metaTagProps} />\n * Creates data for Open Graph and Twitter meta tags.\n */\nexport const metaTagProps = tagData => {\n  const { canonicalRootURL, facebookAppId, siteTitle, siteTwitterHandle } = config;\n\n  const author = tagData.author || siteTitle;\n  const defaultMeta = [\n    { name: 'description', content: tagData.description },\n    { name: 'author', content: author },\n  ];\n\n  const openGraphMeta = openGraphMetaProps({\n    ...tagData,\n    canonicalRootURL,\n    facebookAppId,\n    siteTitle,\n  });\n\n  const twitterMeta = twitterMetaProps({\n    ...tagData,\n    canonicalRootURL,\n    siteTwitterHandle,\n  });\n\n  return [...defaultMeta, ...openGraphMeta, ...twitterMeta];\n};\n"]},"metadata":{},"sourceType":"module"}