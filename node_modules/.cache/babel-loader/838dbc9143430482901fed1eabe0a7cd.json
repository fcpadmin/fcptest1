{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PasswordChangeForm/PasswordChangeForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isChangePasswordWrongPassword } from '../../util/errors';\nimport { Form, PrimaryButton, FieldTextInput } from '../../components';\nimport css from './PasswordChangeForm.css';\nconst RESET_TIMEOUT = 800;\n\nclass PasswordChangeFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.resetTimeoutId = null;\n    this.submittedValues = {};\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.resetTimeoutId);\n  }\n\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const rootClassName = fieldRenderProps.rootClassName,\n              className = fieldRenderProps.className,\n              formId = fieldRenderProps.formId,\n              changePasswordError = fieldRenderProps.changePasswordError,\n              currentUser = fieldRenderProps.currentUser,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              inProgress = fieldRenderProps.inProgress,\n              intl = fieldRenderProps.intl,\n              invalid = fieldRenderProps.invalid,\n              pristine = fieldRenderProps.pristine,\n              ready = fieldRenderProps.ready,\n              form = fieldRenderProps.form,\n              values = fieldRenderProps.values;\n        const user = ensureCurrentUser(currentUser);\n\n        if (!user.id) {\n          return null;\n        } // New password\n\n\n        const newPasswordLabel = intl.formatMessage({\n          id: 'PasswordChangeForm.newPasswordLabel'\n        });\n        const newPasswordPlaceholder = intl.formatMessage({\n          id: 'PasswordChangeForm.newPasswordPlaceholder'\n        });\n        const newPasswordRequiredMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.newPasswordRequired'\n        });\n        const newPasswordRequired = validators.requiredStringNoTrim(newPasswordRequiredMessage);\n        const passwordMinLengthMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordTooShort'\n        }, {\n          minLength: validators.PASSWORD_MIN_LENGTH\n        });\n        const passwordMaxLengthMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordTooLong'\n        }, {\n          maxLength: validators.PASSWORD_MAX_LENGTH\n        });\n        const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n        const passwordMaxLength = validators.maxLength(passwordMaxLengthMessage, validators.PASSWORD_MAX_LENGTH); // password\n\n        const passwordLabel = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordLabel'\n        });\n        const passwordPlaceholder = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordPlaceholder'\n        });\n        const passwordRequiredMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordRequired'\n        });\n        const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n        const passwordFailedMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordFailed'\n        });\n        const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n        const passwordErrorText = isChangePasswordWrongPassword(changePasswordError) ? passwordFailedMessage : null;\n        const confirmClasses = classNames(css.confirmChangesSection, {\n          [css.confirmChangesSectionVisible]: !pristine\n        });\n        const genericFailure = changePasswordError && !passwordErrorText ? React.createElement(\"span\", {\n          className: css.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.genericFailure\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        })) : null;\n        const submittedOnce = Object.keys(this.submittedValues).length > 0;\n        const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n        const classes = classNames(rootClassName || css.root, className);\n        const submitDisabled = invalid || pristineSinceLastSubmit || inProgress;\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedValues = values;\n            handleSubmit(e).then(() => {\n              this.resetTimeoutId = window.setTimeout(form.reset, RESET_TIMEOUT);\n            }).catch(() => {// Error is handled in duck file already.\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: css.newPasswordSection,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(FieldTextInput, {\n          type: \"password\",\n          id: formId ? \"\".concat(formId, \".newPassword\") : 'newPassword',\n          name: \"newPassword\",\n          autoComplete: \"new-password\",\n          label: newPasswordLabel,\n          placeholder: newPasswordPlaceholder,\n          validate: validators.composeValidators(newPasswordRequired, passwordMinLength, passwordMaxLength),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: confirmClasses,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: css.confirmChangesTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.confirmChangesTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          className: css.confirmChangesInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.confirmChangesInfo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        })), React.createElement(FieldTextInput, {\n          className: css.password,\n          type: \"password\",\n          id: \"currentPassword\",\n          name: \"currentPassword\",\n          autoComplete: \"current-password\",\n          label: passwordLabel,\n          placeholder: passwordPlaceholder,\n          validate: validators.composeValidators(passwordRequired, passwordMinLength, passwordMaxLength),\n          customErrorText: passwordTouched ? null : passwordErrorText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: css.bottomWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, genericFailure, React.createElement(PrimaryButton, {\n          type: \"submit\",\n          inProgress: inProgress,\n          ready: ready,\n          disabled: submitDisabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.saveChanges\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }))));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPasswordChangeFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  changePasswordError: null,\n  inProgress: false,\n  formId: null\n};\nconst bool = PropTypes.bool,\n      string = PropTypes.string;\nPasswordChangeFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  changePasswordError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  ready: bool.isRequired,\n  formId: string\n};\nconst PasswordChangeForm = compose(injectIntl)(PasswordChangeFormComponent);\nPasswordChangeForm.displayName = 'PasswordChangeForm';\nexport default PasswordChangeForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PasswordChangeForm/PasswordChangeForm.js"],"names":["React","Component","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","isEqual","classNames","propTypes","validators","ensureCurrentUser","isChangePasswordWrongPassword","PrimaryButton","FieldTextInput","css","RESET_TIMEOUT","PasswordChangeFormComponent","constructor","props","resetTimeoutId","submittedValues","componentWillUnmount","window","clearTimeout","render","fieldRenderProps","rootClassName","className","formId","changePasswordError","currentUser","handleSubmit","inProgress","intl","invalid","pristine","ready","form","values","user","id","newPasswordLabel","formatMessage","newPasswordPlaceholder","newPasswordRequiredMessage","newPasswordRequired","requiredStringNoTrim","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMaxLengthMessage","maxLength","PASSWORD_MAX_LENGTH","passwordMinLength","passwordMaxLength","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","passwordFailedMessage","passwordTouched","currentPassword","passwordErrorText","confirmClasses","confirmChangesSection","confirmChangesSectionVisible","genericFailure","error","submittedOnce","Object","keys","length","pristineSinceLastSubmit","classes","root","submitDisabled","e","then","setTimeout","reset","catch","newPasswordSection","composeValidators","confirmChangesTitle","confirmChangesInfo","password","bottomWrapper","defaultProps","bool","string","isRequired","PasswordChangeForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isChangePasswordWrongPassword } from '../../util/errors';\nimport { Form, PrimaryButton, FieldTextInput } from '../../components';\n\nimport css from './PasswordChangeForm.css';\n\nconst RESET_TIMEOUT = 800;\n\nclass PasswordChangeFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.resetTimeoutId = null;\n    this.submittedValues = {};\n  }\n  componentWillUnmount() {\n    window.clearTimeout(this.resetTimeoutId);\n  }\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={fieldRenderProps => {\n          const {\n            rootClassName,\n            className,\n            formId,\n            changePasswordError,\n            currentUser,\n            handleSubmit,\n            inProgress,\n            intl,\n            invalid,\n            pristine,\n            ready,\n            form,\n            values,\n          } = fieldRenderProps;\n\n          const user = ensureCurrentUser(currentUser);\n\n          if (!user.id) {\n            return null;\n          }\n\n          // New password\n          const newPasswordLabel = intl.formatMessage({\n            id: 'PasswordChangeForm.newPasswordLabel',\n          });\n          const newPasswordPlaceholder = intl.formatMessage({\n            id: 'PasswordChangeForm.newPasswordPlaceholder',\n          });\n          const newPasswordRequiredMessage = intl.formatMessage({\n            id: 'PasswordChangeForm.newPasswordRequired',\n          });\n          const newPasswordRequired = validators.requiredStringNoTrim(newPasswordRequiredMessage);\n\n          const passwordMinLengthMessage = intl.formatMessage(\n            {\n              id: 'PasswordChangeForm.passwordTooShort',\n            },\n            {\n              minLength: validators.PASSWORD_MIN_LENGTH,\n            }\n          );\n          const passwordMaxLengthMessage = intl.formatMessage(\n            {\n              id: 'PasswordChangeForm.passwordTooLong',\n            },\n            {\n              maxLength: validators.PASSWORD_MAX_LENGTH,\n            }\n          );\n\n          const passwordMinLength = validators.minLength(\n            passwordMinLengthMessage,\n            validators.PASSWORD_MIN_LENGTH\n          );\n          const passwordMaxLength = validators.maxLength(\n            passwordMaxLengthMessage,\n            validators.PASSWORD_MAX_LENGTH\n          );\n\n          // password\n          const passwordLabel = intl.formatMessage({\n            id: 'PasswordChangeForm.passwordLabel',\n          });\n          const passwordPlaceholder = intl.formatMessage({\n            id: 'PasswordChangeForm.passwordPlaceholder',\n          });\n          const passwordRequiredMessage = intl.formatMessage({\n            id: 'PasswordChangeForm.passwordRequired',\n          });\n\n          const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n\n          const passwordFailedMessage = intl.formatMessage({\n            id: 'PasswordChangeForm.passwordFailed',\n          });\n          const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n          const passwordErrorText = isChangePasswordWrongPassword(changePasswordError)\n            ? passwordFailedMessage\n            : null;\n\n          const confirmClasses = classNames(css.confirmChangesSection, {\n            [css.confirmChangesSectionVisible]: !pristine,\n          });\n\n          const genericFailure =\n            changePasswordError && !passwordErrorText ? (\n              <span className={css.error}>\n                <FormattedMessage id=\"PasswordChangeForm.genericFailure\" />\n              </span>\n            ) : null;\n\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n          const classes = classNames(rootClassName || css.root, className);\n          const submitDisabled = invalid || pristineSinceLastSubmit || inProgress;\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedValues = values;\n                handleSubmit(e)\n                  .then(() => {\n                    this.resetTimeoutId = window.setTimeout(form.reset, RESET_TIMEOUT);\n                  })\n                  .catch(() => {\n                    // Error is handled in duck file already.\n                  });\n              }}\n            >\n              <div className={css.newPasswordSection}>\n                <FieldTextInput\n                  type=\"password\"\n                  id={formId ? `${formId}.newPassword` : 'newPassword'}\n                  name=\"newPassword\"\n                  autoComplete=\"new-password\"\n                  label={newPasswordLabel}\n                  placeholder={newPasswordPlaceholder}\n                  validate={validators.composeValidators(\n                    newPasswordRequired,\n                    passwordMinLength,\n                    passwordMaxLength\n                  )}\n                />\n              </div>\n\n              <div className={confirmClasses}>\n                <h3 className={css.confirmChangesTitle}>\n                  <FormattedMessage id=\"PasswordChangeForm.confirmChangesTitle\" />\n                </h3>\n                <p className={css.confirmChangesInfo}>\n                  <FormattedMessage id=\"PasswordChangeForm.confirmChangesInfo\" />\n                </p>\n\n                <FieldTextInput\n                  className={css.password}\n                  type=\"password\"\n                  id=\"currentPassword\"\n                  name=\"currentPassword\"\n                  autoComplete=\"current-password\"\n                  label={passwordLabel}\n                  placeholder={passwordPlaceholder}\n                  validate={validators.composeValidators(\n                    passwordRequired,\n                    passwordMinLength,\n                    passwordMaxLength\n                  )}\n                  customErrorText={passwordTouched ? null : passwordErrorText}\n                />\n              </div>\n              <div className={css.bottomWrapper}>\n                {genericFailure}\n                <PrimaryButton\n                  type=\"submit\"\n                  inProgress={inProgress}\n                  ready={ready}\n                  disabled={submitDisabled}\n                >\n                  <FormattedMessage id=\"PasswordChangeForm.saveChanges\" />\n                </PrimaryButton>\n              </div>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nPasswordChangeFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  changePasswordError: null,\n  inProgress: false,\n  formId: null,\n};\n\nconst { bool, string } = PropTypes;\n\nPasswordChangeFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  changePasswordError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  ready: bool.isRequired,\n  formId: string,\n};\n\nconst PasswordChangeForm = compose(injectIntl)(PasswordChangeFormComponent);\nPasswordChangeForm.displayName = 'PasswordChangeForm';\n\nexport default PasswordChangeForm;\n"]},"metadata":{},"sourceType":"module"}