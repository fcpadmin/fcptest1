{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/EmailVerificationPage/EmailVerificationPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { verify } from '../../ducks/EmailVerification.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { parse } from '../../util/urlHelpers';\nimport { Page, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer } from '../../components';\nimport { EmailVerificationForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\nimport css from './EmailVerificationPage.css';\n/**\n  Parse verification token from URL\n\n  Returns stringified token, if the token is provided.\n\n  Returns `null` if verification token is not provided.\n\n  Please note that we need to explicitely stringify the token, because\n  the unwanted result of the `parse` method is that it automatically\n  parses the token to number.\n*/\n\nconst parseVerificationToken = location => {\n  const urlParams = parse(location.search);\n  const verificationToken = urlParams.t;\n\n  if (verificationToken) {\n    return \"\".concat(verificationToken);\n  }\n\n  return null;\n};\n\nexport const EmailVerificationPageComponent = props => {\n  const currentUser = props.currentUser,\n        intl = props.intl,\n        scrollingDisabled = props.scrollingDisabled,\n        submitVerification = props.submitVerification,\n        emailVerificationInProgress = props.emailVerificationInProgress,\n        verificationError = props.verificationError,\n        location = props.location;\n  const title = intl.formatMessage({\n    id: 'EmailVerificationPage.title'\n  });\n  const initialValues = {\n    verificationToken: parseVerificationToken(location)\n  };\n  return React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    referrer: \"origin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(LayoutSingleColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(LayoutWrapperTopbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(TopbarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(LayoutWrapperMain, {\n    className: css.layoutWrapperMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, currentUser ? React.createElement(EmailVerificationForm, {\n    initialValues: initialValues,\n    onSubmit: submitVerification,\n    currentUser: currentUser,\n    inProgress: emailVerificationInProgress,\n    verificationError: verificationError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }) : React.createElement(FormattedMessage, {\n    id: \"EmailVerificationPage.loadingUserInformation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })))), React.createElement(LayoutWrapperFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }))));\n};\nEmailVerificationPageComponent.defaultProps = {\n  currentUser: null,\n  verificationError: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nEmailVerificationPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  submitVerification: func.isRequired,\n  emailVerificationInProgress: bool.isRequired,\n  verificationError: propTypes.error,\n  // from withRouter\n  location: shape({\n    search: string\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const currentUser = state.user.currentUser;\n  const _state$EmailVerificat = state.EmailVerification,\n        verificationError = _state$EmailVerificat.verificationError,\n        verificationInProgress = _state$EmailVerificat.verificationInProgress;\n  return {\n    verificationError,\n    emailVerificationInProgress: verificationInProgress,\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitVerification: ({\n    verificationToken\n  }) => {\n    return dispatch(verify(verificationToken));\n  }\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst EmailVerificationPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(EmailVerificationPageComponent);\nexport default EmailVerificationPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/EmailVerificationPage/EmailVerificationPage.js"],"names":["React","PropTypes","compose","connect","withRouter","FormattedMessage","injectIntl","intlShape","propTypes","verify","isScrollingDisabled","parse","Page","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","EmailVerificationForm","TopbarContainer","css","parseVerificationToken","location","urlParams","search","verificationToken","t","EmailVerificationPageComponent","props","currentUser","intl","scrollingDisabled","submitVerification","emailVerificationInProgress","verificationError","title","formatMessage","id","initialValues","layoutWrapperMain","root","content","defaultProps","bool","func","shape","string","isRequired","error","mapStateToProps","state","user","EmailVerification","verificationInProgress","mapDispatchToProps","dispatch","EmailVerificationPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,YAAxD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,oCAAvB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SACEC,IADF,EAEEC,kBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,mBALF,EAMEC,MANF,QAOO,kBAPP;AAQA,SAASC,qBAAT,QAAsC,aAAtC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,OAAOC,GAAP,MAAgB,6BAAhB;AAEA;;;;;;;;;;;;AAWA,MAAMC,sBAAsB,GAAGC,QAAQ,IAAI;AACzC,QAAMC,SAAS,GAAGZ,KAAK,CAACW,QAAQ,CAACE,MAAV,CAAvB;AACA,QAAMC,iBAAiB,GAAGF,SAAS,CAACG,CAApC;;AAEA,MAAID,iBAAJ,EAAuB;AACrB,qBAAUA,iBAAV;AACD;;AAED,SAAO,IAAP;AACD,CATD;;AAWA,OAAO,MAAME,8BAA8B,GAAGC,KAAK,IAAI;AAAA,QAEnDC,WAFmD,GASjDD,KATiD,CAEnDC,WAFmD;AAAA,QAGnDC,IAHmD,GASjDF,KATiD,CAGnDE,IAHmD;AAAA,QAInDC,iBAJmD,GASjDH,KATiD,CAInDG,iBAJmD;AAAA,QAKnDC,kBALmD,GASjDJ,KATiD,CAKnDI,kBALmD;AAAA,QAMnDC,2BANmD,GASjDL,KATiD,CAMnDK,2BANmD;AAAA,QAOnDC,iBAPmD,GASjDN,KATiD,CAOnDM,iBAPmD;AAAA,QAQnDZ,QARmD,GASjDM,KATiD,CAQnDN,QARmD;AAUrD,QAAMa,KAAK,GAAGL,IAAI,CAACM,aAAL,CAAmB;AAC/BC,IAAAA,EAAE,EAAE;AAD2B,GAAnB,CAAd;AAIA,QAAMC,aAAa,GAAG;AAAEb,IAAAA,iBAAiB,EAAEJ,sBAAsB,CAACC,QAAD;AAA3C,GAAtB;AAEA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,KAAb;AAAoB,IAAA,iBAAiB,EAAEJ,iBAAvC;AAA0D,IAAA,QAAQ,EAAC,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,iBAAD;AAAmB,IAAA,SAAS,EAAEX,GAAG,CAACmB,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEnB,GAAG,CAACoB,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEpB,GAAG,CAACqB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,WAAW,GACV,oBAAC,qBAAD;AACE,IAAA,aAAa,EAAES,aADjB;AAEE,IAAA,QAAQ,EAAEN,kBAFZ;AAGE,IAAA,WAAW,EAAEH,WAHf;AAIE,IAAA,UAAU,EAAEI,2BAJd;AAKE,IAAA,iBAAiB,EAAEC,iBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,GASV,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,8CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADF,CADF,CAJF,EAqBE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArBF,CADF,CADF;AA6BD,CA7CM;AA+CPP,8BAA8B,CAACe,YAA/B,GAA8C;AAC5Cb,EAAAA,WAAW,EAAE,IAD+B;AAE5CK,EAAAA,iBAAiB,EAAE;AAFyB,CAA9C;MAKQS,I,GAA8B1C,S,CAA9B0C,I;MAAMC,I,GAAwB3C,S,CAAxB2C,I;MAAMC,K,GAAkB5C,S,CAAlB4C,K;MAAOC,M,GAAW7C,S,CAAX6C,M;AAE3BnB,8BAA8B,CAACnB,SAA/B,GAA2C;AACzCqB,EAAAA,WAAW,EAAErB,SAAS,CAACqB,WADkB;AAEzCE,EAAAA,iBAAiB,EAAEY,IAAI,CAACI,UAFiB;AAGzCf,EAAAA,kBAAkB,EAAEY,IAAI,CAACG,UAHgB;AAIzCd,EAAAA,2BAA2B,EAAEU,IAAI,CAACI,UAJO;AAKzCb,EAAAA,iBAAiB,EAAE1B,SAAS,CAACwC,KALY;AAOzC;AACA1B,EAAAA,QAAQ,EAAEuB,KAAK,CAAC;AACdrB,IAAAA,MAAM,EAAEsB;AADM,GAAD,CAAL,CAEPC,UAVsC;AAYzC;AACAjB,EAAAA,IAAI,EAAEvB,SAAS,CAACwC;AAbyB,CAA3C;;AAgBA,MAAME,eAAe,GAAGC,KAAK,IAAI;AAAA,QACvBrB,WADuB,GACPqB,KAAK,CAACC,IADC,CACvBtB,WADuB;AAAA,gCAEuBqB,KAAK,CAACE,iBAF7B;AAAA,QAEvBlB,iBAFuB,yBAEvBA,iBAFuB;AAAA,QAEJmB,sBAFI,yBAEJA,sBAFI;AAG/B,SAAO;AACLnB,IAAAA,iBADK;AAELD,IAAAA,2BAA2B,EAAEoB,sBAFxB;AAGLxB,IAAAA,WAHK;AAILE,IAAAA,iBAAiB,EAAErB,mBAAmB,CAACwC,KAAD;AAJjC,GAAP;AAMD,CATD;;AAWA,MAAMI,kBAAkB,GAAGC,QAAQ,KAAK;AACtCvB,EAAAA,kBAAkB,EAAE,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAA2B;AAC7C,WAAO8B,QAAQ,CAAC9C,MAAM,CAACgB,iBAAD,CAAP,CAAf;AACD;AAHqC,CAAL,CAAnC,C,CAMA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM+B,qBAAqB,GAAGtD,OAAO,CACnCE,UADmC,EAEnCD,OAAO,CACL8C,eADK,EAELK,kBAFK,CAF4B,EAMnChD,UANmC,CAAP,CAO5BqB,8BAP4B,CAA9B;AASA,eAAe6B,qBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { verify } from '../../ducks/EmailVerification.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { parse } from '../../util/urlHelpers';\nimport {\n  Page,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { EmailVerificationForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\n\nimport css from './EmailVerificationPage.css';\n\n/**\n  Parse verification token from URL\n\n  Returns stringified token, if the token is provided.\n\n  Returns `null` if verification token is not provided.\n\n  Please note that we need to explicitely stringify the token, because\n  the unwanted result of the `parse` method is that it automatically\n  parses the token to number.\n*/\nconst parseVerificationToken = location => {\n  const urlParams = parse(location.search);\n  const verificationToken = urlParams.t;\n\n  if (verificationToken) {\n    return `${verificationToken}`;\n  }\n\n  return null;\n};\n\nexport const EmailVerificationPageComponent = props => {\n  const {\n    currentUser,\n    intl,\n    scrollingDisabled,\n    submitVerification,\n    emailVerificationInProgress,\n    verificationError,\n    location,\n  } = props;\n  const title = intl.formatMessage({\n    id: 'EmailVerificationPage.title',\n  });\n\n  const initialValues = { verificationToken: parseVerificationToken(location) };\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled} referrer=\"origin\">\n      <LayoutSingleColumn>\n        <LayoutWrapperTopbar>\n          <TopbarContainer />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperMain className={css.layoutWrapperMain}>\n          <div className={css.root}>\n            <div className={css.content}>\n              {currentUser ? (\n                <EmailVerificationForm\n                  initialValues={initialValues}\n                  onSubmit={submitVerification}\n                  currentUser={currentUser}\n                  inProgress={emailVerificationInProgress}\n                  verificationError={verificationError}\n                />\n              ) : (\n                <FormattedMessage id=\"EmailVerificationPage.loadingUserInformation\" />\n              )}\n            </div>\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSingleColumn>\n    </Page>\n  );\n};\n\nEmailVerificationPageComponent.defaultProps = {\n  currentUser: null,\n  verificationError: null,\n};\n\nconst { bool, func, shape, string } = PropTypes;\n\nEmailVerificationPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  submitVerification: func.isRequired,\n  emailVerificationInProgress: bool.isRequired,\n  verificationError: propTypes.error,\n\n  // from withRouter\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n  const { verificationError, verificationInProgress } = state.EmailVerification;\n  return {\n    verificationError,\n    emailVerificationInProgress: verificationInProgress,\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitVerification: ({ verificationToken }) => {\n    return dispatch(verify(verificationToken));\n  },\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst EmailVerificationPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(EmailVerificationPageComponent);\n\nexport default EmailVerificationPage;\n"]},"metadata":{},"sourceType":"module"}