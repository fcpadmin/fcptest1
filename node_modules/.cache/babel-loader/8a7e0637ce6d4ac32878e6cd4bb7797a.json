{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Tabs/Tabs.js\";\n\n/**\n * Tabs creates view area that has tabs made out of its children.\n * It only expects all its children to have 'tabLabel', 'tabLinkProps' props.\n * In addition, 'selected' prop specifies which tab is open and 'disabled' renders tab inaccessible.\n *\n * e.g.\n *  <Tabs>\n *    <Child tabLabel=\"Tab1\" tabLinkProps={{ name: 'SomeTab1Page' }}>\n *      Tab1 stuff\n *    </Child>\n *    <Child tabLabel=\"Tab2\" tabLinkProps={{ name: 'SomeTab2Page' }} selected >\n *      Tab2 stuff\n *    </Child>\n *  </Tabs>\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabNav } from '../../components';\nimport css from './Tabs.css';\n\nconst Tabs = props => {\n  const children = props.children,\n        className = props.className,\n        rootClassName = props.rootClassName,\n        navRootClassName = props.navRootClassName,\n        tabRootClassName = props.tabRootClassName;\n  const rootClasses = rootClassName || css.root;\n  const classes = classNames(rootClasses, className);\n  const tabNavTabs = React.Children.map(children, child => {\n    const _child$props = child.props,\n          tabId = _child$props.tabId,\n          tabLabel = _child$props.tabLabel,\n          tabLinkProps = _child$props.tabLinkProps; // Child components need to have TabNav props included\n\n    if (!tabId || !tabLabel || !tabLinkProps) {\n      throw new Error(\"Tabs component: a child component is missing required props.\\n        tabId: (\".concat(tabId, \")\\n        tabLabel: (\").concat(tabLabel, \")\\n        tabLinkProps: (\").concat(tabLinkProps, \")\"));\n    }\n\n    return {\n      id: tabId,\n      text: child.props.tabLabel,\n      linkProps: child.props.tabLinkProps,\n      disabled: child.props.disabled,\n      selected: child.props.selected\n    };\n  });\n  const childArray = React.Children.toArray(children);\n  const selectedTabPanel = childArray.find(c => c.props.selected); // One of the children needs to be selected\n\n  if (!selectedTabPanel) {\n    throw new Error(\"Tabs component: one Child should have 'selected' prop.\");\n  }\n\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(TabNav, {\n    rootClassName: navRootClassName,\n    tabs: tabNavTabs,\n    tabRootClassName: tabRootClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), selectedTabPanel);\n};\n\nconst node = PropTypes.node,\n      string = PropTypes.string;\nTabs.defaultProps = {\n  className: null,\n  rootClassName: null,\n  navRootClassName: null,\n  tabRootClassName: null\n};\nTabs.propTypes = {\n  children: node.isRequired,\n  className: string,\n  rootClassName: string,\n  navRootClassName: string,\n  tabRootClassName: string\n};\nexport default Tabs;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Tabs/Tabs.js"],"names":["React","PropTypes","classNames","TabNav","css","Tabs","props","children","className","rootClassName","navRootClassName","tabRootClassName","rootClasses","root","classes","tabNavTabs","Children","map","child","tabId","tabLabel","tabLinkProps","Error","id","text","linkProps","disabled","selected","childArray","toArray","selectedTabPanel","find","c","node","string","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\n * Tabs creates view area that has tabs made out of its children.\n * It only expects all its children to have 'tabLabel', 'tabLinkProps' props.\n * In addition, 'selected' prop specifies which tab is open and 'disabled' renders tab inaccessible.\n *\n * e.g.\n *  <Tabs>\n *    <Child tabLabel=\"Tab1\" tabLinkProps={{ name: 'SomeTab1Page' }}>\n *      Tab1 stuff\n *    </Child>\n *    <Child tabLabel=\"Tab2\" tabLinkProps={{ name: 'SomeTab2Page' }} selected >\n *      Tab2 stuff\n *    </Child>\n *  </Tabs>\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabNav } from '../../components';\n\nimport css from './Tabs.css';\n\nconst Tabs = props => {\n  const { children, className, rootClassName, navRootClassName, tabRootClassName } = props;\n  const rootClasses = rootClassName || css.root;\n  const classes = classNames(rootClasses, className);\n\n  const tabNavTabs = React.Children.map(children, child => {\n    const { tabId, tabLabel, tabLinkProps } = child.props;\n\n    // Child components need to have TabNav props included\n    if (!tabId || !tabLabel || !tabLinkProps) {\n      throw new Error(\n        `Tabs component: a child component is missing required props.\n        tabId: (${tabId})\n        tabLabel: (${tabLabel})\n        tabLinkProps: (${tabLinkProps})`\n      );\n    }\n\n    return {\n      id: tabId,\n      text: child.props.tabLabel,\n      linkProps: child.props.tabLinkProps,\n      disabled: child.props.disabled,\n      selected: child.props.selected,\n    };\n  });\n\n  const childArray = React.Children.toArray(children);\n  const selectedTabPanel = childArray.find(c => c.props.selected);\n\n  // One of the children needs to be selected\n  if (!selectedTabPanel) {\n    throw new Error(`Tabs component: one Child should have 'selected' prop.`);\n  }\n\n  return (\n    <div className={classes}>\n      <TabNav\n        rootClassName={navRootClassName}\n        tabs={tabNavTabs}\n        tabRootClassName={tabRootClassName}\n      />\n      {selectedTabPanel}\n    </div>\n  );\n};\n\nconst { node, string } = PropTypes;\n\nTabs.defaultProps = {\n  className: null,\n  rootClassName: null,\n  navRootClassName: null,\n  tabRootClassName: null,\n};\n\nTabs.propTypes = {\n  children: node.isRequired,\n  className: string,\n  rootClassName: string,\n  navRootClassName: string,\n  tabRootClassName: string,\n};\n\nexport default Tabs;\n"]},"metadata":{},"sourceType":"module"}