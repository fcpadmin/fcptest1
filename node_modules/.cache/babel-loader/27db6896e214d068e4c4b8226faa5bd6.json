{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SelectSingleFilter/SelectSingleFilterPlain.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, bool, func, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport css from './SelectSingleFilterPlain.css';\n\nclass SelectSingleFilterPlain extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    };\n    this.selectOption = this.selectOption.bind(this);\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  selectOption(option, e) {\n    const _this$props = this.props,\n          urlParam = _this$props.urlParam,\n          onSelect = _this$props.onSelect;\n    onSelect(urlParam, option); // blur event target if event is passed\n\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  toggleIsOpen() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          rootClassName = _this$props2.rootClassName,\n          className = _this$props2.className,\n          label = _this$props2.label,\n          options = _this$props2.options,\n          initialValue = _this$props2.initialValue,\n          twoColumns = _this$props2.twoColumns,\n          useBullets = _this$props2.useBullets;\n    const labelClass = initialValue ? css.filterLabelSelected : css.filterLabel;\n    const hasBullets = useBullets || twoColumns;\n    const optionsContainerClass = classNames({\n      [css.optionsContainerOpen]: this.state.isOpen,\n      [css.optionsContainerClosed]: !this.state.isOpen,\n      [css.hasBullets]: hasBullets,\n      [css.twoColumns]: twoColumns\n    });\n    const classes = classNames(rootClassName || css.root, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: labelClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: css.labelButton,\n      onClick: this.toggleIsOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: labelClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, label)), React.createElement(\"button\", {\n      className: css.clearButton,\n      onClick: e => this.selectOption(null, e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: 'SelectSingleFilter.plainClear',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: optionsContainerClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, options.map(option => {\n      // check if this option is selected\n      const selected = initialValue === option.key;\n      const optionClass = hasBullets && selected ? css.optionSelected : css.option; // menu item selected bullet or border class\n\n      const optionBorderClass = hasBullets ? classNames({\n        [css.optionBulletSelected]: selected,\n        [css.optionBullet]: !selected\n      }) : classNames({\n        [css.optionBorderSelected]: selected,\n        [css.optionBorder]: !selected\n      });\n      return React.createElement(\"button\", {\n        key: option.key,\n        className: optionClass,\n        onClick: () => this.selectOption(option.key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: optionBorderClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), option.label);\n    })));\n  }\n\n}\n\nSelectSingleFilterPlain.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValue: null,\n  twoColumns: false,\n  useBullets: false\n};\nSelectSingleFilterPlain.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlParam: string.isRequired,\n  label: string.isRequired,\n  onSelect: func.isRequired,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: string.isRequired\n  })).isRequired,\n  initialValue: string,\n  twoColumns: bool,\n  useBullets: bool\n};\nexport default SelectSingleFilterPlain;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SelectSingleFilter/SelectSingleFilterPlain.js"],"names":["React","Component","arrayOf","bool","func","shape","string","classNames","FormattedMessage","css","SelectSingleFilterPlain","constructor","props","state","isOpen","selectOption","bind","toggleIsOpen","option","e","urlParam","onSelect","currentTarget","blur","setState","render","rootClassName","className","label","options","initialValue","twoColumns","useBullets","labelClass","filterLabelSelected","filterLabel","hasBullets","optionsContainerClass","optionsContainerOpen","optionsContainerClosed","classes","root","labelButton","clearButton","map","selected","key","optionClass","optionSelected","optionBorderClass","optionBulletSelected","optionBullet","optionBorderSelected","optionBorder","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { arrayOf, bool, func, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\n\nimport css from './SelectSingleFilterPlain.css';\n\nclass SelectSingleFilterPlain extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOpen: true };\n    this.selectOption = this.selectOption.bind(this);\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  selectOption(option, e) {\n    const { urlParam, onSelect } = this.props;\n    onSelect(urlParam, option);\n\n    // blur event target if event is passed\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  toggleIsOpen() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      label,\n      options,\n      initialValue,\n      twoColumns,\n      useBullets,\n    } = this.props;\n\n    const labelClass = initialValue ? css.filterLabelSelected : css.filterLabel;\n\n    const hasBullets = useBullets || twoColumns;\n    const optionsContainerClass = classNames({\n      [css.optionsContainerOpen]: this.state.isOpen,\n      [css.optionsContainerClosed]: !this.state.isOpen,\n      [css.hasBullets]: hasBullets,\n      [css.twoColumns]: twoColumns,\n    });\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    return (\n      <div className={classes}>\n        <div className={labelClass}>\n          <button className={css.labelButton} onClick={this.toggleIsOpen}>\n            <span className={labelClass}>{label}</span>\n          </button>\n          <button className={css.clearButton} onClick={e => this.selectOption(null, e)}>\n            <FormattedMessage id={'SelectSingleFilter.plainClear'} />\n          </button>\n        </div>\n        <div className={optionsContainerClass}>\n          {options.map(option => {\n            // check if this option is selected\n            const selected = initialValue === option.key;\n            const optionClass = hasBullets && selected ? css.optionSelected : css.option;\n            // menu item selected bullet or border class\n            const optionBorderClass = hasBullets\n              ? classNames({\n                  [css.optionBulletSelected]: selected,\n                  [css.optionBullet]: !selected,\n                })\n              : classNames({\n                  [css.optionBorderSelected]: selected,\n                  [css.optionBorder]: !selected,\n                });\n            return (\n              <button\n                key={option.key}\n                className={optionClass}\n                onClick={() => this.selectOption(option.key)}\n              >\n                <span className={optionBorderClass} />\n                {option.label}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nSelectSingleFilterPlain.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValue: null,\n  twoColumns: false,\n  useBullets: false,\n};\n\nSelectSingleFilterPlain.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlParam: string.isRequired,\n  label: string.isRequired,\n  onSelect: func.isRequired,\n\n  options: arrayOf(\n    shape({\n      key: string.isRequired,\n      label: string.isRequired,\n    })\n  ).isRequired,\n  initialValue: string,\n  twoColumns: bool,\n  useBullets: bool,\n};\n\nexport default SelectSingleFilterPlain;\n"]},"metadata":{},"sourceType":"module"}