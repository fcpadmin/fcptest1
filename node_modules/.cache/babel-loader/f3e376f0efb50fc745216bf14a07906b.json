{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/StripePaymentForm/StripePaymentForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport { Form, PrimaryButton, ExpandingTextarea } from '../../components';\nimport config from '../../config';\nimport css from './StripePaymentForm.css';\n/**\n * Translate a Stripe API error object.\n *\n * To keep up with possible keys from the Stripe API, see:\n *\n * https://stripe.com/docs/api#errors\n *\n * Note that at least at moment, the above link doesn't list all the\n * error codes that the API returns.\n *\n * @param {Object} intl - react-intl object from injectIntl\n * @param {Object} stripeError - error object from Stripe API\n *\n * @return {String} translation message for the specific Stripe error,\n * or the given error message (not translated) if the specific error\n * type/code is not defined in the translations\n *\n */\n\nconst stripeErrorTranslation = (intl, stripeError) => {\n  const message = stripeError.message,\n        code = stripeError.code,\n        type = stripeError.type;\n\n  if (!code || !type) {\n    // Not a proper Stripe error object\n    return intl.formatMessage({\n      id: 'StripePaymentForm.genericError'\n    });\n  }\n\n  const translationId = type === 'validation_error' ? \"StripePaymentForm.stripe.validation_error.\".concat(code) : \"StripePaymentForm.stripe.\".concat(type);\n  return intl.formatMessage({\n    id: translationId,\n    defaultMessage: message\n  });\n};\n\nconst stripeElementsOptions = {\n  fonts: [{\n    family: 'sofiapro',\n    fontSmoothing: 'antialiased',\n    src: 'local(\"sofiapro\"), local(\"SofiaPro\"), local(\"Sofia Pro\"), url(\"https://assets-sharetribecom.sharetribe.com/webfonts/sofiapro/sofiapro-medium-webfont.woff2\") format(\"woff2\")'\n  }]\n};\nconst cardStyles = {\n  base: {\n    fontFamily: '\"sofiapro\", Helvetica, Arial, sans-serif',\n    fontSize: '18px',\n    fontSmoothing: 'antialiased',\n    lineHeight: '24px',\n    letterSpacing: '-0.1px',\n    color: '#4A4A4A',\n    '::placeholder': {\n      color: '#B2B2B2'\n    }\n  }\n};\nconst initialState = {\n  error: null,\n  submitting: false,\n  cardValueValid: false,\n  token: null,\n  message: ''\n};\n/**\n * Payment form that asks for credit card info using Stripe Elements.\n *\n * When the card is valid and the user submits the form, a request is\n * sent to the Stripe API to fetch a token that is passed to the\n * onSubmit prop of this form.\n *\n * See: https://stripe.com/docs/elements\n */\n\nclass StripePaymentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for StripePaymentForm');\n    }\n\n    if (config.stripe.publishableKey) {\n      this.stripe = window.Stripe(config.stripe.publishableKey);\n      const elements = this.stripe.elements(stripeElementsOptions);\n      this.card = elements.create('card', {\n        style: cardStyles\n      });\n      this.card.mount(this.cardContainer);\n      this.card.addEventListener('change', this.handleCardValueChange); // EventListener is the only way to simulate breakpoints with Stripe.\n\n      window.addEventListener('resize', () => {\n        if (window.innerWidth < 1024) {\n          this.card.update({\n            style: {\n              base: {\n                fontSize: '18px',\n                lineHeight: '24px'\n              }\n            }\n          });\n        } else {\n          this.card.update({\n            style: {\n              base: {\n                fontSize: '20px',\n                lineHeight: '32px'\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.card) {\n      this.card.removeEventListener('change', this.handleCardValueChange);\n      this.card.unmount();\n    }\n  }\n\n  handleCardValueChange(event) {\n    const _this$props = this.props,\n          intl = _this$props.intl,\n          onChange = _this$props.onChange;\n    const error = event.error,\n          complete = event.complete; // A change in the card should clear the token and trigger a call\n    // to the onChange prop with the cleared token and the current\n    // message.\n\n    this.setState(prevState => {\n      const message = prevState.message;\n      const token = null;\n      onChange({\n        token,\n        message\n      });\n      return {\n        error: error ? stripeErrorTranslation(intl, error) : null,\n        cardValueValid: complete,\n        token\n      };\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const _this$props2 = this.props,\n          onSubmit = _this$props2.onSubmit,\n          stripePaymentTokenInProgress = _this$props2.stripePaymentTokenInProgress,\n          stripePaymentToken = _this$props2.stripePaymentToken;\n\n    if (stripePaymentTokenInProgress || !this.state.cardValueValid) {\n      // Already submitting or card value incomplete/invalid\n      return;\n    }\n\n    if (stripePaymentToken) {\n      // Token already fetched for the current card value\n      onSubmit({\n        token: stripePaymentToken,\n        message: this.state.message.trim()\n      });\n      return;\n    }\n\n    const params = {\n      stripe: this.stripe,\n      card: this.card\n    };\n    this.props.onCreateStripePaymentToken(params).then(() => {\n      onSubmit({\n        token: this.props.stripePaymentToken.id,\n        message: this.state.message.trim()\n      });\n    });\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          className = _this$props3.className,\n          rootClassName = _this$props3.rootClassName,\n          inProgress = _this$props3.inProgress,\n          formId = _this$props3.formId,\n          paymentInfo = _this$props3.paymentInfo,\n          onChange = _this$props3.onChange,\n          authorDisplayName = _this$props3.authorDisplayName,\n          showInitialMessageInput = _this$props3.showInitialMessageInput,\n          intl = _this$props3.intl,\n          stripePaymentTokenInProgress = _this$props3.stripePaymentTokenInProgress,\n          stripePaymentTokenError = _this$props3.stripePaymentTokenError;\n    const submitInProgress = stripePaymentTokenInProgress || inProgress;\n    const submitDisabled = !this.state.cardValueValid || submitInProgress;\n    const classes = classNames(rootClassName || css.root, className);\n    const cardClasses = classNames(css.card, {\n      [css.cardSuccess]: this.state.cardValueValid,\n      [css.cardError]: stripePaymentTokenError && !submitInProgress\n    });\n    const messagePlaceholder = intl.formatMessage({\n      id: 'StripePaymentForm.messagePlaceholder'\n    }, {\n      name: authorDisplayName\n    });\n\n    const handleMessageChange = e => {\n      // A change in the message should call the onChange prop with\n      // the current token and the new message.\n      const message = e.target.value;\n      this.setState(prevState => {\n        const token = prevState.token;\n        const newState = {\n          token,\n          message\n        };\n        onChange(newState);\n        return newState;\n      });\n    };\n\n    const messageOptionalText = React.createElement(\"span\", {\n      className: css.messageOptional,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.messageOptionalText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }));\n    const initialMessage = showInitialMessageInput ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: css.messageHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.messageHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      className: css.messageLabel,\n      htmlFor: \"\".concat(formId, \"-message\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.messageLabel\",\n      values: {\n        messageOptionalText\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })), React.createElement(ExpandingTextarea, {\n      id: \"\".concat(formId, \"-message\"),\n      className: css.message,\n      placeholder: messagePlaceholder,\n      value: this.state.message,\n      onChange: handleMessageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })) : null;\n    return config.stripe.publishableKey ? React.createElement(Form, {\n      className: classes,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: css.paymentHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.paymentHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      className: css.paymentLabel,\n      htmlFor: \"\".concat(formId, \"-card\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.creditCardDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: cardClasses,\n      id: \"\".concat(formId, \"-card\"),\n      ref: el => {\n        this.cardContainer = el;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), stripePaymentTokenError && !submitInProgress ? React.createElement(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, stripePaymentTokenError) : null, initialMessage, React.createElement(\"div\", {\n      className: css.submitContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: css.paymentInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, paymentInfo), React.createElement(PrimaryButton, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.submitPaymentInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })))) : React.createElement(\"div\", {\n      className: css.missingStripeKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.missingStripeKey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }));\n  }\n\n}\n\nStripePaymentForm.defaultProps = {\n  className: null,\n  rootClassName: null,\n  inProgress: false,\n  onChange: () => null,\n  showInitialMessageInput: true,\n  stripePaymentToken: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      string = PropTypes.string,\n      object = PropTypes.object;\nStripePaymentForm.propTypes = {\n  className: string,\n  rootClassName: string,\n  inProgress: bool,\n  formId: string.isRequired,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  onChange: func,\n  paymentInfo: string.isRequired,\n  authorDisplayName: string.isRequired,\n  showInitialMessageInput: bool,\n  onCreateStripePaymentToken: func.isRequired,\n  stripePaymentTokenInProgress: bool.isRequired,\n  stripePaymentTokenError: bool.isRequired,\n  stripePaymentToken: object\n};\nexport default injectIntl(StripePaymentForm);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/StripePaymentForm/StripePaymentForm.js"],"names":["React","Component","PropTypes","FormattedMessage","injectIntl","intlShape","classNames","Form","PrimaryButton","ExpandingTextarea","config","css","stripeErrorTranslation","intl","stripeError","message","code","type","formatMessage","id","translationId","defaultMessage","stripeElementsOptions","fonts","family","fontSmoothing","src","cardStyles","base","fontFamily","fontSize","lineHeight","letterSpacing","color","initialState","error","submitting","cardValueValid","token","StripePaymentForm","constructor","props","state","handleCardValueChange","bind","handleSubmit","componentDidMount","window","Stripe","Error","stripe","publishableKey","elements","card","create","style","mount","cardContainer","addEventListener","innerWidth","update","componentWillUnmount","removeEventListener","unmount","event","onChange","complete","setState","prevState","preventDefault","onSubmit","stripePaymentTokenInProgress","stripePaymentToken","trim","params","onCreateStripePaymentToken","then","render","className","rootClassName","inProgress","formId","paymentInfo","authorDisplayName","showInitialMessageInput","stripePaymentTokenError","submitInProgress","submitDisabled","classes","root","cardClasses","cardSuccess","cardError","messagePlaceholder","name","handleMessageChange","e","target","value","newState","messageOptionalText","messageOptional","initialMessage","messageHeading","messageLabel","paymentHeading","paymentLabel","el","submitContainer","submitButton","missingStripeKey","defaultProps","bool","func","string","object","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport { Form, PrimaryButton, ExpandingTextarea } from '../../components';\nimport config from '../../config';\n\nimport css from './StripePaymentForm.css';\n\n/**\n * Translate a Stripe API error object.\n *\n * To keep up with possible keys from the Stripe API, see:\n *\n * https://stripe.com/docs/api#errors\n *\n * Note that at least at moment, the above link doesn't list all the\n * error codes that the API returns.\n *\n * @param {Object} intl - react-intl object from injectIntl\n * @param {Object} stripeError - error object from Stripe API\n *\n * @return {String} translation message for the specific Stripe error,\n * or the given error message (not translated) if the specific error\n * type/code is not defined in the translations\n *\n */\nconst stripeErrorTranslation = (intl, stripeError) => {\n  const { message, code, type } = stripeError;\n\n  if (!code || !type) {\n    // Not a proper Stripe error object\n    return intl.formatMessage({ id: 'StripePaymentForm.genericError' });\n  }\n\n  const translationId =\n    type === 'validation_error'\n      ? `StripePaymentForm.stripe.validation_error.${code}`\n      : `StripePaymentForm.stripe.${type}`;\n\n  return intl.formatMessage({\n    id: translationId,\n    defaultMessage: message,\n  });\n};\n\nconst stripeElementsOptions = {\n  fonts: [\n    {\n      family: 'sofiapro',\n      fontSmoothing: 'antialiased',\n      src:\n        'local(\"sofiapro\"), local(\"SofiaPro\"), local(\"Sofia Pro\"), url(\"https://assets-sharetribecom.sharetribe.com/webfonts/sofiapro/sofiapro-medium-webfont.woff2\") format(\"woff2\")',\n    },\n  ],\n};\n\nconst cardStyles = {\n  base: {\n    fontFamily: '\"sofiapro\", Helvetica, Arial, sans-serif',\n    fontSize: '18px',\n    fontSmoothing: 'antialiased',\n    lineHeight: '24px',\n    letterSpacing: '-0.1px',\n    color: '#4A4A4A',\n    '::placeholder': {\n      color: '#B2B2B2',\n    },\n  },\n};\n\nconst initialState = {\n  error: null,\n  submitting: false,\n  cardValueValid: false,\n  token: null,\n  message: '',\n};\n\n/**\n * Payment form that asks for credit card info using Stripe Elements.\n *\n * When the card is valid and the user submits the form, a request is\n * sent to the Stripe API to fetch a token that is passed to the\n * onSubmit prop of this form.\n *\n * See: https://stripe.com/docs/elements\n */\nclass StripePaymentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for StripePaymentForm');\n    }\n\n    if (config.stripe.publishableKey) {\n      this.stripe = window.Stripe(config.stripe.publishableKey);\n      const elements = this.stripe.elements(stripeElementsOptions);\n      this.card = elements.create('card', { style: cardStyles });\n      this.card.mount(this.cardContainer);\n      this.card.addEventListener('change', this.handleCardValueChange);\n      // EventListener is the only way to simulate breakpoints with Stripe.\n      window.addEventListener('resize', () => {\n        if (window.innerWidth < 1024) {\n          this.card.update({ style: { base: { fontSize: '18px', lineHeight: '24px' } } });\n        } else {\n          this.card.update({ style: { base: { fontSize: '20px', lineHeight: '32px' } } });\n        }\n      });\n    }\n  }\n  componentWillUnmount() {\n    if (this.card) {\n      this.card.removeEventListener('change', this.handleCardValueChange);\n      this.card.unmount();\n    }\n  }\n  handleCardValueChange(event) {\n    const { intl, onChange } = this.props;\n    const { error, complete } = event;\n\n    // A change in the card should clear the token and trigger a call\n    // to the onChange prop with the cleared token and the current\n    // message.\n\n    this.setState(prevState => {\n      const { message } = prevState;\n      const token = null;\n      onChange({ token, message });\n      return {\n        error: error ? stripeErrorTranslation(intl, error) : null,\n        cardValueValid: complete,\n        token,\n      };\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const { onSubmit, stripePaymentTokenInProgress, stripePaymentToken } = this.props;\n\n    if (stripePaymentTokenInProgress || !this.state.cardValueValid) {\n      // Already submitting or card value incomplete/invalid\n      return;\n    }\n\n    if (stripePaymentToken) {\n      // Token already fetched for the current card value\n      onSubmit({ token: stripePaymentToken, message: this.state.message.trim() });\n      return;\n    }\n\n    const params = {\n      stripe: this.stripe,\n      card: this.card,\n    };\n\n    this.props.onCreateStripePaymentToken(params).then(() => {\n      onSubmit({ token: this.props.stripePaymentToken.id, message: this.state.message.trim() });\n    });\n  }\n  render() {\n    const {\n      className,\n      rootClassName,\n      inProgress,\n      formId,\n      paymentInfo,\n      onChange,\n      authorDisplayName,\n      showInitialMessageInput,\n      intl,\n      stripePaymentTokenInProgress,\n      stripePaymentTokenError,\n    } = this.props;\n    const submitInProgress = stripePaymentTokenInProgress || inProgress;\n    const submitDisabled = !this.state.cardValueValid || submitInProgress;\n    const classes = classNames(rootClassName || css.root, className);\n    const cardClasses = classNames(css.card, {\n      [css.cardSuccess]: this.state.cardValueValid,\n      [css.cardError]: stripePaymentTokenError && !submitInProgress,\n    });\n\n    const messagePlaceholder = intl.formatMessage(\n      { id: 'StripePaymentForm.messagePlaceholder' },\n      { name: authorDisplayName }\n    );\n\n    const handleMessageChange = e => {\n      // A change in the message should call the onChange prop with\n      // the current token and the new message.\n      const message = e.target.value;\n      this.setState(prevState => {\n        const { token } = prevState;\n        const newState = { token, message };\n        onChange(newState);\n        return newState;\n      });\n    };\n\n    const messageOptionalText = (\n      <span className={css.messageOptional}>\n        <FormattedMessage id=\"StripePaymentForm.messageOptionalText\" />\n      </span>\n    );\n\n    const initialMessage = showInitialMessageInput ? (\n      <div>\n        <h3 className={css.messageHeading}>\n          <FormattedMessage id=\"StripePaymentForm.messageHeading\" />\n        </h3>\n        <label className={css.messageLabel} htmlFor={`${formId}-message`}>\n          <FormattedMessage id=\"StripePaymentForm.messageLabel\" values={{ messageOptionalText }} />\n        </label>\n        <ExpandingTextarea\n          id={`${formId}-message`}\n          className={css.message}\n          placeholder={messagePlaceholder}\n          value={this.state.message}\n          onChange={handleMessageChange}\n        />\n      </div>\n    ) : null;\n\n    return config.stripe.publishableKey ? (\n      <Form className={classes} onSubmit={this.handleSubmit}>\n        <h3 className={css.paymentHeading}>\n          <FormattedMessage id=\"StripePaymentForm.paymentHeading\" />\n        </h3>\n        <label className={css.paymentLabel} htmlFor={`${formId}-card`}>\n          <FormattedMessage id=\"StripePaymentForm.creditCardDetails\" />\n        </label>\n        <div\n          className={cardClasses}\n          id={`${formId}-card`}\n          ref={el => {\n            this.cardContainer = el;\n          }}\n        />\n        {stripePaymentTokenError && !submitInProgress ? (\n          <span style={{ color: 'red' }}>{stripePaymentTokenError}</span>\n        ) : null}\n        {initialMessage}\n        <div className={css.submitContainer}>\n          <p className={css.paymentInfo}>{paymentInfo}</p>\n          <PrimaryButton\n            className={css.submitButton}\n            type=\"submit\"\n            inProgress={submitInProgress}\n            disabled={submitDisabled}\n          >\n            <FormattedMessage id=\"StripePaymentForm.submitPaymentInfo\" />\n          </PrimaryButton>\n        </div>\n      </Form>\n    ) : (\n      <div className={css.missingStripeKey}>\n        <FormattedMessage id=\"StripePaymentForm.missingStripeKey\" />\n      </div>\n    );\n  }\n}\n\nStripePaymentForm.defaultProps = {\n  className: null,\n  rootClassName: null,\n  inProgress: false,\n  onChange: () => null,\n  showInitialMessageInput: true,\n  stripePaymentToken: null,\n};\n\nconst { bool, func, string, object } = PropTypes;\n\nStripePaymentForm.propTypes = {\n  className: string,\n  rootClassName: string,\n  inProgress: bool,\n  formId: string.isRequired,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  onChange: func,\n  paymentInfo: string.isRequired,\n  authorDisplayName: string.isRequired,\n  showInitialMessageInput: bool,\n  onCreateStripePaymentToken: func.isRequired,\n  stripePaymentTokenInProgress: bool.isRequired,\n  stripePaymentTokenError: bool.isRequired,\n  stripePaymentToken: object,\n};\n\nexport default injectIntl(StripePaymentForm);\n"]},"metadata":{},"sourceType":"module"}