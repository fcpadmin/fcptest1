{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/AddImages/AddImages.js\";\n\n/**\n * Creates a sortable image grid with children added to the end of the created grid.\n *\n * Example:\n * // images = [{ id: 'tempId', imageId: 'realIdFromAPI', file: File }];\n * <AddImages images={images}>\n *   <input type=\"file\" accept=\"images/*\" onChange={handleChange} />\n * </AddImages>\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { ImageFromFile, ResponsiveImage, IconSpinner } from '../../components';\nimport css from './AddImages.css';\nimport RemoveImageButton from './RemoveImageButton';\n\nconst ThumbnailWrapper = props => {\n  const className = props.className,\n        image = props.image,\n        savedImageAltText = props.savedImageAltText,\n        onRemoveImage = props.onRemoveImage;\n\n  const handleRemoveClick = e => {\n    e.stopPropagation();\n    onRemoveImage(image.id);\n  };\n\n  if (image.file) {\n    // Add remove button only when the image has been uploaded and can be removed\n    const removeButton = image.imageId ? React.createElement(RemoveImageButton, {\n      onClick: handleRemoveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }) : null; // While image is uploading we show overlay on top of thumbnail\n\n    const uploadingOverlay = !image.imageId ? React.createElement(\"div\", {\n      className: css.thumbnailLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(IconSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })) : null;\n    return React.createElement(ImageFromFile, {\n      id: image.id,\n      className: className,\n      rootClassName: css.thumbnail,\n      file: image.file,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, removeButton, uploadingOverlay);\n  } else {\n    const classes = classNames(css.thumbnail, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.threeToTwoWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.aspectWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(ResponsiveImage, {\n      rootClassName: css.rootForImage,\n      image: image,\n      alt: savedImageAltText,\n      variants: ['landscape-crop', 'landscape-crop2x'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(RemoveImageButton, {\n      onClick: handleRemoveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })));\n  }\n};\n\nThumbnailWrapper.defaultProps = {\n  className: null\n};\nconst array = PropTypes.array,\n      func = PropTypes.func,\n      node = PropTypes.node,\n      string = PropTypes.string,\n      object = PropTypes.object;\nThumbnailWrapper.propTypes = {\n  className: string,\n  image: object.isRequired,\n  savedImageAltText: string.isRequired,\n  onRemoveImage: func.isRequired\n};\n\nconst AddImages = props => {\n  const children = props.children,\n        className = props.className,\n        thumbnailClassName = props.thumbnailClassName,\n        images = props.images,\n        savedImageAltText = props.savedImageAltText,\n        onRemoveImage = props.onRemoveImage;\n  const classes = classNames(css.root, className);\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, images.map((image, index) => {\n    return React.createElement(ThumbnailWrapper, {\n      image: image,\n      index: index,\n      key: image.id.uuid || image.id,\n      className: thumbnailClassName,\n      savedImageAltText: savedImageAltText,\n      onRemoveImage: onRemoveImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  }), children);\n};\n\nAddImages.defaultProps = {\n  className: null,\n  thumbnailClassName: null,\n  images: []\n};\nAddImages.propTypes = {\n  images: array,\n  children: node.isRequired,\n  className: string,\n  thumbnailClassName: string,\n  savedImageAltText: string.isRequired,\n  onRemoveImage: func.isRequired\n};\nexport default AddImages;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/AddImages/AddImages.js"],"names":["React","PropTypes","classNames","ImageFromFile","ResponsiveImage","IconSpinner","css","RemoveImageButton","ThumbnailWrapper","props","className","image","savedImageAltText","onRemoveImage","handleRemoveClick","e","stopPropagation","id","file","removeButton","imageId","uploadingOverlay","thumbnailLoading","thumbnail","classes","threeToTwoWrapper","aspectWrapper","rootForImage","defaultProps","array","func","node","string","object","propTypes","isRequired","AddImages","children","thumbnailClassName","images","root","map","index","uuid"],"mappings":"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","sourcesContent":["/**\n * Creates a sortable image grid with children added to the end of the created grid.\n *\n * Example:\n * // images = [{ id: 'tempId', imageId: 'realIdFromAPI', file: File }];\n * <AddImages images={images}>\n *   <input type=\"file\" accept=\"images/*\" onChange={handleChange} />\n * </AddImages>\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { ImageFromFile, ResponsiveImage, IconSpinner } from '../../components';\n\nimport css from './AddImages.css';\nimport RemoveImageButton from './RemoveImageButton';\n\nconst ThumbnailWrapper = props => {\n  const { className, image, savedImageAltText, onRemoveImage } = props;\n  const handleRemoveClick = e => {\n    e.stopPropagation();\n    onRemoveImage(image.id);\n  };\n\n  if (image.file) {\n    // Add remove button only when the image has been uploaded and can be removed\n    const removeButton = image.imageId ? <RemoveImageButton onClick={handleRemoveClick} /> : null;\n\n    // While image is uploading we show overlay on top of thumbnail\n    const uploadingOverlay = !image.imageId ? (\n      <div className={css.thumbnailLoading}>\n        <IconSpinner />\n      </div>\n    ) : null;\n\n    return (\n      <ImageFromFile\n        id={image.id}\n        className={className}\n        rootClassName={css.thumbnail}\n        file={image.file}\n      >\n        {removeButton}\n        {uploadingOverlay}\n      </ImageFromFile>\n    );\n  } else {\n    const classes = classNames(css.thumbnail, className);\n    return (\n      <div className={classes}>\n        <div className={css.threeToTwoWrapper}>\n          <div className={css.aspectWrapper}>\n            <ResponsiveImage\n              rootClassName={css.rootForImage}\n              image={image}\n              alt={savedImageAltText}\n              variants={['landscape-crop', 'landscape-crop2x']}\n            />\n          </div>\n          <RemoveImageButton onClick={handleRemoveClick} />\n        </div>\n      </div>\n    );\n  }\n};\n\nThumbnailWrapper.defaultProps = { className: null };\n\nconst { array, func, node, string, object } = PropTypes;\n\nThumbnailWrapper.propTypes = {\n  className: string,\n  image: object.isRequired,\n  savedImageAltText: string.isRequired,\n  onRemoveImage: func.isRequired,\n};\n\nconst AddImages = props => {\n  const {\n    children,\n    className,\n    thumbnailClassName,\n    images,\n    savedImageAltText,\n    onRemoveImage,\n  } = props;\n  const classes = classNames(css.root, className);\n  return (\n    <div className={classes}>\n      {images.map((image, index) => {\n        return (\n          <ThumbnailWrapper\n            image={image}\n            index={index}\n            key={image.id.uuid || image.id}\n            className={thumbnailClassName}\n            savedImageAltText={savedImageAltText}\n            onRemoveImage={onRemoveImage}\n          />\n        );\n      })}\n      {children}\n    </div>\n  );\n};\n\nAddImages.defaultProps = { className: null, thumbnailClassName: null, images: [] };\n\nAddImages.propTypes = {\n  images: array,\n  children: node.isRequired,\n  className: string,\n  thumbnailClassName: string,\n  savedImageAltText: string.isRequired,\n  onRemoveImage: func.isRequired,\n};\n\nexport default AddImages;\n"]},"metadata":{},"sourceType":"module"}