{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/EditListingLocationPanel/EditListingLocationPanel.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { LISTING_STATE_DRAFT } from '../../util/types';\nimport { ensureOwnListing } from '../../util/data';\nimport { ListingLink } from '../../components';\nimport { EditListingLocationForm } from '../../forms';\nimport css from './EditListingLocationPanel.css';\n\nclass EditListingLocationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.getInitialValues = this.getInitialValues.bind(this);\n    this.state = {\n      initialValues: this.getInitialValues()\n    };\n  }\n\n  getInitialValues() {\n    const listing = this.props.listing;\n    const currentListing = ensureOwnListing(listing);\n    const _currentListing$attri = currentListing.attributes,\n          geolocation = _currentListing$attri.geolocation,\n          publicData = _currentListing$attri.publicData; // Only render current search if full place object is available in the URL params\n    // TODO bounds are missing - those need to be queried directly from Google Places\n\n    const locationFieldsPresent = publicData && publicData.location && publicData.location.address && geolocation;\n    const location = publicData && publicData.location ? publicData.location : {};\n    const address = location.address,\n          building = location.building;\n    return {\n      building,\n      location: locationFieldsPresent ? {\n        search: address,\n        selectedPlace: {\n          address,\n          origin: geolocation\n        }\n      } : null\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          listing = _this$props.listing,\n          onSubmit = _this$props.onSubmit,\n          onChange = _this$props.onChange,\n          submitButtonText = _this$props.submitButtonText,\n          panelUpdated = _this$props.panelUpdated,\n          updateInProgress = _this$props.updateInProgress,\n          errors = _this$props.errors;\n    const classes = classNames(rootClassName || css.root, className);\n    const currentListing = ensureOwnListing(listing);\n    const isPublished = currentListing.id && currentListing.attributes.state !== LISTING_STATE_DRAFT;\n    const panelTitle = isPublished ? React.createElement(FormattedMessage, {\n      id: \"EditListingLocationPanel.title\",\n      values: {\n        listingTitle: React.createElement(ListingLink, {\n          listing: listing,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : React.createElement(FormattedMessage, {\n      id: \"EditListingLocationPanel.createListingTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: css.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, panelTitle), React.createElement(EditListingLocationForm, {\n      className: css.form,\n      initialValues: this.state.initialValues,\n      onSubmit: values => {\n        const _values$building = values.building,\n              building = _values$building === void 0 ? '' : _values$building,\n              location = values.location;\n        const _location$selectedPla = location.selectedPlace,\n              address = _location$selectedPla.address,\n              origin = _location$selectedPla.origin;\n        const updateValues = {\n          geolocation: origin,\n          publicData: {\n            location: {\n              address,\n              building\n            }\n          }\n        };\n        this.setState({\n          initialValues: {\n            building,\n            location: {\n              search: address,\n              selectedPlace: {\n                address,\n                origin\n              }\n            }\n          }\n        });\n        onSubmit(updateValues);\n      },\n      onChange: onChange,\n      saveActionMsg: submitButtonText,\n      updated: panelUpdated,\n      updateInProgress: updateInProgress,\n      fetchErrors: errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst func = PropTypes.func,\n      object = PropTypes.object,\n      string = PropTypes.string,\n      bool = PropTypes.bool;\nEditListingLocationPanel.defaultProps = {\n  className: null,\n  rootClassName: null,\n  listing: null\n};\nEditListingLocationPanel.propTypes = {\n  className: string,\n  rootClassName: string,\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: object,\n  onSubmit: func.isRequired,\n  onChange: func.isRequired,\n  submitButtonText: string.isRequired,\n  panelUpdated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  errors: object.isRequired\n};\nexport default EditListingLocationPanel;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/EditListingLocationPanel/EditListingLocationPanel.js"],"names":["React","Component","PropTypes","classNames","FormattedMessage","LISTING_STATE_DRAFT","ensureOwnListing","ListingLink","EditListingLocationForm","css","EditListingLocationPanel","constructor","props","getInitialValues","bind","state","initialValues","listing","currentListing","attributes","geolocation","publicData","locationFieldsPresent","location","address","building","search","selectedPlace","origin","render","className","rootClassName","onSubmit","onChange","submitButtonText","panelUpdated","updateInProgress","errors","classes","root","isPublished","id","panelTitle","listingTitle","title","form","values","updateValues","setState","func","object","string","bool","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { LISTING_STATE_DRAFT } from '../../util/types';\nimport { ensureOwnListing } from '../../util/data';\nimport { ListingLink } from '../../components';\nimport { EditListingLocationForm } from '../../forms';\n\nimport css from './EditListingLocationPanel.css';\n\nclass EditListingLocationPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getInitialValues = this.getInitialValues.bind(this);\n\n    this.state = {\n      initialValues: this.getInitialValues(),\n    };\n  }\n\n  getInitialValues() {\n    const { listing } = this.props;\n    const currentListing = ensureOwnListing(listing);\n    const { geolocation, publicData } = currentListing.attributes;\n\n    // Only render current search if full place object is available in the URL params\n    // TODO bounds are missing - those need to be queried directly from Google Places\n    const locationFieldsPresent =\n      publicData && publicData.location && publicData.location.address && geolocation;\n    const location = publicData && publicData.location ? publicData.location : {};\n    const { address, building } = location;\n\n    return {\n      building,\n      location: locationFieldsPresent\n        ? {\n            search: address,\n            selectedPlace: { address, origin: geolocation },\n          }\n        : null,\n    };\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      listing,\n      onSubmit,\n      onChange,\n      submitButtonText,\n      panelUpdated,\n      updateInProgress,\n      errors,\n    } = this.props;\n\n    const classes = classNames(rootClassName || css.root, className);\n    const currentListing = ensureOwnListing(listing);\n\n    const isPublished =\n      currentListing.id && currentListing.attributes.state !== LISTING_STATE_DRAFT;\n    const panelTitle = isPublished ? (\n      <FormattedMessage\n        id=\"EditListingLocationPanel.title\"\n        values={{ listingTitle: <ListingLink listing={listing} /> }}\n      />\n    ) : (\n      <FormattedMessage id=\"EditListingLocationPanel.createListingTitle\" />\n    );\n\n    return (\n      <div className={classes}>\n        <h1 className={css.title}>{panelTitle}</h1>\n        <EditListingLocationForm\n          className={css.form}\n          initialValues={this.state.initialValues}\n          onSubmit={values => {\n            const { building = '', location } = values;\n            const {\n              selectedPlace: { address, origin },\n            } = location;\n            const updateValues = {\n              geolocation: origin,\n              publicData: {\n                location: { address, building },\n              },\n            };\n            this.setState({\n              initialValues: {\n                building,\n                location: { search: address, selectedPlace: { address, origin } },\n              },\n            });\n            onSubmit(updateValues);\n          }}\n          onChange={onChange}\n          saveActionMsg={submitButtonText}\n          updated={panelUpdated}\n          updateInProgress={updateInProgress}\n          fetchErrors={errors}\n        />\n      </div>\n    );\n  }\n}\n\nconst { func, object, string, bool } = PropTypes;\n\nEditListingLocationPanel.defaultProps = {\n  className: null,\n  rootClassName: null,\n  listing: null,\n};\n\nEditListingLocationPanel.propTypes = {\n  className: string,\n  rootClassName: string,\n\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: object,\n\n  onSubmit: func.isRequired,\n  onChange: func.isRequired,\n  submitButtonText: string.isRequired,\n  panelUpdated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  errors: object.isRequired,\n};\n\nexport default EditListingLocationPanel;\n"]},"metadata":{},"sourceType":"module"}