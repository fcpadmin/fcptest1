{"ast":null,"code":"import { ensureTransaction } from './data';\n/**\n * Transitions\n *\n * These strings must sync with values defined in Flex API,\n * since transaction objects given by API contain info about last transitions.\n * All the actions in API side happen in transitions,\n * so we need to understand what those strings mean.\n */\n// When a customer makes a booking to a listing, a transaction is\n// created with the initial request transition.\n\nexport const TRANSITION_REQUEST = 'transition/request'; // A customer can also initiate a transaction with an enquiry, and\n// then transition that with a request.\n\nexport const TRANSITION_ENQUIRE = 'transition/enquire';\nexport const TRANSITION_REQUEST_AFTER_ENQUIRY = 'transition/request-after-enquiry'; // When the provider accepts or declines a transaction from the\n// SalePage, it is transitioned with the accept or decline transition.\n\nexport const TRANSITION_ACCEPT = 'transition/accept';\nexport const TRANSITION_DECLINE = 'transition/decline'; // The backend automatically expire the transaction.\n\nexport const TRANSITION_EXPIRE = 'transition/expire'; // Admin can also cancel the transition.\n\nexport const TRANSITION_CANCEL = 'transition/cancel'; // The backend will mark the transaction completed.\n\nexport const TRANSITION_COMPLETE = 'transition/complete'; // Reviews are given through transaction transitions. Review 1 can be\n// by provider or customer, and review 2 will be the other party of\n// the transaction.\n\nexport const TRANSITION_REVIEW_1_BY_PROVIDER = 'transition/review-1-by-provider';\nexport const TRANSITION_REVIEW_2_BY_PROVIDER = 'transition/review-2-by-provider';\nexport const TRANSITION_REVIEW_1_BY_CUSTOMER = 'transition/review-1-by-customer';\nexport const TRANSITION_REVIEW_2_BY_CUSTOMER = 'transition/review-2-by-customer';\nexport const TRANSITION_EXPIRE_CUSTOMER_REVIEW_PERIOD = 'transition/expire-customer-review-period';\nexport const TRANSITION_EXPIRE_PROVIDER_REVIEW_PERIOD = 'transition/expire-provider-review-period';\nexport const TRANSITION_EXPIRE_REVIEW_PERIOD = 'transition/expire-review-period';\n/**\n * Actors\n *\n * There are 4 different actors that might initiate transitions:\n */\n// Roles of actors that perform transaction transitions\n\nexport const TX_TRANSITION_ACTOR_CUSTOMER = 'customer';\nexport const TX_TRANSITION_ACTOR_PROVIDER = 'provider';\nexport const TX_TRANSITION_ACTOR_SYSTEM = 'system';\nexport const TX_TRANSITION_ACTOR_OPERATOR = 'operator';\nexport const TX_TRANSITION_ACTORS = [TX_TRANSITION_ACTOR_CUSTOMER, TX_TRANSITION_ACTOR_PROVIDER, TX_TRANSITION_ACTOR_SYSTEM, TX_TRANSITION_ACTOR_OPERATOR];\n/**\n * States\n *\n * These constants are only for making it clear how transitions work together.\n * You should not use these constants outside of this file.\n *\n * Note: these states are not in sync with states used transaction process definitions\n *       in Marketplace API. Only last transitions are passed along transaction object.\n */\n\nconst STATE_INITIAL = 'initial';\nconst STATE_ENQUIRY = 'enquiry';\nconst STATE_PREAUTHORIZED = 'preauthorized';\nconst STATE_DECLINED = 'declined';\nconst STATE_ACCEPTED = 'accepted';\nconst STATE_CANCELED = 'canceled';\nconst STATE_DELIVERED = 'delivered';\nconst STATE_REVIEWED = 'reviewed';\nconst STATE_REVIEWED_BY_CUSTOMER = 'reviewed-by-customer';\nconst STATE_REVIEWED_BY_PROVIDER = 'reviewed-by-provider';\n/**\n * Description of transaction process\n *\n * You should keep this in sync with transaction process defined in Marketplace API\n *\n * Note: we don't use yet any state machine library,\n *       but this description format is following Xstate (FSM library)\n *       https://xstate.js.org/docs/\n */\n\nconst stateDescription = {\n  // id is defined only to support Xstate format.\n  // However if you have multiple transaction processes defined,\n  // it is best to keep them in sync with transaction process aliases.\n  id: 'preauth-with-nightly-booking/release-1',\n  // This 'initial' state is a starting point for new transaction\n  initial: STATE_INITIAL,\n  // States\n  states: {\n    [STATE_INITIAL]: {\n      on: {\n        [TRANSITION_ENQUIRE]: STATE_ENQUIRY,\n        [TRANSITION_REQUEST]: STATE_PREAUTHORIZED\n      }\n    },\n    [STATE_ENQUIRY]: {\n      on: {\n        [TRANSITION_REQUEST_AFTER_ENQUIRY]: STATE_PREAUTHORIZED\n      }\n    },\n    [STATE_PREAUTHORIZED]: {\n      on: {\n        [TRANSITION_DECLINE]: STATE_DECLINED,\n        [TRANSITION_EXPIRE]: STATE_DECLINED,\n        [TRANSITION_ACCEPT]: STATE_ACCEPTED\n      }\n    },\n    [STATE_DECLINED]: {},\n    [STATE_ACCEPTED]: {\n      on: {\n        [TRANSITION_CANCEL]: STATE_CANCELED,\n        [TRANSITION_COMPLETE]: STATE_DELIVERED\n      }\n    },\n    [STATE_CANCELED]: {},\n    [STATE_DELIVERED]: {\n      on: {\n        [TRANSITION_EXPIRE_REVIEW_PERIOD]: STATE_REVIEWED,\n        [TRANSITION_REVIEW_1_BY_CUSTOMER]: STATE_REVIEWED_BY_CUSTOMER,\n        [TRANSITION_REVIEW_1_BY_PROVIDER]: STATE_REVIEWED_BY_PROVIDER\n      }\n    },\n    [STATE_REVIEWED_BY_CUSTOMER]: {\n      on: {\n        [TRANSITION_REVIEW_2_BY_PROVIDER]: STATE_REVIEWED,\n        [TRANSITION_EXPIRE_PROVIDER_REVIEW_PERIOD]: STATE_REVIEWED\n      }\n    },\n    [STATE_REVIEWED_BY_PROVIDER]: {\n      on: {\n        [TRANSITION_REVIEW_2_BY_CUSTOMER]: STATE_REVIEWED,\n        [TRANSITION_EXPIRE_CUSTOMER_REVIEW_PERIOD]: STATE_REVIEWED\n      }\n    },\n    [STATE_REVIEWED]: {\n      type: 'final'\n    }\n  }\n}; // Note: currently we assume that state description doesn't contain nested states.\n\nconst statesFromStateDescription = description => description.states || {}; // Get all the transitions from states object in an array\n\n\nconst getTransitions = states => {\n  const stateNames = Object.keys(states);\n\n  const transitionsReducer = (transitionArray, name) => {\n    const stateTransitions = states[name] && states[name].on;\n    const transitionKeys = stateTransitions ? Object.keys(stateTransitions) : [];\n    return [...transitionArray, ...transitionKeys.map(key => ({\n      key,\n      value: stateTransitions[key]\n    }))];\n  };\n\n  return stateNames.reduce(transitionsReducer, []);\n}; // This is a list of all the transitions that this app should be able to handle.\n\n\nexport const TRANSITIONS = getTransitions(statesFromStateDescription(stateDescription)).map(t => t.key); // This function returns a function that has given stateDesc in scope chain.\n\nconst getTransitionsToStateFn = stateDesc => state => getTransitions(statesFromStateDescription(stateDesc)).filter(t => t.value === state).map(t => t.key); // Get all the transitions that lead to specified state.\n\n\nconst getTransitionsToState = getTransitionsToStateFn(stateDescription); // This is needed to fetch transactions that need response from provider.\n// I.e. transactions which provider needs to accept or decline\n\nexport const transitionsToRequested = getTransitionsToState(STATE_PREAUTHORIZED);\n/**\n * Helper functions to figure out if transaction is in a specific state.\n * State is based on lastTransition given by transaction object and state description.\n */\n\nconst txLastTransition = tx => ensureTransaction(tx).attributes.lastTransition; // DEPRECATED: use txIsDelivered instead\n\n\nexport const txIsCompleted = tx => txLastTransition(tx) === TRANSITION_COMPLETE;\nexport const txIsEnquired = tx => getTransitionsToState(STATE_ENQUIRY).includes(txLastTransition(tx)); // Note: state name used in Marketplace API docs (and here) is actually preauthorized\n// However, word \"requested\" is used in many places so that we decided to keep it.\n\nexport const txIsRequested = tx => getTransitionsToState(STATE_PREAUTHORIZED).includes(txLastTransition(tx));\nexport const txIsAccepted = tx => getTransitionsToState(STATE_ACCEPTED).includes(txLastTransition(tx));\nexport const txIsDeclined = tx => getTransitionsToState(STATE_DECLINED).includes(txLastTransition(tx));\nexport const txIsCanceled = tx => getTransitionsToState(STATE_CANCELED).includes(txLastTransition(tx));\nexport const txIsDelivered = tx => getTransitionsToState(STATE_DELIVERED).includes(txLastTransition(tx));\nconst firstReviewTransitions = [...getTransitionsToState(STATE_REVIEWED_BY_CUSTOMER), ...getTransitionsToState(STATE_REVIEWED_BY_PROVIDER)];\nexport const txIsInFirstReview = tx => firstReviewTransitions.includes(txLastTransition(tx));\nexport const txIsInFirstReviewBy = (tx, isCustomer) => isCustomer ? getTransitionsToState(STATE_REVIEWED_BY_CUSTOMER).includes(txLastTransition(tx)) : getTransitionsToState(STATE_REVIEWED_BY_PROVIDER).includes(txLastTransition(tx));\nexport const txIsReviewed = tx => getTransitionsToState(STATE_REVIEWED).includes(txLastTransition(tx));\n/**\n * Helper functions to figure out if transaction has passed a given state.\n * This is based on transitions history given by transaction object.\n */\n\nconst txTransitions = tx => ensureTransaction(tx).attributes.transitions || [];\n\nconst hasPassedTransition = (transitionName, tx) => !!txTransitions(tx).find(t => t.transition === transitionName);\n\nconst hasPassedStateFn = state => tx => getTransitionsToState(state).filter(t => hasPassedTransition(t, tx)).length > 0;\n\nexport const txHasBeenAccepted = hasPassedStateFn(STATE_ACCEPTED);\nexport const txHasBeenDelivered = hasPassedStateFn(STATE_DELIVERED);\n/**\n * Other transaction related utility functions\n */\n\nexport const transitionIsReviewed = transition => getTransitionsToState(STATE_REVIEWED).includes(transition);\nexport const transitionIsFirstReviewedBy = (transition, isCustomer) => isCustomer ? getTransitionsToState(STATE_REVIEWED_BY_CUSTOMER).includes(transition) : getTransitionsToState(STATE_REVIEWED_BY_PROVIDER).includes(transition);\nexport const getReview1Transition = isCustomer => isCustomer ? TRANSITION_REVIEW_1_BY_CUSTOMER : TRANSITION_REVIEW_1_BY_PROVIDER;\nexport const getReview2Transition = isCustomer => isCustomer ? TRANSITION_REVIEW_2_BY_CUSTOMER : TRANSITION_REVIEW_2_BY_PROVIDER; // Check if a transition is the kind that should be rendered\n// when showing transition history (e.g. ActivityFeed)\n// The first transition and most of the expiration transitions made by system are not relevant\n\nexport const isRelevantPastTransition = transition => {\n  return [TRANSITION_ACCEPT, TRANSITION_CANCEL, TRANSITION_COMPLETE, TRANSITION_DECLINE, TRANSITION_EXPIRE, TRANSITION_REQUEST, TRANSITION_REQUEST_AFTER_ENQUIRY, TRANSITION_REVIEW_1_BY_CUSTOMER, TRANSITION_REVIEW_1_BY_PROVIDER, TRANSITION_REVIEW_2_BY_CUSTOMER, TRANSITION_REVIEW_2_BY_PROVIDER].includes(transition);\n};\nexport const isCustomerReview = transition => {\n  return [TRANSITION_REVIEW_1_BY_CUSTOMER, TRANSITION_REVIEW_2_BY_CUSTOMER].includes(transition);\n};\nexport const isProviderReview = transition => {\n  return [TRANSITION_REVIEW_1_BY_PROVIDER, TRANSITION_REVIEW_2_BY_PROVIDER].includes(transition);\n};\nexport const getUserTxRole = (currentUserId, transaction) => {\n  const tx = ensureTransaction(transaction);\n  const customer = tx.customer;\n\n  if (currentUserId && currentUserId.uuid && tx.id && customer.id) {\n    // user can be either customer or provider\n    return currentUserId.uuid === customer.id.uuid ? TX_TRANSITION_ACTOR_CUSTOMER : TX_TRANSITION_ACTOR_PROVIDER;\n  } else {\n    throw new Error(\"Parameters for \\\"userIsCustomer\\\" function were wrong.\\n      currentUserId: \".concat(currentUserId, \", transaction: \").concat(transaction));\n  }\n};\nexport const txRoleIsProvider = userRole => userRole === TX_TRANSITION_ACTOR_PROVIDER;\nexport const txRoleIsCustomer = userRole => userRole === TX_TRANSITION_ACTOR_CUSTOMER;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/util/transaction.js"],"names":["ensureTransaction","TRANSITION_REQUEST","TRANSITION_ENQUIRE","TRANSITION_REQUEST_AFTER_ENQUIRY","TRANSITION_ACCEPT","TRANSITION_DECLINE","TRANSITION_EXPIRE","TRANSITION_CANCEL","TRANSITION_COMPLETE","TRANSITION_REVIEW_1_BY_PROVIDER","TRANSITION_REVIEW_2_BY_PROVIDER","TRANSITION_REVIEW_1_BY_CUSTOMER","TRANSITION_REVIEW_2_BY_CUSTOMER","TRANSITION_EXPIRE_CUSTOMER_REVIEW_PERIOD","TRANSITION_EXPIRE_PROVIDER_REVIEW_PERIOD","TRANSITION_EXPIRE_REVIEW_PERIOD","TX_TRANSITION_ACTOR_CUSTOMER","TX_TRANSITION_ACTOR_PROVIDER","TX_TRANSITION_ACTOR_SYSTEM","TX_TRANSITION_ACTOR_OPERATOR","TX_TRANSITION_ACTORS","STATE_INITIAL","STATE_ENQUIRY","STATE_PREAUTHORIZED","STATE_DECLINED","STATE_ACCEPTED","STATE_CANCELED","STATE_DELIVERED","STATE_REVIEWED","STATE_REVIEWED_BY_CUSTOMER","STATE_REVIEWED_BY_PROVIDER","stateDescription","id","initial","states","on","type","statesFromStateDescription","description","getTransitions","stateNames","Object","keys","transitionsReducer","transitionArray","name","stateTransitions","transitionKeys","map","key","value","reduce","TRANSITIONS","t","getTransitionsToStateFn","stateDesc","state","filter","getTransitionsToState","transitionsToRequested","txLastTransition","tx","attributes","lastTransition","txIsCompleted","txIsEnquired","includes","txIsRequested","txIsAccepted","txIsDeclined","txIsCanceled","txIsDelivered","firstReviewTransitions","txIsInFirstReview","txIsInFirstReviewBy","isCustomer","txIsReviewed","txTransitions","transitions","hasPassedTransition","transitionName","find","transition","hasPassedStateFn","length","txHasBeenAccepted","txHasBeenDelivered","transitionIsReviewed","transitionIsFirstReviewedBy","getReview1Transition","getReview2Transition","isRelevantPastTransition","isCustomerReview","isProviderReview","getUserTxRole","currentUserId","transaction","customer","uuid","Error","txRoleIsProvider","userRole","txRoleIsCustomer"],"mappings":"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","sourcesContent":["import { ensureTransaction } from './data';\n\n/**\n * Transitions\n *\n * These strings must sync with values defined in Flex API,\n * since transaction objects given by API contain info about last transitions.\n * All the actions in API side happen in transitions,\n * so we need to understand what those strings mean.\n */\n\n// When a customer makes a booking to a listing, a transaction is\n// created with the initial request transition.\nexport const TRANSITION_REQUEST = 'transition/request';\n\n// A customer can also initiate a transaction with an enquiry, and\n// then transition that with a request.\nexport const TRANSITION_ENQUIRE = 'transition/enquire';\nexport const TRANSITION_REQUEST_AFTER_ENQUIRY = 'transition/request-after-enquiry';\n\n// When the provider accepts or declines a transaction from the\n// SalePage, it is transitioned with the accept or decline transition.\nexport const TRANSITION_ACCEPT = 'transition/accept';\nexport const TRANSITION_DECLINE = 'transition/decline';\n\n// The backend automatically expire the transaction.\nexport const TRANSITION_EXPIRE = 'transition/expire';\n\n// Admin can also cancel the transition.\nexport const TRANSITION_CANCEL = 'transition/cancel';\n\n// The backend will mark the transaction completed.\nexport const TRANSITION_COMPLETE = 'transition/complete';\n\n// Reviews are given through transaction transitions. Review 1 can be\n// by provider or customer, and review 2 will be the other party of\n// the transaction.\nexport const TRANSITION_REVIEW_1_BY_PROVIDER = 'transition/review-1-by-provider';\nexport const TRANSITION_REVIEW_2_BY_PROVIDER = 'transition/review-2-by-provider';\nexport const TRANSITION_REVIEW_1_BY_CUSTOMER = 'transition/review-1-by-customer';\nexport const TRANSITION_REVIEW_2_BY_CUSTOMER = 'transition/review-2-by-customer';\nexport const TRANSITION_EXPIRE_CUSTOMER_REVIEW_PERIOD = 'transition/expire-customer-review-period';\nexport const TRANSITION_EXPIRE_PROVIDER_REVIEW_PERIOD = 'transition/expire-provider-review-period';\nexport const TRANSITION_EXPIRE_REVIEW_PERIOD = 'transition/expire-review-period';\n\n/**\n * Actors\n *\n * There are 4 different actors that might initiate transitions:\n */\n\n// Roles of actors that perform transaction transitions\nexport const TX_TRANSITION_ACTOR_CUSTOMER = 'customer';\nexport const TX_TRANSITION_ACTOR_PROVIDER = 'provider';\nexport const TX_TRANSITION_ACTOR_SYSTEM = 'system';\nexport const TX_TRANSITION_ACTOR_OPERATOR = 'operator';\n\nexport const TX_TRANSITION_ACTORS = [\n  TX_TRANSITION_ACTOR_CUSTOMER,\n  TX_TRANSITION_ACTOR_PROVIDER,\n  TX_TRANSITION_ACTOR_SYSTEM,\n  TX_TRANSITION_ACTOR_OPERATOR,\n];\n\n/**\n * States\n *\n * These constants are only for making it clear how transitions work together.\n * You should not use these constants outside of this file.\n *\n * Note: these states are not in sync with states used transaction process definitions\n *       in Marketplace API. Only last transitions are passed along transaction object.\n */\nconst STATE_INITIAL = 'initial';\nconst STATE_ENQUIRY = 'enquiry';\nconst STATE_PREAUTHORIZED = 'preauthorized';\nconst STATE_DECLINED = 'declined';\nconst STATE_ACCEPTED = 'accepted';\nconst STATE_CANCELED = 'canceled';\nconst STATE_DELIVERED = 'delivered';\nconst STATE_REVIEWED = 'reviewed';\nconst STATE_REVIEWED_BY_CUSTOMER = 'reviewed-by-customer';\nconst STATE_REVIEWED_BY_PROVIDER = 'reviewed-by-provider';\n\n/**\n * Description of transaction process\n *\n * You should keep this in sync with transaction process defined in Marketplace API\n *\n * Note: we don't use yet any state machine library,\n *       but this description format is following Xstate (FSM library)\n *       https://xstate.js.org/docs/\n */\nconst stateDescription = {\n  // id is defined only to support Xstate format.\n  // However if you have multiple transaction processes defined,\n  // it is best to keep them in sync with transaction process aliases.\n  id: 'preauth-with-nightly-booking/release-1',\n\n  // This 'initial' state is a starting point for new transaction\n  initial: STATE_INITIAL,\n\n  // States\n  states: {\n    [STATE_INITIAL]: {\n      on: {\n        [TRANSITION_ENQUIRE]: STATE_ENQUIRY,\n        [TRANSITION_REQUEST]: STATE_PREAUTHORIZED,\n      },\n    },\n    [STATE_ENQUIRY]: {\n      on: {\n        [TRANSITION_REQUEST_AFTER_ENQUIRY]: STATE_PREAUTHORIZED,\n      },\n    },\n\n    [STATE_PREAUTHORIZED]: {\n      on: {\n        [TRANSITION_DECLINE]: STATE_DECLINED,\n        [TRANSITION_EXPIRE]: STATE_DECLINED,\n        [TRANSITION_ACCEPT]: STATE_ACCEPTED,\n      },\n    },\n\n    [STATE_DECLINED]: {},\n    [STATE_ACCEPTED]: {\n      on: {\n        [TRANSITION_CANCEL]: STATE_CANCELED,\n        [TRANSITION_COMPLETE]: STATE_DELIVERED,\n      },\n    },\n\n    [STATE_CANCELED]: {},\n    [STATE_DELIVERED]: {\n      on: {\n        [TRANSITION_EXPIRE_REVIEW_PERIOD]: STATE_REVIEWED,\n        [TRANSITION_REVIEW_1_BY_CUSTOMER]: STATE_REVIEWED_BY_CUSTOMER,\n        [TRANSITION_REVIEW_1_BY_PROVIDER]: STATE_REVIEWED_BY_PROVIDER,\n      },\n    },\n\n    [STATE_REVIEWED_BY_CUSTOMER]: {\n      on: {\n        [TRANSITION_REVIEW_2_BY_PROVIDER]: STATE_REVIEWED,\n        [TRANSITION_EXPIRE_PROVIDER_REVIEW_PERIOD]: STATE_REVIEWED,\n      },\n    },\n    [STATE_REVIEWED_BY_PROVIDER]: {\n      on: {\n        [TRANSITION_REVIEW_2_BY_CUSTOMER]: STATE_REVIEWED,\n        [TRANSITION_EXPIRE_CUSTOMER_REVIEW_PERIOD]: STATE_REVIEWED,\n      },\n    },\n    [STATE_REVIEWED]: { type: 'final' },\n  },\n};\n\n// Note: currently we assume that state description doesn't contain nested states.\nconst statesFromStateDescription = description => description.states || {};\n\n// Get all the transitions from states object in an array\nconst getTransitions = states => {\n  const stateNames = Object.keys(states);\n\n  const transitionsReducer = (transitionArray, name) => {\n    const stateTransitions = states[name] && states[name].on;\n    const transitionKeys = stateTransitions ? Object.keys(stateTransitions) : [];\n    return [\n      ...transitionArray,\n      ...transitionKeys.map(key => ({ key, value: stateTransitions[key] })),\n    ];\n  };\n\n  return stateNames.reduce(transitionsReducer, []);\n};\n\n// This is a list of all the transitions that this app should be able to handle.\nexport const TRANSITIONS = getTransitions(statesFromStateDescription(stateDescription)).map(\n  t => t.key\n);\n\n// This function returns a function that has given stateDesc in scope chain.\nconst getTransitionsToStateFn = stateDesc => state =>\n  getTransitions(statesFromStateDescription(stateDesc))\n    .filter(t => t.value === state)\n    .map(t => t.key);\n\n// Get all the transitions that lead to specified state.\nconst getTransitionsToState = getTransitionsToStateFn(stateDescription);\n\n// This is needed to fetch transactions that need response from provider.\n// I.e. transactions which provider needs to accept or decline\nexport const transitionsToRequested = getTransitionsToState(STATE_PREAUTHORIZED);\n\n/**\n * Helper functions to figure out if transaction is in a specific state.\n * State is based on lastTransition given by transaction object and state description.\n */\n\nconst txLastTransition = tx => ensureTransaction(tx).attributes.lastTransition;\n\n// DEPRECATED: use txIsDelivered instead\nexport const txIsCompleted = tx => txLastTransition(tx) === TRANSITION_COMPLETE;\n\nexport const txIsEnquired = tx =>\n  getTransitionsToState(STATE_ENQUIRY).includes(txLastTransition(tx));\n\n// Note: state name used in Marketplace API docs (and here) is actually preauthorized\n// However, word \"requested\" is used in many places so that we decided to keep it.\nexport const txIsRequested = tx =>\n  getTransitionsToState(STATE_PREAUTHORIZED).includes(txLastTransition(tx));\n\nexport const txIsAccepted = tx =>\n  getTransitionsToState(STATE_ACCEPTED).includes(txLastTransition(tx));\n\nexport const txIsDeclined = tx =>\n  getTransitionsToState(STATE_DECLINED).includes(txLastTransition(tx));\n\nexport const txIsCanceled = tx =>\n  getTransitionsToState(STATE_CANCELED).includes(txLastTransition(tx));\n\nexport const txIsDelivered = tx =>\n  getTransitionsToState(STATE_DELIVERED).includes(txLastTransition(tx));\n\nconst firstReviewTransitions = [\n  ...getTransitionsToState(STATE_REVIEWED_BY_CUSTOMER),\n  ...getTransitionsToState(STATE_REVIEWED_BY_PROVIDER),\n];\nexport const txIsInFirstReview = tx => firstReviewTransitions.includes(txLastTransition(tx));\n\nexport const txIsInFirstReviewBy = (tx, isCustomer) =>\n  isCustomer\n    ? getTransitionsToState(STATE_REVIEWED_BY_CUSTOMER).includes(txLastTransition(tx))\n    : getTransitionsToState(STATE_REVIEWED_BY_PROVIDER).includes(txLastTransition(tx));\n\nexport const txIsReviewed = tx =>\n  getTransitionsToState(STATE_REVIEWED).includes(txLastTransition(tx));\n\n/**\n * Helper functions to figure out if transaction has passed a given state.\n * This is based on transitions history given by transaction object.\n */\n\nconst txTransitions = tx => ensureTransaction(tx).attributes.transitions || [];\nconst hasPassedTransition = (transitionName, tx) =>\n  !!txTransitions(tx).find(t => t.transition === transitionName);\n\nconst hasPassedStateFn = state => tx =>\n  getTransitionsToState(state).filter(t => hasPassedTransition(t, tx)).length > 0;\n\nexport const txHasBeenAccepted = hasPassedStateFn(STATE_ACCEPTED);\nexport const txHasBeenDelivered = hasPassedStateFn(STATE_DELIVERED);\n\n/**\n * Other transaction related utility functions\n */\n\nexport const transitionIsReviewed = transition =>\n  getTransitionsToState(STATE_REVIEWED).includes(transition);\n\nexport const transitionIsFirstReviewedBy = (transition, isCustomer) =>\n  isCustomer\n    ? getTransitionsToState(STATE_REVIEWED_BY_CUSTOMER).includes(transition)\n    : getTransitionsToState(STATE_REVIEWED_BY_PROVIDER).includes(transition);\n\nexport const getReview1Transition = isCustomer =>\n  isCustomer ? TRANSITION_REVIEW_1_BY_CUSTOMER : TRANSITION_REVIEW_1_BY_PROVIDER;\n\nexport const getReview2Transition = isCustomer =>\n  isCustomer ? TRANSITION_REVIEW_2_BY_CUSTOMER : TRANSITION_REVIEW_2_BY_PROVIDER;\n\n// Check if a transition is the kind that should be rendered\n// when showing transition history (e.g. ActivityFeed)\n// The first transition and most of the expiration transitions made by system are not relevant\nexport const isRelevantPastTransition = transition => {\n  return [\n    TRANSITION_ACCEPT,\n    TRANSITION_CANCEL,\n    TRANSITION_COMPLETE,\n    TRANSITION_DECLINE,\n    TRANSITION_EXPIRE,\n    TRANSITION_REQUEST,\n    TRANSITION_REQUEST_AFTER_ENQUIRY,\n    TRANSITION_REVIEW_1_BY_CUSTOMER,\n    TRANSITION_REVIEW_1_BY_PROVIDER,\n    TRANSITION_REVIEW_2_BY_CUSTOMER,\n    TRANSITION_REVIEW_2_BY_PROVIDER,\n  ].includes(transition);\n};\n\nexport const isCustomerReview = transition => {\n  return [TRANSITION_REVIEW_1_BY_CUSTOMER, TRANSITION_REVIEW_2_BY_CUSTOMER].includes(transition);\n};\n\nexport const isProviderReview = transition => {\n  return [TRANSITION_REVIEW_1_BY_PROVIDER, TRANSITION_REVIEW_2_BY_PROVIDER].includes(transition);\n};\n\nexport const getUserTxRole = (currentUserId, transaction) => {\n  const tx = ensureTransaction(transaction);\n  const customer = tx.customer;\n  if (currentUserId && currentUserId.uuid && tx.id && customer.id) {\n    // user can be either customer or provider\n    return currentUserId.uuid === customer.id.uuid\n      ? TX_TRANSITION_ACTOR_CUSTOMER\n      : TX_TRANSITION_ACTOR_PROVIDER;\n  } else {\n    throw new Error(`Parameters for \"userIsCustomer\" function were wrong.\n      currentUserId: ${currentUserId}, transaction: ${transaction}`);\n  }\n};\n\nexport const txRoleIsProvider = userRole => userRole === TX_TRANSITION_ACTOR_PROVIDER;\nexport const txRoleIsCustomer = userRole => userRole === TX_TRANSITION_ACTOR_CUSTOMER;\n"]},"metadata":{},"sourceType":"module"}