{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport reverse from 'lodash/reverse';\nimport sortBy from 'lodash/sortBy';\nimport { storableError } from '../../util/errors';\nimport { parse } from '../../util/urlHelpers';\nimport { TRANSITIONS } from '../../util/transaction';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\n\nconst sortedTransactions = txs => reverse(sortBy(txs, tx => {\n  return tx.attributes ? tx.attributes.lastTransitionedAt : null;\n})); // ================ Action types ================ //\n\n\nexport const FETCH_ORDERS_OR_SALES_REQUEST = 'app/InboxPage/FETCH_ORDERS_OR_SALES_REQUEST';\nexport const FETCH_ORDERS_OR_SALES_SUCCESS = 'app/InboxPage/FETCH_ORDERS_OR_SALES_SUCCESS';\nexport const FETCH_ORDERS_OR_SALES_ERROR = 'app/InboxPage/FETCH_ORDERS_OR_SALES_ERROR'; // ================ Reducer ================ //\n\nconst entityRefs = entities => entities.map(entity => ({\n  id: entity.id,\n  type: entity.type\n}));\n\nconst initialState = {\n  fetchInProgress: false,\n  fetchOrdersOrSalesError: null,\n  pagination: null,\n  transactionRefs: []\n};\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case FETCH_ORDERS_OR_SALES_REQUEST:\n      return _objectSpread({}, state, {\n        fetchInProgress: true,\n        fetchOrdersOrSalesError: null\n      });\n\n    case FETCH_ORDERS_OR_SALES_SUCCESS:\n      {\n        const transactions = sortedTransactions(payload.data.data);\n        return _objectSpread({}, state, {\n          fetchInProgress: false,\n          transactionRefs: entityRefs(transactions),\n          pagination: payload.data.meta\n        });\n      }\n\n    case FETCH_ORDERS_OR_SALES_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return _objectSpread({}, state, {\n        fetchInProgress: false,\n        fetchOrdersOrSalesError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nconst fetchOrdersOrSalesRequest = () => ({\n  type: FETCH_ORDERS_OR_SALES_REQUEST\n});\n\nconst fetchOrdersOrSalesSuccess = response => ({\n  type: FETCH_ORDERS_OR_SALES_SUCCESS,\n  payload: response\n});\n\nconst fetchOrdersOrSalesError = e => ({\n  type: FETCH_ORDERS_OR_SALES_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\n\nconst INBOX_PAGE_SIZE = 10;\nexport const loadData = (params, search) => (dispatch, getState, sdk) => {\n  const tab = params.tab;\n  const onlyFilterValues = {\n    orders: 'order',\n    sales: 'sale'\n  };\n  const onlyFilter = onlyFilterValues[tab];\n\n  if (!onlyFilter) {\n    return Promise.reject(new Error(\"Invalid tab for InboxPage: \".concat(tab)));\n  }\n\n  dispatch(fetchOrdersOrSalesRequest());\n\n  const _parse = parse(search),\n        _parse$page = _parse.page,\n        page = _parse$page === void 0 ? 1 : _parse$page;\n\n  const apiQueryParams = {\n    only: onlyFilter,\n    lastTransitions: TRANSITIONS,\n    include: ['provider', 'provider.profileImage', 'customer', 'customer.profileImage', 'booking'],\n    'fields.transaction': ['lastTransition', 'lastTransitionedAt', 'transitions', 'payinTotal', 'payoutTotal'],\n    'fields.user': ['profile.displayName', 'profile.abbreviatedName'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x'],\n    page,\n    per_page: INBOX_PAGE_SIZE\n  };\n  return sdk.transactions.query(apiQueryParams).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(fetchOrdersOrSalesSuccess(response));\n    return response;\n  }).catch(e => {\n    dispatch(fetchOrdersOrSalesError(storableError(e)));\n    throw e;\n  });\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/InboxPage/InboxPage.duck.js"],"names":["reverse","sortBy","storableError","parse","TRANSITIONS","addMarketplaceEntities","sortedTransactions","txs","tx","attributes","lastTransitionedAt","FETCH_ORDERS_OR_SALES_REQUEST","FETCH_ORDERS_OR_SALES_SUCCESS","FETCH_ORDERS_OR_SALES_ERROR","entityRefs","entities","map","entity","id","type","initialState","fetchInProgress","fetchOrdersOrSalesError","pagination","transactionRefs","checkoutPageReducer","state","action","payload","transactions","data","meta","console","error","fetchOrdersOrSalesRequest","fetchOrdersOrSalesSuccess","response","e","INBOX_PAGE_SIZE","loadData","params","search","dispatch","getState","sdk","tab","onlyFilterValues","orders","sales","onlyFilter","Promise","reject","Error","page","apiQueryParams","only","lastTransitions","include","per_page","query","then","catch"],"mappings":"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","sourcesContent":["import reverse from 'lodash/reverse';\nimport sortBy from 'lodash/sortBy';\nimport { storableError } from '../../util/errors';\nimport { parse } from '../../util/urlHelpers';\nimport { TRANSITIONS } from '../../util/transaction';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\n\nconst sortedTransactions = txs =>\n  reverse(\n    sortBy(txs, tx => {\n      return tx.attributes ? tx.attributes.lastTransitionedAt : null;\n    })\n  );\n\n// ================ Action types ================ //\n\nexport const FETCH_ORDERS_OR_SALES_REQUEST = 'app/InboxPage/FETCH_ORDERS_OR_SALES_REQUEST';\nexport const FETCH_ORDERS_OR_SALES_SUCCESS = 'app/InboxPage/FETCH_ORDERS_OR_SALES_SUCCESS';\nexport const FETCH_ORDERS_OR_SALES_ERROR = 'app/InboxPage/FETCH_ORDERS_OR_SALES_ERROR';\n\n// ================ Reducer ================ //\n\nconst entityRefs = entities =>\n  entities.map(entity => ({\n    id: entity.id,\n    type: entity.type,\n  }));\n\nconst initialState = {\n  fetchInProgress: false,\n  fetchOrdersOrSalesError: null,\n  pagination: null,\n  transactionRefs: [],\n};\n\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case FETCH_ORDERS_OR_SALES_REQUEST:\n      return { ...state, fetchInProgress: true, fetchOrdersOrSalesError: null };\n    case FETCH_ORDERS_OR_SALES_SUCCESS: {\n      const transactions = sortedTransactions(payload.data.data);\n      return {\n        ...state,\n        fetchInProgress: false,\n        transactionRefs: entityRefs(transactions),\n        pagination: payload.data.meta,\n      };\n    }\n    case FETCH_ORDERS_OR_SALES_ERROR:\n      console.error(payload); // eslint-disable-line\n      return { ...state, fetchInProgress: false, fetchOrdersOrSalesError: payload };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nconst fetchOrdersOrSalesRequest = () => ({ type: FETCH_ORDERS_OR_SALES_REQUEST });\nconst fetchOrdersOrSalesSuccess = response => ({\n  type: FETCH_ORDERS_OR_SALES_SUCCESS,\n  payload: response,\n});\nconst fetchOrdersOrSalesError = e => ({\n  type: FETCH_ORDERS_OR_SALES_ERROR,\n  error: true,\n  payload: e,\n});\n\n// ================ Thunks ================ //\n\nconst INBOX_PAGE_SIZE = 10;\n\nexport const loadData = (params, search) => (dispatch, getState, sdk) => {\n  const { tab } = params;\n\n  const onlyFilterValues = {\n    orders: 'order',\n    sales: 'sale',\n  };\n\n  const onlyFilter = onlyFilterValues[tab];\n  if (!onlyFilter) {\n    return Promise.reject(new Error(`Invalid tab for InboxPage: ${tab}`));\n  }\n\n  dispatch(fetchOrdersOrSalesRequest());\n\n  const { page = 1 } = parse(search);\n\n  const apiQueryParams = {\n    only: onlyFilter,\n    lastTransitions: TRANSITIONS,\n    include: ['provider', 'provider.profileImage', 'customer', 'customer.profileImage', 'booking'],\n    'fields.transaction': [\n      'lastTransition',\n      'lastTransitionedAt',\n      'transitions',\n      'payinTotal',\n      'payoutTotal',\n    ],\n    'fields.user': ['profile.displayName', 'profile.abbreviatedName'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x'],\n    page,\n    per_page: INBOX_PAGE_SIZE,\n  };\n\n  return sdk.transactions\n    .query(apiQueryParams)\n    .then(response => {\n      dispatch(addMarketplaceEntities(response));\n      dispatch(fetchOrdersOrSalesSuccess(response));\n      return response;\n    })\n    .catch(e => {\n      dispatch(fetchOrdersOrSalesError(storableError(e)));\n      throw e;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}