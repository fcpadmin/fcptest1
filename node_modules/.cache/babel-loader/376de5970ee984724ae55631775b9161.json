{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldTextInput/FieldTextInput.js\";\nimport React, { Component } from 'react';\nimport { func, object, shape, string } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError, ExpandingTextarea } from '../../components';\nimport css from './FieldTextInput.css';\nconst CONTENT_MAX_LENGTH = 5000;\n\nclass FieldTextInputComponent extends Component {\n  render() {\n    /* eslint-disable no-unused-vars */\n    const _this$props = this.props,\n          rootClassName = _this$props.rootClassName,\n          className = _this$props.className,\n          inputRootClass = _this$props.inputRootClass,\n          customErrorText = _this$props.customErrorText,\n          id = _this$props.id,\n          label = _this$props.label,\n          type = _this$props.type,\n          input = _this$props.input,\n          meta = _this$props.meta,\n          onUnmount = _this$props.onUnmount,\n          rest = _objectWithoutProperties(_this$props, [\"rootClassName\", \"className\", \"inputRootClass\", \"customErrorText\", \"id\", \"label\", \"type\", \"input\", \"meta\", \"onUnmount\"]);\n    /* eslint-enable no-unused-vars */\n\n\n    if (label && !id) {\n      throw new Error('id required when a label is given');\n    }\n\n    const valid = meta.valid,\n          invalid = meta.invalid,\n          touched = meta.touched,\n          error = meta.error;\n    const isTextarea = type === 'textarea';\n    const errorText = customErrorText || error; // Error message and input error styles are only shown if the\n    // field has been touched and the validation has failed.\n\n    const hasError = !!customErrorText || !!(touched && invalid && error);\n    const fieldMeta = {\n      touched: hasError,\n      error: errorText\n    };\n    const inputClasses = inputRootClass || classNames(css.input, {\n      [css.inputSuccess]: valid,\n      [css.inputError]: hasError,\n      [css.textarea]: isTextarea\n    });\n    const inputProps = isTextarea ? _objectSpread({\n      className: inputClasses,\n      id,\n      rows: 1,\n      maxLength: CONTENT_MAX_LENGTH\n    }, input, rest) : _objectSpread({\n      className: inputClasses,\n      id,\n      type\n    }, input, rest);\n    const classes = classNames(rootClassName || css.root, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, label ? React.createElement(\"label\", {\n      htmlFor: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, label) : null, isTextarea ? React.createElement(ExpandingTextarea, Object.assign({}, inputProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })) : React.createElement(\"input\", Object.assign({}, inputProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })), React.createElement(ValidationError, {\n      fieldMeta: fieldMeta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }));\n  }\n\n}\n\nFieldTextInputComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inputRootClass: null,\n  onUnmount: null,\n  customErrorText: null,\n  id: null,\n  label: null\n};\nFieldTextInputComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inputRootClass: string,\n  onUnmount: func,\n  // Error message that can be manually passed to input field,\n  // overrides default validation message\n  customErrorText: string,\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n  // Either 'textarea' or something that is passed to the input element\n  type: string.isRequired,\n  // Generated by final-form's Field component\n  input: shape({\n    onChange: func.isRequired\n  }).isRequired,\n  meta: object.isRequired\n};\n\nclass FieldTextInput extends Component {\n  componentWillUnmount() {\n    // Unmounting happens too late if it is done inside Field component\n    // (Then Form has already registered its (new) fields and\n    // changing the value without corresponding field is prohibited in Final Form\n    if (this.props.onUnmount) {\n      this.props.onUnmount();\n    }\n  }\n\n  render() {\n    return React.createElement(Field, Object.assign({\n      component: FieldTextInputComponent\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default FieldTextInput;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldTextInput/FieldTextInput.js"],"names":["React","Component","func","object","shape","string","Field","classNames","ValidationError","ExpandingTextarea","css","CONTENT_MAX_LENGTH","FieldTextInputComponent","render","props","rootClassName","className","inputRootClass","customErrorText","id","label","type","input","meta","onUnmount","rest","Error","valid","invalid","touched","error","isTextarea","errorText","hasError","fieldMeta","inputClasses","inputSuccess","inputError","textarea","inputProps","rows","maxLength","classes","root","defaultProps","propTypes","isRequired","onChange","FieldTextInput","componentWillUnmount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,MAA9B,QAA4C,YAA5C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,kBAAnD;AAEA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,MAAMC,kBAAkB,GAAG,IAA3B;;AAEA,MAAMC,uBAAN,SAAsCX,SAAtC,CAAgD;AAC9CY,EAAAA,MAAM,GAAG;AACP;AADO,wBAcH,KAAKC,KAdF;AAAA,UAGLC,aAHK,eAGLA,aAHK;AAAA,UAILC,SAJK,eAILA,SAJK;AAAA,UAKLC,cALK,eAKLA,cALK;AAAA,UAMLC,eANK,eAMLA,eANK;AAAA,UAOLC,EAPK,eAOLA,EAPK;AAAA,UAQLC,KARK,eAQLA,KARK;AAAA,UASLC,IATK,eASLA,IATK;AAAA,UAULC,KAVK,eAULA,KAVK;AAAA,UAWLC,IAXK,eAWLA,IAXK;AAAA,UAYLC,SAZK,eAYLA,SAZK;AAAA,UAaFC,IAbE;AAeP;;;AAEA,QAAIL,KAAK,IAAI,CAACD,EAAd,EAAkB;AAChB,YAAM,IAAIO,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAnBM,UAqBCC,KArBD,GAqBoCJ,IArBpC,CAqBCI,KArBD;AAAA,UAqBQC,OArBR,GAqBoCL,IArBpC,CAqBQK,OArBR;AAAA,UAqBiBC,OArBjB,GAqBoCN,IArBpC,CAqBiBM,OArBjB;AAAA,UAqB0BC,KArB1B,GAqBoCP,IArBpC,CAqB0BO,KArB1B;AAsBP,UAAMC,UAAU,GAAGV,IAAI,KAAK,UAA5B;AAEA,UAAMW,SAAS,GAAGd,eAAe,IAAIY,KAArC,CAxBO,CA0BP;AACA;;AACA,UAAMG,QAAQ,GAAG,CAAC,CAACf,eAAF,IAAqB,CAAC,EAAEW,OAAO,IAAID,OAAX,IAAsBE,KAAxB,CAAvC;AAEA,UAAMI,SAAS,GAAG;AAAEL,MAAAA,OAAO,EAAEI,QAAX;AAAqBH,MAAAA,KAAK,EAAEE;AAA5B,KAAlB;AAEA,UAAMG,YAAY,GAChBlB,cAAc,IACdV,UAAU,CAACG,GAAG,CAACY,KAAL,EAAY;AACpB,OAACZ,GAAG,CAAC0B,YAAL,GAAoBT,KADA;AAEpB,OAACjB,GAAG,CAAC2B,UAAL,GAAkBJ,QAFE;AAGpB,OAACvB,GAAG,CAAC4B,QAAL,GAAgBP;AAHI,KAAZ,CAFZ;AAOA,UAAMQ,UAAU,GAAGR,UAAU;AACvBf,MAAAA,SAAS,EAAEmB,YADY;AACEhB,MAAAA,EADF;AACMqB,MAAAA,IAAI,EAAE,CADZ;AACeC,MAAAA,SAAS,EAAE9B;AAD1B,OACiDW,KADjD,EAC2DG,IAD3D;AAEvBT,MAAAA,SAAS,EAAEmB,YAFY;AAEEhB,MAAAA,EAFF;AAEME,MAAAA;AAFN,OAEeC,KAFf,EAEyBG,IAFzB,CAA7B;AAIA,UAAMiB,OAAO,GAAGnC,UAAU,CAACQ,aAAa,IAAIL,GAAG,CAACiC,IAAtB,EAA4B3B,SAA5B,CAA1B;AACA,WACE;AAAK,MAAA,SAAS,EAAE0B,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGtB,KAAK,GAAG;AAAO,MAAA,OAAO,EAAED,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBC,KAArB,CAAH,GAAyC,IADjD,EAEGW,UAAU,GAAG,oBAAC,iBAAD,oBAAuBQ,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH,GAA2C,+CAAWA,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFxD,EAGE,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAEL,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AApD6C;;AAuDhDtB,uBAAuB,CAACgC,YAAxB,GAAuC;AACrC7B,EAAAA,aAAa,EAAE,IADsB;AAErCC,EAAAA,SAAS,EAAE,IAF0B;AAGrCC,EAAAA,cAAc,EAAE,IAHqB;AAIrCO,EAAAA,SAAS,EAAE,IAJ0B;AAKrCN,EAAAA,eAAe,EAAE,IALoB;AAMrCC,EAAAA,EAAE,EAAE,IANiC;AAOrCC,EAAAA,KAAK,EAAE;AAP8B,CAAvC;AAUAR,uBAAuB,CAACiC,SAAxB,GAAoC;AAClC9B,EAAAA,aAAa,EAAEV,MADmB;AAElCW,EAAAA,SAAS,EAAEX,MAFuB;AAGlCY,EAAAA,cAAc,EAAEZ,MAHkB;AAKlCmB,EAAAA,SAAS,EAAEtB,IALuB;AAOlC;AACA;AACAgB,EAAAA,eAAe,EAAEb,MATiB;AAWlC;AACA;AACAc,EAAAA,EAAE,EAAEd,MAb8B;AAclCe,EAAAA,KAAK,EAAEf,MAd2B;AAgBlC;AACAgB,EAAAA,IAAI,EAAEhB,MAAM,CAACyC,UAjBqB;AAmBlC;AACAxB,EAAAA,KAAK,EAAElB,KAAK,CAAC;AACX2C,IAAAA,QAAQ,EAAE7C,IAAI,CAAC4C;AADJ,GAAD,CAAL,CAEJA,UAtB+B;AAuBlCvB,EAAAA,IAAI,EAAEpB,MAAM,CAAC2C;AAvBqB,CAApC;;AA0BA,MAAME,cAAN,SAA6B/C,SAA7B,CAAuC;AACrCgD,EAAAA,oBAAoB,GAAG;AACrB;AACA;AACA;AACA,QAAI,KAAKnC,KAAL,CAAWU,SAAf,EAA0B;AACxB,WAAKV,KAAL,CAAWU,SAAX;AACD;AACF;;AAEDX,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED;AAAlB,OAA+C,KAAKE,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAZoC;;AAevC,eAAekC,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport { func, object, shape, string } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError, ExpandingTextarea } from '../../components';\n\nimport css from './FieldTextInput.css';\n\nconst CONTENT_MAX_LENGTH = 5000;\n\nclass FieldTextInputComponent extends Component {\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      rootClassName,\n      className,\n      inputRootClass,\n      customErrorText,\n      id,\n      label,\n      type,\n      input,\n      meta,\n      onUnmount,\n      ...rest\n    } = this.props;\n    /* eslint-enable no-unused-vars */\n\n    if (label && !id) {\n      throw new Error('id required when a label is given');\n    }\n\n    const { valid, invalid, touched, error } = meta;\n    const isTextarea = type === 'textarea';\n\n    const errorText = customErrorText || error;\n\n    // Error message and input error styles are only shown if the\n    // field has been touched and the validation has failed.\n    const hasError = !!customErrorText || !!(touched && invalid && error);\n\n    const fieldMeta = { touched: hasError, error: errorText };\n\n    const inputClasses =\n      inputRootClass ||\n      classNames(css.input, {\n        [css.inputSuccess]: valid,\n        [css.inputError]: hasError,\n        [css.textarea]: isTextarea,\n      });\n    const inputProps = isTextarea\n      ? { className: inputClasses, id, rows: 1, maxLength: CONTENT_MAX_LENGTH, ...input, ...rest }\n      : { className: inputClasses, id, type, ...input, ...rest };\n\n    const classes = classNames(rootClassName || css.root, className);\n    return (\n      <div className={classes}>\n        {label ? <label htmlFor={id}>{label}</label> : null}\n        {isTextarea ? <ExpandingTextarea {...inputProps} /> : <input {...inputProps} />}\n        <ValidationError fieldMeta={fieldMeta} />\n      </div>\n    );\n  }\n}\n\nFieldTextInputComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inputRootClass: null,\n  onUnmount: null,\n  customErrorText: null,\n  id: null,\n  label: null,\n};\n\nFieldTextInputComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inputRootClass: string,\n\n  onUnmount: func,\n\n  // Error message that can be manually passed to input field,\n  // overrides default validation message\n  customErrorText: string,\n\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n\n  // Either 'textarea' or something that is passed to the input element\n  type: string.isRequired,\n\n  // Generated by final-form's Field component\n  input: shape({\n    onChange: func.isRequired,\n  }).isRequired,\n  meta: object.isRequired,\n};\n\nclass FieldTextInput extends Component {\n  componentWillUnmount() {\n    // Unmounting happens too late if it is done inside Field component\n    // (Then Form has already registered its (new) fields and\n    // changing the value without corresponding field is prohibited in Final Form\n    if (this.props.onUnmount) {\n      this.props.onUnmount();\n    }\n  }\n\n  render() {\n    return <Field component={FieldTextInputComponent} {...this.props} />;\n  }\n}\n\nexport default FieldTextInput;\n"]},"metadata":{},"sourceType":"module"}