{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { denormalisedResponseEntities, ensureOwnListing } from '../util/data';\nimport { storableError } from '../util/errors';\nimport { transitionsToRequested } from '../util/transaction';\nimport { LISTING_STATE_DRAFT } from '../util/types';\nimport * as log from '../util/log';\nimport { authInfo } from './Auth.duck';\nimport { stripeAccountCreateSuccess } from './stripe.duck.js'; // ================ Action types ================ //\n\nexport const CURRENT_USER_SHOW_REQUEST = 'app/user/CURRENT_USER_SHOW_REQUEST';\nexport const CURRENT_USER_SHOW_SUCCESS = 'app/user/CURRENT_USER_SHOW_SUCCESS';\nexport const CURRENT_USER_SHOW_ERROR = 'app/user/CURRENT_USER_SHOW_ERROR';\nexport const CLEAR_CURRENT_USER = 'app/user/CLEAR_CURRENT_USER';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST = 'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS = 'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_ERROR = 'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_ERROR';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST = 'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS = 'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_ERROR = 'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_ERROR';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_REQUEST = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_REQUEST';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_ERROR = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_ERROR';\nexport const SEND_VERIFICATION_EMAIL_REQUEST = 'app/user/SEND_VERIFICATION_EMAIL_REQUEST';\nexport const SEND_VERIFICATION_EMAIL_SUCCESS = 'app/user/SEND_VERIFICATION_EMAIL_SUCCESS';\nexport const SEND_VERIFICATION_EMAIL_ERROR = 'app/user/SEND_VERIFICATION_EMAIL_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  currentUser: null,\n  currentUserShowError: null,\n  currentUserHasListings: false,\n  currentUserHasListingsError: null,\n  currentUserNotificationCount: 0,\n  currentUserNotificationCountError: null,\n  currentUserHasOrders: null,\n  // This is not fetched unless unverified emails exist\n  currentUserHasOrdersError: null,\n  sendVerificationEmailInProgress: false,\n  sendVerificationEmailError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case CURRENT_USER_SHOW_REQUEST:\n      return _objectSpread({}, state, {\n        currentUserShowError: null\n      });\n\n    case CURRENT_USER_SHOW_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUser: payload\n      });\n\n    case CURRENT_USER_SHOW_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return _objectSpread({}, state, {\n        currentUserShowError: payload\n      });\n\n    case CLEAR_CURRENT_USER:\n      return _objectSpread({}, state, {\n        currentUser: null,\n        currentUserShowError: null,\n        currentUserHasListings: false,\n        currentUserHasListingsError: null,\n        currentUserNotificationCount: 0,\n        currentUserNotificationCountError: null\n      });\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST:\n      return _objectSpread({}, state, {\n        currentUserHasListingsError: null\n      });\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUserHasListings: payload.hasListings\n      });\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return _objectSpread({}, state, {\n        currentUserHasListingsError: payload\n      });\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST:\n      return _objectSpread({}, state, {\n        currentUserNotificationCountError: null\n      });\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUserNotificationCount: payload.transactions.length\n      });\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return _objectSpread({}, state, {\n        currentUserNotificationCountError: payload\n      });\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_REQUEST:\n      return _objectSpread({}, state, {\n        currentUserHasOrdersError: null\n      });\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUserHasOrders: payload.hasOrders\n      });\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return _objectSpread({}, state, {\n        currentUserHasOrdersError: payload\n      });\n\n    case SEND_VERIFICATION_EMAIL_REQUEST:\n      return _objectSpread({}, state, {\n        sendVerificationEmailInProgress: true,\n        sendVerificationEmailError: null\n      });\n\n    case SEND_VERIFICATION_EMAIL_SUCCESS:\n      return _objectSpread({}, state, {\n        sendVerificationEmailInProgress: false\n      });\n\n    case SEND_VERIFICATION_EMAIL_ERROR:\n      return _objectSpread({}, state, {\n        sendVerificationEmailInProgress: false,\n        sendVerificationEmailError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const hasCurrentUserErrors = state => {\n  const user = state.user;\n  return user.currentUserShowError || user.currentUserHasListingsError || user.currentUserNotificationCountError || user.currentUserHasOrdersError;\n};\nexport const verificationSendingInProgress = state => {\n  return state.user.sendVerificationEmailInProgress;\n}; // ================ Action creators ================ //\n\nexport const currentUserShowRequest = () => ({\n  type: CURRENT_USER_SHOW_REQUEST\n});\nexport const currentUserShowSuccess = user => ({\n  type: CURRENT_USER_SHOW_SUCCESS,\n  payload: user\n});\nexport const currentUserShowError = e => ({\n  type: CURRENT_USER_SHOW_ERROR,\n  payload: e,\n  error: true\n});\nexport const clearCurrentUser = () => ({\n  type: CLEAR_CURRENT_USER\n});\n\nconst fetchCurrentUserHasListingsRequest = () => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST\n});\n\nexport const fetchCurrentUserHasListingsSuccess = hasListings => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS,\n  payload: {\n    hasListings\n  }\n});\n\nconst fetchCurrentUserHasListingsError = e => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchCurrentUserNotificationsRequest = () => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST\n});\n\nexport const fetchCurrentUserNotificationsSuccess = transactions => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS,\n  payload: {\n    transactions\n  }\n});\n\nconst fetchCurrentUserNotificationsError = e => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchCurrentUserHasOrdersRequest = () => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_REQUEST\n});\n\nexport const fetchCurrentUserHasOrdersSuccess = hasOrders => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS,\n  payload: {\n    hasOrders\n  }\n});\n\nconst fetchCurrentUserHasOrdersError = e => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_ERROR,\n  error: true,\n  payload: e\n});\n\nexport const sendVerificationEmailRequest = () => ({\n  type: SEND_VERIFICATION_EMAIL_REQUEST\n});\nexport const sendVerificationEmailSuccess = () => ({\n  type: SEND_VERIFICATION_EMAIL_SUCCESS\n});\nexport const sendVerificationEmailError = e => ({\n  type: SEND_VERIFICATION_EMAIL_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const fetchCurrentUserHasListings = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserHasListingsRequest());\n  const currentUser = getState().user.currentUser;\n\n  if (!currentUser) {\n    dispatch(fetchCurrentUserHasListingsSuccess(false));\n    return Promise.resolve(null);\n  }\n\n  const params = {\n    // Since we are only interested in if the user has\n    // listings, we only need at most one result.\n    page: 1,\n    per_page: 1\n  };\n  return sdk.ownListings.query(params).then(response => {\n    const hasListings = response.data.data && response.data.data.length > 0;\n    const hasPublishedListings = hasListings && ensureOwnListing(response.data.data[0]).attributes.state !== LISTING_STATE_DRAFT;\n    dispatch(fetchCurrentUserHasListingsSuccess(!!hasPublishedListings));\n  }).catch(e => dispatch(fetchCurrentUserHasListingsError(storableError(e))));\n};\nexport const fetchCurrentUserHasOrders = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserHasOrdersRequest());\n\n  if (!getState().user.currentUser) {\n    dispatch(fetchCurrentUserHasOrdersSuccess(false));\n    return Promise.resolve(null);\n  }\n\n  const params = {\n    only: 'order',\n    page: 1,\n    per_page: 1\n  };\n  return sdk.transactions.query(params).then(response => {\n    const hasOrders = response.data.data && response.data.data.length > 0;\n    dispatch(fetchCurrentUserHasOrdersSuccess(!!hasOrders));\n  }).catch(e => dispatch(fetchCurrentUserHasOrdersError(storableError(e))));\n}; // Notificaiton page size is max (100 items on page)\n\nconst NOTIFICATION_PAGE_SIZE = 100;\nexport const fetchCurrentUserNotifications = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserNotificationsRequest());\n  const apiQueryParams = {\n    only: 'sale',\n    last_transitions: transitionsToRequested,\n    page: 1,\n    per_page: NOTIFICATION_PAGE_SIZE\n  };\n  sdk.transactions.query(apiQueryParams).then(response => {\n    const transactions = response.data.data;\n    dispatch(fetchCurrentUserNotificationsSuccess(transactions));\n  }).catch(e => dispatch(fetchCurrentUserNotificationsError(storableError(e))));\n};\nexport const fetchCurrentUser = () => (dispatch, getState, sdk) => {\n  dispatch(currentUserShowRequest());\n  const isAuthenticated = getState().Auth.isAuthenticated;\n\n  if (!isAuthenticated) {\n    // Make sure current user is null\n    dispatch(currentUserShowSuccess(null));\n    return Promise.resolve({});\n  }\n\n  const params = {\n    include: ['profileImage', 'stripeAccount'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  };\n  return sdk.currentUser.show(params).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.currentUser.show response');\n    }\n\n    const currentUser = entities[0]; // Save stripeAccount to store.stripe.stripeAccount if it exists\n\n    if (currentUser.stripeAccount) {\n      dispatch(stripeAccountCreateSuccess(currentUser.stripeAccount));\n    } // set current user id to the logger\n\n\n    log.setUserId(currentUser.id.uuid);\n    dispatch(currentUserShowSuccess(currentUser));\n    return currentUser;\n  }).then(currentUser => {\n    dispatch(fetchCurrentUserHasListings());\n    dispatch(fetchCurrentUserNotifications());\n\n    if (!currentUser.attributes.emailVerified) {\n      dispatch(fetchCurrentUserHasOrders());\n    } // Make sure auth info is up to date\n\n\n    dispatch(authInfo());\n  }).catch(e => {\n    // Make sure auth info is up to date\n    dispatch(authInfo());\n    log.error(e, 'fetch-current-user-failed');\n    dispatch(currentUserShowError(storableError(e)));\n  });\n};\nexport const sendVerificationEmail = () => (dispatch, getState, sdk) => {\n  if (verificationSendingInProgress(getState())) {\n    return Promise.reject(new Error('Verification email sending already in progress'));\n  }\n\n  dispatch(sendVerificationEmailRequest());\n  return sdk.currentUser.sendVerificationEmail().then(() => dispatch(sendVerificationEmailSuccess())).catch(e => dispatch(sendVerificationEmailError(storableError(e))));\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/ducks/user.duck.js"],"names":["denormalisedResponseEntities","ensureOwnListing","storableError","transitionsToRequested","LISTING_STATE_DRAFT","log","authInfo","stripeAccountCreateSuccess","CURRENT_USER_SHOW_REQUEST","CURRENT_USER_SHOW_SUCCESS","CURRENT_USER_SHOW_ERROR","CLEAR_CURRENT_USER","FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST","FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS","FETCH_CURRENT_USER_HAS_LISTINGS_ERROR","FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST","FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS","FETCH_CURRENT_USER_NOTIFICATIONS_ERROR","FETCH_CURRENT_USER_HAS_ORDERS_REQUEST","FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS","FETCH_CURRENT_USER_HAS_ORDERS_ERROR","SEND_VERIFICATION_EMAIL_REQUEST","SEND_VERIFICATION_EMAIL_SUCCESS","SEND_VERIFICATION_EMAIL_ERROR","initialState","currentUser","currentUserShowError","currentUserHasListings","currentUserHasListingsError","currentUserNotificationCount","currentUserNotificationCountError","currentUserHasOrders","currentUserHasOrdersError","sendVerificationEmailInProgress","sendVerificationEmailError","reducer","state","action","type","payload","console","error","hasListings","transactions","length","hasOrders","hasCurrentUserErrors","user","verificationSendingInProgress","currentUserShowRequest","currentUserShowSuccess","e","clearCurrentUser","fetchCurrentUserHasListingsRequest","fetchCurrentUserHasListingsSuccess","fetchCurrentUserHasListingsError","fetchCurrentUserNotificationsRequest","fetchCurrentUserNotificationsSuccess","fetchCurrentUserNotificationsError","fetchCurrentUserHasOrdersRequest","fetchCurrentUserHasOrdersSuccess","fetchCurrentUserHasOrdersError","sendVerificationEmailRequest","sendVerificationEmailSuccess","fetchCurrentUserHasListings","dispatch","getState","sdk","Promise","resolve","params","page","per_page","ownListings","query","then","response","data","hasPublishedListings","attributes","catch","fetchCurrentUserHasOrders","only","NOTIFICATION_PAGE_SIZE","fetchCurrentUserNotifications","apiQueryParams","last_transitions","fetchCurrentUser","isAuthenticated","Auth","include","show","entities","Error","stripeAccount","setUserId","id","uuid","emailVerified","sendVerificationEmail","reject"],"mappings":"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","sourcesContent":["import { denormalisedResponseEntities, ensureOwnListing } from '../util/data';\nimport { storableError } from '../util/errors';\nimport { transitionsToRequested } from '../util/transaction';\nimport { LISTING_STATE_DRAFT } from '../util/types';\nimport * as log from '../util/log';\nimport { authInfo } from './Auth.duck';\nimport { stripeAccountCreateSuccess } from './stripe.duck.js';\n\n// ================ Action types ================ //\n\nexport const CURRENT_USER_SHOW_REQUEST = 'app/user/CURRENT_USER_SHOW_REQUEST';\nexport const CURRENT_USER_SHOW_SUCCESS = 'app/user/CURRENT_USER_SHOW_SUCCESS';\nexport const CURRENT_USER_SHOW_ERROR = 'app/user/CURRENT_USER_SHOW_ERROR';\n\nexport const CLEAR_CURRENT_USER = 'app/user/CLEAR_CURRENT_USER';\n\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST =\n  'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS =\n  'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_ERROR =\n  'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_ERROR';\n\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST =\n  'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS =\n  'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_ERROR =\n  'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_ERROR';\n\nexport const FETCH_CURRENT_USER_HAS_ORDERS_REQUEST =\n  'app/user/FETCH_CURRENT_USER_HAS_ORDERS_REQUEST';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS =\n  'app/user/FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_ERROR = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_ERROR';\n\nexport const SEND_VERIFICATION_EMAIL_REQUEST = 'app/user/SEND_VERIFICATION_EMAIL_REQUEST';\nexport const SEND_VERIFICATION_EMAIL_SUCCESS = 'app/user/SEND_VERIFICATION_EMAIL_SUCCESS';\nexport const SEND_VERIFICATION_EMAIL_ERROR = 'app/user/SEND_VERIFICATION_EMAIL_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  currentUser: null,\n  currentUserShowError: null,\n  currentUserHasListings: false,\n  currentUserHasListingsError: null,\n  currentUserNotificationCount: 0,\n  currentUserNotificationCountError: null,\n  currentUserHasOrders: null, // This is not fetched unless unverified emails exist\n  currentUserHasOrdersError: null,\n  sendVerificationEmailInProgress: false,\n  sendVerificationEmailError: null,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case CURRENT_USER_SHOW_REQUEST:\n      return { ...state, currentUserShowError: null };\n    case CURRENT_USER_SHOW_SUCCESS:\n      return { ...state, currentUser: payload };\n    case CURRENT_USER_SHOW_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return { ...state, currentUserShowError: payload };\n\n    case CLEAR_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: null,\n        currentUserShowError: null,\n        currentUserHasListings: false,\n        currentUserHasListingsError: null,\n        currentUserNotificationCount: 0,\n        currentUserNotificationCountError: null,\n      };\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST:\n      return { ...state, currentUserHasListingsError: null };\n    case FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS:\n      return { ...state, currentUserHasListings: payload.hasListings };\n    case FETCH_CURRENT_USER_HAS_LISTINGS_ERROR:\n      console.error(payload); // eslint-disable-line\n      return { ...state, currentUserHasListingsError: payload };\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST:\n      return { ...state, currentUserNotificationCountError: null };\n    case FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS:\n      return { ...state, currentUserNotificationCount: payload.transactions.length };\n    case FETCH_CURRENT_USER_NOTIFICATIONS_ERROR:\n      console.error(payload); // eslint-disable-line\n      return { ...state, currentUserNotificationCountError: payload };\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_REQUEST:\n      return { ...state, currentUserHasOrdersError: null };\n    case FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS:\n      return { ...state, currentUserHasOrders: payload.hasOrders };\n    case FETCH_CURRENT_USER_HAS_ORDERS_ERROR:\n      console.error(payload); // eslint-disable-line\n      return { ...state, currentUserHasOrdersError: payload };\n\n    case SEND_VERIFICATION_EMAIL_REQUEST:\n      return {\n        ...state,\n        sendVerificationEmailInProgress: true,\n        sendVerificationEmailError: null,\n      };\n    case SEND_VERIFICATION_EMAIL_SUCCESS:\n      return {\n        ...state,\n        sendVerificationEmailInProgress: false,\n      };\n    case SEND_VERIFICATION_EMAIL_ERROR:\n      return {\n        ...state,\n        sendVerificationEmailInProgress: false,\n        sendVerificationEmailError: payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\nexport const hasCurrentUserErrors = state => {\n  const { user } = state;\n  return (\n    user.currentUserShowError ||\n    user.currentUserHasListingsError ||\n    user.currentUserNotificationCountError ||\n    user.currentUserHasOrdersError\n  );\n};\n\nexport const verificationSendingInProgress = state => {\n  return state.user.sendVerificationEmailInProgress;\n};\n\n// ================ Action creators ================ //\n\nexport const currentUserShowRequest = () => ({ type: CURRENT_USER_SHOW_REQUEST });\n\nexport const currentUserShowSuccess = user => ({\n  type: CURRENT_USER_SHOW_SUCCESS,\n  payload: user,\n});\n\nexport const currentUserShowError = e => ({\n  type: CURRENT_USER_SHOW_ERROR,\n  payload: e,\n  error: true,\n});\n\nexport const clearCurrentUser = () => ({ type: CLEAR_CURRENT_USER });\n\nconst fetchCurrentUserHasListingsRequest = () => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST,\n});\n\nexport const fetchCurrentUserHasListingsSuccess = hasListings => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS,\n  payload: { hasListings },\n});\n\nconst fetchCurrentUserHasListingsError = e => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_ERROR,\n  error: true,\n  payload: e,\n});\n\nconst fetchCurrentUserNotificationsRequest = () => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST,\n});\n\nexport const fetchCurrentUserNotificationsSuccess = transactions => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS,\n  payload: { transactions },\n});\n\nconst fetchCurrentUserNotificationsError = e => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_ERROR,\n  error: true,\n  payload: e,\n});\n\nconst fetchCurrentUserHasOrdersRequest = () => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_REQUEST,\n});\n\nexport const fetchCurrentUserHasOrdersSuccess = hasOrders => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS,\n  payload: { hasOrders },\n});\n\nconst fetchCurrentUserHasOrdersError = e => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const sendVerificationEmailRequest = () => ({\n  type: SEND_VERIFICATION_EMAIL_REQUEST,\n});\n\nexport const sendVerificationEmailSuccess = () => ({\n  type: SEND_VERIFICATION_EMAIL_SUCCESS,\n});\n\nexport const sendVerificationEmailError = e => ({\n  type: SEND_VERIFICATION_EMAIL_ERROR,\n  error: true,\n  payload: e,\n});\n\n// ================ Thunks ================ //\n\nexport const fetchCurrentUserHasListings = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserHasListingsRequest());\n  const { currentUser } = getState().user;\n\n  if (!currentUser) {\n    dispatch(fetchCurrentUserHasListingsSuccess(false));\n    return Promise.resolve(null);\n  }\n\n  const params = {\n    // Since we are only interested in if the user has\n    // listings, we only need at most one result.\n    page: 1,\n    per_page: 1,\n  };\n\n  return sdk.ownListings\n    .query(params)\n    .then(response => {\n      const hasListings = response.data.data && response.data.data.length > 0;\n\n      const hasPublishedListings =\n        hasListings &&\n        ensureOwnListing(response.data.data[0]).attributes.state !== LISTING_STATE_DRAFT;\n      dispatch(fetchCurrentUserHasListingsSuccess(!!hasPublishedListings));\n    })\n    .catch(e => dispatch(fetchCurrentUserHasListingsError(storableError(e))));\n};\n\nexport const fetchCurrentUserHasOrders = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserHasOrdersRequest());\n\n  if (!getState().user.currentUser) {\n    dispatch(fetchCurrentUserHasOrdersSuccess(false));\n    return Promise.resolve(null);\n  }\n\n  const params = {\n    only: 'order',\n    page: 1,\n    per_page: 1,\n  };\n\n  return sdk.transactions\n    .query(params)\n    .then(response => {\n      const hasOrders = response.data.data && response.data.data.length > 0;\n      dispatch(fetchCurrentUserHasOrdersSuccess(!!hasOrders));\n    })\n    .catch(e => dispatch(fetchCurrentUserHasOrdersError(storableError(e))));\n};\n\n// Notificaiton page size is max (100 items on page)\nconst NOTIFICATION_PAGE_SIZE = 100;\n\nexport const fetchCurrentUserNotifications = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserNotificationsRequest());\n\n  const apiQueryParams = {\n    only: 'sale',\n    last_transitions: transitionsToRequested,\n    page: 1,\n    per_page: NOTIFICATION_PAGE_SIZE,\n  };\n\n  sdk.transactions\n    .query(apiQueryParams)\n    .then(response => {\n      const transactions = response.data.data;\n      dispatch(fetchCurrentUserNotificationsSuccess(transactions));\n    })\n    .catch(e => dispatch(fetchCurrentUserNotificationsError(storableError(e))));\n};\n\nexport const fetchCurrentUser = () => (dispatch, getState, sdk) => {\n  dispatch(currentUserShowRequest());\n  const { isAuthenticated } = getState().Auth;\n\n  if (!isAuthenticated) {\n    // Make sure current user is null\n    dispatch(currentUserShowSuccess(null));\n    return Promise.resolve({});\n  }\n\n  const params = {\n    include: ['profileImage', 'stripeAccount'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x'],\n  };\n\n  return sdk.currentUser\n    .show(params)\n    .then(response => {\n      const entities = denormalisedResponseEntities(response);\n      if (entities.length !== 1) {\n        throw new Error('Expected a resource in the sdk.currentUser.show response');\n      }\n      const currentUser = entities[0];\n\n      // Save stripeAccount to store.stripe.stripeAccount if it exists\n      if (currentUser.stripeAccount) {\n        dispatch(stripeAccountCreateSuccess(currentUser.stripeAccount));\n      }\n\n      // set current user id to the logger\n      log.setUserId(currentUser.id.uuid);\n      dispatch(currentUserShowSuccess(currentUser));\n      return currentUser;\n    })\n    .then(currentUser => {\n      dispatch(fetchCurrentUserHasListings());\n      dispatch(fetchCurrentUserNotifications());\n      if (!currentUser.attributes.emailVerified) {\n        dispatch(fetchCurrentUserHasOrders());\n      }\n\n      // Make sure auth info is up to date\n      dispatch(authInfo());\n    })\n    .catch(e => {\n      // Make sure auth info is up to date\n      dispatch(authInfo());\n      log.error(e, 'fetch-current-user-failed');\n      dispatch(currentUserShowError(storableError(e)));\n    });\n};\n\nexport const sendVerificationEmail = () => (dispatch, getState, sdk) => {\n  if (verificationSendingInProgress(getState())) {\n    return Promise.reject(new Error('Verification email sending already in progress'));\n  }\n  dispatch(sendVerificationEmailRequest());\n  return sdk.currentUser\n    .sendVerificationEmail()\n    .then(() => dispatch(sendVerificationEmailSuccess()))\n    .catch(e => dispatch(sendVerificationEmailError(storableError(e))));\n};\n"]},"metadata":{},"sourceType":"module"}