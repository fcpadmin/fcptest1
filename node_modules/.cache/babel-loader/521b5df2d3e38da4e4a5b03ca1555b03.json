{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchFiltersPanel/SearchFiltersPanel.js\";\n\n/**\n * SearchFiltersPanel can be used to add extra filters to togglable panel in SearchPage.\n * Using this component will need you to enable it in SearchPage and passing needed props to\n * SearchFilters component (which is the default place for SearchFilters).\n *\n *\n * An example how to render MultiSelectFilter for a filter that has it's config passed in\n * the props as newFilter:\n *\n * initialValue for a filter can be resolved with the initialValue and initialValues\n * methods.\n *\n * const initialNewFilterValues = this.initialValues(newFilter.paramName);\n *\n * const newFilterElement = newFilter ? (\n * <SelectMultipleFilter\n *     id=\"SearchFiltersPanel.newFilter\"\n *     name=\"newFilter\"\n *     urlParam={newFilter.paramName}\n *     label={this.props.intl.formatMessage({ id: 'SearchFiltersPanel.newFilterLabel' })}\n *     onSubmit={this.handleSelectMultiple}\n *     liveEdit\n *     options={multiSelectFilterXFromProps}\n *     initialValues={initialNewFilterValues}\n *  />\n * ) : null;\n */\nimport React, { Component } from 'react';\nimport { array, func, object, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport omit from 'lodash/omit';\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { InlineTextButton } from '../../components';\nimport css from './SearchFiltersPanel.css';\n\nclass SearchFiltersPanelComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQueryParams: props.urlQueryParams\n    };\n    this.applyFilters = this.applyFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n    this.handleSelectSingle = this.handleSelectSingle.bind(this);\n    this.handleSelectMultiple = this.handleSelectMultiple.bind(this);\n    this.initialValue = this.initialValue.bind(this);\n    this.initialValues = this.initialValues.bind(this);\n  } // Apply the filters by redirecting to SearchPage with new filters.\n\n\n  applyFilters() {\n    const _this$props = this.props,\n          history = _this$props.history,\n          urlQueryParams = _this$props.urlQueryParams,\n          onClosePanel = _this$props.onClosePanel;\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, _objectSpread({}, urlQueryParams, this.state.currentQueryParams))); // Ensure that panel closes (if now changes have been made)\n\n    onClosePanel();\n  } // Close the filters by clicking cancel, revert to the initial params\n\n\n  cancelFilters() {\n    this.setState({\n      currentQueryParams: {}\n    });\n    this.props.onClosePanel();\n  } // Reset all filter query parameters\n\n\n  resetAll(e) {\n    const _this$props2 = this.props,\n          urlQueryParams = _this$props2.urlQueryParams,\n          history = _this$props2.history,\n          onClosePanel = _this$props2.onClosePanel,\n          filterParamNames = _this$props2.filterParamNames;\n    const queryParams = omit(urlQueryParams, filterParamNames);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams)); // Ensure that panel closes (if now changes have been made)\n\n    onClosePanel(); // blur event target if event is passed\n\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  handleSelectSingle(urlParam, option) {\n    const urlQueryParams = this.props.urlQueryParams;\n    this.setState(prevState => {\n      const prevQueryParams = prevState.currentQueryParams;\n\n      const mergedQueryParams = _objectSpread({}, urlQueryParams, prevQueryParams); // query parameters after selecting the option\n      // if no option is passed, clear the selection for the filter\n\n\n      const currentQueryParams = option ? _objectSpread({}, mergedQueryParams, {\n        [urlParam]: option\n      }) : omit(mergedQueryParams, urlParam);\n      return {\n        currentQueryParams\n      };\n    });\n  }\n\n  handleSelectMultiple(urlParam, options) {\n    const urlQueryParams = this.props.urlQueryParams;\n    this.setState(prevState => {\n      const prevQueryParams = prevState.currentQueryParams;\n\n      const mergedQueryParams = _objectSpread({}, urlQueryParams, prevQueryParams); // query parameters after selecting options\n      // if no option is passed, clear the selection from state.currentQueryParams\n\n\n      const currentQueryParams = options && options.length > 0 ? _objectSpread({}, mergedQueryParams, {\n        [urlParam]: options.join(',')\n      }) : _objectSpread({}, mergedQueryParams, {\n        [urlParam]: null\n      });\n      return {\n        currentQueryParams\n      };\n    });\n  } // resolve initial value for a single value filter\n\n\n  initialValue(paramName) {\n    const currentQueryParams = this.state.currentQueryParams;\n    const urlQueryParams = this.props.urlQueryParams; // initialValue for a select should come either from state.currentQueryParam or urlQueryParam\n\n    const currentQueryParam = currentQueryParams[paramName];\n    return typeof currentQueryParam !== 'undefined' ? currentQueryParam : urlQueryParams[paramName];\n  } // resolve initial values for a multi value filter\n\n\n  initialValues(paramName) {\n    const currentQueryParams = this.state.currentQueryParams;\n    const urlQueryParams = this.props.urlQueryParams;\n\n    const splitQueryParam = queryParam => queryParam ? queryParam.split(',') : []; // initialValue for a select should come either from state.currentQueryParam or urlQueryParam\n\n\n    const hasCurrentQueryParam = typeof currentQueryParams[paramName] !== 'undefined';\n    return hasCurrentQueryParam ? splitQueryParam(currentQueryParams[paramName]) : splitQueryParam(urlQueryParams[paramName]);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          rootClassName = _this$props3.rootClassName,\n          className = _this$props3.className;\n    const classes = classNames(rootClassName || css.root, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.filtersWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: css.footer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(InlineTextButton, {\n      rootClassName: css.resetAllButton,\n      onClick: this.resetAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: 'SearchFiltersPanel.resetAll',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(InlineTextButton, {\n      rootClassName: css.cancelButton,\n      onClick: this.cancelFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: 'SearchFiltersPanel.cancel',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })), React.createElement(InlineTextButton, {\n      rootClassName: css.applyButton,\n      onClick: this.applyFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: 'SearchFiltersPanel.apply',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nSearchFiltersPanelComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  filterParamNames: []\n};\nSearchFiltersPanelComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlQueryParams: object.isRequired,\n  onClosePanel: func.isRequired,\n  filterParamNames: array,\n  // from injectIntl\n  intl: intlShape.isRequired,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\nconst SearchFiltersPanel = injectIntl(withRouter(SearchFiltersPanelComponent));\nexport default SearchFiltersPanel;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchFiltersPanel/SearchFiltersPanel.js"],"names":["React","Component","array","func","object","shape","string","classNames","FormattedMessage","injectIntl","intlShape","withRouter","omit","routeConfiguration","createResourceLocatorString","InlineTextButton","css","SearchFiltersPanelComponent","constructor","props","state","currentQueryParams","urlQueryParams","applyFilters","bind","cancelFilters","resetAll","handleSelectSingle","handleSelectMultiple","initialValue","initialValues","history","onClosePanel","push","setState","e","filterParamNames","queryParams","currentTarget","blur","urlParam","option","prevState","prevQueryParams","mergedQueryParams","options","length","join","paramName","currentQueryParam","splitQueryParam","queryParam","split","hasCurrentQueryParam","render","rootClassName","className","classes","root","filtersWrapper","footer","resetAllButton","cancelButton","applyButton","defaultProps","propTypes","isRequired","intl","SearchFiltersPanel"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,MAArC,QAAmD,YAAnD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,YAAxD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SAASC,2BAAT,QAA4C,mBAA5C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,GAAP,MAAgB,0BAAhB;;AAEA,MAAMC,2BAAN,SAA0ChB,SAA1C,CAAoD;AAClDiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,kBAAkB,EAAEF,KAAK,CAACG;AAA5B,KAAb;AAEA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKI,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BJ,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBL,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKM,aAAL,GAAqB,KAAKA,aAAL,CAAmBN,IAAnB,CAAwB,IAAxB,CAArB;AACD,GAZiD,CAclD;;;AACAD,EAAAA,YAAY,GAAG;AAAA,wBACqC,KAAKJ,KAD1C;AAAA,UACLY,OADK,eACLA,OADK;AAAA,UACIT,cADJ,eACIA,cADJ;AAAA,UACoBU,YADpB,eACoBA,YADpB;AAGbD,IAAAA,OAAO,CAACE,IAAR,CACEnB,2BAA2B,CACzB,YADyB,EAEzBD,kBAAkB,EAFO,EAGzB,EAHyB,oBAIpBS,cAJoB,EAID,KAAKF,KAAL,CAAWC,kBAJV,EAD7B,EAHa,CAYb;;AACAW,IAAAA,YAAY;AACb,GA7BiD,CA+BlD;;;AACAP,EAAAA,aAAa,GAAG;AACd,SAAKS,QAAL,CAAc;AAAEb,MAAAA,kBAAkB,EAAE;AAAtB,KAAd;AACA,SAAKF,KAAL,CAAWa,YAAX;AACD,GAnCiD,CAqClD;;;AACAN,EAAAA,QAAQ,CAACS,CAAD,EAAI;AAAA,yBAC0D,KAAKhB,KAD/D;AAAA,UACFG,cADE,gBACFA,cADE;AAAA,UACcS,OADd,gBACcA,OADd;AAAA,UACuBC,YADvB,gBACuBA,YADvB;AAAA,UACqCI,gBADrC,gBACqCA,gBADrC;AAGV,UAAMC,WAAW,GAAGzB,IAAI,CAACU,cAAD,EAAiBc,gBAAjB,CAAxB;AACAL,IAAAA,OAAO,CAACE,IAAR,CAAanB,2BAA2B,CAAC,YAAD,EAAeD,kBAAkB,EAAjC,EAAqC,EAArC,EAAyCwB,WAAzC,CAAxC,EAJU,CAMV;;AACAL,IAAAA,YAAY,GAPF,CASV;;AACA,QAAIG,CAAC,IAAIA,CAAC,CAACG,aAAX,EAA0B;AACxBH,MAAAA,CAAC,CAACG,aAAF,CAAgBC,IAAhB;AACD;AACF;;AAEDZ,EAAAA,kBAAkB,CAACa,QAAD,EAAWC,MAAX,EAAmB;AACnC,UAAMnB,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAlC;AACA,SAAKY,QAAL,CAAcQ,SAAS,IAAI;AACzB,YAAMC,eAAe,GAAGD,SAAS,CAACrB,kBAAlC;;AACA,YAAMuB,iBAAiB,qBAAQtB,cAAR,EAA2BqB,eAA3B,CAAvB,CAFyB,CAIzB;AACA;;;AACA,YAAMtB,kBAAkB,GAAGoB,MAAM,qBACxBG,iBADwB;AACL,SAACJ,QAAD,GAAYC;AADP,WAE7B7B,IAAI,CAACgC,iBAAD,EAAoBJ,QAApB,CAFR;AAIA,aAAO;AAAEnB,QAAAA;AAAF,OAAP;AACD,KAXD;AAYD;;AAEDO,EAAAA,oBAAoB,CAACY,QAAD,EAAWK,OAAX,EAAoB;AACtC,UAAMvB,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAlC;AACA,SAAKY,QAAL,CAAcQ,SAAS,IAAI;AACzB,YAAMC,eAAe,GAAGD,SAAS,CAACrB,kBAAlC;;AACA,YAAMuB,iBAAiB,qBAAQtB,cAAR,EAA2BqB,eAA3B,CAAvB,CAFyB,CAIzB;AACA;;;AACA,YAAMtB,kBAAkB,GACtBwB,OAAO,IAAIA,OAAO,CAACC,MAAR,GAAiB,CAA5B,qBACSF,iBADT;AAC4B,SAACJ,QAAD,GAAYK,OAAO,CAACE,IAAR,CAAa,GAAb;AADxC,6BAESH,iBAFT;AAE4B,SAACJ,QAAD,GAAY;AAFxC,QADF;AAKA,aAAO;AAAEnB,QAAAA;AAAF,OAAP;AACD,KAZD;AAaD,GApFiD,CAsFlD;;;AACAQ,EAAAA,YAAY,CAACmB,SAAD,EAAY;AACtB,UAAM3B,kBAAkB,GAAG,KAAKD,KAAL,CAAWC,kBAAtC;AACA,UAAMC,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAlC,CAFsB,CAItB;;AACA,UAAM2B,iBAAiB,GAAG5B,kBAAkB,CAAC2B,SAAD,CAA5C;AAEA,WAAO,OAAOC,iBAAP,KAA6B,WAA7B,GAA2CA,iBAA3C,GAA+D3B,cAAc,CAAC0B,SAAD,CAApF;AACD,GA/FiD,CAiGlD;;;AACAlB,EAAAA,aAAa,CAACkB,SAAD,EAAY;AACvB,UAAM3B,kBAAkB,GAAG,KAAKD,KAAL,CAAWC,kBAAtC;AACA,UAAMC,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAlC;;AAEA,UAAM4B,eAAe,GAAGC,UAAU,IAAKA,UAAU,GAAGA,UAAU,CAACC,KAAX,CAAiB,GAAjB,CAAH,GAA2B,EAA5E,CAJuB,CAMvB;;;AACA,UAAMC,oBAAoB,GAAG,OAAOhC,kBAAkB,CAAC2B,SAAD,CAAzB,KAAyC,WAAtE;AAEA,WAAOK,oBAAoB,GACvBH,eAAe,CAAC7B,kBAAkB,CAAC2B,SAAD,CAAnB,CADQ,GAEvBE,eAAe,CAAC5B,cAAc,CAAC0B,SAAD,CAAf,CAFnB;AAGD;;AAEDM,EAAAA,MAAM,GAAG;AAAA,yBAC8B,KAAKnC,KADnC;AAAA,UACCoC,aADD,gBACCA,aADD;AAAA,UACgBC,SADhB,gBACgBA,SADhB;AAEP,UAAMC,OAAO,GAAGlD,UAAU,CAACgD,aAAa,IAAIvC,GAAG,CAAC0C,IAAtB,EAA4BF,SAA5B,CAA1B;AAEA,WACE;AAAK,MAAA,SAAS,EAAEC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEzC,GAAG,CAAC2C,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAE3C,GAAG,CAAC4C,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,aAAa,EAAE5C,GAAG,CAAC6C,cAArC;AAAqD,MAAA,OAAO,EAAE,KAAKnC,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,6BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE,oBAAC,gBAAD;AAAkB,MAAA,aAAa,EAAEV,GAAG,CAAC8C,YAArC;AAAmD,MAAA,OAAO,EAAE,KAAKrC,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,2BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,EAOE,oBAAC,gBAAD;AAAkB,MAAA,aAAa,EAAET,GAAG,CAAC+C,WAArC;AAAkD,MAAA,OAAO,EAAE,KAAKxC,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,0BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,CAFF,CADF;AAgBD;;AApIiD;;AAuIpDN,2BAA2B,CAAC+C,YAA5B,GAA2C;AACzCT,EAAAA,aAAa,EAAE,IAD0B;AAEzCC,EAAAA,SAAS,EAAE,IAF8B;AAGzCpB,EAAAA,gBAAgB,EAAE;AAHuB,CAA3C;AAMAnB,2BAA2B,CAACgD,SAA5B,GAAwC;AACtCV,EAAAA,aAAa,EAAEjD,MADuB;AAEtCkD,EAAAA,SAAS,EAAElD,MAF2B;AAGtCgB,EAAAA,cAAc,EAAElB,MAAM,CAAC8D,UAHe;AAItClC,EAAAA,YAAY,EAAE7B,IAAI,CAAC+D,UAJmB;AAKtC9B,EAAAA,gBAAgB,EAAElC,KALoB;AAOtC;AACAiE,EAAAA,IAAI,EAAEzD,SAAS,CAACwD,UARsB;AAUtC;AACAnC,EAAAA,OAAO,EAAE1B,KAAK,CAAC;AACb4B,IAAAA,IAAI,EAAE9B,IAAI,CAAC+D;AADE,GAAD,CAAL,CAENA;AAbmC,CAAxC;AAgBA,MAAME,kBAAkB,GAAG3D,UAAU,CAACE,UAAU,CAACM,2BAAD,CAAX,CAArC;AAEA,eAAemD,kBAAf","sourcesContent":["/**\n * SearchFiltersPanel can be used to add extra filters to togglable panel in SearchPage.\n * Using this component will need you to enable it in SearchPage and passing needed props to\n * SearchFilters component (which is the default place for SearchFilters).\n *\n *\n * An example how to render MultiSelectFilter for a filter that has it's config passed in\n * the props as newFilter:\n *\n * initialValue for a filter can be resolved with the initialValue and initialValues\n * methods.\n *\n * const initialNewFilterValues = this.initialValues(newFilter.paramName);\n *\n * const newFilterElement = newFilter ? (\n * <SelectMultipleFilter\n *     id=\"SearchFiltersPanel.newFilter\"\n *     name=\"newFilter\"\n *     urlParam={newFilter.paramName}\n *     label={this.props.intl.formatMessage({ id: 'SearchFiltersPanel.newFilterLabel' })}\n *     onSubmit={this.handleSelectMultiple}\n *     liveEdit\n *     options={multiSelectFilterXFromProps}\n *     initialValues={initialNewFilterValues}\n *  />\n * ) : null;\n */\n\nimport React, { Component } from 'react';\nimport { array, func, object, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport omit from 'lodash/omit';\n\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { InlineTextButton } from '../../components';\nimport css from './SearchFiltersPanel.css';\n\nclass SearchFiltersPanelComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { currentQueryParams: props.urlQueryParams };\n\n    this.applyFilters = this.applyFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n    this.handleSelectSingle = this.handleSelectSingle.bind(this);\n    this.handleSelectMultiple = this.handleSelectMultiple.bind(this);\n    this.initialValue = this.initialValue.bind(this);\n    this.initialValues = this.initialValues.bind(this);\n  }\n\n  // Apply the filters by redirecting to SearchPage with new filters.\n  applyFilters() {\n    const { history, urlQueryParams, onClosePanel } = this.props;\n\n    history.push(\n      createResourceLocatorString(\n        'SearchPage',\n        routeConfiguration(),\n        {},\n        { ...urlQueryParams, ...this.state.currentQueryParams }\n      )\n    );\n\n    // Ensure that panel closes (if now changes have been made)\n    onClosePanel();\n  }\n\n  // Close the filters by clicking cancel, revert to the initial params\n  cancelFilters() {\n    this.setState({ currentQueryParams: {} });\n    this.props.onClosePanel();\n  }\n\n  // Reset all filter query parameters\n  resetAll(e) {\n    const { urlQueryParams, history, onClosePanel, filterParamNames } = this.props;\n\n    const queryParams = omit(urlQueryParams, filterParamNames);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n\n    // Ensure that panel closes (if now changes have been made)\n    onClosePanel();\n\n    // blur event target if event is passed\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  handleSelectSingle(urlParam, option) {\n    const urlQueryParams = this.props.urlQueryParams;\n    this.setState(prevState => {\n      const prevQueryParams = prevState.currentQueryParams;\n      const mergedQueryParams = { ...urlQueryParams, ...prevQueryParams };\n\n      // query parameters after selecting the option\n      // if no option is passed, clear the selection for the filter\n      const currentQueryParams = option\n        ? { ...mergedQueryParams, [urlParam]: option }\n        : omit(mergedQueryParams, urlParam);\n\n      return { currentQueryParams };\n    });\n  }\n\n  handleSelectMultiple(urlParam, options) {\n    const urlQueryParams = this.props.urlQueryParams;\n    this.setState(prevState => {\n      const prevQueryParams = prevState.currentQueryParams;\n      const mergedQueryParams = { ...urlQueryParams, ...prevQueryParams };\n\n      // query parameters after selecting options\n      // if no option is passed, clear the selection from state.currentQueryParams\n      const currentQueryParams =\n        options && options.length > 0\n          ? { ...mergedQueryParams, [urlParam]: options.join(',') }\n          : { ...mergedQueryParams, [urlParam]: null };\n\n      return { currentQueryParams };\n    });\n  }\n\n  // resolve initial value for a single value filter\n  initialValue(paramName) {\n    const currentQueryParams = this.state.currentQueryParams;\n    const urlQueryParams = this.props.urlQueryParams;\n\n    // initialValue for a select should come either from state.currentQueryParam or urlQueryParam\n    const currentQueryParam = currentQueryParams[paramName];\n\n    return typeof currentQueryParam !== 'undefined' ? currentQueryParam : urlQueryParams[paramName];\n  }\n\n  // resolve initial values for a multi value filter\n  initialValues(paramName) {\n    const currentQueryParams = this.state.currentQueryParams;\n    const urlQueryParams = this.props.urlQueryParams;\n\n    const splitQueryParam = queryParam => (queryParam ? queryParam.split(',') : []);\n\n    // initialValue for a select should come either from state.currentQueryParam or urlQueryParam\n    const hasCurrentQueryParam = typeof currentQueryParams[paramName] !== 'undefined';\n\n    return hasCurrentQueryParam\n      ? splitQueryParam(currentQueryParams[paramName])\n      : splitQueryParam(urlQueryParams[paramName]);\n  }\n\n  render() {\n    const { rootClassName, className } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n\n    return (\n      <div className={classes}>\n        <div className={css.filtersWrapper}>{/* Add filters here */}</div>\n        <div className={css.footer}>\n          <InlineTextButton rootClassName={css.resetAllButton} onClick={this.resetAll}>\n            <FormattedMessage id={'SearchFiltersPanel.resetAll'} />\n          </InlineTextButton>\n          <InlineTextButton rootClassName={css.cancelButton} onClick={this.cancelFilters}>\n            <FormattedMessage id={'SearchFiltersPanel.cancel'} />\n          </InlineTextButton>\n          <InlineTextButton rootClassName={css.applyButton} onClick={this.applyFilters}>\n            <FormattedMessage id={'SearchFiltersPanel.apply'} />\n          </InlineTextButton>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearchFiltersPanelComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  filterParamNames: [],\n};\n\nSearchFiltersPanelComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlQueryParams: object.isRequired,\n  onClosePanel: func.isRequired,\n  filterParamNames: array,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nconst SearchFiltersPanel = injectIntl(withRouter(SearchFiltersPanelComponent));\n\nexport default SearchFiltersPanel;\n"]},"metadata":{},"sourceType":"module"}