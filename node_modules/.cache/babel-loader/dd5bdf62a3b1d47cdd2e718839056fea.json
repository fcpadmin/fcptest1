{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ReviewModal/ReviewModal.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { IconReviewUser, Modal } from '../../components';\nimport { ReviewForm } from '../../forms';\nimport css from './ReviewModal.css';\n\nconst ReviewModal = props => {\n  const className = props.className,\n        rootClassName = props.rootClassName,\n        id = props.id,\n        intl = props.intl,\n        isOpen = props.isOpen,\n        onCloseModal = props.onCloseModal,\n        onManageDisableScrolling = props.onManageDisableScrolling,\n        onSubmitReview = props.onSubmitReview,\n        revieweeName = props.revieweeName,\n        reviewSent = props.reviewSent,\n        sendReviewInProgress = props.sendReviewInProgress,\n        sendReviewError = props.sendReviewError;\n  const classes = classNames(rootClassName || css.root, className);\n  const closeButtonMessage = intl.formatMessage({\n    id: 'ReviewModal.later'\n  });\n  const reviewee = React.createElement(\"span\", {\n    className: css.reviewee,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, revieweeName);\n  return React.createElement(Modal, {\n    id: id,\n    containerClassName: classes,\n    contentClassName: css.modalContent,\n    isOpen: isOpen,\n    onClose: onCloseModal,\n    onManageDisableScrolling: onManageDisableScrolling,\n    closeButtonMessage: closeButtonMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(IconReviewUser, {\n    className: css.modalIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: css.modalTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ReviewModal.title\",\n    values: {\n      revieweeName: reviewee\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: css.modalMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ReviewModal.description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(ReviewForm, {\n    onSubmit: onSubmitReview,\n    reviewSent: reviewSent,\n    sendReviewInProgress: sendReviewInProgress,\n    sendReviewError: sendReviewError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n};\n\nconst bool = PropTypes.bool,\n      string = PropTypes.string;\nReviewModal.defaultProps = {\n  className: null,\n  rootClassName: null,\n  reviewSent: false,\n  sendReviewInProgress: false,\n  sendReviewError: null\n};\nReviewModal.propTypes = {\n  className: string,\n  rootClassName: string,\n  intl: intlShape.isRequired,\n  reviewSent: bool,\n  sendReviewInProgress: bool,\n  sendReviewError: propTypes.error\n};\nexport default injectIntl(ReviewModal);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ReviewModal/ReviewModal.js"],"names":["React","PropTypes","FormattedMessage","intlShape","injectIntl","classNames","propTypes","IconReviewUser","Modal","ReviewForm","css","ReviewModal","props","className","rootClassName","id","intl","isOpen","onCloseModal","onManageDisableScrolling","onSubmitReview","revieweeName","reviewSent","sendReviewInProgress","sendReviewError","classes","root","closeButtonMessage","formatMessage","reviewee","modalContent","modalIcon","modalTitle","modalMessage","bool","string","defaultProps","isRequired","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { IconReviewUser, Modal } from '../../components';\nimport { ReviewForm } from '../../forms';\n\nimport css from './ReviewModal.css';\n\nconst ReviewModal = props => {\n  const {\n    className,\n    rootClassName,\n    id,\n    intl,\n    isOpen,\n    onCloseModal,\n    onManageDisableScrolling,\n    onSubmitReview,\n    revieweeName,\n    reviewSent,\n    sendReviewInProgress,\n    sendReviewError,\n  } = props;\n\n  const classes = classNames(rootClassName || css.root, className);\n  const closeButtonMessage = intl.formatMessage({ id: 'ReviewModal.later' });\n  const reviewee = <span className={css.reviewee}>{revieweeName}</span>;\n\n  return (\n    <Modal\n      id={id}\n      containerClassName={classes}\n      contentClassName={css.modalContent}\n      isOpen={isOpen}\n      onClose={onCloseModal}\n      onManageDisableScrolling={onManageDisableScrolling}\n      closeButtonMessage={closeButtonMessage}\n    >\n      <IconReviewUser className={css.modalIcon} />\n      <p className={css.modalTitle}>\n        <FormattedMessage id=\"ReviewModal.title\" values={{ revieweeName: reviewee }} />\n      </p>\n      <p className={css.modalMessage}>\n        <FormattedMessage id=\"ReviewModal.description\" />\n      </p>\n      <ReviewForm\n        onSubmit={onSubmitReview}\n        reviewSent={reviewSent}\n        sendReviewInProgress={sendReviewInProgress}\n        sendReviewError={sendReviewError}\n      />\n    </Modal>\n  );\n};\n\nconst { bool, string } = PropTypes;\n\nReviewModal.defaultProps = {\n  className: null,\n  rootClassName: null,\n  reviewSent: false,\n  sendReviewInProgress: false,\n  sendReviewError: null,\n};\n\nReviewModal.propTypes = {\n  className: string,\n  rootClassName: string,\n  intl: intlShape.isRequired,\n  reviewSent: bool,\n  sendReviewInProgress: bool,\n  sendReviewError: propTypes.error,\n};\n\nexport default injectIntl(ReviewModal);\n"]},"metadata":{},"sourceType":"module"}