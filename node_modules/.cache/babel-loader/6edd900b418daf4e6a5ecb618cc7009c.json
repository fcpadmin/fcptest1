{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/TransactionPage/TransactionPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport { createResourceLocatorString, findRouteByRouteName } from '../../util/routes';\nimport routeConfiguration from '../../routeConfiguration';\nimport { propTypes } from '../../util/types';\nimport { ensureListing, ensureTransaction } from '../../util/data';\nimport { createSlug } from '../../util/urlHelpers';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { isScrollingDisabled, manageDisableScrolling } from '../../ducks/UI.duck';\nimport { NamedRedirect, TransactionPanel, Page, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer } from '../../components';\nimport { TopbarContainer } from '../../containers';\nimport { acceptSale, declineSale, loadData, setInitialValues, sendMessage, sendReview, fetchMoreMessages } from './TransactionPage.duck';\nimport css from './TransactionPage.css';\nconst PROVIDER = 'provider';\nconst CUSTOMER = 'customer'; // TransactionPage handles data loading for Sale and Order views to transaction pages in Inbox.\n\nexport const TransactionPageComponent = props => {\n  const currentUser = props.currentUser,\n        initialMessageFailedToTransaction = props.initialMessageFailedToTransaction,\n        fetchMessagesError = props.fetchMessagesError,\n        fetchMessagesInProgress = props.fetchMessagesInProgress,\n        totalMessagePages = props.totalMessagePages,\n        oldestMessagePageFetched = props.oldestMessagePageFetched,\n        fetchTransactionError = props.fetchTransactionError,\n        history = props.history,\n        intl = props.intl,\n        messages = props.messages,\n        onManageDisableScrolling = props.onManageDisableScrolling,\n        onSendMessage = props.onSendMessage,\n        onSendReview = props.onSendReview,\n        onShowMoreMessages = props.onShowMoreMessages,\n        params = props.params,\n        scrollingDisabled = props.scrollingDisabled,\n        sendMessageError = props.sendMessageError,\n        sendMessageInProgress = props.sendMessageInProgress,\n        sendReviewError = props.sendReviewError,\n        sendReviewInProgress = props.sendReviewInProgress,\n        transaction = props.transaction,\n        transactionRole = props.transactionRole,\n        acceptInProgress = props.acceptInProgress,\n        acceptSaleError = props.acceptSaleError,\n        declineInProgress = props.declineInProgress,\n        declineSaleError = props.declineSaleError,\n        onAcceptSale = props.onAcceptSale,\n        onDeclineSale = props.onDeclineSale,\n        timeSlots = props.timeSlots,\n        fetchTimeSlotsError = props.fetchTimeSlotsError,\n        callSetInitialValues = props.callSetInitialValues;\n  const currentTransaction = ensureTransaction(transaction);\n  const currentListing = ensureListing(currentTransaction.listing);\n\n  const handleSubmitBookingRequest = values => {\n    const bookingDates = values.bookingDates,\n          bookingData = _objectWithoutProperties(values, [\"bookingDates\"]);\n\n    const initialValues = {\n      listing: currentListing,\n      enquiredTransaction: currentTransaction,\n      bookingData,\n      bookingDates: {\n        bookingStart: bookingDates.startDate,\n        bookingEnd: bookingDates.endDate\n      }\n    };\n    const routes = routeConfiguration(); // Customize checkout page state with current listing and selected bookingDates\n\n    const _findRouteByRouteName = findRouteByRouteName('CheckoutPage', routes),\n          setInitialValues = _findRouteByRouteName.setInitialValues;\n\n    callSetInitialValues(setInitialValues, initialValues); // Redirect to CheckoutPage\n\n    history.push(createResourceLocatorString('CheckoutPage', routes, {\n      id: currentListing.id.uuid,\n      slug: createSlug(currentListing.attributes.title)\n    }, {}));\n  };\n\n  const deletedListingTitle = intl.formatMessage({\n    id: 'TransactionPage.deletedListing'\n  });\n  const listingTitle = currentListing.attributes.deleted ? deletedListingTitle : currentListing.attributes.title; // Redirect users with someone else's direct link to their own inbox/sales or inbox/orders page.\n\n  const isDataAvailable = currentUser && currentTransaction.id && currentTransaction.id.uuid === params.id && currentTransaction.attributes.lineItems && currentTransaction.customer && currentTransaction.provider && !fetchTransactionError;\n  const isProviderRole = transactionRole === PROVIDER;\n  const isCustomerRole = transactionRole === CUSTOMER;\n  const isOwnSale = isDataAvailable && isProviderRole && currentUser.id.uuid === currentTransaction.provider.id.uuid;\n  const isOwnOrder = isDataAvailable && isCustomerRole && currentUser.id.uuid === currentTransaction.customer.id.uuid;\n\n  if (isDataAvailable && isProviderRole && !isOwnSale) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access a sale that was not owned by the current user');\n    return React.createElement(NamedRedirect, {\n      name: \"InboxPage\",\n      params: {\n        tab: 'sales'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    });\n  } else if (isDataAvailable && isCustomerRole && !isOwnOrder) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access an order that was not owned by the current user');\n    return React.createElement(NamedRedirect, {\n      name: \"InboxPage\",\n      params: {\n        tab: 'orders'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    });\n  }\n\n  const detailsClassName = classNames(css.tabContent, css.tabContentVisible);\n  const fetchErrorMessage = isCustomerRole ? 'TransactionPage.fetchOrderFailed' : 'TransactionPage.fetchSaleFailed';\n  const loadingMessage = isCustomerRole ? 'TransactionPage.loadingOrderData' : 'TransactionPage.loadingSaleData';\n  const loadingOrFailedFetching = fetchTransactionError ? React.createElement(\"p\", {\n    className: css.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"\".concat(fetchErrorMessage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })) : React.createElement(\"p\", {\n    className: css.loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"\".concat(loadingMessage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }));\n  const initialMessageFailed = !!(initialMessageFailedToTransaction && currentTransaction.id && initialMessageFailedToTransaction.uuid === currentTransaction.id.uuid); // TransactionPanel is presentational component\n  // that currently handles showing everything inside layout's main view area.\n\n  const panel = isDataAvailable ? React.createElement(TransactionPanel, {\n    className: detailsClassName,\n    currentUser: currentUser,\n    transaction: currentTransaction,\n    fetchMessagesInProgress: fetchMessagesInProgress,\n    totalMessagePages: totalMessagePages,\n    oldestMessagePageFetched: oldestMessagePageFetched,\n    messages: messages,\n    initialMessageFailed: initialMessageFailed,\n    fetchMessagesError: fetchMessagesError,\n    sendMessageInProgress: sendMessageInProgress,\n    sendMessageError: sendMessageError,\n    sendReviewInProgress: sendReviewInProgress,\n    sendReviewError: sendReviewError,\n    onManageDisableScrolling: onManageDisableScrolling,\n    onShowMoreMessages: onShowMoreMessages,\n    onSendMessage: onSendMessage,\n    onSendReview: onSendReview,\n    transactionRole: transactionRole,\n    onAcceptSale: onAcceptSale,\n    onDeclineSale: onDeclineSale,\n    acceptInProgress: acceptInProgress,\n    declineInProgress: declineInProgress,\n    acceptSaleError: acceptSaleError,\n    declineSaleError: declineSaleError,\n    onSubmitBookingRequest: handleSubmitBookingRequest,\n    timeSlots: timeSlots,\n    fetchTimeSlotsError: fetchTimeSlotsError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }) : loadingOrFailedFetching;\n  return React.createElement(Page, {\n    title: intl.formatMessage({\n      id: 'TransactionPage.title'\n    }, {\n      title: listingTitle\n    }),\n    scrollingDisabled: scrollingDisabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(LayoutSingleColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(LayoutWrapperTopbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(TopbarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  })), React.createElement(LayoutWrapperMain, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, panel)), React.createElement(LayoutWrapperFooter, {\n    className: css.footer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }))));\n};\nTransactionPageComponent.defaultProps = {\n  currentUser: null,\n  fetchTransactionError: null,\n  acceptSaleError: null,\n  declineSaleError: null,\n  transaction: null,\n  fetchMessagesError: null,\n  initialMessageFailedToTransaction: null,\n  sendMessageError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      oneOf = PropTypes.oneOf,\n      shape = PropTypes.shape,\n      string = PropTypes.string,\n      arrayOf = PropTypes.arrayOf,\n      number = PropTypes.number;\nTransactionPageComponent.propTypes = {\n  params: shape({\n    id: string\n  }).isRequired,\n  transactionRole: oneOf([PROVIDER, CUSTOMER]).isRequired,\n  currentUser: propTypes.currentUser,\n  fetchTransactionError: propTypes.error,\n  acceptSaleError: propTypes.error,\n  declineSaleError: propTypes.error,\n  acceptInProgress: bool.isRequired,\n  declineInProgress: bool.isRequired,\n  onAcceptSale: func.isRequired,\n  onDeclineSale: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  transaction: propTypes.transaction,\n  fetchMessagesError: propTypes.error,\n  totalMessagePages: number.isRequired,\n  oldestMessagePageFetched: number.isRequired,\n  messages: arrayOf(propTypes.message).isRequired,\n  initialMessageFailedToTransaction: propTypes.uuid,\n  sendMessageInProgress: bool.isRequired,\n  sendMessageError: propTypes.error,\n  onShowMoreMessages: func.isRequired,\n  onSendMessage: func.isRequired,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  fetchTimeSlotsError: propTypes.error,\n  callSetInitialValues: func.isRequired,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const _state$TransactionPag = state.TransactionPage,\n        fetchTransactionError = _state$TransactionPag.fetchTransactionError,\n        acceptSaleError = _state$TransactionPag.acceptSaleError,\n        declineSaleError = _state$TransactionPag.declineSaleError,\n        acceptInProgress = _state$TransactionPag.acceptInProgress,\n        declineInProgress = _state$TransactionPag.declineInProgress,\n        transactionRef = _state$TransactionPag.transactionRef,\n        fetchMessagesInProgress = _state$TransactionPag.fetchMessagesInProgress,\n        fetchMessagesError = _state$TransactionPag.fetchMessagesError,\n        totalMessagePages = _state$TransactionPag.totalMessagePages,\n        oldestMessagePageFetched = _state$TransactionPag.oldestMessagePageFetched,\n        messages = _state$TransactionPag.messages,\n        initialMessageFailedToTransaction = _state$TransactionPag.initialMessageFailedToTransaction,\n        sendMessageInProgress = _state$TransactionPag.sendMessageInProgress,\n        sendMessageError = _state$TransactionPag.sendMessageError,\n        sendReviewInProgress = _state$TransactionPag.sendReviewInProgress,\n        sendReviewError = _state$TransactionPag.sendReviewError,\n        timeSlots = _state$TransactionPag.timeSlots,\n        fetchTimeSlotsError = _state$TransactionPag.fetchTimeSlotsError;\n  const currentUser = state.user.currentUser;\n  const transactions = getMarketplaceEntities(state, transactionRef ? [transactionRef] : []);\n  const transaction = transactions.length > 0 ? transactions[0] : null;\n  return {\n    currentUser,\n    fetchTransactionError,\n    acceptSaleError,\n    declineSaleError,\n    acceptInProgress,\n    declineInProgress,\n    scrollingDisabled: isScrollingDisabled(state),\n    transaction,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAcceptSale: transactionId => dispatch(acceptSale(transactionId)),\n    onDeclineSale: transactionId => dispatch(declineSale(transactionId)),\n    onShowMoreMessages: txId => dispatch(fetchMoreMessages(txId)),\n    onSendMessage: (txId, message) => dispatch(sendMessage(txId, message)),\n    onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n    onSendReview: (role, tx, reviewRating, reviewContent) => dispatch(sendReview(role, tx, reviewRating, reviewContent)),\n    callSetInitialValues: (setInitialValues, values) => dispatch(setInitialValues(values))\n  };\n};\n\nconst TransactionPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(TransactionPageComponent);\nTransactionPage.loadData = loadData;\nTransactionPage.setInitialValues = setInitialValues;\nexport default TransactionPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/TransactionPage/TransactionPage.js"],"names":["React","PropTypes","compose","connect","withRouter","classNames","FormattedMessage","intlShape","injectIntl","createResourceLocatorString","findRouteByRouteName","routeConfiguration","propTypes","ensureListing","ensureTransaction","createSlug","getMarketplaceEntities","isScrollingDisabled","manageDisableScrolling","NamedRedirect","TransactionPanel","Page","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","TopbarContainer","acceptSale","declineSale","loadData","setInitialValues","sendMessage","sendReview","fetchMoreMessages","css","PROVIDER","CUSTOMER","TransactionPageComponent","props","currentUser","initialMessageFailedToTransaction","fetchMessagesError","fetchMessagesInProgress","totalMessagePages","oldestMessagePageFetched","fetchTransactionError","history","intl","messages","onManageDisableScrolling","onSendMessage","onSendReview","onShowMoreMessages","params","scrollingDisabled","sendMessageError","sendMessageInProgress","sendReviewError","sendReviewInProgress","transaction","transactionRole","acceptInProgress","acceptSaleError","declineInProgress","declineSaleError","onAcceptSale","onDeclineSale","timeSlots","fetchTimeSlotsError","callSetInitialValues","currentTransaction","currentListing","listing","handleSubmitBookingRequest","values","bookingDates","bookingData","initialValues","enquiredTransaction","bookingStart","startDate","bookingEnd","endDate","routes","push","id","uuid","slug","attributes","title","deletedListingTitle","formatMessage","listingTitle","deleted","isDataAvailable","lineItems","customer","provider","isProviderRole","isCustomerRole","isOwnSale","isOwnOrder","console","error","tab","detailsClassName","tabContent","tabContentVisible","fetchErrorMessage","loadingMessage","loadingOrFailedFetching","loading","initialMessageFailed","panel","root","footer","defaultProps","bool","func","oneOf","shape","string","arrayOf","number","isRequired","message","timeSlot","location","search","mapStateToProps","state","TransactionPage","transactionRef","user","transactions","length","mapDispatchToProps","dispatch","transactionId","txId","componentId","disableScrolling","role","tx","reviewRating","reviewContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from 'react-intl';\nimport { createResourceLocatorString, findRouteByRouteName } from '../../util/routes';\nimport routeConfiguration from '../../routeConfiguration';\nimport { propTypes } from '../../util/types';\nimport { ensureListing, ensureTransaction } from '../../util/data';\nimport { createSlug } from '../../util/urlHelpers';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { isScrollingDisabled, manageDisableScrolling } from '../../ducks/UI.duck';\nimport {\n  NamedRedirect,\n  TransactionPanel,\n  Page,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport {\n  acceptSale,\n  declineSale,\n  loadData,\n  setInitialValues,\n  sendMessage,\n  sendReview,\n  fetchMoreMessages,\n} from './TransactionPage.duck';\nimport css from './TransactionPage.css';\n\nconst PROVIDER = 'provider';\nconst CUSTOMER = 'customer';\n\n// TransactionPage handles data loading for Sale and Order views to transaction pages in Inbox.\nexport const TransactionPageComponent = props => {\n  const {\n    currentUser,\n    initialMessageFailedToTransaction,\n    fetchMessagesError,\n    fetchMessagesInProgress,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    fetchTransactionError,\n    history,\n    intl,\n    messages,\n    onManageDisableScrolling,\n    onSendMessage,\n    onSendReview,\n    onShowMoreMessages,\n    params,\n    scrollingDisabled,\n    sendMessageError,\n    sendMessageInProgress,\n    sendReviewError,\n    sendReviewInProgress,\n    transaction,\n    transactionRole,\n    acceptInProgress,\n    acceptSaleError,\n    declineInProgress,\n    declineSaleError,\n    onAcceptSale,\n    onDeclineSale,\n    timeSlots,\n    fetchTimeSlotsError,\n    callSetInitialValues,\n  } = props;\n\n  const currentTransaction = ensureTransaction(transaction);\n  const currentListing = ensureListing(currentTransaction.listing);\n\n  const handleSubmitBookingRequest = values => {\n    const { bookingDates, ...bookingData } = values;\n\n    const initialValues = {\n      listing: currentListing,\n      enquiredTransaction: currentTransaction,\n      bookingData,\n      bookingDates: {\n        bookingStart: bookingDates.startDate,\n        bookingEnd: bookingDates.endDate,\n      },\n    };\n\n    const routes = routeConfiguration();\n    // Customize checkout page state with current listing and selected bookingDates\n    const { setInitialValues } = findRouteByRouteName('CheckoutPage', routes);\n    callSetInitialValues(setInitialValues, initialValues);\n\n    // Redirect to CheckoutPage\n    history.push(\n      createResourceLocatorString(\n        'CheckoutPage',\n        routes,\n        { id: currentListing.id.uuid, slug: createSlug(currentListing.attributes.title) },\n        {}\n      )\n    );\n  };\n\n  const deletedListingTitle = intl.formatMessage({\n    id: 'TransactionPage.deletedListing',\n  });\n  const listingTitle = currentListing.attributes.deleted\n    ? deletedListingTitle\n    : currentListing.attributes.title;\n\n  // Redirect users with someone else's direct link to their own inbox/sales or inbox/orders page.\n  const isDataAvailable =\n    currentUser &&\n    currentTransaction.id &&\n    currentTransaction.id.uuid === params.id &&\n    currentTransaction.attributes.lineItems &&\n    currentTransaction.customer &&\n    currentTransaction.provider &&\n    !fetchTransactionError;\n\n  const isProviderRole = transactionRole === PROVIDER;\n  const isCustomerRole = transactionRole === CUSTOMER;\n  const isOwnSale =\n    isDataAvailable &&\n    isProviderRole &&\n    currentUser.id.uuid === currentTransaction.provider.id.uuid;\n  const isOwnOrder =\n    isDataAvailable &&\n    isCustomerRole &&\n    currentUser.id.uuid === currentTransaction.customer.id.uuid;\n\n  if (isDataAvailable && isProviderRole && !isOwnSale) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access a sale that was not owned by the current user');\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'sales' }} />;\n  } else if (isDataAvailable && isCustomerRole && !isOwnOrder) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access an order that was not owned by the current user');\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'orders' }} />;\n  }\n\n  const detailsClassName = classNames(css.tabContent, css.tabContentVisible);\n\n  const fetchErrorMessage = isCustomerRole\n    ? 'TransactionPage.fetchOrderFailed'\n    : 'TransactionPage.fetchSaleFailed';\n  const loadingMessage = isCustomerRole\n    ? 'TransactionPage.loadingOrderData'\n    : 'TransactionPage.loadingSaleData';\n\n  const loadingOrFailedFetching = fetchTransactionError ? (\n    <p className={css.error}>\n      <FormattedMessage id={`${fetchErrorMessage}`} />\n    </p>\n  ) : (\n    <p className={css.loading}>\n      <FormattedMessage id={`${loadingMessage}`} />\n    </p>\n  );\n\n  const initialMessageFailed = !!(\n    initialMessageFailedToTransaction &&\n    currentTransaction.id &&\n    initialMessageFailedToTransaction.uuid === currentTransaction.id.uuid\n  );\n\n  // TransactionPanel is presentational component\n  // that currently handles showing everything inside layout's main view area.\n  const panel = isDataAvailable ? (\n    <TransactionPanel\n      className={detailsClassName}\n      currentUser={currentUser}\n      transaction={currentTransaction}\n      fetchMessagesInProgress={fetchMessagesInProgress}\n      totalMessagePages={totalMessagePages}\n      oldestMessagePageFetched={oldestMessagePageFetched}\n      messages={messages}\n      initialMessageFailed={initialMessageFailed}\n      fetchMessagesError={fetchMessagesError}\n      sendMessageInProgress={sendMessageInProgress}\n      sendMessageError={sendMessageError}\n      sendReviewInProgress={sendReviewInProgress}\n      sendReviewError={sendReviewError}\n      onManageDisableScrolling={onManageDisableScrolling}\n      onShowMoreMessages={onShowMoreMessages}\n      onSendMessage={onSendMessage}\n      onSendReview={onSendReview}\n      transactionRole={transactionRole}\n      onAcceptSale={onAcceptSale}\n      onDeclineSale={onDeclineSale}\n      acceptInProgress={acceptInProgress}\n      declineInProgress={declineInProgress}\n      acceptSaleError={acceptSaleError}\n      declineSaleError={declineSaleError}\n      onSubmitBookingRequest={handleSubmitBookingRequest}\n      timeSlots={timeSlots}\n      fetchTimeSlotsError={fetchTimeSlotsError}\n    />\n  ) : (\n    loadingOrFailedFetching\n  );\n\n  return (\n    <Page\n      title={intl.formatMessage({ id: 'TransactionPage.title' }, { title: listingTitle })}\n      scrollingDisabled={scrollingDisabled}\n    >\n      <LayoutSingleColumn>\n        <LayoutWrapperTopbar>\n          <TopbarContainer />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperMain>\n          <div className={css.root}>{panel}</div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter className={css.footer}>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSingleColumn>\n    </Page>\n  );\n};\n\nTransactionPageComponent.defaultProps = {\n  currentUser: null,\n  fetchTransactionError: null,\n  acceptSaleError: null,\n  declineSaleError: null,\n  transaction: null,\n  fetchMessagesError: null,\n  initialMessageFailedToTransaction: null,\n  sendMessageError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n};\n\nconst { bool, func, oneOf, shape, string, arrayOf, number } = PropTypes;\n\nTransactionPageComponent.propTypes = {\n  params: shape({ id: string }).isRequired,\n  transactionRole: oneOf([PROVIDER, CUSTOMER]).isRequired,\n  currentUser: propTypes.currentUser,\n  fetchTransactionError: propTypes.error,\n  acceptSaleError: propTypes.error,\n  declineSaleError: propTypes.error,\n  acceptInProgress: bool.isRequired,\n  declineInProgress: bool.isRequired,\n  onAcceptSale: func.isRequired,\n  onDeclineSale: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  transaction: propTypes.transaction,\n  fetchMessagesError: propTypes.error,\n  totalMessagePages: number.isRequired,\n  oldestMessagePageFetched: number.isRequired,\n  messages: arrayOf(propTypes.message).isRequired,\n  initialMessageFailedToTransaction: propTypes.uuid,\n  sendMessageInProgress: bool.isRequired,\n  sendMessageError: propTypes.error,\n  onShowMoreMessages: func.isRequired,\n  onSendMessage: func.isRequired,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  fetchTimeSlotsError: propTypes.error,\n  callSetInitialValues: func.isRequired,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    fetchTransactionError,\n    acceptSaleError,\n    declineSaleError,\n    acceptInProgress,\n    declineInProgress,\n    transactionRef,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError,\n  } = state.TransactionPage;\n  const { currentUser } = state.user;\n\n  const transactions = getMarketplaceEntities(state, transactionRef ? [transactionRef] : []);\n  const transaction = transactions.length > 0 ? transactions[0] : null;\n\n  return {\n    currentUser,\n    fetchTransactionError,\n    acceptSaleError,\n    declineSaleError,\n    acceptInProgress,\n    declineInProgress,\n    scrollingDisabled: isScrollingDisabled(state),\n    transaction,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAcceptSale: transactionId => dispatch(acceptSale(transactionId)),\n    onDeclineSale: transactionId => dispatch(declineSale(transactionId)),\n    onShowMoreMessages: txId => dispatch(fetchMoreMessages(txId)),\n    onSendMessage: (txId, message) => dispatch(sendMessage(txId, message)),\n    onManageDisableScrolling: (componentId, disableScrolling) =>\n      dispatch(manageDisableScrolling(componentId, disableScrolling)),\n    onSendReview: (role, tx, reviewRating, reviewContent) =>\n      dispatch(sendReview(role, tx, reviewRating, reviewContent)),\n    callSetInitialValues: (setInitialValues, values) => dispatch(setInitialValues(values)),\n  };\n};\n\nconst TransactionPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(TransactionPageComponent);\n\nTransactionPage.loadData = loadData;\nTransactionPage.setInitialValues = setInitialValues;\n\nexport default TransactionPage;\n"]},"metadata":{},"sourceType":"module"}