{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/PriceFilter/PriceFilterPlain.js\";\nimport React, { Component } from 'react';\nimport { func, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { formatCurrencyMajorUnit } from '../../util/currency';\nimport config from '../../config';\nimport { PriceFilterForm } from '../../forms';\nimport css from './PriceFilterPlain.css';\n\nclass PriceFilterPlainComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  handleChange(values) {\n    const _this$props = this.props,\n          onSubmit = _this$props.onSubmit,\n          urlParam = _this$props.urlParam;\n    onSubmit(urlParam, values);\n  }\n\n  handleClear() {\n    const _this$props2 = this.props,\n          onSubmit = _this$props2.onSubmit,\n          urlParam = _this$props2.urlParam;\n    onSubmit(urlParam, null);\n  }\n\n  toggleIsOpen() {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          rootClassName = _this$props3.rootClassName,\n          className = _this$props3.className,\n          id = _this$props3.id,\n          initialValues = _this$props3.initialValues,\n          min = _this$props3.min,\n          max = _this$props3.max,\n          step = _this$props3.step,\n          intl = _this$props3.intl,\n          currencyConfig = _this$props3.currencyConfig;\n    const classes = classNames(rootClassName || css.root, className);\n\n    const _ref = initialValues || {},\n          minPrice = _ref.minPrice,\n          maxPrice = _ref.maxPrice;\n\n    const hasValue = value => value != null;\n\n    const hasInitialValues = initialValues && hasValue(minPrice) && hasValue(maxPrice);\n    const labelClass = hasInitialValues ? css.filterLabelSelected : css.filterLabel;\n    const labelText = hasInitialValues ? intl.formatMessage({\n      id: 'PriceFilter.labelSelectedPlain'\n    }, {\n      minPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, minPrice),\n      maxPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, maxPrice)\n    }) : intl.formatMessage({\n      id: 'PriceFilter.label'\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: labelClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: css.labelButton,\n      onClick: this.toggleIsOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: labelClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, labelText)), React.createElement(\"button\", {\n      type: \"button\",\n      className: css.clearButton,\n      onClick: this.handleClear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: 'PriceFilter.clear',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: css.formWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(PriceFilterForm, {\n      id: id,\n      initialValues: hasInitialValues ? initialValues : {\n        minPrice: min,\n        maxPrice: max\n      },\n      onChange: this.handleChange,\n      intl: intl,\n      contentRef: node => {\n        this.filterContent = node;\n      },\n      min: min,\n      max: max,\n      step: step,\n      liveEdit: true,\n      isOpen: this.state.isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  }\n\n}\n\nPriceFilterPlainComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  step: number,\n  currencyConfig: config.currencyConfig\n};\nPriceFilterPlainComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  urlParam: string.isRequired,\n  onSubmit: func.isRequired,\n  initialValues: shape({\n    minPrice: number.isRequired,\n    maxPrice: number.isRequired\n  }),\n  min: number.isRequired,\n  max: number.isRequired,\n  step: number,\n  currencyConfig: propTypes.currencyConfig,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nconst PriceFilterPlain = injectIntl(PriceFilterPlainComponent);\nexport default PriceFilterPlain;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/PriceFilter/PriceFilterPlain.js"],"names":["React","Component","func","number","shape","string","classNames","injectIntl","intlShape","FormattedMessage","propTypes","formatCurrencyMajorUnit","config","PriceFilterForm","css","PriceFilterPlainComponent","constructor","props","state","isOpen","handleChange","bind","handleClear","toggleIsOpen","values","onSubmit","urlParam","setState","prevState","render","rootClassName","className","id","initialValues","min","max","step","intl","currencyConfig","classes","root","minPrice","maxPrice","hasValue","value","hasInitialValues","labelClass","filterLabelSelected","filterLabel","labelText","formatMessage","currency","labelButton","clearButton","formWrapper","node","filterContent","defaultProps","isRequired","PriceFilterPlain"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { func, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { formatCurrencyMajorUnit } from '../../util/currency';\nimport config from '../../config';\n\nimport { PriceFilterForm } from '../../forms';\n\nimport css from './PriceFilterPlain.css';\n\nclass PriceFilterPlainComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOpen: true };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  handleChange(values) {\n    const { onSubmit, urlParam } = this.props;\n    onSubmit(urlParam, values);\n  }\n\n  handleClear() {\n    const { onSubmit, urlParam } = this.props;\n    onSubmit(urlParam, null);\n  }\n\n  toggleIsOpen() {\n    this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      initialValues,\n      min,\n      max,\n      step,\n      intl,\n      currencyConfig,\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const { minPrice, maxPrice } = initialValues || {};\n\n    const hasValue = value => value != null;\n    const hasInitialValues = initialValues && hasValue(minPrice) && hasValue(maxPrice);\n\n    const labelClass = hasInitialValues ? css.filterLabelSelected : css.filterLabel;\n    const labelText = hasInitialValues\n      ? intl.formatMessage(\n          { id: 'PriceFilter.labelSelectedPlain' },\n          {\n            minPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, minPrice),\n            maxPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, maxPrice),\n          }\n        )\n      : intl.formatMessage({ id: 'PriceFilter.label' });\n\n    return (\n      <div className={classes}>\n        <div className={labelClass}>\n          <button type=\"button\" className={css.labelButton} onClick={this.toggleIsOpen}>\n            <span className={labelClass}>{labelText}</span>\n          </button>\n          <button type=\"button\" className={css.clearButton} onClick={this.handleClear}>\n            <FormattedMessage id={'PriceFilter.clear'} />\n          </button>\n        </div>\n        <div className={css.formWrapper}>\n          <PriceFilterForm\n            id={id}\n            initialValues={hasInitialValues ? initialValues : { minPrice: min, maxPrice: max }}\n            onChange={this.handleChange}\n            intl={intl}\n            contentRef={node => {\n              this.filterContent = node;\n            }}\n            min={min}\n            max={max}\n            step={step}\n            liveEdit\n            isOpen={this.state.isOpen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nPriceFilterPlainComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  step: number,\n  currencyConfig: config.currencyConfig,\n};\n\nPriceFilterPlainComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  urlParam: string.isRequired,\n  onSubmit: func.isRequired,\n  initialValues: shape({\n    minPrice: number.isRequired,\n    maxPrice: number.isRequired,\n  }),\n  min: number.isRequired,\n  max: number.isRequired,\n  step: number,\n  currencyConfig: propTypes.currencyConfig,\n\n  // form injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst PriceFilterPlain = injectIntl(PriceFilterPlainComponent);\n\nexport default PriceFilterPlain;\n"]},"metadata":{},"sourceType":"module"}