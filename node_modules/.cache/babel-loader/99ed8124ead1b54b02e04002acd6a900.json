{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/LoginForm/LoginForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../components';\nimport * as validators from '../../util/validators';\nimport css from './LoginForm.css';\n\nconst LoginFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const rootClassName = fieldRenderProps.rootClassName,\n          className = fieldRenderProps.className,\n          formId = fieldRenderProps.formId,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          inProgress = fieldRenderProps.inProgress,\n          intl = fieldRenderProps.intl,\n          invalid = fieldRenderProps.invalid; // email\n\n    const emailLabel = intl.formatMessage({\n      id: 'LoginForm.emailLabel'\n    });\n    const emailPlaceholder = intl.formatMessage({\n      id: 'LoginForm.emailPlaceholder'\n    });\n    const emailRequiredMessage = intl.formatMessage({\n      id: 'LoginForm.emailRequired'\n    });\n    const emailRequired = validators.required(emailRequiredMessage);\n    const emailInvalidMessage = intl.formatMessage({\n      id: 'LoginForm.emailInvalid'\n    });\n    const emailValid = validators.emailFormatValid(emailInvalidMessage); // password\n\n    const passwordLabel = intl.formatMessage({\n      id: 'LoginForm.passwordLabel'\n    });\n    const passwordPlaceholder = intl.formatMessage({\n      id: 'LoginForm.passwordPlaceholder'\n    });\n    const passwordRequiredMessage = intl.formatMessage({\n      id: 'LoginForm.passwordRequired'\n    });\n    const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n    const passwordRecoveryLink = React.createElement(NamedLink, {\n      name: \"PasswordRecoveryPage\",\n      className: css.recoveryLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"LoginForm.forgotPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }));\n    return React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(FieldTextInput, {\n      type: \"email\",\n      id: formId ? \"\".concat(formId, \".email\") : 'email',\n      name: \"email\",\n      autoComplete: \"email\",\n      label: emailLabel,\n      placeholder: emailPlaceholder,\n      validate: validators.composeValidators(emailRequired, emailValid),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(FieldTextInput, {\n      className: css.password,\n      type: \"password\",\n      id: formId ? \"\".concat(formId, \".password\") : 'password',\n      name: \"password\",\n      autoComplete: \"current-password\",\n      label: passwordLabel,\n      placeholder: passwordPlaceholder,\n      validate: passwordRequired,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: css.bottomWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: css.bottomWrapperText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.recoveryLinkInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"LoginForm.forgotPasswordInfo\",\n      values: {\n        passwordRecoveryLink\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"LoginForm.logIn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }))));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}));\n\nLoginFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  form: null,\n  inProgress: false\n};\nconst string = PropTypes.string,\n      bool = PropTypes.bool;\nLoginFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  form: string,\n  inProgress: bool,\n  intl: intlShape.isRequired\n};\nconst LoginForm = compose(injectIntl)(LoginFormComponent);\nLoginForm.displayName = 'LoginForm';\nexport default LoginForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/LoginForm/LoginForm.js"],"names":["React","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","classNames","PrimaryButton","FieldTextInput","NamedLink","validators","css","LoginFormComponent","props","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","intl","invalid","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","requiredStringNoTrim","classes","root","submitInProgress","submitDisabled","passwordRecoveryLink","recoveryLink","composeValidators","password","bottomWrapper","bottomWrapperText","recoveryLinkInfo","defaultProps","form","string","bool","propTypes","isRequired","LoginForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../components';\nimport * as validators from '../../util/validators';\n\nimport css from './LoginForm.css';\n\nconst LoginFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        rootClassName,\n        className,\n        formId,\n        handleSubmit,\n        inProgress,\n        intl,\n        invalid,\n      } = fieldRenderProps;\n\n      // email\n      const emailLabel = intl.formatMessage({\n        id: 'LoginForm.emailLabel',\n      });\n      const emailPlaceholder = intl.formatMessage({\n        id: 'LoginForm.emailPlaceholder',\n      });\n      const emailRequiredMessage = intl.formatMessage({\n        id: 'LoginForm.emailRequired',\n      });\n      const emailRequired = validators.required(emailRequiredMessage);\n      const emailInvalidMessage = intl.formatMessage({\n        id: 'LoginForm.emailInvalid',\n      });\n      const emailValid = validators.emailFormatValid(emailInvalidMessage);\n\n      // password\n      const passwordLabel = intl.formatMessage({\n        id: 'LoginForm.passwordLabel',\n      });\n      const passwordPlaceholder = intl.formatMessage({\n        id: 'LoginForm.passwordPlaceholder',\n      });\n      const passwordRequiredMessage = intl.formatMessage({\n        id: 'LoginForm.passwordRequired',\n      });\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n\n      const classes = classNames(rootClassName || css.root, className);\n      const submitInProgress = inProgress;\n      const submitDisabled = invalid || submitInProgress;\n\n      const passwordRecoveryLink = (\n        <NamedLink name=\"PasswordRecoveryPage\" className={css.recoveryLink}>\n          <FormattedMessage id=\"LoginForm.forgotPassword\" />\n        </NamedLink>\n      );\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          <div>\n            <FieldTextInput\n              type=\"email\"\n              id={formId ? `${formId}.email` : 'email'}\n              name=\"email\"\n              autoComplete=\"email\"\n              label={emailLabel}\n              placeholder={emailPlaceholder}\n              validate={validators.composeValidators(emailRequired, emailValid)}\n            />\n            <FieldTextInput\n              className={css.password}\n              type=\"password\"\n              id={formId ? `${formId}.password` : 'password'}\n              name=\"password\"\n              autoComplete=\"current-password\"\n              label={passwordLabel}\n              placeholder={passwordPlaceholder}\n              validate={passwordRequired}\n            />\n          </div>\n          <div className={css.bottomWrapper}>\n            <p className={css.bottomWrapperText}>\n              <span className={css.recoveryLinkInfo}>\n                <FormattedMessage\n                  id=\"LoginForm.forgotPasswordInfo\"\n                  values={{ passwordRecoveryLink }}\n                />\n              </span>\n            </p>\n            <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\n              <FormattedMessage id=\"LoginForm.logIn\" />\n            </PrimaryButton>\n          </div>\n        </Form>\n      );\n    }}\n  />\n);\n\nLoginFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  form: null,\n  inProgress: false,\n};\n\nconst { string, bool } = PropTypes;\n\nLoginFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  form: string,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n};\n\nconst LoginForm = compose(injectIntl)(LoginFormComponent);\nLoginForm.displayName = 'LoginForm';\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}