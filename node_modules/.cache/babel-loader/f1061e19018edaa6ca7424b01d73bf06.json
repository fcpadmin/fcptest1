{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/SearchPage/SearchPage.js\";\nimport React, { Component } from 'react';\nimport { array, bool, func, number, oneOf, object, shape, string } from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport unionWith from 'lodash/unionWith';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { SearchMap, ModalInMobile, Page } from '../../components';\nimport { TopbarContainer } from '../../containers';\nimport { searchListings, searchMapListings, setActiveListing } from './SearchPage.duck';\nimport { pickSearchParamsOnly, validURLParamsForExtendedData, validFilterParams, createSearchResultSchema } from './SearchPage.helpers';\nimport MainPanel from './MainPanel';\nimport css from './SearchPage.css'; // Pagination page size might need to be dynamic on responsive page layouts\n// Current design has max 3 columns 12 is divisible by 2 and 3\n// So, there's enough cards to fill all columns on full pagination pages\n\nconst RESULT_PAGE_SIZE = 24;\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\n\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\n\nexport class SearchPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSearchMapOpenOnMobile: props.tab === 'map',\n      isMobileModalOpen: false\n    };\n    this.searchMapListingsInProgress = false;\n    this.filters = this.filters.bind(this);\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\n  }\n\n  filters() {\n    const _this$props = this.props,\n          categories = _this$props.categories,\n          amenities = _this$props.amenities,\n          priceFilterConfig = _this$props.priceFilterConfig,\n          dateRangeFilterConfig = _this$props.dateRangeFilterConfig; // Note: \"category\" and \"amenities\" filters are not actually filtering anything by default.\n    // Currently, if you want to use them, we need to manually configure them to be available\n    // for search queries. Read more from extended data document:\n    // https://www.sharetribe.com/docs/references/extended-data/#data-schema\n\n    return {\n      categoryFilter: {\n        paramName: 'pub_category',\n        options: categories\n      },\n      amenitiesFilter: {\n        paramName: 'pub_amenities',\n        options: amenities\n      },\n      priceFilter: {\n        paramName: 'price',\n        config: priceFilterConfig\n      },\n      dateRangeFilter: {\n        paramName: 'dates',\n        config: dateRangeFilterConfig\n      }\n    };\n  } // Callback to determine if new search is needed\n  // when map is moved by user or viewport has changed\n\n\n  onMapMoveEnd(viewportBoundsChanged, data) {\n    const viewportBounds = data.viewportBounds,\n          viewportCenter = data.viewportCenter;\n    const routes = routeConfiguration();\n    const searchPagePath = pathByRouteName('SearchPage', routes);\n    const currentPath = typeof window !== 'undefined' && window.location && window.location.pathname; // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\n\n    const isSearchPage = currentPath === searchPagePath; // If mapSearch url param is given\n    // or original location search is rendered once,\n    // we start to react to \"mapmoveend\" events by generating new searches\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\n\n    if (viewportBoundsChanged && isSearchPage) {\n      const _this$props2 = this.props,\n            history = _this$props2.history,\n            location = _this$props2.location; // parse query parameters, including a custom attribute named category\n\n      const _parse = parse(location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds']\n      }),\n            address = _parse.address,\n            bounds = _parse.bounds,\n            mapSearch = _parse.mapSearch,\n            rest = _objectWithoutProperties(_parse, [\"address\", \"bounds\", \"mapSearch\"]); //const viewportMapCenter = SearchMap.getMapCenter(map);\n\n\n      const originMaybe = config.sortSearchByDistance ? {\n        origin: viewportCenter\n      } : {};\n\n      const searchParams = _objectSpread({\n        address\n      }, originMaybe, {\n        bounds: viewportBounds,\n        mapSearch: true\n      }, validFilterParams(rest, this.filters()));\n\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\n    }\n  } // Invoked when a modal is opened from a child component,\n  // for example when a filter modal is opened in mobile view\n\n\n  onOpenMobileModal() {\n    this.setState({\n      isMobileModalOpen: true\n    });\n  } // Invoked when a modal is closed from a child component,\n  // for example when a filter modal is opened in mobile view\n\n\n  onCloseMobileModal() {\n    this.setState({\n      isMobileModalOpen: false\n    });\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          intl = _this$props3.intl,\n          listings = _this$props3.listings,\n          location = _this$props3.location,\n          mapListings = _this$props3.mapListings,\n          onManageDisableScrolling = _this$props3.onManageDisableScrolling,\n          pagination = _this$props3.pagination,\n          scrollingDisabled = _this$props3.scrollingDisabled,\n          searchInProgress = _this$props3.searchInProgress,\n          searchListingsError = _this$props3.searchListingsError,\n          searchParams = _this$props3.searchParams,\n          activeListingId = _this$props3.activeListingId,\n          onActivateListing = _this$props3.onActivateListing; // eslint-disable-next-line no-unused-vars\n\n    const _parse2 = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds']\n    }),\n          mapSearch = _parse2.mapSearch,\n          page = _parse2.page,\n          searchInURL = _objectWithoutProperties(_parse2, [\"mapSearch\", \"page\"]);\n\n    const filters = this.filters(); // urlQueryParams doesn't contain page specific url params\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filters); // Page transition might initially use values from previous search\n\n    const urlQueryString = stringify(urlQueryParams);\n    const paramsQueryString = stringify(pickSearchParamsOnly(searchParams, filters));\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filters);\n    const isWindowDefined = typeof window !== 'undefined';\n    const isMobileLayout = isWindowDefined && window.innerWidth < MODAL_BREAKPOINT;\n    const shouldShowSearchMap = !isMobileLayout || isMobileLayout && this.state.isSearchMapOpenOnMobile;\n\n    const onMapIconClick = () => {\n      this.useLocationSearchBounds = true;\n      this.setState({\n        isSearchMapOpenOnMobile: true\n      });\n    };\n\n    const _ref = searchInURL || {},\n          address = _ref.address,\n          bounds = _ref.bounds,\n          origin = _ref.origin;\n\n    const _createSearchResultSc = createSearchResultSchema(listings, address, intl),\n          title = _createSearchResultSc.title,\n          description = _createSearchResultSc.description,\n          schema = _createSearchResultSc.schema; // Set topbar class based on if a modal is open in\n    // a child component\n\n\n    const topbarClasses = this.state.isMobileModalOpen ? classNames(css.topbarBehindModal, css.topbar) : css.topbar; // N.B. openMobileMap button is sticky.\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\n\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\n\n    return React.createElement(Page, {\n      scrollingDisabled: scrollingDisabled,\n      description: description,\n      title: title,\n      schema: schema,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(TopbarContainer, {\n      className: topbarClasses,\n      currentPage: \"SearchPage\",\n      currentSearchParams: urlQueryParams,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: css.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(MainPanel, {\n      urlQueryParams: validQueryParams,\n      listings: listings,\n      searchInProgress: searchInProgress,\n      searchListingsError: searchListingsError,\n      searchParamsAreInSync: searchParamsAreInSync,\n      onActivateListing: onActivateListing,\n      onManageDisableScrolling: onManageDisableScrolling,\n      onOpenModal: this.onOpenMobileModal,\n      onCloseModal: this.onCloseMobileModal,\n      onMapIconClick: onMapIconClick,\n      pagination: pagination,\n      searchParamsForPagination: parse(location.search),\n      showAsModalMaxWidth: MODAL_BREAKPOINT,\n      primaryFilters: {\n        categoryFilter: filters.categoryFilter,\n        amenitiesFilter: filters.amenitiesFilter,\n        priceFilter: filters.priceFilter,\n        dateRangeFilter: filters.dateRangeFilter\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(ModalInMobile, {\n      className: css.mapPanel,\n      id: \"SearchPage.map\",\n      isModalOpenOnMobile: this.state.isSearchMapOpenOnMobile,\n      onClose: () => this.setState({\n        isSearchMapOpenOnMobile: false\n      }),\n      showAsModalMaxWidth: MODAL_BREAKPOINT,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.mapWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, shouldShowSearchMap ? React.createElement(SearchMap, {\n      reusableContainerClassName: css.map,\n      activeListingId: activeListingId,\n      bounds: bounds,\n      center: origin,\n      isSearchMapOpenOnMobile: this.state.isSearchMapOpenOnMobile,\n      location: location,\n      listings: mapListings || [],\n      onMapMoveEnd: this.onMapMoveEnd,\n      onCloseAsModal: () => {\n        onManageDisableScrolling('SearchPage.map', false);\n      },\n      messages: intl.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }) : null))));\n    /* eslint-enable jsx-a11y/no-static-element-interactions */\n  }\n\n}\nSearchPageComponent.defaultProps = {\n  listings: [],\n  mapListings: [],\n  pagination: null,\n  searchListingsError: null,\n  searchParams: {},\n  tab: 'listings',\n  categories: config.custom.categories,\n  amenities: config.custom.amenities,\n  priceFilterConfig: config.custom.priceFilterConfig,\n  dateRangeFilterConfig: config.custom.dateRangeFilterConfig,\n  activeListingId: null\n};\nSearchPageComponent.propTypes = {\n  listings: array,\n  mapListings: array,\n  onActivateListing: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onSearchMapListings: func.isRequired,\n  pagination: propTypes.pagination,\n  scrollingDisabled: bool.isRequired,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParams: object,\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\n  categories: array,\n  amenities: array,\n  priceFilterConfig: shape({\n    min: number.isRequired,\n    max: number.isRequired,\n    step: number.isRequired\n  }),\n  dateRangeFilterConfig: shape({\n    active: bool.isRequired\n  }),\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const _state$SearchPage = state.SearchPage,\n        currentPageResultIds = _state$SearchPage.currentPageResultIds,\n        pagination = _state$SearchPage.pagination,\n        searchInProgress = _state$SearchPage.searchInProgress,\n        searchListingsError = _state$SearchPage.searchListingsError,\n        searchParams = _state$SearchPage.searchParams,\n        searchMapListingIds = _state$SearchPage.searchMapListingIds,\n        activeListingId = _state$SearchPage.activeListingId;\n  const pageListings = getListingsById(state, currentPageResultIds);\n  const mapListings = getListingsById(state, unionWith(currentPageResultIds, searchMapListingIds, (id1, id2) => id1.uuid === id2.uuid));\n  return {\n    listings: pageListings,\n    mapListings,\n    pagination,\n    scrollingDisabled: isScrollingDisabled(state),\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    activeListingId\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onSearchMapListings: searchParams => dispatch(searchMapListings(searchParams)),\n  onActivateListing: listingId => dispatch(setActiveListing(listingId))\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst SearchPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(SearchPageComponent);\n\nSearchPage.loadData = (params, search) => {\n  const queryParams = parse(search, {\n    latlng: ['origin'],\n    latlngBounds: ['bounds']\n  });\n\n  const _queryParams$page = queryParams.page,\n        page = _queryParams$page === void 0 ? 1 : _queryParams$page,\n        address = queryParams.address,\n        origin = queryParams.origin,\n        rest = _objectWithoutProperties(queryParams, [\"page\", \"address\", \"origin\"]);\n\n  const originMaybe = config.sortSearchByDistance && origin ? {\n    origin\n  } : {};\n  return searchListings(_objectSpread({}, rest, originMaybe, {\n    page,\n    perPage: RESULT_PAGE_SIZE,\n    include: ['author', 'images'],\n    'fields.listing': ['title', 'geolocation', 'price'],\n    'fields.user': ['profile.displayName', 'profile.abbreviatedName'],\n    'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    'limit.images': 1\n  }));\n};\n\nexport default SearchPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/SearchPage/SearchPage.js"],"names":["React","Component","array","bool","func","number","oneOf","object","shape","string","injectIntl","intlShape","connect","compose","withRouter","debounce","unionWith","classNames","config","routeConfiguration","createResourceLocatorString","pathByRouteName","parse","stringify","propTypes","getListingsById","manageDisableScrolling","isScrollingDisabled","SearchMap","ModalInMobile","Page","TopbarContainer","searchListings","searchMapListings","setActiveListing","pickSearchParamsOnly","validURLParamsForExtendedData","validFilterParams","createSearchResultSchema","MainPanel","css","RESULT_PAGE_SIZE","MODAL_BREAKPOINT","SEARCH_WITH_MAP_DEBOUNCE","SearchPageComponent","constructor","props","state","isSearchMapOpenOnMobile","tab","isMobileModalOpen","searchMapListingsInProgress","filters","bind","onMapMoveEnd","onOpenMobileModal","onCloseMobileModal","categories","amenities","priceFilterConfig","dateRangeFilterConfig","categoryFilter","paramName","options","amenitiesFilter","priceFilter","dateRangeFilter","viewportBoundsChanged","data","viewportBounds","viewportCenter","routes","searchPagePath","currentPath","window","location","pathname","isSearchPage","history","search","latlng","latlngBounds","address","bounds","mapSearch","rest","originMaybe","sortSearchByDistance","origin","searchParams","push","setState","render","intl","listings","mapListings","onManageDisableScrolling","pagination","scrollingDisabled","searchInProgress","searchListingsError","activeListingId","onActivateListing","page","searchInURL","urlQueryParams","urlQueryString","paramsQueryString","searchParamsAreInSync","validQueryParams","isWindowDefined","isMobileLayout","innerWidth","shouldShowSearchMap","onMapIconClick","useLocationSearchBounds","title","description","schema","topbarClasses","topbarBehindModal","topbar","container","mapPanel","mapWrapper","map","messages","defaultProps","custom","isRequired","onSearchMapListings","error","min","max","step","active","mapStateToProps","SearchPage","currentPageResultIds","searchMapListingIds","pageListings","id1","id2","uuid","mapDispatchToProps","dispatch","componentId","disableScrolling","listingId","loadData","params","queryParams","perPage","include"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { array, bool, func, number, oneOf, object, shape, string } from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport unionWith from 'lodash/unionWith';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { SearchMap, ModalInMobile, Page } from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport { searchListings, searchMapListings, setActiveListing } from './SearchPage.duck';\nimport {\n  pickSearchParamsOnly,\n  validURLParamsForExtendedData,\n  validFilterParams,\n  createSearchResultSchema,\n} from './SearchPage.helpers';\nimport MainPanel from './MainPanel';\nimport css from './SearchPage.css';\n\n// Pagination page size might need to be dynamic on responsive page layouts\n// Current design has max 3 columns 12 is divisible by 2 and 3\n// So, there's enough cards to fill all columns on full pagination pages\nconst RESULT_PAGE_SIZE = 24;\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\n\nexport class SearchPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSearchMapOpenOnMobile: props.tab === 'map',\n      isMobileModalOpen: false,\n    };\n\n    this.searchMapListingsInProgress = false;\n\n    this.filters = this.filters.bind(this);\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\n  }\n\n  filters() {\n    const { categories, amenities, priceFilterConfig, dateRangeFilterConfig } = this.props;\n\n    // Note: \"category\" and \"amenities\" filters are not actually filtering anything by default.\n    // Currently, if you want to use them, we need to manually configure them to be available\n    // for search queries. Read more from extended data document:\n    // https://www.sharetribe.com/docs/references/extended-data/#data-schema\n\n    return {\n      categoryFilter: {\n        paramName: 'pub_category',\n        options: categories,\n      },\n      amenitiesFilter: {\n        paramName: 'pub_amenities',\n        options: amenities,\n      },\n      priceFilter: {\n        paramName: 'price',\n        config: priceFilterConfig,\n      },\n      dateRangeFilter: {\n        paramName: 'dates',\n        config: dateRangeFilterConfig,\n      },\n    };\n  }\n\n  // Callback to determine if new search is needed\n  // when map is moved by user or viewport has changed\n  onMapMoveEnd(viewportBoundsChanged, data) {\n    const { viewportBounds, viewportCenter } = data;\n\n    const routes = routeConfiguration();\n    const searchPagePath = pathByRouteName('SearchPage', routes);\n    const currentPath =\n      typeof window !== 'undefined' && window.location && window.location.pathname;\n\n    // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\n    const isSearchPage = currentPath === searchPagePath;\n\n    // If mapSearch url param is given\n    // or original location search is rendered once,\n    // we start to react to \"mapmoveend\" events by generating new searches\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\n    if (viewportBoundsChanged && isSearchPage) {\n      const { history, location } = this.props;\n\n      // parse query parameters, including a custom attribute named category\n      const { address, bounds, mapSearch, ...rest } = parse(location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds'],\n      });\n\n      //const viewportMapCenter = SearchMap.getMapCenter(map);\n      const originMaybe = config.sortSearchByDistance ? { origin: viewportCenter } : {};\n\n      const searchParams = {\n        address,\n        ...originMaybe,\n        bounds: viewportBounds,\n        mapSearch: true,\n        ...validFilterParams(rest, this.filters()),\n      };\n\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\n    }\n  }\n\n  // Invoked when a modal is opened from a child component,\n  // for example when a filter modal is opened in mobile view\n  onOpenMobileModal() {\n    this.setState({ isMobileModalOpen: true });\n  }\n\n  // Invoked when a modal is closed from a child component,\n  // for example when a filter modal is opened in mobile view\n  onCloseMobileModal() {\n    this.setState({ isMobileModalOpen: false });\n  }\n\n  render() {\n    const {\n      intl,\n      listings,\n      location,\n      mapListings,\n      onManageDisableScrolling,\n      pagination,\n      scrollingDisabled,\n      searchInProgress,\n      searchListingsError,\n      searchParams,\n      activeListingId,\n      onActivateListing,\n    } = this.props;\n    // eslint-disable-next-line no-unused-vars\n    const { mapSearch, page, ...searchInURL } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds'],\n    });\n\n    const filters = this.filters();\n\n    // urlQueryParams doesn't contain page specific url params\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filters);\n\n    // Page transition might initially use values from previous search\n    const urlQueryString = stringify(urlQueryParams);\n    const paramsQueryString = stringify(pickSearchParamsOnly(searchParams, filters));\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\n\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filters);\n\n    const isWindowDefined = typeof window !== 'undefined';\n    const isMobileLayout = isWindowDefined && window.innerWidth < MODAL_BREAKPOINT;\n    const shouldShowSearchMap =\n      !isMobileLayout || (isMobileLayout && this.state.isSearchMapOpenOnMobile);\n\n    const onMapIconClick = () => {\n      this.useLocationSearchBounds = true;\n      this.setState({ isSearchMapOpenOnMobile: true });\n    };\n\n    const { address, bounds, origin } = searchInURL || {};\n    const { title, description, schema } = createSearchResultSchema(listings, address, intl);\n\n    // Set topbar class based on if a modal is open in\n    // a child component\n    const topbarClasses = this.state.isMobileModalOpen\n      ? classNames(css.topbarBehindModal, css.topbar)\n      : css.topbar;\n\n    // N.B. openMobileMap button is sticky.\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\n    return (\n      <Page\n        scrollingDisabled={scrollingDisabled}\n        description={description}\n        title={title}\n        schema={schema}\n      >\n        <TopbarContainer\n          className={topbarClasses}\n          currentPage=\"SearchPage\"\n          currentSearchParams={urlQueryParams}\n        />\n        <div className={css.container}>\n          <MainPanel\n            urlQueryParams={validQueryParams}\n            listings={listings}\n            searchInProgress={searchInProgress}\n            searchListingsError={searchListingsError}\n            searchParamsAreInSync={searchParamsAreInSync}\n            onActivateListing={onActivateListing}\n            onManageDisableScrolling={onManageDisableScrolling}\n            onOpenModal={this.onOpenMobileModal}\n            onCloseModal={this.onCloseMobileModal}\n            onMapIconClick={onMapIconClick}\n            pagination={pagination}\n            searchParamsForPagination={parse(location.search)}\n            showAsModalMaxWidth={MODAL_BREAKPOINT}\n            primaryFilters={{\n              categoryFilter: filters.categoryFilter,\n              amenitiesFilter: filters.amenitiesFilter,\n              priceFilter: filters.priceFilter,\n              dateRangeFilter: filters.dateRangeFilter,\n            }}\n          />\n          <ModalInMobile\n            className={css.mapPanel}\n            id=\"SearchPage.map\"\n            isModalOpenOnMobile={this.state.isSearchMapOpenOnMobile}\n            onClose={() => this.setState({ isSearchMapOpenOnMobile: false })}\n            showAsModalMaxWidth={MODAL_BREAKPOINT}\n            onManageDisableScrolling={onManageDisableScrolling}\n          >\n            <div className={css.mapWrapper}>\n              {shouldShowSearchMap ? (\n                <SearchMap\n                  reusableContainerClassName={css.map}\n                  activeListingId={activeListingId}\n                  bounds={bounds}\n                  center={origin}\n                  isSearchMapOpenOnMobile={this.state.isSearchMapOpenOnMobile}\n                  location={location}\n                  listings={mapListings || []}\n                  onMapMoveEnd={this.onMapMoveEnd}\n                  onCloseAsModal={() => {\n                    onManageDisableScrolling('SearchPage.map', false);\n                  }}\n                  messages={intl.messages}\n                />\n              ) : null}\n            </div>\n          </ModalInMobile>\n        </div>\n      </Page>\n    );\n    /* eslint-enable jsx-a11y/no-static-element-interactions */\n  }\n}\n\nSearchPageComponent.defaultProps = {\n  listings: [],\n  mapListings: [],\n  pagination: null,\n  searchListingsError: null,\n  searchParams: {},\n  tab: 'listings',\n  categories: config.custom.categories,\n  amenities: config.custom.amenities,\n  priceFilterConfig: config.custom.priceFilterConfig,\n  dateRangeFilterConfig: config.custom.dateRangeFilterConfig,\n  activeListingId: null,\n};\n\nSearchPageComponent.propTypes = {\n  listings: array,\n  mapListings: array,\n  onActivateListing: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onSearchMapListings: func.isRequired,\n  pagination: propTypes.pagination,\n  scrollingDisabled: bool.isRequired,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParams: object,\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\n  categories: array,\n  amenities: array,\n  priceFilterConfig: shape({\n    min: number.isRequired,\n    max: number.isRequired,\n    step: number.isRequired,\n  }),\n  dateRangeFilterConfig: shape({ active: bool.isRequired }),\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    searchMapListingIds,\n    activeListingId,\n  } = state.SearchPage;\n  const pageListings = getListingsById(state, currentPageResultIds);\n  const mapListings = getListingsById(\n    state,\n    unionWith(currentPageResultIds, searchMapListingIds, (id1, id2) => id1.uuid === id2.uuid)\n  );\n\n  return {\n    listings: pageListings,\n    mapListings,\n    pagination,\n    scrollingDisabled: isScrollingDisabled(state),\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    activeListingId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onSearchMapListings: searchParams => dispatch(searchMapListings(searchParams)),\n  onActivateListing: listingId => dispatch(setActiveListing(listingId)),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst SearchPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(SearchPageComponent);\n\nSearchPage.loadData = (params, search) => {\n  const queryParams = parse(search, {\n    latlng: ['origin'],\n    latlngBounds: ['bounds'],\n  });\n  const { page = 1, address, origin, ...rest } = queryParams;\n  const originMaybe = config.sortSearchByDistance && origin ? { origin } : {};\n  return searchListings({\n    ...rest,\n    ...originMaybe,\n    page,\n    perPage: RESULT_PAGE_SIZE,\n    include: ['author', 'images'],\n    'fields.listing': ['title', 'geolocation', 'price'],\n    'fields.user': ['profile.displayName', 'profile.abbreviatedName'],\n    'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    'limit.images': 1,\n  });\n};\n\nexport default SearchPage;\n"]},"metadata":{},"sourceType":"module"}