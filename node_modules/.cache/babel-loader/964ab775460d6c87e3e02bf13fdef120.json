{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ManageListingsPage/ManageListingsPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { ManageListingCard, Page, PaginationLinks, UserNav, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer } from '../../components';\nimport { TopbarContainer } from '../../containers';\nimport { closeListing, openListing, getOwnListingsById, queryOwnListings } from './ManageListingsPage.duck';\nimport css from './ManageListingsPage.css'; // Pagination page size might need to be dynamic on responsive page layouts\n// Current design has max 3 columns 42 is divisible by 2 and 3\n// So, there's enough cards to fill all columns on full pagination pages\n\nconst RESULT_PAGE_SIZE = 42;\nexport class ManageListingsPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listingMenuOpen: null\n    };\n    this.onToggleMenu = this.onToggleMenu.bind(this);\n  }\n\n  onToggleMenu(listing) {\n    this.setState({\n      listingMenuOpen: listing\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          closingListing = _this$props.closingListing,\n          closingListingError = _this$props.closingListingError,\n          listings = _this$props.listings,\n          onCloseListing = _this$props.onCloseListing,\n          onOpenListing = _this$props.onOpenListing,\n          openingListing = _this$props.openingListing,\n          openingListingError = _this$props.openingListingError,\n          pagination = _this$props.pagination,\n          queryInProgress = _this$props.queryInProgress,\n          queryListingsError = _this$props.queryListingsError,\n          queryParams = _this$props.queryParams,\n          scrollingDisabled = _this$props.scrollingDisabled,\n          intl = _this$props.intl;\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const listingsAreLoaded = !queryInProgress && hasPaginationInfo;\n    const loadingResults = React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ManageListingsPage.loadingOwnListings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n    const queryError = React.createElement(\"h2\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ManageListingsPage.queryError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n    const noResults = listingsAreLoaded && pagination.totalItems === 0 ? React.createElement(\"h1\", {\n      className: css.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ManageListingsPage.noResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })) : null;\n    const heading = listingsAreLoaded && pagination.totalItems > 0 ? React.createElement(\"h1\", {\n      className: css.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ManageListingsPage.youHaveListings\",\n      values: {\n        count: pagination.totalItems\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })) : noResults;\n    const page = queryParams ? queryParams.page : 1;\n    const paginationLinks = listingsAreLoaded && pagination && pagination.totalPages > 1 ? React.createElement(PaginationLinks, {\n      className: css.pagination,\n      pageName: \"ManageListingsPage\",\n      pageSearchParams: {\n        page\n      },\n      pagination: pagination,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }) : null;\n    const listingMenuOpen = this.state.listingMenuOpen;\n    const closingErrorListingId = !!closingListingError && closingListingError.listingId;\n    const openingErrorListingId = !!openingListingError && openingListingError.listingId;\n    const title = intl.formatMessage({\n      id: 'ManageListingsPage.title'\n    });\n    const panelWidth = 62.5; // Render hints for responsive image\n\n    const renderSizes = [\"(max-width: 767px) 100vw\", \"(max-width: 1920px) \".concat(panelWidth / 2, \"vw\"), \"\".concat(panelWidth / 3, \"vw\")].join(', ');\n    return React.createElement(Page, {\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(LayoutSingleColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(LayoutWrapperTopbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(TopbarContainer, {\n      currentPage: \"ManageListingsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(UserNav, {\n      selectedPageName: \"ManageListingsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })), React.createElement(LayoutWrapperMain, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, queryInProgress ? loadingResults : null, queryListingsError ? queryError : null, React.createElement(\"div\", {\n      className: css.listingPanel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, heading, React.createElement(\"div\", {\n      className: css.listingCards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, listings.map(l => React.createElement(ManageListingCard, {\n      className: css.listingCard,\n      key: l.id.uuid,\n      listing: l,\n      isMenuOpen: !!listingMenuOpen && listingMenuOpen.id.uuid === l.id.uuid,\n      actionsInProgressListingId: openingListing || closingListing,\n      onToggleMenu: this.onToggleMenu,\n      onCloseListing: onCloseListing,\n      onOpenListing: onOpenListing,\n      hasOpeningError: openingErrorListingId.uuid === l.id.uuid,\n      hasClosingError: closingErrorListingId.uuid === l.id.uuid,\n      renderSizes: renderSizes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))), paginationLinks)), React.createElement(LayoutWrapperFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }))));\n  }\n\n}\nManageListingsPageComponent.defaultProps = {\n  listings: [],\n  pagination: null,\n  queryListingsError: null,\n  queryParams: null,\n  closingListing: null,\n  closingListingError: null,\n  openingListing: null,\n  openingListingError: null\n};\nconst arrayOf = PropTypes.arrayOf,\n      bool = PropTypes.bool,\n      func = PropTypes.func,\n      object = PropTypes.object,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nManageListingsPageComponent.propTypes = {\n  closingListing: shape({\n    uuid: string.isRequired\n  }),\n  closingListingError: shape({\n    listingId: propTypes.uuid.isRequired,\n    error: propTypes.error.isRequired\n  }),\n  listings: arrayOf(propTypes.ownListing),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  openingListing: shape({\n    uuid: string.isRequired\n  }),\n  openingListingError: shape({\n    listingId: propTypes.uuid.isRequired,\n    error: propTypes.error.isRequired\n  }),\n  pagination: propTypes.pagination,\n  queryInProgress: bool.isRequired,\n  queryListingsError: propTypes.error,\n  queryParams: object,\n  scrollingDisabled: bool.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const _state$ManageListings = state.ManageListingsPage,\n        currentPageResultIds = _state$ManageListings.currentPageResultIds,\n        pagination = _state$ManageListings.pagination,\n        queryInProgress = _state$ManageListings.queryInProgress,\n        queryListingsError = _state$ManageListings.queryListingsError,\n        queryParams = _state$ManageListings.queryParams,\n        openingListing = _state$ManageListings.openingListing,\n        openingListingError = _state$ManageListings.openingListingError,\n        closingListing = _state$ManageListings.closingListing,\n        closingListingError = _state$ManageListings.closingListingError;\n  const listings = getOwnListingsById(state, currentPageResultIds);\n  return {\n    currentPageResultIds,\n    listings,\n    pagination,\n    queryInProgress,\n    queryListingsError,\n    queryParams,\n    scrollingDisabled: isScrollingDisabled(state),\n    openingListing,\n    openingListingError,\n    closingListing,\n    closingListingError\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onCloseListing: listingId => dispatch(closeListing(listingId)),\n  onOpenListing: listingId => dispatch(openListing(listingId))\n});\n\nconst ManageListingsPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(ManageListingsPageComponent);\n\nManageListingsPage.loadData = (params, search) => {\n  const queryParams = parse(search);\n  const page = queryParams.page || 1;\n  return queryOwnListings(_objectSpread({}, queryParams, {\n    page,\n    perPage: RESULT_PAGE_SIZE,\n    include: ['images'],\n    'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    'limit.images': 1\n  }));\n};\n\nexport default ManageListingsPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ManageListingsPage/ManageListingsPage.js"],"names":["React","Component","PropTypes","compose","connect","injectIntl","intlShape","FormattedMessage","propTypes","parse","isScrollingDisabled","ManageListingCard","Page","PaginationLinks","UserNav","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","TopbarContainer","closeListing","openListing","getOwnListingsById","queryOwnListings","css","RESULT_PAGE_SIZE","ManageListingsPageComponent","constructor","props","state","listingMenuOpen","onToggleMenu","bind","listing","setState","render","closingListing","closingListingError","listings","onCloseListing","onOpenListing","openingListing","openingListingError","pagination","queryInProgress","queryListingsError","queryParams","scrollingDisabled","intl","hasPaginationInfo","totalItems","listingsAreLoaded","loadingResults","queryError","error","noResults","title","heading","count","page","paginationLinks","totalPages","closingErrorListingId","listingId","openingErrorListingId","formatMessage","id","panelWidth","renderSizes","join","listingPanel","listingCards","map","l","listingCard","uuid","defaultProps","arrayOf","bool","func","object","shape","string","isRequired","ownListing","mapStateToProps","ManageListingsPage","currentPageResultIds","mapDispatchToProps","dispatch","loadData","params","search","perPage","include"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  ManageListingCard,\n  Page,\n  PaginationLinks,\n  UserNav,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport {\n  closeListing,\n  openListing,\n  getOwnListingsById,\n  queryOwnListings,\n} from './ManageListingsPage.duck';\nimport css from './ManageListingsPage.css';\n\n// Pagination page size might need to be dynamic on responsive page layouts\n// Current design has max 3 columns 42 is divisible by 2 and 3\n// So, there's enough cards to fill all columns on full pagination pages\nconst RESULT_PAGE_SIZE = 42;\n\nexport class ManageListingsPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { listingMenuOpen: null };\n    this.onToggleMenu = this.onToggleMenu.bind(this);\n  }\n\n  onToggleMenu(listing) {\n    this.setState({ listingMenuOpen: listing });\n  }\n\n  render() {\n    const {\n      closingListing,\n      closingListingError,\n      listings,\n      onCloseListing,\n      onOpenListing,\n      openingListing,\n      openingListingError,\n      pagination,\n      queryInProgress,\n      queryListingsError,\n      queryParams,\n      scrollingDisabled,\n      intl,\n    } = this.props;\n\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const listingsAreLoaded = !queryInProgress && hasPaginationInfo;\n\n    const loadingResults = (\n      <h2>\n        <FormattedMessage id=\"ManageListingsPage.loadingOwnListings\" />\n      </h2>\n    );\n\n    const queryError = (\n      <h2 className={css.error}>\n        <FormattedMessage id=\"ManageListingsPage.queryError\" />\n      </h2>\n    );\n\n    const noResults =\n      listingsAreLoaded && pagination.totalItems === 0 ? (\n        <h1 className={css.title}>\n          <FormattedMessage id=\"ManageListingsPage.noResults\" />\n        </h1>\n      ) : null;\n\n    const heading =\n      listingsAreLoaded && pagination.totalItems > 0 ? (\n        <h1 className={css.title}>\n          <FormattedMessage\n            id=\"ManageListingsPage.youHaveListings\"\n            values={{ count: pagination.totalItems }}\n          />\n        </h1>\n      ) : (\n        noResults\n      );\n\n    const page = queryParams ? queryParams.page : 1;\n    const paginationLinks =\n      listingsAreLoaded && pagination && pagination.totalPages > 1 ? (\n        <PaginationLinks\n          className={css.pagination}\n          pageName=\"ManageListingsPage\"\n          pageSearchParams={{ page }}\n          pagination={pagination}\n        />\n      ) : null;\n\n    const listingMenuOpen = this.state.listingMenuOpen;\n    const closingErrorListingId = !!closingListingError && closingListingError.listingId;\n    const openingErrorListingId = !!openingListingError && openingListingError.listingId;\n\n    const title = intl.formatMessage({ id: 'ManageListingsPage.title' });\n\n    const panelWidth = 62.5;\n    // Render hints for responsive image\n    const renderSizes = [\n      `(max-width: 767px) 100vw`,\n      `(max-width: 1920px) ${panelWidth / 2}vw`,\n      `${panelWidth / 3}vw`,\n    ].join(', ');\n\n    return (\n      <Page title={title} scrollingDisabled={scrollingDisabled}>\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer currentPage=\"ManageListingsPage\" />\n            <UserNav selectedPageName=\"ManageListingsPage\" />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain>\n            {queryInProgress ? loadingResults : null}\n            {queryListingsError ? queryError : null}\n            <div className={css.listingPanel}>\n              {heading}\n              <div className={css.listingCards}>\n                {listings.map(l => (\n                  <ManageListingCard\n                    className={css.listingCard}\n                    key={l.id.uuid}\n                    listing={l}\n                    isMenuOpen={!!listingMenuOpen && listingMenuOpen.id.uuid === l.id.uuid}\n                    actionsInProgressListingId={openingListing || closingListing}\n                    onToggleMenu={this.onToggleMenu}\n                    onCloseListing={onCloseListing}\n                    onOpenListing={onOpenListing}\n                    hasOpeningError={openingErrorListingId.uuid === l.id.uuid}\n                    hasClosingError={closingErrorListingId.uuid === l.id.uuid}\n                    renderSizes={renderSizes}\n                  />\n                ))}\n              </div>\n              {paginationLinks}\n            </div>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nManageListingsPageComponent.defaultProps = {\n  listings: [],\n  pagination: null,\n  queryListingsError: null,\n  queryParams: null,\n  closingListing: null,\n  closingListingError: null,\n  openingListing: null,\n  openingListingError: null,\n};\n\nconst { arrayOf, bool, func, object, shape, string } = PropTypes;\n\nManageListingsPageComponent.propTypes = {\n  closingListing: shape({ uuid: string.isRequired }),\n  closingListingError: shape({\n    listingId: propTypes.uuid.isRequired,\n    error: propTypes.error.isRequired,\n  }),\n  listings: arrayOf(propTypes.ownListing),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  openingListing: shape({ uuid: string.isRequired }),\n  openingListingError: shape({\n    listingId: propTypes.uuid.isRequired,\n    error: propTypes.error.isRequired,\n  }),\n  pagination: propTypes.pagination,\n  queryInProgress: bool.isRequired,\n  queryListingsError: propTypes.error,\n  queryParams: object,\n  scrollingDisabled: bool.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    queryInProgress,\n    queryListingsError,\n    queryParams,\n    openingListing,\n    openingListingError,\n    closingListing,\n    closingListingError,\n  } = state.ManageListingsPage;\n  const listings = getOwnListingsById(state, currentPageResultIds);\n  return {\n    currentPageResultIds,\n    listings,\n    pagination,\n    queryInProgress,\n    queryListingsError,\n    queryParams,\n    scrollingDisabled: isScrollingDisabled(state),\n    openingListing,\n    openingListingError,\n    closingListing,\n    closingListingError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onCloseListing: listingId => dispatch(closeListing(listingId)),\n  onOpenListing: listingId => dispatch(openListing(listingId)),\n});\n\nconst ManageListingsPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(ManageListingsPageComponent);\n\nManageListingsPage.loadData = (params, search) => {\n  const queryParams = parse(search);\n  const page = queryParams.page || 1;\n  return queryOwnListings({\n    ...queryParams,\n    page,\n    perPage: RESULT_PAGE_SIZE,\n    include: ['images'],\n    'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    'limit.images': 1,\n  });\n};\n\nexport default ManageListingsPage;\n"]},"metadata":{},"sourceType":"module"}