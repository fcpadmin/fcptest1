{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Avatar/Avatar.js\";\nimport React from 'react';\nimport { string, oneOfType, bool } from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { ensureUser, ensureCurrentUser, userDisplayNameAsString, userAbbreviatedName } from '../../util/data';\nimport { ResponsiveImage, IconBannedUser, NamedLink } from '../../components/';\nimport css from './Avatar.css'; // Responsive image sizes hint\n\nconst AVATAR_SIZES = '40px';\nconst AVATAR_SIZES_MEDIUM = '60px';\nconst AVATAR_SIZES_LARGE = '96px';\nconst AVATAR_IMAGE_VARIANTS = [// 240x240\n'square-small', // 480x480\n'square-small2x'];\nexport const AvatarComponent = props => {\n  const rootClassName = props.rootClassName,\n        className = props.className,\n        user = props.user,\n        renderSizes = props.renderSizes,\n        disableProfileLink = props.disableProfileLink,\n        intl = props.intl;\n  const classes = classNames(rootClassName || css.root, className);\n  const userIsCurrentUser = user && user.type === 'currentUser';\n  const avatarUser = userIsCurrentUser ? ensureCurrentUser(user) : ensureUser(user);\n  const isBannedUser = avatarUser.attributes.banned;\n  const isDeletedUser = avatarUser.attributes.deleted;\n  const bannedUserDisplayName = intl.formatMessage({\n    id: 'Avatar.bannedUserDisplayName'\n  });\n  const deletedUserDisplayName = intl.formatMessage({\n    id: 'Avatar.deletedUserDisplayName'\n  });\n  const defaultUserDisplayName = isBannedUser ? bannedUserDisplayName : isDeletedUser ? deletedUserDisplayName : '';\n  const defaultUserAbbreviatedName = '';\n  const displayName = userDisplayNameAsString(avatarUser, defaultUserDisplayName);\n  const abbreviatedName = userAbbreviatedName(avatarUser, defaultUserAbbreviatedName);\n  const rootProps = {\n    className: classes,\n    title: displayName\n  };\n  const linkProps = avatarUser.id ? {\n    name: 'ProfilePage',\n    params: {\n      id: avatarUser.id.uuid\n    }\n  } : {\n    name: 'ProfileBasePage'\n  };\n  const hasProfileImage = avatarUser.profileImage && avatarUser.profileImage.id;\n  const profileLinkEnabled = !disableProfileLink;\n\n  if (isBannedUser || isDeletedUser) {\n    return React.createElement(\"div\", Object.assign({}, rootProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(IconBannedUser, {\n      className: css.bannedUserIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  } else if (hasProfileImage && profileLinkEnabled) {\n    return React.createElement(NamedLink, Object.assign({}, rootProps, linkProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(ResponsiveImage, {\n      rootClassName: css.avatarImage,\n      alt: displayName,\n      image: avatarUser.profileImage,\n      variants: AVATAR_IMAGE_VARIANTS,\n      sizes: renderSizes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  } else if (hasProfileImage) {\n    return React.createElement(\"div\", Object.assign({}, rootProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(ResponsiveImage, {\n      rootClassName: css.avatarImage,\n      alt: displayName,\n      image: avatarUser.profileImage,\n      variants: AVATAR_IMAGE_VARIANTS,\n      sizes: renderSizes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  } else if (profileLinkEnabled) {\n    // Placeholder avatar (initials)\n    return React.createElement(NamedLink, Object.assign({}, rootProps, linkProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: css.initials,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, abbreviatedName));\n  } else {\n    // Placeholder avatar (initials)\n    return React.createElement(\"div\", Object.assign({}, rootProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: css.initials,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, abbreviatedName));\n  }\n};\nAvatarComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  user: null,\n  renderSizes: AVATAR_SIZES,\n  disableProfileLink: false\n};\nAvatarComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  user: oneOfType([propTypes.user, propTypes.currentUser]),\n  renderSizes: string,\n  disableProfileLink: bool,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst Avatar = injectIntl(AvatarComponent);\nexport default Avatar;\nexport const AvatarMedium = props => React.createElement(Avatar, Object.assign({\n  rootClassName: css.mediumAvatar,\n  renderSizes: AVATAR_SIZES_MEDIUM\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 136\n  },\n  __self: this\n}));\nAvatarMedium.displayName = 'AvatarMedium';\nexport const AvatarLarge = props => React.createElement(Avatar, Object.assign({\n  rootClassName: css.largeAvatar,\n  renderSizes: AVATAR_SIZES_LARGE\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 141\n  },\n  __self: this\n}));\nAvatarLarge.displayName = 'AvatarLarge';","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Avatar/Avatar.js"],"names":["React","string","oneOfType","bool","injectIntl","intlShape","classNames","propTypes","ensureUser","ensureCurrentUser","userDisplayNameAsString","userAbbreviatedName","ResponsiveImage","IconBannedUser","NamedLink","css","AVATAR_SIZES","AVATAR_SIZES_MEDIUM","AVATAR_SIZES_LARGE","AVATAR_IMAGE_VARIANTS","AvatarComponent","props","rootClassName","className","user","renderSizes","disableProfileLink","intl","classes","root","userIsCurrentUser","type","avatarUser","isBannedUser","attributes","banned","isDeletedUser","deleted","bannedUserDisplayName","formatMessage","id","deletedUserDisplayName","defaultUserDisplayName","defaultUserAbbreviatedName","displayName","abbreviatedName","rootProps","title","linkProps","name","params","uuid","hasProfileImage","profileImage","profileLinkEnabled","bannedUserIcon","avatarImage","initials","defaultProps","currentUser","isRequired","Avatar","AvatarMedium","mediumAvatar","AvatarLarge","largeAvatar"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { string, oneOfType, bool } from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport {\n  ensureUser,\n  ensureCurrentUser,\n  userDisplayNameAsString,\n  userAbbreviatedName,\n} from '../../util/data';\nimport { ResponsiveImage, IconBannedUser, NamedLink } from '../../components/';\n\nimport css from './Avatar.css';\n\n// Responsive image sizes hint\nconst AVATAR_SIZES = '40px';\nconst AVATAR_SIZES_MEDIUM = '60px';\nconst AVATAR_SIZES_LARGE = '96px';\n\nconst AVATAR_IMAGE_VARIANTS = [\n  // 240x240\n  'square-small',\n\n  // 480x480\n  'square-small2x',\n];\n\nexport const AvatarComponent = props => {\n  const { rootClassName, className, user, renderSizes, disableProfileLink, intl } = props;\n  const classes = classNames(rootClassName || css.root, className);\n\n  const userIsCurrentUser = user && user.type === 'currentUser';\n  const avatarUser = userIsCurrentUser ? ensureCurrentUser(user) : ensureUser(user);\n\n  const isBannedUser = avatarUser.attributes.banned;\n  const isDeletedUser = avatarUser.attributes.deleted;\n\n  const bannedUserDisplayName = intl.formatMessage({\n    id: 'Avatar.bannedUserDisplayName',\n  });\n\n  const deletedUserDisplayName = intl.formatMessage({\n    id: 'Avatar.deletedUserDisplayName',\n  });\n\n  const defaultUserDisplayName = isBannedUser\n    ? bannedUserDisplayName\n    : isDeletedUser\n    ? deletedUserDisplayName\n    : '';\n\n  const defaultUserAbbreviatedName = '';\n\n  const displayName = userDisplayNameAsString(avatarUser, defaultUserDisplayName);\n  const abbreviatedName = userAbbreviatedName(avatarUser, defaultUserAbbreviatedName);\n  const rootProps = { className: classes, title: displayName };\n  const linkProps = avatarUser.id\n    ? { name: 'ProfilePage', params: { id: avatarUser.id.uuid } }\n    : { name: 'ProfileBasePage' };\n  const hasProfileImage = avatarUser.profileImage && avatarUser.profileImage.id;\n  const profileLinkEnabled = !disableProfileLink;\n\n  if (isBannedUser || isDeletedUser) {\n    return (\n      <div {...rootProps}>\n        <IconBannedUser className={css.bannedUserIcon} />\n      </div>\n    );\n  } else if (hasProfileImage && profileLinkEnabled) {\n    return (\n      <NamedLink {...rootProps} {...linkProps}>\n        <ResponsiveImage\n          rootClassName={css.avatarImage}\n          alt={displayName}\n          image={avatarUser.profileImage}\n          variants={AVATAR_IMAGE_VARIANTS}\n          sizes={renderSizes}\n        />\n      </NamedLink>\n    );\n  } else if (hasProfileImage) {\n    return (\n      <div {...rootProps}>\n        <ResponsiveImage\n          rootClassName={css.avatarImage}\n          alt={displayName}\n          image={avatarUser.profileImage}\n          variants={AVATAR_IMAGE_VARIANTS}\n          sizes={renderSizes}\n        />\n      </div>\n    );\n  } else if (profileLinkEnabled) {\n    // Placeholder avatar (initials)\n    return (\n      <NamedLink {...rootProps} {...linkProps}>\n        <span className={css.initials}>{abbreviatedName}</span>\n      </NamedLink>\n    );\n  } else {\n    // Placeholder avatar (initials)\n    return (\n      <div {...rootProps}>\n        <span className={css.initials}>{abbreviatedName}</span>\n      </div>\n    );\n  }\n};\n\nAvatarComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  user: null,\n  renderSizes: AVATAR_SIZES,\n  disableProfileLink: false,\n};\n\nAvatarComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  user: oneOfType([propTypes.user, propTypes.currentUser]),\n\n  renderSizes: string,\n  disableProfileLink: bool,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst Avatar = injectIntl(AvatarComponent);\n\nexport default Avatar;\n\nexport const AvatarMedium = props => (\n  <Avatar rootClassName={css.mediumAvatar} renderSizes={AVATAR_SIZES_MEDIUM} {...props} />\n);\nAvatarMedium.displayName = 'AvatarMedium';\n\nexport const AvatarLarge = props => (\n  <Avatar rootClassName={css.largeAvatar} renderSizes={AVATAR_SIZES_LARGE} {...props} />\n);\nAvatarLarge.displayName = 'AvatarLarge';\n"]},"metadata":{},"sourceType":"module"}