{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Menu/Menu.js\";\n\n/**\n * Menu is component that shows extra content when it is clicked.\n * Clicking it toggles visibility of MenuContent.\n *\n * Example:\n *  <Menu>\n *    <MenuLabel>\n *      <span>Open menu</span>\n *    </MenuLabel>\n *    <MenuContent>\n *      <MenuItem key=\"first item\">\n *        <Button onClick={onClick}>Click this</Button>\n *      </MenuItem>\n *    </MenuContent>\n *  </Menu>\n *\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { MenuContent, MenuLabel } from '../../components';\nimport css from './Menu.css';\nconst KEY_CODE_ESCAPE = 27;\nconst CONTENT_PLACEMENT_OFFSET = 0;\nconst CONTENT_TO_LEFT = 'left';\nconst CONTENT_TO_RIGHT = 'right';\n\nconst isControlledMenu = (isOpenProp, onToggleActiveProp) => {\n  return isOpenProp !== null && onToggleActiveProp !== null;\n}; // This should work, but it doesn't <div className=\"foo\" onClick={() => {}} role=\"button\" />\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    const isOpen = props.isOpen,\n          onToggleActive = props.onToggleActive;\n    const isIndependentMenu = isOpen === null && onToggleActive === null;\n\n    if (!(isIndependentMenu || isControlledMenu(isOpen, onToggleActive))) {\n      throw new Error(\"Menu has invalid props:\\n          Both isOpen and onToggleActive need to be defined (controlled menu),\\n          or neither of them (menu uses its own state management).\");\n    }\n\n    this.onBlur = this.onBlur.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.prepareChildren = this.prepareChildren.bind(this);\n    this.positionStyleForMenuContent = this.positionStyleForMenuContent.bind(this);\n    this.positionStyleForArrow = this.positionStyleForArrow.bind(this);\n    this.menu = null;\n    this.menuContent = null;\n  }\n\n  onBlur(event) {\n    // FocusEvent is fired faster than the link elements native click handler\n    // gets its own event. Therefore, we need to check the origin of this FocusEvent.\n    if (!this.menu.contains(event.relatedTarget)) {\n      const _this$props = this.props,\n            isOpen = _this$props.isOpen,\n            onToggleActive = _this$props.onToggleActive;\n\n      if (isControlledMenu(isOpen, onToggleActive)) {\n        onToggleActive(false);\n      } else {\n        this.setState({\n          isOpen: false\n        });\n      }\n    }\n  }\n\n  onKeyDown(e) {\n    // Gather all escape presses to close menu\n    if (e.keyCode === KEY_CODE_ESCAPE) {\n      this.toggleOpen(false);\n    }\n  }\n\n  toggleOpen(enforcedState) {\n    // If state is handled outside of Menu component, we call a passed in onToggleActive func\n    const _this$props2 = this.props,\n          isOpen = _this$props2.isOpen,\n          onToggleActive = _this$props2.onToggleActive;\n\n    if (isControlledMenu(isOpen, onToggleActive)) {\n      const isMenuOpen = enforcedState != null ? enforcedState : !isOpen;\n      onToggleActive(isMenuOpen);\n    } else {\n      // If state is handled inside of Menu component, set state\n      this.setState(prevState => {\n        const isMenuOpen = enforcedState != null ? enforcedState : !prevState.isOpen;\n        return {\n          isOpen: isMenuOpen\n        };\n      });\n    }\n  }\n\n  positionStyleForMenuContent(contentPosition) {\n    if (this.menu && this.menuContent) {\n      // Calculate wether we should show the menu to the left of the component or right\n      const distanceToRight = window.innerWidth - this.menu.getBoundingClientRect().right;\n      const menuWidth = this.menu.offsetWidth;\n      const contentWidthBiggerThanLabel = this.menuContent.offsetWidth - menuWidth;\n      const usePositionLeftFromLabel = contentPosition === CONTENT_TO_LEFT;\n      const contentPlacementOffset = this.props.contentPlacementOffset; // Render menu content to the left according to the contentPosition\n      // prop or if the content does not fit to the right. Otherwise render to\n      // the right.\n\n      return usePositionLeftFromLabel || distanceToRight < contentWidthBiggerThanLabel ? {\n        right: contentPlacementOffset,\n        minWidth: menuWidth\n      } : {\n        left: contentPlacementOffset,\n        minWidth: menuWidth\n      };\n    }\n\n    return {};\n  }\n\n  positionStyleForArrow(isPositionedRight) {\n    if (this.menu) {\n      const menuWidth = this.menu.offsetWidth;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      return isPositionedRight ? Math.floor(menuWidth / 2) - contentPlacementOffset : Math.floor(menuWidth / 2);\n    }\n\n    return 0;\n  }\n\n  prepareChildren() {\n    if (React.Children.count(this.props.children) !== 2) {\n      throw new Error('Menu needs to have two children: MenuLabel and MenuContent.');\n    }\n\n    return React.Children.map(this.props.children, child => {\n      const _this$props3 = this.props,\n            isOpenProp = _this$props3.isOpen,\n            onToggleActive = _this$props3.onToggleActive;\n      const isOpen = isControlledMenu(isOpenProp, onToggleActive) ? isOpenProp : this.state.isOpen;\n\n      if (child.type === MenuLabel) {\n        // MenuLabel needs toggleOpen function\n        // We pass that directly  so that component user doesn't need to worry about that\n        return React.cloneElement(child, {\n          isOpen,\n          onToggleActive: this.toggleOpen\n        });\n      } else if (child.type === MenuContent) {\n        // MenuContent needs some styling data (width, arrowPosition, and isOpen info)\n        // We pass those directly so that component user doesn't need to worry about those.\n        const _this$props4 = this.props,\n              contentPosition = _this$props4.contentPosition,\n              useArrow = _this$props4.useArrow;\n        const positionStyles = this.positionStyleForMenuContent(contentPosition);\n        const arrowPosition = useArrow ? this.positionStyleForArrow(positionStyles.right != null) : null;\n        return React.cloneElement(child, {\n          arrowPosition,\n          contentRef: node => {\n            this.menuContent = node;\n          },\n          isOpen,\n          style: _objectSpread({}, child.props.style, positionStyles)\n        });\n      } else {\n        throw new Error('Menu has an unknown child. Only MenuLabel and MenuContent are allowed.');\n      }\n    });\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          className = _this$props5.className,\n          rootClassName = _this$props5.rootClassName;\n    const rootClass = rootClassName || css.root;\n    const classes = classNames(rootClass, className);\n    const menuChildren = this.prepareChildren();\n    return React.createElement(\"div\", {\n      className: classes,\n      onBlur: this.onBlur,\n      tabIndex: 0,\n      onKeyDown: this.onKeyDown,\n      ref: c => {\n        this.menu = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, menuChildren);\n  }\n\n}\n/* eslint-enable jsx-a11y/no-static-element-interactions */\n\n\nMenu.defaultProps = {\n  className: null,\n  rootClassName: '',\n  contentPlacementOffset: CONTENT_PLACEMENT_OFFSET,\n  contentPosition: CONTENT_TO_RIGHT,\n  isOpen: null,\n  onToggleActive: null,\n  useArrow: true\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      node = PropTypes.node,\n      number = PropTypes.number,\n      string = PropTypes.string;\nMenu.propTypes = {\n  children: node.isRequired,\n  className: string,\n  rootClassName: string,\n  contentPosition: string,\n  contentPlacementOffset: number,\n  useArrow: bool,\n  isOpen: bool,\n  onToggleActive: func\n};\nexport default Menu;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Menu/Menu.js"],"names":["React","Component","PropTypes","classNames","MenuContent","MenuLabel","css","KEY_CODE_ESCAPE","CONTENT_PLACEMENT_OFFSET","CONTENT_TO_LEFT","CONTENT_TO_RIGHT","isControlledMenu","isOpenProp","onToggleActiveProp","Menu","constructor","props","state","isOpen","onToggleActive","isIndependentMenu","Error","onBlur","bind","onKeyDown","toggleOpen","prepareChildren","positionStyleForMenuContent","positionStyleForArrow","menu","menuContent","event","contains","relatedTarget","setState","e","keyCode","enforcedState","isMenuOpen","prevState","contentPosition","distanceToRight","window","innerWidth","getBoundingClientRect","right","menuWidth","offsetWidth","contentWidthBiggerThanLabel","usePositionLeftFromLabel","contentPlacementOffset","minWidth","left","isPositionedRight","Math","floor","Children","count","children","map","child","type","cloneElement","useArrow","positionStyles","arrowPosition","contentRef","node","style","render","className","rootClassName","rootClass","root","classes","menuChildren","c","defaultProps","bool","func","number","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\n * Menu is component that shows extra content when it is clicked.\n * Clicking it toggles visibility of MenuContent.\n *\n * Example:\n *  <Menu>\n *    <MenuLabel>\n *      <span>Open menu</span>\n *    </MenuLabel>\n *    <MenuContent>\n *      <MenuItem key=\"first item\">\n *        <Button onClick={onClick}>Click this</Button>\n *      </MenuItem>\n *    </MenuContent>\n *  </Menu>\n *\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { MenuContent, MenuLabel } from '../../components';\nimport css from './Menu.css';\n\nconst KEY_CODE_ESCAPE = 27;\nconst CONTENT_PLACEMENT_OFFSET = 0;\nconst CONTENT_TO_LEFT = 'left';\nconst CONTENT_TO_RIGHT = 'right';\n\nconst isControlledMenu = (isOpenProp, onToggleActiveProp) => {\n  return isOpenProp !== null && onToggleActiveProp !== null;\n};\n\n// This should work, but it doesn't <div className=\"foo\" onClick={() => {}} role=\"button\" />\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false };\n\n    const { isOpen, onToggleActive } = props;\n    const isIndependentMenu = isOpen === null && onToggleActive === null;\n    if (!(isIndependentMenu || isControlledMenu(isOpen, onToggleActive))) {\n      throw new Error(\n        `Menu has invalid props:\n          Both isOpen and onToggleActive need to be defined (controlled menu),\n          or neither of them (menu uses its own state management).`\n      );\n    }\n\n    this.onBlur = this.onBlur.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.prepareChildren = this.prepareChildren.bind(this);\n    this.positionStyleForMenuContent = this.positionStyleForMenuContent.bind(this);\n    this.positionStyleForArrow = this.positionStyleForArrow.bind(this);\n\n    this.menu = null;\n    this.menuContent = null;\n  }\n\n  onBlur(event) {\n    // FocusEvent is fired faster than the link elements native click handler\n    // gets its own event. Therefore, we need to check the origin of this FocusEvent.\n    if (!this.menu.contains(event.relatedTarget)) {\n      const { isOpen, onToggleActive } = this.props;\n\n      if (isControlledMenu(isOpen, onToggleActive)) {\n        onToggleActive(false);\n      } else {\n        this.setState({ isOpen: false });\n      }\n    }\n  }\n\n  onKeyDown(e) {\n    // Gather all escape presses to close menu\n    if (e.keyCode === KEY_CODE_ESCAPE) {\n      this.toggleOpen(false);\n    }\n  }\n\n  toggleOpen(enforcedState) {\n    // If state is handled outside of Menu component, we call a passed in onToggleActive func\n    const { isOpen, onToggleActive } = this.props;\n    if (isControlledMenu(isOpen, onToggleActive)) {\n      const isMenuOpen = enforcedState != null ? enforcedState : !isOpen;\n      onToggleActive(isMenuOpen);\n    } else {\n      // If state is handled inside of Menu component, set state\n      this.setState(prevState => {\n        const isMenuOpen = enforcedState != null ? enforcedState : !prevState.isOpen;\n        return { isOpen: isMenuOpen };\n      });\n    }\n  }\n\n  positionStyleForMenuContent(contentPosition) {\n    if (this.menu && this.menuContent) {\n      // Calculate wether we should show the menu to the left of the component or right\n      const distanceToRight = window.innerWidth - this.menu.getBoundingClientRect().right;\n      const menuWidth = this.menu.offsetWidth;\n      const contentWidthBiggerThanLabel = this.menuContent.offsetWidth - menuWidth;\n      const usePositionLeftFromLabel = contentPosition === CONTENT_TO_LEFT;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      // Render menu content to the left according to the contentPosition\n      // prop or if the content does not fit to the right. Otherwise render to\n      // the right.\n      return usePositionLeftFromLabel || distanceToRight < contentWidthBiggerThanLabel\n        ? { right: contentPlacementOffset, minWidth: menuWidth }\n        : { left: contentPlacementOffset, minWidth: menuWidth };\n    }\n    return {};\n  }\n\n  positionStyleForArrow(isPositionedRight) {\n    if (this.menu) {\n      const menuWidth = this.menu.offsetWidth;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      return isPositionedRight\n        ? Math.floor(menuWidth / 2) - contentPlacementOffset\n        : Math.floor(menuWidth / 2);\n    }\n    return 0;\n  }\n\n  prepareChildren() {\n    if (React.Children.count(this.props.children) !== 2) {\n      throw new Error('Menu needs to have two children: MenuLabel and MenuContent.');\n    }\n\n    return React.Children.map(this.props.children, child => {\n      const { isOpen: isOpenProp, onToggleActive } = this.props;\n      const isOpen = isControlledMenu(isOpenProp, onToggleActive) ? isOpenProp : this.state.isOpen;\n\n      if (child.type === MenuLabel) {\n        // MenuLabel needs toggleOpen function\n        // We pass that directly  so that component user doesn't need to worry about that\n        return React.cloneElement(child, {\n          isOpen,\n          onToggleActive: this.toggleOpen,\n        });\n      } else if (child.type === MenuContent) {\n        // MenuContent needs some styling data (width, arrowPosition, and isOpen info)\n        // We pass those directly so that component user doesn't need to worry about those.\n        const { contentPosition, useArrow } = this.props;\n        const positionStyles = this.positionStyleForMenuContent(contentPosition);\n        const arrowPosition = useArrow\n          ? this.positionStyleForArrow(positionStyles.right != null)\n          : null;\n        return React.cloneElement(child, {\n          arrowPosition,\n          contentRef: node => {\n            this.menuContent = node;\n          },\n          isOpen,\n          style: { ...child.props.style, ...positionStyles },\n        });\n      } else {\n        throw new Error('Menu has an unknown child. Only MenuLabel and MenuContent are allowed.');\n      }\n    });\n  }\n\n  render() {\n    const { className, rootClassName } = this.props;\n    const rootClass = rootClassName || css.root;\n    const classes = classNames(rootClass, className);\n    const menuChildren = this.prepareChildren();\n\n    return (\n      <div\n        className={classes}\n        onBlur={this.onBlur}\n        tabIndex={0}\n        onKeyDown={this.onKeyDown}\n        ref={c => {\n          this.menu = c;\n        }}\n      >\n        {menuChildren}\n      </div>\n    );\n  }\n}\n/* eslint-enable jsx-a11y/no-static-element-interactions */\n\nMenu.defaultProps = {\n  className: null,\n  rootClassName: '',\n  contentPlacementOffset: CONTENT_PLACEMENT_OFFSET,\n  contentPosition: CONTENT_TO_RIGHT,\n  isOpen: null,\n  onToggleActive: null,\n  useArrow: true,\n};\n\nconst { bool, func, node, number, string } = PropTypes;\n\nMenu.propTypes = {\n  children: node.isRequired,\n  className: string,\n  rootClassName: string,\n  contentPosition: string,\n  contentPlacementOffset: number,\n  useArrow: bool,\n  isOpen: bool,\n  onToggleActive: func,\n};\n\nexport default Menu;\n"]},"metadata":{},"sourceType":"module"}