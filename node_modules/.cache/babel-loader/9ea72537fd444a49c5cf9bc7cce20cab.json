{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/SignupForm/SignupForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport * as validators from '../../util/validators';\nimport { Form, PrimaryButton, FieldTextInput } from '../../components';\nimport css from './SignupForm.css';\nconst KEY_CODE_ENTER = 13;\n\nconst SignupFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const rootClassName = fieldRenderProps.rootClassName,\n          className = fieldRenderProps.className,\n          formId = fieldRenderProps.formId,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          inProgress = fieldRenderProps.inProgress,\n          invalid = fieldRenderProps.invalid,\n          intl = fieldRenderProps.intl,\n          onOpenTermsOfService = fieldRenderProps.onOpenTermsOfService; // email\n\n    const emailLabel = intl.formatMessage({\n      id: 'SignupForm.emailLabel'\n    });\n    const emailPlaceholder = intl.formatMessage({\n      id: 'SignupForm.emailPlaceholder'\n    });\n    const emailRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.emailRequired'\n    });\n    const emailRequired = validators.required(emailRequiredMessage);\n    const emailInvalidMessage = intl.formatMessage({\n      id: 'SignupForm.emailInvalid'\n    });\n    const emailValid = validators.emailFormatValid(emailInvalidMessage); // password\n\n    const passwordLabel = intl.formatMessage({\n      id: 'SignupForm.passwordLabel'\n    });\n    const passwordPlaceholder = intl.formatMessage({\n      id: 'SignupForm.passwordPlaceholder'\n    });\n    const passwordRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.passwordRequired'\n    });\n    const passwordMinLengthMessage = intl.formatMessage({\n      id: 'SignupForm.passwordTooShort'\n    }, {\n      minLength: validators.PASSWORD_MIN_LENGTH\n    });\n    const passwordMaxLengthMessage = intl.formatMessage({\n      id: 'SignupForm.passwordTooLong'\n    }, {\n      maxLength: validators.PASSWORD_MAX_LENGTH\n    });\n    const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n    const passwordMaxLength = validators.maxLength(passwordMaxLengthMessage, validators.PASSWORD_MAX_LENGTH);\n    const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n    const passwordValidators = validators.composeValidators(passwordRequired, passwordMinLength, passwordMaxLength); // firstName\n\n    const firstNameLabel = intl.formatMessage({\n      id: 'SignupForm.firstNameLabel'\n    });\n    const firstNamePlaceholder = intl.formatMessage({\n      id: 'SignupForm.firstNamePlaceholder'\n    });\n    const firstNameRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.firstNameRequired'\n    });\n    const firstNameRequired = validators.required(firstNameRequiredMessage); // lastName\n\n    const lastNameLabel = intl.formatMessage({\n      id: 'SignupForm.lastNameLabel'\n    });\n    const lastNamePlaceholder = intl.formatMessage({\n      id: 'SignupForm.lastNamePlaceholder'\n    });\n    const lastNameRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.lastNameRequired'\n    });\n    const lastNameRequired = validators.required(lastNameRequiredMessage);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n\n    const handleTermsKeyUp = e => {\n      // Allow click action with keyboard like with normal links\n      if (e.keyCode === KEY_CODE_ENTER) {\n        onOpenTermsOfService();\n      }\n    };\n\n    const termsLink = React.createElement(\"span\", {\n      className: css.termsLink,\n      onClick: onOpenTermsOfService,\n      role: \"button\",\n      tabIndex: \"0\",\n      onKeyUp: handleTermsKeyUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"SignupForm.termsAndConditionsLinkText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n    return React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(FieldTextInput, {\n      type: \"email\",\n      id: formId ? \"\".concat(formId, \".email\") : 'email',\n      name: \"email\",\n      autoComplete: \"email\",\n      label: emailLabel,\n      placeholder: emailPlaceholder,\n      validate: validators.composeValidators(emailRequired, emailValid),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: css.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(FieldTextInput, {\n      className: css.firstNameRoot,\n      type: \"text\",\n      id: formId ? \"\".concat(formId, \".fname\") : 'fname',\n      name: \"fname\",\n      autoComplete: \"given-name\",\n      label: firstNameLabel,\n      placeholder: firstNamePlaceholder,\n      validate: firstNameRequired,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(FieldTextInput, {\n      className: css.lastNameRoot,\n      type: \"text\",\n      id: formId ? \"\".concat(formId, \".lname\") : 'lname',\n      name: \"lname\",\n      autoComplete: \"family-name\",\n      label: lastNameLabel,\n      placeholder: lastNamePlaceholder,\n      validate: lastNameRequired,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(FieldTextInput, {\n      className: css.password,\n      type: \"password\",\n      id: formId ? \"\".concat(formId, \".password\") : 'password',\n      name: \"password\",\n      autoComplete: \"new-password\",\n      label: passwordLabel,\n      placeholder: passwordPlaceholder,\n      validate: passwordValidators,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: css.bottomWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: css.bottomWrapperText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.termsText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"SignupForm.termsAndConditionsAcceptText\",\n      values: {\n        termsLink\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))), React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"SignupForm.signUp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }))));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}));\n\nSignupFormComponent.defaultProps = {\n  inProgress: false\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func;\nSignupFormComponent.propTypes = {\n  inProgress: bool,\n  onOpenTermsOfService: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst SignupForm = compose(injectIntl)(SignupFormComponent);\nSignupForm.displayName = 'SignupForm';\nexport default SignupForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/SignupForm/SignupForm.js"],"names":["React","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","classNames","validators","PrimaryButton","FieldTextInput","css","KEY_CODE_ENTER","SignupFormComponent","props","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","invalid","intl","onOpenTermsOfService","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMaxLengthMessage","maxLength","PASSWORD_MAX_LENGTH","passwordMinLength","passwordMaxLength","passwordRequired","requiredStringNoTrim","passwordValidators","composeValidators","firstNameLabel","firstNamePlaceholder","firstNameRequiredMessage","firstNameRequired","lastNameLabel","lastNamePlaceholder","lastNameRequiredMessage","lastNameRequired","classes","root","submitInProgress","submitDisabled","handleTermsKeyUp","e","keyCode","termsLink","name","firstNameRoot","lastNameRoot","password","bottomWrapper","bottomWrapperText","termsText","defaultProps","bool","func","propTypes","isRequired","SignupForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport * as validators from '../../util/validators';\nimport { Form, PrimaryButton, FieldTextInput } from '../../components';\n\nimport css from './SignupForm.css';\n\nconst KEY_CODE_ENTER = 13;\n\nconst SignupFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        rootClassName,\n        className,\n        formId,\n        handleSubmit,\n        inProgress,\n        invalid,\n        intl,\n        onOpenTermsOfService,\n      } = fieldRenderProps;\n\n      // email\n      const emailLabel = intl.formatMessage({\n        id: 'SignupForm.emailLabel',\n      });\n      const emailPlaceholder = intl.formatMessage({\n        id: 'SignupForm.emailPlaceholder',\n      });\n      const emailRequiredMessage = intl.formatMessage({\n        id: 'SignupForm.emailRequired',\n      });\n      const emailRequired = validators.required(emailRequiredMessage);\n      const emailInvalidMessage = intl.formatMessage({\n        id: 'SignupForm.emailInvalid',\n      });\n      const emailValid = validators.emailFormatValid(emailInvalidMessage);\n\n      // password\n      const passwordLabel = intl.formatMessage({\n        id: 'SignupForm.passwordLabel',\n      });\n      const passwordPlaceholder = intl.formatMessage({\n        id: 'SignupForm.passwordPlaceholder',\n      });\n      const passwordRequiredMessage = intl.formatMessage({\n        id: 'SignupForm.passwordRequired',\n      });\n      const passwordMinLengthMessage = intl.formatMessage(\n        {\n          id: 'SignupForm.passwordTooShort',\n        },\n        {\n          minLength: validators.PASSWORD_MIN_LENGTH,\n        }\n      );\n      const passwordMaxLengthMessage = intl.formatMessage(\n        {\n          id: 'SignupForm.passwordTooLong',\n        },\n        {\n          maxLength: validators.PASSWORD_MAX_LENGTH,\n        }\n      );\n      const passwordMinLength = validators.minLength(\n        passwordMinLengthMessage,\n        validators.PASSWORD_MIN_LENGTH\n      );\n      const passwordMaxLength = validators.maxLength(\n        passwordMaxLengthMessage,\n        validators.PASSWORD_MAX_LENGTH\n      );\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n      const passwordValidators = validators.composeValidators(\n        passwordRequired,\n        passwordMinLength,\n        passwordMaxLength\n      );\n\n      // firstName\n      const firstNameLabel = intl.formatMessage({\n        id: 'SignupForm.firstNameLabel',\n      });\n      const firstNamePlaceholder = intl.formatMessage({\n        id: 'SignupForm.firstNamePlaceholder',\n      });\n      const firstNameRequiredMessage = intl.formatMessage({\n        id: 'SignupForm.firstNameRequired',\n      });\n      const firstNameRequired = validators.required(firstNameRequiredMessage);\n\n      // lastName\n      const lastNameLabel = intl.formatMessage({\n        id: 'SignupForm.lastNameLabel',\n      });\n      const lastNamePlaceholder = intl.formatMessage({\n        id: 'SignupForm.lastNamePlaceholder',\n      });\n      const lastNameRequiredMessage = intl.formatMessage({\n        id: 'SignupForm.lastNameRequired',\n      });\n      const lastNameRequired = validators.required(lastNameRequiredMessage);\n\n      const classes = classNames(rootClassName || css.root, className);\n      const submitInProgress = inProgress;\n      const submitDisabled = invalid || submitInProgress;\n\n      const handleTermsKeyUp = e => {\n        // Allow click action with keyboard like with normal links\n        if (e.keyCode === KEY_CODE_ENTER) {\n          onOpenTermsOfService();\n        }\n      };\n      const termsLink = (\n        <span\n          className={css.termsLink}\n          onClick={onOpenTermsOfService}\n          role=\"button\"\n          tabIndex=\"0\"\n          onKeyUp={handleTermsKeyUp}\n        >\n          <FormattedMessage id=\"SignupForm.termsAndConditionsLinkText\" />\n        </span>\n      );\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          <div>\n            <FieldTextInput\n              type=\"email\"\n              id={formId ? `${formId}.email` : 'email'}\n              name=\"email\"\n              autoComplete=\"email\"\n              label={emailLabel}\n              placeholder={emailPlaceholder}\n              validate={validators.composeValidators(emailRequired, emailValid)}\n            />\n            <div className={css.name}>\n              <FieldTextInput\n                className={css.firstNameRoot}\n                type=\"text\"\n                id={formId ? `${formId}.fname` : 'fname'}\n                name=\"fname\"\n                autoComplete=\"given-name\"\n                label={firstNameLabel}\n                placeholder={firstNamePlaceholder}\n                validate={firstNameRequired}\n              />\n              <FieldTextInput\n                className={css.lastNameRoot}\n                type=\"text\"\n                id={formId ? `${formId}.lname` : 'lname'}\n                name=\"lname\"\n                autoComplete=\"family-name\"\n                label={lastNameLabel}\n                placeholder={lastNamePlaceholder}\n                validate={lastNameRequired}\n              />\n            </div>\n            <FieldTextInput\n              className={css.password}\n              type=\"password\"\n              id={formId ? `${formId}.password` : 'password'}\n              name=\"password\"\n              autoComplete=\"new-password\"\n              label={passwordLabel}\n              placeholder={passwordPlaceholder}\n              validate={passwordValidators}\n            />\n          </div>\n\n          <div className={css.bottomWrapper}>\n            <p className={css.bottomWrapperText}>\n              <span className={css.termsText}>\n                <FormattedMessage\n                  id=\"SignupForm.termsAndConditionsAcceptText\"\n                  values={{ termsLink }}\n                />\n              </span>\n            </p>\n            <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\n              <FormattedMessage id=\"SignupForm.signUp\" />\n            </PrimaryButton>\n          </div>\n        </Form>\n      );\n    }}\n  />\n);\n\nSignupFormComponent.defaultProps = { inProgress: false };\n\nconst { bool, func } = PropTypes;\n\nSignupFormComponent.propTypes = {\n  inProgress: bool,\n\n  onOpenTermsOfService: func.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst SignupForm = compose(injectIntl)(SignupFormComponent);\nSignupForm.displayName = 'SignupForm';\n\nexport default SignupForm;\n"]},"metadata":{},"sourceType":"module"}