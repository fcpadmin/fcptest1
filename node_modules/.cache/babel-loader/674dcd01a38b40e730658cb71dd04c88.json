{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/TopbarSearchForm/TopbarSearchForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { Form, LocationAutocompleteInput } from '../../components';\nimport css from './TopbarSearchForm.css';\n\nclass TopbarSearchFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.searchInput = null;\n  }\n\n  onChange(location) {\n    if (location.selectedPlace) {\n      // Note that we use `onSubmit` instead of the conventional\n      // `handleSubmit` prop for submitting. We want to autosubmit\n      // when a place is selected, and don't require any extra\n      // validations for the form.\n      this.props.onSubmit({\n        location\n      }); // blur search input to hide software keyboard\n\n      if (this.searchInput) {\n        this.searchInput.blur();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: formRenderProps => {\n        const rootClassName = formRenderProps.rootClassName,\n              className = formRenderProps.className,\n              desktopInputRoot = formRenderProps.desktopInputRoot,\n              intl = formRenderProps.intl,\n              isMobile = formRenderProps.isMobile;\n        const classes = classNames(rootClassName, className);\n        const desktopInputRootClass = desktopInputRoot || css.desktopInputRoot; // Allow form submit only when the place has changed\n\n        const preventFormSubmit = e => e.preventDefault();\n\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: preventFormSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(Field, {\n          name: \"location\",\n          format: null,\n          render: ({\n            input,\n            meta\n          }) => {\n            const onChange = input.onChange,\n                  restInput = _objectWithoutProperties(input, [\"onChange\"]); // Merge the standard onChange function with custom behaviur. A better solution would\n            // be to use the FormSpy component from Final Form and pass this.onChange to the\n            // onChange prop but that breaks due to insufficient subscription handling.\n            // See: https://github.com/final-form/react-final-form/issues/159\n\n\n            const searchOnChange = value => {\n              onChange(value);\n              this.onChange(value);\n            };\n\n            const searchInput = _objectSpread({}, restInput, {\n              onChange: searchOnChange\n            });\n\n            return React.createElement(LocationAutocompleteInput, {\n              className: isMobile ? css.mobileInputRoot : desktopInputRootClass,\n              iconClassName: isMobile ? css.mobileIcon : css.desktopIcon,\n              inputClassName: isMobile ? css.mobileInput : css.desktopInput,\n              predictionsClassName: isMobile ? css.mobilePredictions : css.desktopPredictions,\n              predictionsAttributionClassName: isMobile ? css.mobilePredictionsAttribution : null,\n              placeholder: intl.formatMessage({\n                id: 'TopbarSearchForm.placeholder'\n              }),\n              closeOnBlur: !isMobile,\n              inputRef: node => {\n                this.searchInput = node;\n              },\n              input: searchInput,\n              meta: meta,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n              },\n              __self: this\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst func = PropTypes.func,\n      string = PropTypes.string,\n      bool = PropTypes.bool;\nTopbarSearchFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  desktopInputRoot: null,\n  isMobile: false\n};\nTopbarSearchFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  desktopInputRoot: string,\n  onSubmit: func.isRequired,\n  isMobile: bool,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst TopbarSearchForm = injectIntl(TopbarSearchFormComponent);\nexport default TopbarSearchForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/TopbarSearchForm/TopbarSearchForm.js"],"names":["React","Component","PropTypes","Form","FinalForm","Field","intlShape","injectIntl","classNames","LocationAutocompleteInput","css","TopbarSearchFormComponent","constructor","props","onChange","bind","searchInput","location","selectedPlace","onSubmit","blur","render","formRenderProps","rootClassName","className","desktopInputRoot","intl","isMobile","classes","desktopInputRootClass","preventFormSubmit","e","preventDefault","input","meta","restInput","searchOnChange","value","mobileInputRoot","mobileIcon","desktopIcon","mobileInput","desktopInput","mobilePredictions","desktopPredictions","mobilePredictionsAttribution","formatMessage","id","node","func","string","bool","defaultProps","propTypes","isRequired","TopbarSearchForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAI,IAAIC,SAAjB,EAA4BC,KAA5B,QAAyC,kBAAzC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,YAAtC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASL,IAAT,EAAeM,yBAAf,QAAgD,kBAAhD;AAEA,OAAOC,GAAP,MAAgB,wBAAhB;;AAEA,MAAMC,yBAAN,SAAwCV,SAAxC,CAAkD;AAChDW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACD;;AAEDF,EAAAA,QAAQ,CAACG,QAAD,EAAW;AACjB,QAAIA,QAAQ,CAACC,aAAb,EAA4B;AAC1B;AACA;AACA;AACA;AACA,WAAKL,KAAL,CAAWM,QAAX,CAAoB;AAAEF,QAAAA;AAAF,OAApB,EAL0B,CAM1B;;AACA,UAAI,KAAKD,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBI,IAAjB;AACD;AACF;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,SAAD,oBACM,KAAKR,KADX;AAEE,MAAA,MAAM,EAAES,eAAe,IAAI;AAAA,cACjBC,aADiB,GAC8CD,eAD9C,CACjBC,aADiB;AAAA,cACFC,SADE,GAC8CF,eAD9C,CACFE,SADE;AAAA,cACSC,gBADT,GAC8CH,eAD9C,CACSG,gBADT;AAAA,cAC2BC,IAD3B,GAC8CJ,eAD9C,CAC2BI,IAD3B;AAAA,cACiCC,QADjC,GAC8CL,eAD9C,CACiCK,QADjC;AAGzB,cAAMC,OAAO,GAAGpB,UAAU,CAACe,aAAD,EAAgBC,SAAhB,CAA1B;AACA,cAAMK,qBAAqB,GAAGJ,gBAAgB,IAAIf,GAAG,CAACe,gBAAtD,CAJyB,CAMzB;;AACA,cAAMK,iBAAiB,GAAGC,CAAC,IAAIA,CAAC,CAACC,cAAF,EAA/B;;AAEA,eACE,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAEJ,OAAjB;AAA0B,UAAA,QAAQ,EAAEE,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,MAAM,EAAE,IAFV;AAGE,UAAA,MAAM,EAAE,CAAC;AAAEG,YAAAA,KAAF;AAASC,YAAAA;AAAT,WAAD,KAAqB;AAAA,kBACnBpB,QADmB,GACQmB,KADR,CACnBnB,QADmB;AAAA,kBACNqB,SADM,4BACQF,KADR,iBAG3B;AACA;AACA;AACA;;;AACA,kBAAMG,cAAc,GAAGC,KAAK,IAAI;AAC9BvB,cAAAA,QAAQ,CAACuB,KAAD,CAAR;AACA,mBAAKvB,QAAL,CAAcuB,KAAd;AACD,aAHD;;AAKA,kBAAMrB,WAAW,qBAAQmB,SAAR;AAAmBrB,cAAAA,QAAQ,EAAEsB;AAA7B,cAAjB;;AACA,mBACE,oBAAC,yBAAD;AACE,cAAA,SAAS,EAAET,QAAQ,GAAGjB,GAAG,CAAC4B,eAAP,GAAyBT,qBAD9C;AAEE,cAAA,aAAa,EAAEF,QAAQ,GAAGjB,GAAG,CAAC6B,UAAP,GAAoB7B,GAAG,CAAC8B,WAFjD;AAGE,cAAA,cAAc,EAAEb,QAAQ,GAAGjB,GAAG,CAAC+B,WAAP,GAAqB/B,GAAG,CAACgC,YAHnD;AAIE,cAAA,oBAAoB,EAClBf,QAAQ,GAAGjB,GAAG,CAACiC,iBAAP,GAA2BjC,GAAG,CAACkC,kBAL3C;AAOE,cAAA,+BAA+B,EAC7BjB,QAAQ,GAAGjB,GAAG,CAACmC,4BAAP,GAAsC,IARlD;AAUE,cAAA,WAAW,EAAEnB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAAnB,CAVf;AAWE,cAAA,WAAW,EAAE,CAACpB,QAXhB;AAYE,cAAA,QAAQ,EAAEqB,IAAI,IAAI;AAChB,qBAAKhC,WAAL,GAAmBgC,IAAnB;AACD,eAdH;AAeE,cAAA,KAAK,EAAEhC,WAfT;AAgBE,cAAA,IAAI,EAAEkB,IAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAoBD,WApCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AA0CD,OArDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAyDD;;AA/E+C;;MAkF1Ce,I,GAAuB/C,S,CAAvB+C,I;MAAMC,M,GAAiBhD,S,CAAjBgD,M;MAAQC,I,GAASjD,S,CAATiD,I;AAEtBxC,yBAAyB,CAACyC,YAA1B,GAAyC;AACvC7B,EAAAA,aAAa,EAAE,IADwB;AAEvCC,EAAAA,SAAS,EAAE,IAF4B;AAGvCC,EAAAA,gBAAgB,EAAE,IAHqB;AAIvCE,EAAAA,QAAQ,EAAE;AAJ6B,CAAzC;AAOAhB,yBAAyB,CAAC0C,SAA1B,GAAsC;AACpC9B,EAAAA,aAAa,EAAE2B,MADqB;AAEpC1B,EAAAA,SAAS,EAAE0B,MAFyB;AAGpCzB,EAAAA,gBAAgB,EAAEyB,MAHkB;AAIpC/B,EAAAA,QAAQ,EAAE8B,IAAI,CAACK,UAJqB;AAKpC3B,EAAAA,QAAQ,EAAEwB,IAL0B;AAOpC;AACAzB,EAAAA,IAAI,EAAEpB,SAAS,CAACgD;AARoB,CAAtC;AAWA,MAAMC,gBAAgB,GAAGhD,UAAU,CAACI,yBAAD,CAAnC;AAEA,eAAe4C,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { Form, LocationAutocompleteInput } from '../../components';\n\nimport css from './TopbarSearchForm.css';\n\nclass TopbarSearchFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.searchInput = null;\n  }\n\n  onChange(location) {\n    if (location.selectedPlace) {\n      // Note that we use `onSubmit` instead of the conventional\n      // `handleSubmit` prop for submitting. We want to autosubmit\n      // when a place is selected, and don't require any extra\n      // validations for the form.\n      this.props.onSubmit({ location });\n      // blur search input to hide software keyboard\n      if (this.searchInput) {\n        this.searchInput.blur();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={formRenderProps => {\n          const { rootClassName, className, desktopInputRoot, intl, isMobile } = formRenderProps;\n\n          const classes = classNames(rootClassName, className);\n          const desktopInputRootClass = desktopInputRoot || css.desktopInputRoot;\n\n          // Allow form submit only when the place has changed\n          const preventFormSubmit = e => e.preventDefault();\n\n          return (\n            <Form className={classes} onSubmit={preventFormSubmit}>\n              <Field\n                name=\"location\"\n                format={null}\n                render={({ input, meta }) => {\n                  const { onChange, ...restInput } = input;\n\n                  // Merge the standard onChange function with custom behaviur. A better solution would\n                  // be to use the FormSpy component from Final Form and pass this.onChange to the\n                  // onChange prop but that breaks due to insufficient subscription handling.\n                  // See: https://github.com/final-form/react-final-form/issues/159\n                  const searchOnChange = value => {\n                    onChange(value);\n                    this.onChange(value);\n                  };\n\n                  const searchInput = { ...restInput, onChange: searchOnChange };\n                  return (\n                    <LocationAutocompleteInput\n                      className={isMobile ? css.mobileInputRoot : desktopInputRootClass}\n                      iconClassName={isMobile ? css.mobileIcon : css.desktopIcon}\n                      inputClassName={isMobile ? css.mobileInput : css.desktopInput}\n                      predictionsClassName={\n                        isMobile ? css.mobilePredictions : css.desktopPredictions\n                      }\n                      predictionsAttributionClassName={\n                        isMobile ? css.mobilePredictionsAttribution : null\n                      }\n                      placeholder={intl.formatMessage({ id: 'TopbarSearchForm.placeholder' })}\n                      closeOnBlur={!isMobile}\n                      inputRef={node => {\n                        this.searchInput = node;\n                      }}\n                      input={searchInput}\n                      meta={meta}\n                    />\n                  );\n                }}\n              />\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nconst { func, string, bool } = PropTypes;\n\nTopbarSearchFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  desktopInputRoot: null,\n  isMobile: false,\n};\n\nTopbarSearchFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  desktopInputRoot: string,\n  onSubmit: func.isRequired,\n  isMobile: bool,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst TopbarSearchForm = injectIntl(TopbarSearchFormComponent);\n\nexport default TopbarSearchForm;\n"]},"metadata":{},"sourceType":"module"}