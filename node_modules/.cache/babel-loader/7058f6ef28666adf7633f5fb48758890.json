{"ast":null,"code":"/**\n * This file contains Action constants, Action creators, and reducer of global\n * FlashMessages. Global actions can be used in multiple pages.\n * We are following Ducks module proposition:\n * https://github.com/erikras/ducks-modular-redux\n */\nimport find from 'lodash/find';\nimport findIndex from 'lodash/findIndex'; // Actions: system notifications\n\nexport const ADD_FLASH_NOTIFICATION = 'app/FlashNotification/ADD_NOTIFICATION';\nexport const REMOVE_FLASH_NOTIFICATION = 'app/FlashNotification/REMOVE_NOTIFICATION';\nconst initialState = []; // Reducer\n\nexport default ((state = initialState, action) => {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case ADD_FLASH_NOTIFICATION:\n      if (!find(state, n => n.content === payload.content && !n.isRead)) {\n        return state.concat([{\n          id: payload.id,\n          type: payload.type,\n          content: payload.content,\n          isRead: false\n        }]);\n      }\n\n      return state;\n\n    case REMOVE_FLASH_NOTIFICATION:\n      return state.map(findIndex(state, msg => msg.id === payload.id), msg => msg.set('isRead', true));\n\n    default:\n      return state;\n  }\n}); // Action Creators\n\nlet nextMessageId = 1;\nexport const addFlashNotification = (type, content) => {\n  const id = nextMessageId;\n  nextMessageId += 1;\n  return {\n    type: ADD_FLASH_NOTIFICATION,\n    payload: {\n      id: \"note_\".concat(id),\n      type,\n      content,\n      isRead: false\n    }\n  };\n};\nexport const removeFlashNotification = id => ({\n  type: REMOVE_FLASH_NOTIFICATION,\n  payload: {\n    id\n  }\n});","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/ducks/FlashNotification.duck.js"],"names":["find","findIndex","ADD_FLASH_NOTIFICATION","REMOVE_FLASH_NOTIFICATION","initialState","state","action","type","payload","n","content","isRead","concat","id","map","msg","set","nextMessageId","addFlashNotification","removeFlashNotification"],"mappings":"AAAA;;;;;;AAOA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,kBAAtB,C,CAEA;;AACA,OAAO,MAAMC,sBAAsB,GAAG,wCAA/B;AACP,OAAO,MAAMC,yBAAyB,GAAG,2CAAlC;AAEP,MAAMC,YAAY,GAAG,EAArB,C,CAEA;;AACA,gBAAe,CAACC,KAAK,GAAGD,YAAT,EAAuBE,MAAvB,KAAkC;AAAA,QACvCC,IADuC,GACrBD,MADqB,CACvCC,IADuC;AAAA,QACjCC,OADiC,GACrBF,MADqB,CACjCE,OADiC;;AAE/C,UAAQD,IAAR;AACE,SAAKL,sBAAL;AACE,UAAI,CAACF,IAAI,CAACK,KAAD,EAAQI,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcF,OAAO,CAACE,OAAtB,IAAiC,CAACD,CAAC,CAACE,MAAjD,CAAT,EAAmE;AACjE,eAAON,KAAK,CAACO,MAAN,CAAa,CAClB;AAAEC,UAAAA,EAAE,EAAEL,OAAO,CAACK,EAAd;AAAkBN,UAAAA,IAAI,EAAEC,OAAO,CAACD,IAAhC;AAAsCG,UAAAA,OAAO,EAAEF,OAAO,CAACE,OAAvD;AAAgEC,UAAAA,MAAM,EAAE;AAAxE,SADkB,CAAb,CAAP;AAGD;;AACD,aAAON,KAAP;;AAEF,SAAKF,yBAAL;AACE,aAAOE,KAAK,CAACS,GAAN,CAAUb,SAAS,CAACI,KAAD,EAAQU,GAAG,IAAIA,GAAG,CAACF,EAAJ,KAAWL,OAAO,CAACK,EAAlC,CAAnB,EAA0DE,GAAG,IAClEA,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CADK,CAAP;;AAIF;AACE,aAAOX,KAAP;AAfJ;AAiBD,CAnBD,E,CAqBA;;AACA,IAAIY,aAAa,GAAG,CAApB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACX,IAAD,EAAOG,OAAP,KAAmB;AACrD,QAAMG,EAAE,GAAGI,aAAX;AACAA,EAAAA,aAAa,IAAI,CAAjB;AACA,SAAO;AACLV,IAAAA,IAAI,EAAEL,sBADD;AAELM,IAAAA,OAAO,EAAE;AAAEK,MAAAA,EAAE,iBAAUA,EAAV,CAAJ;AAAoBN,MAAAA,IAApB;AAA0BG,MAAAA,OAA1B;AAAmCC,MAAAA,MAAM,EAAE;AAA3C;AAFJ,GAAP;AAID,CAPM;AASP,OAAO,MAAMQ,uBAAuB,GAAGN,EAAE,KAAK;AAAEN,EAAAA,IAAI,EAAEJ,yBAAR;AAAmCK,EAAAA,OAAO,EAAE;AAAEK,IAAAA;AAAF;AAA5C,CAAL,CAAlC","sourcesContent":["/**\n * This file contains Action constants, Action creators, and reducer of global\n * FlashMessages. Global actions can be used in multiple pages.\n * We are following Ducks module proposition:\n * https://github.com/erikras/ducks-modular-redux\n */\n\nimport find from 'lodash/find';\nimport findIndex from 'lodash/findIndex';\n\n// Actions: system notifications\nexport const ADD_FLASH_NOTIFICATION = 'app/FlashNotification/ADD_NOTIFICATION';\nexport const REMOVE_FLASH_NOTIFICATION = 'app/FlashNotification/REMOVE_NOTIFICATION';\n\nconst initialState = [];\n\n// Reducer\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ADD_FLASH_NOTIFICATION:\n      if (!find(state, n => n.content === payload.content && !n.isRead)) {\n        return state.concat([\n          { id: payload.id, type: payload.type, content: payload.content, isRead: false },\n        ]);\n      }\n      return state;\n\n    case REMOVE_FLASH_NOTIFICATION:\n      return state.map(findIndex(state, msg => msg.id === payload.id), msg =>\n        msg.set('isRead', true)\n      );\n\n    default:\n      return state;\n  }\n};\n\n// Action Creators\nlet nextMessageId = 1;\n\nexport const addFlashNotification = (type, content) => {\n  const id = nextMessageId;\n  nextMessageId += 1;\n  return {\n    type: ADD_FLASH_NOTIFICATION,\n    payload: { id: `note_${id}`, type, content, isRead: false },\n  };\n};\n\nexport const removeFlashNotification = id => ({ type: REMOVE_FLASH_NOTIFICATION, payload: { id } });\n"]},"metadata":{},"sourceType":"module"}