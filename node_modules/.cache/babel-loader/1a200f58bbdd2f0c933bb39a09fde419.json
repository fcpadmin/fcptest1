{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchMapPriceLabel/SearchMapPriceLabel.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { formatMoney } from '../../util/currency';\nimport { ensureListing } from '../../util/data';\nimport config from '../../config';\nimport css from './SearchMapPriceLabel.css';\n\nclass SearchMapPriceLabel extends Component {\n  shouldComponentUpdate(nextProps) {\n    const currentListing = ensureListing(this.props.listing);\n    const nextListing = ensureListing(nextProps.listing);\n    const isSameListing = currentListing.id.uuid === nextListing.id.uuid;\n    const hasSamePrice = currentListing.attributes.price === nextListing.attributes.price;\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\n    const hasSameRefreshToken = this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\n    return !(isSameListing && hasSamePrice && hasSameActiveStatus && hasSameRefreshToken);\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          intl = _this$props.intl,\n          listing = _this$props.listing,\n          onListingClicked = _this$props.onListingClicked,\n          isActive = _this$props.isActive;\n    const currentListing = ensureListing(listing);\n    const price = currentListing.attributes.price; // Create formatted price if currency is known or alternatively show just the unknown currency.\n\n    const formattedPrice = price && price.currency === config.currency ? formatMoney(intl, price) : price.currency;\n    const classes = classNames(rootClassName || css.root, className);\n    const priceLabelClasses = classNames(css.priceLabel, {\n      [css.priceLabelActive]: isActive\n    });\n    const caretClasses = classNames(css.caret, {\n      [css.caretActive]: isActive\n    });\n    return React.createElement(\"button\", {\n      className: classes,\n      onClick: () => onListingClicked(currentListing),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.caretShadow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: priceLabelClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, formattedPrice), React.createElement(\"div\", {\n      className: caretClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSearchMapPriceLabel.defaultProps = {\n  className: null,\n  rootClassName: null\n};\nconst func = PropTypes.func,\n      string = PropTypes.string;\nSearchMapPriceLabel.propTypes = {\n  className: string,\n  rootClassName: string,\n  listing: propTypes.listing.isRequired,\n  onListingClicked: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default injectIntl(SearchMapPriceLabel);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchMapPriceLabel/SearchMapPriceLabel.js"],"names":["React","Component","PropTypes","injectIntl","intlShape","classNames","propTypes","formatMoney","ensureListing","config","css","SearchMapPriceLabel","shouldComponentUpdate","nextProps","currentListing","props","listing","nextListing","isSameListing","id","uuid","hasSamePrice","attributes","price","hasSameActiveStatus","isActive","hasSameRefreshToken","mapComponentRefreshToken","render","className","rootClassName","intl","onListingClicked","formattedPrice","currency","classes","root","priceLabelClasses","priceLabel","priceLabelActive","caretClasses","caret","caretActive","caretShadow","defaultProps","func","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,YAAtC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,GAAP,MAAgB,2BAAhB;;AAEA,MAAMC,mBAAN,SAAkCV,SAAlC,CAA4C;AAC1CW,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,UAAMC,cAAc,GAAGN,aAAa,CAAC,KAAKO,KAAL,CAAWC,OAAZ,CAApC;AACA,UAAMC,WAAW,GAAGT,aAAa,CAACK,SAAS,CAACG,OAAX,CAAjC;AACA,UAAME,aAAa,GAAGJ,cAAc,CAACK,EAAf,CAAkBC,IAAlB,KAA2BH,WAAW,CAACE,EAAZ,CAAeC,IAAhE;AACA,UAAMC,YAAY,GAAGP,cAAc,CAACQ,UAAf,CAA0BC,KAA1B,KAAoCN,WAAW,CAACK,UAAZ,CAAuBC,KAAhF;AACA,UAAMC,mBAAmB,GAAG,KAAKT,KAAL,CAAWU,QAAX,KAAwBZ,SAAS,CAACY,QAA9D;AACA,UAAMC,mBAAmB,GACvB,KAAKX,KAAL,CAAWY,wBAAX,KAAwCd,SAAS,CAACc,wBADpD;AAGA,WAAO,EAAET,aAAa,IAAIG,YAAjB,IAAiCG,mBAAjC,IAAwDE,mBAA1D,CAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBACyE,KAAKb,KAD9E;AAAA,UACCc,SADD,eACCA,SADD;AAAA,UACYC,aADZ,eACYA,aADZ;AAAA,UAC2BC,IAD3B,eAC2BA,IAD3B;AAAA,UACiCf,OADjC,eACiCA,OADjC;AAAA,UAC0CgB,gBAD1C,eAC0CA,gBAD1C;AAAA,UAC4DP,QAD5D,eAC4DA,QAD5D;AAEP,UAAMX,cAAc,GAAGN,aAAa,CAACQ,OAAD,CAApC;AAFO,UAGCO,KAHD,GAGWT,cAAc,CAACQ,UAH1B,CAGCC,KAHD,EAKP;;AACA,UAAMU,cAAc,GAClBV,KAAK,IAAIA,KAAK,CAACW,QAAN,KAAmBzB,MAAM,CAACyB,QAAnC,GAA8C3B,WAAW,CAACwB,IAAD,EAAOR,KAAP,CAAzD,GAAyEA,KAAK,CAACW,QADjF;AAGA,UAAMC,OAAO,GAAG9B,UAAU,CAACyB,aAAa,IAAIpB,GAAG,CAAC0B,IAAtB,EAA4BP,SAA5B,CAA1B;AACA,UAAMQ,iBAAiB,GAAGhC,UAAU,CAACK,GAAG,CAAC4B,UAAL,EAAiB;AAAE,OAAC5B,GAAG,CAAC6B,gBAAL,GAAwBd;AAA1B,KAAjB,CAApC;AACA,UAAMe,YAAY,GAAGnC,UAAU,CAACK,GAAG,CAAC+B,KAAL,EAAY;AAAE,OAAC/B,GAAG,CAACgC,WAAL,GAAmBjB;AAArB,KAAZ,CAA/B;AAEA,WACE;AAAQ,MAAA,SAAS,EAAEU,OAAnB;AAA4B,MAAA,OAAO,EAAE,MAAMH,gBAAgB,CAAClB,cAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEJ,GAAG,CAACiC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAEN,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoCJ,cAApC,CAFF,EAGE;AAAK,MAAA,SAAS,EAAEO,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AAjCyC;;AAoC5C7B,mBAAmB,CAACiC,YAApB,GAAmC;AACjCf,EAAAA,SAAS,EAAE,IADsB;AAEjCC,EAAAA,aAAa,EAAE;AAFkB,CAAnC;MAKQe,I,GAAiB3C,S,CAAjB2C,I;MAAMC,M,GAAW5C,S,CAAX4C,M;AAEdnC,mBAAmB,CAACL,SAApB,GAAgC;AAC9BuB,EAAAA,SAAS,EAAEiB,MADmB;AAE9BhB,EAAAA,aAAa,EAAEgB,MAFe;AAG9B9B,EAAAA,OAAO,EAAEV,SAAS,CAACU,OAAV,CAAkB+B,UAHG;AAI9Bf,EAAAA,gBAAgB,EAAEa,IAAI,CAACE,UAJO;AAM9B;AACAhB,EAAAA,IAAI,EAAE3B,SAAS,CAAC2C;AAPc,CAAhC;AAUA,eAAe5C,UAAU,CAACQ,mBAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { formatMoney } from '../../util/currency';\nimport { ensureListing } from '../../util/data';\nimport config from '../../config';\n\nimport css from './SearchMapPriceLabel.css';\n\nclass SearchMapPriceLabel extends Component {\n  shouldComponentUpdate(nextProps) {\n    const currentListing = ensureListing(this.props.listing);\n    const nextListing = ensureListing(nextProps.listing);\n    const isSameListing = currentListing.id.uuid === nextListing.id.uuid;\n    const hasSamePrice = currentListing.attributes.price === nextListing.attributes.price;\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\n    const hasSameRefreshToken =\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\n\n    return !(isSameListing && hasSamePrice && hasSameActiveStatus && hasSameRefreshToken);\n  }\n\n  render() {\n    const { className, rootClassName, intl, listing, onListingClicked, isActive } = this.props;\n    const currentListing = ensureListing(listing);\n    const { price } = currentListing.attributes;\n\n    // Create formatted price if currency is known or alternatively show just the unknown currency.\n    const formattedPrice =\n      price && price.currency === config.currency ? formatMoney(intl, price) : price.currency;\n\n    const classes = classNames(rootClassName || css.root, className);\n    const priceLabelClasses = classNames(css.priceLabel, { [css.priceLabelActive]: isActive });\n    const caretClasses = classNames(css.caret, { [css.caretActive]: isActive });\n\n    return (\n      <button className={classes} onClick={() => onListingClicked(currentListing)}>\n        <div className={css.caretShadow} />\n        <div className={priceLabelClasses}>{formattedPrice}</div>\n        <div className={caretClasses} />\n      </button>\n    );\n  }\n}\n\nSearchMapPriceLabel.defaultProps = {\n  className: null,\n  rootClassName: null,\n};\n\nconst { func, string } = PropTypes;\n\nSearchMapPriceLabel.propTypes = {\n  className: string,\n  rootClassName: string,\n  listing: propTypes.listing.isRequired,\n  onListingClicked: func.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SearchMapPriceLabel);\n"]},"metadata":{},"sourceType":"module"}