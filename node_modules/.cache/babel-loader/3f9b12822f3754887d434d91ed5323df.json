{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingLocationForm/EditListingLocationForm.js\";\nimport React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { autocompleteSearchRequired, autocompletePlaceSelected, composeValidators } from '../../util/validators';\nimport { Form, LocationAutocompleteInputField, Button, FieldTextInput } from '../../components';\nimport css from './EditListingLocationForm.css';\nexport const EditListingLocationFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const className = fieldRenderProps.className,\n          disabled = fieldRenderProps.disabled,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          intl = fieldRenderProps.intl,\n          invalid = fieldRenderProps.invalid,\n          pristine = fieldRenderProps.pristine,\n          saveActionMsg = fieldRenderProps.saveActionMsg,\n          updated = fieldRenderProps.updated,\n          updateInProgress = fieldRenderProps.updateInProgress,\n          fetchErrors = fieldRenderProps.fetchErrors,\n          values = fieldRenderProps.values;\n    const titleRequiredMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.address'\n    });\n    const addressPlaceholderMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.addressPlaceholder'\n    });\n    const addressRequiredMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.addressRequired'\n    });\n    const addressNotRecognizedMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.addressNotRecognized'\n    });\n    const buildingMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.building'\n    });\n    const buildingPlaceholderMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.buildingPlaceholder'\n    });\n\n    const _ref = fetchErrors || {},\n          updateListingError = _ref.updateListingError,\n          showListingsError = _ref.showListingsError;\n\n    const errorMessage = updateListingError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingLocationForm.updateFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })) : null;\n    const errorMessageShowListing = showListingsError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingLocationForm.showListingFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })) : null;\n    const classes = classNames(css.root, className);\n    const submitReady = updated && pristine;\n    const submitInProgress = updateInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n    return React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, errorMessage, errorMessageShowListing, React.createElement(LocationAutocompleteInputField, {\n      className: css.locationAddress,\n      inputClassName: css.locationAutocompleteInput,\n      iconClassName: css.locationAutocompleteInputIcon,\n      predictionsClassName: css.predictionsRoot,\n      validClassName: css.validLocation,\n      autoFocus: true,\n      name: \"location\",\n      label: titleRequiredMessage,\n      placeholder: addressPlaceholderMessage,\n      useDefaultPredictions: false,\n      format: null,\n      valueFromForm: values.location,\n      validate: composeValidators(autocompleteSearchRequired(addressRequiredMessage), autocompletePlaceSelected(addressNotRecognizedMessage)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(FieldTextInput, {\n      className: css.building,\n      type: \"text\",\n      name: \"building\",\n      id: \"building\",\n      label: buildingMessage,\n      placeholder: buildingPlaceholderMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: submitReady,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, saveActionMsg));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}));\nEditListingLocationFormComponent.defaultProps = {\n  selectedPlace: null,\n  fetchErrors: null\n};\nEditListingLocationFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  selectedPlace: propTypes.place,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error\n  })\n};\nexport default compose(injectIntl)(EditListingLocationFormComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingLocationForm/EditListingLocationForm.js"],"names":["React","bool","func","shape","string","compose","Form","FinalForm","intlShape","injectIntl","FormattedMessage","classNames","propTypes","autocompleteSearchRequired","autocompletePlaceSelected","composeValidators","LocationAutocompleteInputField","Button","FieldTextInput","css","EditListingLocationFormComponent","props","fieldRenderProps","className","disabled","handleSubmit","intl","invalid","pristine","saveActionMsg","updated","updateInProgress","fetchErrors","values","titleRequiredMessage","formatMessage","id","addressPlaceholderMessage","addressRequiredMessage","addressNotRecognizedMessage","buildingMessage","buildingPlaceholderMessage","updateListingError","showListingsError","errorMessage","error","errorMessageShowListing","classes","root","submitReady","submitInProgress","submitDisabled","locationAddress","locationAutocompleteInput","locationAutocompleteInputIcon","predictionsRoot","validLocation","location","building","submitButton","defaultProps","selectedPlace","isRequired","onSubmit","place"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport {\n  autocompleteSearchRequired,\n  autocompletePlaceSelected,\n  composeValidators,\n} from '../../util/validators';\nimport { Form, LocationAutocompleteInputField, Button, FieldTextInput } from '../../components';\n\nimport css from './EditListingLocationForm.css';\n\nexport const EditListingLocationFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        className,\n        disabled,\n        handleSubmit,\n        intl,\n        invalid,\n        pristine,\n        saveActionMsg,\n        updated,\n        updateInProgress,\n        fetchErrors,\n        values,\n      } = fieldRenderProps;\n\n      const titleRequiredMessage = intl.formatMessage({ id: 'EditListingLocationForm.address' });\n      const addressPlaceholderMessage = intl.formatMessage({\n        id: 'EditListingLocationForm.addressPlaceholder',\n      });\n      const addressRequiredMessage = intl.formatMessage({\n        id: 'EditListingLocationForm.addressRequired',\n      });\n      const addressNotRecognizedMessage = intl.formatMessage({\n        id: 'EditListingLocationForm.addressNotRecognized',\n      });\n\n      const buildingMessage = intl.formatMessage({ id: 'EditListingLocationForm.building' });\n      const buildingPlaceholderMessage = intl.formatMessage({\n        id: 'EditListingLocationForm.buildingPlaceholder',\n      });\n\n      const { updateListingError, showListingsError } = fetchErrors || {};\n      const errorMessage = updateListingError ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"EditListingLocationForm.updateFailed\" />\n        </p>\n      ) : null;\n\n      const errorMessageShowListing = showListingsError ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"EditListingLocationForm.showListingFailed\" />\n        </p>\n      ) : null;\n\n      const classes = classNames(css.root, className);\n      const submitReady = updated && pristine;\n      const submitInProgress = updateInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress;\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          {errorMessage}\n          {errorMessageShowListing}\n          <LocationAutocompleteInputField\n            className={css.locationAddress}\n            inputClassName={css.locationAutocompleteInput}\n            iconClassName={css.locationAutocompleteInputIcon}\n            predictionsClassName={css.predictionsRoot}\n            validClassName={css.validLocation}\n            autoFocus\n            name=\"location\"\n            label={titleRequiredMessage}\n            placeholder={addressPlaceholderMessage}\n            useDefaultPredictions={false}\n            format={null}\n            valueFromForm={values.location}\n            validate={composeValidators(\n              autocompleteSearchRequired(addressRequiredMessage),\n              autocompletePlaceSelected(addressNotRecognizedMessage)\n            )}\n          />\n\n          <FieldTextInput\n            className={css.building}\n            type=\"text\"\n            name=\"building\"\n            id=\"building\"\n            label={buildingMessage}\n            placeholder={buildingPlaceholderMessage}\n          />\n\n          <Button\n            className={css.submitButton}\n            type=\"submit\"\n            inProgress={submitInProgress}\n            disabled={submitDisabled}\n            ready={submitReady}\n          >\n            {saveActionMsg}\n          </Button>\n        </Form>\n      );\n    }}\n  />\n);\n\nEditListingLocationFormComponent.defaultProps = {\n  selectedPlace: null,\n  fetchErrors: null,\n};\n\nEditListingLocationFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  selectedPlace: propTypes.place,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error,\n  }),\n};\n\nexport default compose(injectIntl)(EditListingLocationFormComponent);\n"]},"metadata":{},"sourceType":"module"}