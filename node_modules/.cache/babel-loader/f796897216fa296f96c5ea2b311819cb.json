{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/StripeBankAccountTokenInputField/StripeBankAccountTokenInputField.js\";\n\n/* eslint-disable no-underscore-dangle */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport config from '../../config';\nimport { BANK_ACCOUNT_INPUTS, cleanedString, formatFieldMessage, requiredInputs, mapInputsToStripeAccountKeys, supportedCountries, translateStripeError } from './StripeBankAccountTokenInputField.util';\nimport StripeBankAccountRequiredInput from './StripeBankAccountRequiredInput';\nimport css from './StripeBankAccountTokenInputField.css'; // Since final-form tracks the onBlur event for marking the field as\n// touched (which triggers possible error validation rendering), only\n// trigger the event asynchronously when no other input within this\n// component has received focus.\n//\n// This prevents showing the validation error when the user selects a\n// value and moves on to another input within this component.\n\nconst BLUR_TIMEOUT = 100;\nconst DEBOUNCE_WAIT_TIME = 1000;\n\nclass TokenInputFieldComponent extends Component {\n  constructor(props) {\n    super(props);\n    const intl = props.intl; // Initial state is needed when country (and currency) changes and values need to be cleared.\n\n    this.initialState = {\n      stripeError: null\n    }; // Fill initialState with input type specific data\n\n    BANK_ACCOUNT_INPUTS.forEach(inputType => {\n      this.initialState[inputType] = {\n        value: '',\n        touched: false,\n        error: formatFieldMessage(intl, inputType, 'required')\n      };\n    });\n    this.state = this.initialState;\n    this.blurTimeoutId = null; // We keep track of the mounted state of the component to avoid\n    // setting state or calling callback props if a createToken call\n    // finishes after the component is already removed.\n    //\n    // The correct solution would be to cancel all ongoing operations\n    // in componentWillUnmount, but since Promises don't have a\n    // cancellation mechanism yet, we must use a different solution\n    // for now.\n    //\n    // See: https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\n\n    this._isMounted = false;\n    this.requestToken = debounce(this.requestToken.bind(this), DEBOUNCE_WAIT_TIME);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n  }\n\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for StripeBankAccountTokenInputField');\n    }\n\n    this.stripe = window.Stripe(config.stripe.publishableKey);\n    this._isMounted = true;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const countryChanged = nextProps.country !== this.props.country;\n    const currencyChanged = nextProps.currency !== this.props.currency;\n\n    if (countryChanged || currencyChanged) {\n      // Clear the possible input values from the state\n      // if the given country or currency changes.\n      this.setState(this.initialState);\n      nextProps.input.onChange('');\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    window.clearTimeout(this.blurTimeoutId);\n  }\n  /**\n   * Request a token from the Stripe API with the given bank account data\n   *\n   * This function validates the given data and triggers onChange\n   * events for the parent form to handle.\n   *\n   *\n   * @param {Object} values - values from different input types\n   */\n\n\n  requestToken(values) {\n    const _this$props = this.props,\n          country = _this$props.country,\n          currency = _this$props.currency,\n          onChange = _this$props.input.onChange,\n          intl = _this$props.intl; // First we have to clear the current token value so the parent\n    // form doesn't submit with an old value.\n\n    onChange('');\n    const inputsNeeded = requiredInputs(country);\n    const missingValues = inputsNeeded.filter(inputType => !values[inputType]);\n    const invalidValues = inputsNeeded.filter(inputType => !!this.state[inputType].error);\n    const numbersMissing = missingValues.length > 0;\n    const numbersInvalid = invalidValues.length > 0;\n\n    if (numbersMissing || numbersInvalid) {\n      // Incomplete/invalid info, not requesting token\n      return;\n    } // Gather data to be sent to Stripe (to create bank account)\n\n\n    let accountData = {\n      country,\n      currency\n    }; // Include input values with correct stripe keys\n\n    const inputValueObj = mapInputsToStripeAccountKeys(country, values);\n    accountData = _objectSpread({}, accountData, inputValueObj); // https://stripe.com/docs/stripe-js/reference#collecting-bank-account-details\n\n    this.stripe.createToken('bank_account', accountData).then(result => {\n      if (result.error) {\n        const e = new Error(result.error.message);\n        e.stripeError = result.error;\n        throw e;\n      }\n\n      return result.token.id;\n    }).then(token => {\n      const changedValues = inputsNeeded.filter(inputType => values[inputType] !== cleanedString(this.state[inputType].value));\n      const valuesAreUnchanged = changedValues.length === 0; // Handle response only if the input values haven't changed\n\n      if (this._isMounted && valuesAreUnchanged) {\n        this.setState(prevState => {\n          const errorsClearedFromInputs = inputsNeeded.map(inputType => {\n            const input = prevState[inputType];\n            return _objectSpread({}, input, {\n              error: null\n            });\n          });\n          return _objectSpread({}, errorsClearedFromInputs, {\n            stripeError: null\n          });\n        });\n        onChange(token);\n      }\n    }).catch(e => {\n      if (!e.stripeError) {\n        throw e;\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          stripeError: translateStripeError(country, intl, e.stripeError)\n        });\n      }\n    });\n  }\n\n  handleInputChange(e, inputType, country, intl) {\n    const rawValue = e.target.value;\n    const value = cleanedString(rawValue);\n    let inputError = null; // Validate the changed routing number\n\n    if (!value) {\n      inputError = intl.formatMessage({\n        id: \"StripeBankAccountTokenInputField.\".concat(inputType, \".required\")\n      });\n    } // Save changes to the state\n\n\n    this.setState(prevState => {\n      const input = _objectSpread({}, prevState[inputType], {\n        value: rawValue,\n        error: inputError\n      });\n\n      return {\n        [inputType]: input,\n        stripeError: null\n      };\n    }); // Request new bank account token\n\n    const unChangedValues = requiredInputs(country).reduce((acc, iType) => _objectSpread({}, acc, {\n      [iType]: this.state[iType].value\n    }), {});\n    this.requestToken(_objectSpread({}, unChangedValues, {\n      [inputType]: value\n    }));\n  }\n\n  handleInputFocus() {\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  handleInputBlur(inputType) {\n    this.setState(prevState => {\n      const inputData = _objectSpread({}, prevState[inputType], {\n        touched: true\n      });\n\n      return {\n        [inputType]: inputData\n      };\n    });\n    window.clearTimeout(this.blurTimeoutId);\n    this.blurTimeoutId = window.setTimeout(this.props.input.onBlur, BLUR_TIMEOUT);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          rootClassName = _this$props2.rootClassName,\n          className = _this$props2.className,\n          country = _this$props2.country,\n          formName = _this$props2.formName,\n          formMeta = _this$props2.meta,\n          intl = _this$props2.intl,\n          disabled = _this$props2.disabled;\n\n    if (!supportedCountries.includes(country)) {\n      return React.createElement(\"div\", {\n        className: css.unsupportedCountryError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"StripeBankAccountTokenInputField.unsupportedCountry\",\n        values: {\n          country\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }));\n    }\n\n    const hasInputErrors = requiredInputs(country).some(inputType => {\n      return (this.state[inputType].touched || formMeta.touched) && !!this.state[inputType].error;\n    }); // Only show Stripe and form errors when the fields don't have\n    // more specific errors.\n\n    const showingFieldErrors = hasInputErrors;\n    const showStripeError = !!(this.state.stripeError && !showingFieldErrors && formMeta.touched);\n    const showFormError = !!(formMeta.touched && formMeta.error && !showingFieldErrors && !showStripeError);\n    const inputConfiguration = requiredInputs(country);\n    return React.createElement(\"div\", {\n      className: classNames(rootClassName || css.root, className),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, inputConfiguration.map(inputType => {\n      return React.createElement(StripeBankAccountRequiredInput, {\n        disabled: disabled,\n        key: inputType,\n        inputType: inputType,\n        formName: formName,\n        value: this.state[inputType].value,\n        placeholder: formatFieldMessage(intl, inputType, 'placeholder'),\n        onChange: e => this.handleInputChange(e, inputType, country, intl),\n        onFocus: this.handleInputFocus,\n        onBlur: () => this.handleInputBlur(inputType),\n        isTouched: this.state[inputType].touched || formMeta.touched,\n        showStripeError: showStripeError,\n        inputError: this.state[inputType].error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      });\n    }), showStripeError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, this.state.stripeError) : null, showFormError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, formMeta.error) : null);\n  }\n\n}\n\nTokenInputFieldComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  disabled: false\n};\nconst string = PropTypes.string,\n      shape = PropTypes.shape,\n      func = PropTypes.func,\n      bool = PropTypes.bool;\nTokenInputFieldComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  country: string.isRequired,\n  currency: string.isRequired,\n  formName: string.isRequired,\n  disabled: bool,\n  input: shape({\n    onChange: func.isRequired,\n    onBlur: func.isRequired\n  }).isRequired,\n  meta: shape({\n    touched: bool.isRequired,\n    error: string\n  }).isRequired,\n  intl: intlShape.isRequired\n};\nconst EnhancedTokenInputFieldComponent = injectIntl(TokenInputFieldComponent);\n\nconst StripeBankAccountTokenInputField = props => {\n  return React.createElement(Field, Object.assign({\n    component: EnhancedTokenInputFieldComponent\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }));\n};\n\nexport default StripeBankAccountTokenInputField;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/StripeBankAccountTokenInputField/StripeBankAccountTokenInputField.js"],"names":["React","Component","PropTypes","intlShape","injectIntl","FormattedMessage","Field","classNames","debounce","config","BANK_ACCOUNT_INPUTS","cleanedString","formatFieldMessage","requiredInputs","mapInputsToStripeAccountKeys","supportedCountries","translateStripeError","StripeBankAccountRequiredInput","css","BLUR_TIMEOUT","DEBOUNCE_WAIT_TIME","TokenInputFieldComponent","constructor","props","intl","initialState","stripeError","forEach","inputType","value","touched","error","state","blurTimeoutId","_isMounted","requestToken","bind","handleInputChange","handleInputFocus","handleInputBlur","componentDidMount","window","Stripe","Error","stripe","publishableKey","componentWillReceiveProps","nextProps","countryChanged","country","currencyChanged","currency","setState","input","onChange","componentWillUnmount","clearTimeout","values","inputsNeeded","missingValues","filter","invalidValues","numbersMissing","length","numbersInvalid","accountData","inputValueObj","createToken","then","result","e","message","token","id","changedValues","valuesAreUnchanged","prevState","errorsClearedFromInputs","map","catch","rawValue","target","inputError","formatMessage","unChangedValues","reduce","acc","iType","inputData","setTimeout","onBlur","render","rootClassName","className","formName","formMeta","meta","disabled","includes","unsupportedCountryError","hasInputErrors","some","showingFieldErrors","showStripeError","showFormError","inputConfiguration","root","defaultProps","string","shape","func","bool","propTypes","isRequired","EnhancedTokenInputFieldComponent","StripeBankAccountTokenInputField"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,gBAAhC,QAAwD,YAAxD;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SACEC,mBADF,EAEEC,aAFF,EAGEC,kBAHF,EAIEC,cAJF,EAKEC,4BALF,EAMEC,kBANF,EAOEC,oBAPF,QAQO,yCARP;AASA,OAAOC,8BAAP,MAA2C,kCAA3C;AACA,OAAOC,GAAP,MAAgB,wCAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,GAArB;AACA,MAAMC,kBAAkB,GAAG,IAA3B;;AAEA,MAAMC,wBAAN,SAAuCpB,SAAvC,CAAiD;AAC/CqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB,CAFiB,CAIjB;;AACA,SAAKC,YAAL,GAAoB;AAClBC,MAAAA,WAAW,EAAE;AADK,KAApB,CALiB,CASjB;;AACAhB,IAAAA,mBAAmB,CAACiB,OAApB,CAA4BC,SAAS,IAAI;AACvC,WAAKH,YAAL,CAAkBG,SAAlB,IAA+B;AAC7BC,QAAAA,KAAK,EAAE,EADsB;AAE7BC,QAAAA,OAAO,EAAE,KAFoB;AAG7BC,QAAAA,KAAK,EAAEnB,kBAAkB,CAACY,IAAD,EAAOI,SAAP,EAAkB,UAAlB;AAHI,OAA/B;AAKD,KAND;AAQA,SAAKI,KAAL,GAAa,KAAKP,YAAlB;AACA,SAAKQ,aAAL,GAAqB,IAArB,CAnBiB,CAqBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKC,UAAL,GAAkB,KAAlB;AAEA,SAAKC,YAAL,GAAoB3B,QAAQ,CAAC,KAAK2B,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,EAA+BhB,kBAA/B,CAA5B;AAEA,SAAKiB,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAACC,MAAM,CAACC,MAAZ,EAAoB;AAClB,YAAM,IAAIC,KAAJ,CAAU,4DAAV,CAAN;AACD;;AACD,SAAKC,MAAL,GAAcH,MAAM,CAACC,MAAP,CAAcjC,MAAM,CAACmC,MAAP,CAAcC,cAA5B,CAAd;AACA,SAAKX,UAAL,GAAkB,IAAlB;AACD;;AAEDY,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,UAAMC,cAAc,GAAGD,SAAS,CAACE,OAAV,KAAsB,KAAK1B,KAAL,CAAW0B,OAAxD;AACA,UAAMC,eAAe,GAAGH,SAAS,CAACI,QAAV,KAAuB,KAAK5B,KAAL,CAAW4B,QAA1D;;AACA,QAAIH,cAAc,IAAIE,eAAtB,EAAuC;AACrC;AACA;AACA,WAAKE,QAAL,CAAc,KAAK3B,YAAnB;AACAsB,MAAAA,SAAS,CAACM,KAAV,CAAgBC,QAAhB,CAAyB,EAAzB;AACD;AACF;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKrB,UAAL,GAAkB,KAAlB;AACAO,IAAAA,MAAM,CAACe,YAAP,CAAoB,KAAKvB,aAAzB;AACD;AAED;;;;;;;;;;;AASAE,EAAAA,YAAY,CAACsB,MAAD,EAAS;AAAA,wBAMf,KAAKlC,KANU;AAAA,UAEjB0B,OAFiB,eAEjBA,OAFiB;AAAA,UAGjBE,QAHiB,eAGjBA,QAHiB;AAAA,UAIRG,QAJQ,eAIjBD,KAJiB,CAIRC,QAJQ;AAAA,UAKjB9B,IALiB,eAKjBA,IALiB,EAQnB;AACA;;AACA8B,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAEA,UAAMI,YAAY,GAAG7C,cAAc,CAACoC,OAAD,CAAnC;AACA,UAAMU,aAAa,GAAGD,YAAY,CAACE,MAAb,CAAoBhC,SAAS,IAAI,CAAC6B,MAAM,CAAC7B,SAAD,CAAxC,CAAtB;AACA,UAAMiC,aAAa,GAAGH,YAAY,CAACE,MAAb,CAAoBhC,SAAS,IAAI,CAAC,CAAC,KAAKI,KAAL,CAAWJ,SAAX,EAAsBG,KAAzD,CAAtB;AAEA,UAAM+B,cAAc,GAAGH,aAAa,CAACI,MAAd,GAAuB,CAA9C;AACA,UAAMC,cAAc,GAAGH,aAAa,CAACE,MAAd,GAAuB,CAA9C;;AAEA,QAAID,cAAc,IAAIE,cAAtB,EAAsC;AACpC;AACA;AACD,KAtBkB,CAwBnB;;;AACA,QAAIC,WAAW,GAAG;AAChBhB,MAAAA,OADgB;AAEhBE,MAAAA;AAFgB,KAAlB,CAzBmB,CA8BnB;;AACA,UAAMe,aAAa,GAAGpD,4BAA4B,CAACmC,OAAD,EAAUQ,MAAV,CAAlD;AACAQ,IAAAA,WAAW,qBAAQA,WAAR,EAAwBC,aAAxB,CAAX,CAhCmB,CAkCnB;;AACA,SAAKtB,MAAL,CACGuB,WADH,CACe,cADf,EAC+BF,WAD/B,EAEGG,IAFH,CAEQC,MAAM,IAAI;AACd,UAAIA,MAAM,CAACtC,KAAX,EAAkB;AAChB,cAAMuC,CAAC,GAAG,IAAI3B,KAAJ,CAAU0B,MAAM,CAACtC,KAAP,CAAawC,OAAvB,CAAV;AACAD,QAAAA,CAAC,CAAC5C,WAAF,GAAgB2C,MAAM,CAACtC,KAAvB;AACA,cAAMuC,CAAN;AACD;;AACD,aAAOD,MAAM,CAACG,KAAP,CAAaC,EAApB;AACD,KATH,EAUGL,IAVH,CAUQI,KAAK,IAAI;AACb,YAAME,aAAa,GAAGhB,YAAY,CAACE,MAAb,CACpBhC,SAAS,IAAI6B,MAAM,CAAC7B,SAAD,CAAN,KAAsBjB,aAAa,CAAC,KAAKqB,KAAL,CAAWJ,SAAX,EAAsBC,KAAvB,CAD5B,CAAtB;AAGA,YAAM8C,kBAAkB,GAAGD,aAAa,CAACX,MAAd,KAAyB,CAApD,CAJa,CAMb;;AACA,UAAI,KAAK7B,UAAL,IAAmByC,kBAAvB,EAA2C;AACzC,aAAKvB,QAAL,CAAcwB,SAAS,IAAI;AACzB,gBAAMC,uBAAuB,GAAGnB,YAAY,CAACoB,GAAb,CAAiBlD,SAAS,IAAI;AAC5D,kBAAMyB,KAAK,GAAGuB,SAAS,CAAChD,SAAD,CAAvB;AACA,qCAAYyB,KAAZ;AAAmBtB,cAAAA,KAAK,EAAE;AAA1B;AACD,WAH+B,CAAhC;AAIA,mCAAY8C,uBAAZ;AAAqCnD,YAAAA,WAAW,EAAE;AAAlD;AACD,SAND;AAQA4B,QAAAA,QAAQ,CAACkB,KAAD,CAAR;AACD;AACF,KA5BH,EA6BGO,KA7BH,CA6BST,CAAC,IAAI;AACV,UAAI,CAACA,CAAC,CAAC5C,WAAP,EAAoB;AAClB,cAAM4C,CAAN;AACD;;AACD,UAAI,KAAKpC,UAAT,EAAqB;AACnB,aAAKkB,QAAL,CAAc;AACZ1B,UAAAA,WAAW,EAAEV,oBAAoB,CAACiC,OAAD,EAAUzB,IAAV,EAAgB8C,CAAC,CAAC5C,WAAlB;AADrB,SAAd;AAGD;AACF,KAtCH;AAuCD;;AAEDW,EAAAA,iBAAiB,CAACiC,CAAD,EAAI1C,SAAJ,EAAeqB,OAAf,EAAwBzB,IAAxB,EAA8B;AAC7C,UAAMwD,QAAQ,GAAGV,CAAC,CAACW,MAAF,CAASpD,KAA1B;AACA,UAAMA,KAAK,GAAGlB,aAAa,CAACqE,QAAD,CAA3B;AACA,QAAIE,UAAU,GAAG,IAAjB,CAH6C,CAK7C;;AACA,QAAI,CAACrD,KAAL,EAAY;AACVqD,MAAAA,UAAU,GAAG1D,IAAI,CAAC2D,aAAL,CAAmB;AAC9BV,QAAAA,EAAE,6CAAsC7C,SAAtC;AAD4B,OAAnB,CAAb;AAGD,KAV4C,CAY7C;;;AACA,SAAKwB,QAAL,CAAcwB,SAAS,IAAI;AACzB,YAAMvB,KAAK,qBAAQuB,SAAS,CAAChD,SAAD,CAAjB;AAA8BC,QAAAA,KAAK,EAAEmD,QAArC;AAA+CjD,QAAAA,KAAK,EAAEmD;AAAtD,QAAX;;AACA,aAAO;AACL,SAACtD,SAAD,GAAayB,KADR;AAEL3B,QAAAA,WAAW,EAAE;AAFR,OAAP;AAID,KAND,EAb6C,CAqB7C;;AACA,UAAM0D,eAAe,GAAGvE,cAAc,CAACoC,OAAD,CAAd,CAAwBoC,MAAxB,CACtB,CAACC,GAAD,EAAMC,KAAN,uBAAsBD,GAAtB;AAA2B,OAACC,KAAD,GAAS,KAAKvD,KAAL,CAAWuD,KAAX,EAAkB1D;AAAtD,MADsB,EAEtB,EAFsB,CAAxB;AAIA,SAAKM,YAAL,mBAAuBiD,eAAvB;AAAwC,OAACxD,SAAD,GAAaC;AAArD;AACD;;AAEDS,EAAAA,gBAAgB,GAAG;AACjBG,IAAAA,MAAM,CAACe,YAAP,CAAoB,KAAKvB,aAAzB;AACD;;AAEDM,EAAAA,eAAe,CAACX,SAAD,EAAY;AACzB,SAAKwB,QAAL,CAAcwB,SAAS,IAAI;AACzB,YAAMY,SAAS,qBAAQZ,SAAS,CAAChD,SAAD,CAAjB;AAA8BE,QAAAA,OAAO,EAAE;AAAvC,QAAf;;AACA,aAAO;AAAE,SAACF,SAAD,GAAa4D;AAAf,OAAP;AACD,KAHD;AAIA/C,IAAAA,MAAM,CAACe,YAAP,CAAoB,KAAKvB,aAAzB;AACA,SAAKA,aAAL,GAAqBQ,MAAM,CAACgD,UAAP,CAAkB,KAAKlE,KAAL,CAAW8B,KAAX,CAAiBqC,MAAnC,EAA2CvE,YAA3C,CAArB;AACD;;AAEDwE,EAAAA,MAAM,GAAG;AAAA,yBASH,KAAKpE,KATF;AAAA,UAELqE,aAFK,gBAELA,aAFK;AAAA,UAGLC,SAHK,gBAGLA,SAHK;AAAA,UAIL5C,OAJK,gBAILA,OAJK;AAAA,UAKL6C,QALK,gBAKLA,QALK;AAAA,UAMCC,QAND,gBAMLC,IANK;AAAA,UAOLxE,IAPK,gBAOLA,IAPK;AAAA,UAQLyE,QARK,gBAQLA,QARK;;AAWP,QAAI,CAAClF,kBAAkB,CAACmF,QAAnB,CAA4BjD,OAA5B,CAAL,EAA2C;AACzC,aACE;AAAK,QAAA,SAAS,EAAE/B,GAAG,CAACiF,uBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,EAAE,EAAC,qDADL;AAEE,QAAA,MAAM,EAAE;AAAElD,UAAAA;AAAF,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAQD;;AAED,UAAMmD,cAAc,GAAGvF,cAAc,CAACoC,OAAD,CAAd,CAAwBoD,IAAxB,CAA6BzE,SAAS,IAAI;AAC/D,aAAO,CAAC,KAAKI,KAAL,CAAWJ,SAAX,EAAsBE,OAAtB,IAAiCiE,QAAQ,CAACjE,OAA3C,KAAuD,CAAC,CAAC,KAAKE,KAAL,CAAWJ,SAAX,EAAsBG,KAAtF;AACD,KAFsB,CAAvB,CAtBO,CA0BP;AACA;;AACA,UAAMuE,kBAAkB,GAAGF,cAA3B;AACA,UAAMG,eAAe,GAAG,CAAC,EAAE,KAAKvE,KAAL,CAAWN,WAAX,IAA0B,CAAC4E,kBAA3B,IAAiDP,QAAQ,CAACjE,OAA5D,CAAzB;AACA,UAAM0E,aAAa,GAAG,CAAC,EACrBT,QAAQ,CAACjE,OAAT,IACAiE,QAAQ,CAAChE,KADT,IAEA,CAACuE,kBAFD,IAGA,CAACC,eAJoB,CAAvB;AAOA,UAAME,kBAAkB,GAAG5F,cAAc,CAACoC,OAAD,CAAzC;AAEA,WACE;AAAK,MAAA,SAAS,EAAE1C,UAAU,CAACqF,aAAa,IAAI1E,GAAG,CAACwF,IAAtB,EAA4Bb,SAA5B,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGY,kBAAkB,CAAC3B,GAAnB,CAAuBlD,SAAS,IAAI;AACnC,aACE,oBAAC,8BAAD;AACE,QAAA,QAAQ,EAAEqE,QADZ;AAEE,QAAA,GAAG,EAAErE,SAFP;AAGE,QAAA,SAAS,EAAEA,SAHb;AAIE,QAAA,QAAQ,EAAEkE,QAJZ;AAKE,QAAA,KAAK,EAAE,KAAK9D,KAAL,CAAWJ,SAAX,EAAsBC,KAL/B;AAME,QAAA,WAAW,EAAEjB,kBAAkB,CAACY,IAAD,EAAOI,SAAP,EAAkB,aAAlB,CANjC;AAOE,QAAA,QAAQ,EAAE0C,CAAC,IAAI,KAAKjC,iBAAL,CAAuBiC,CAAvB,EAA0B1C,SAA1B,EAAqCqB,OAArC,EAA8CzB,IAA9C,CAPjB;AAQE,QAAA,OAAO,EAAE,KAAKc,gBARhB;AASE,QAAA,MAAM,EAAE,MAAM,KAAKC,eAAL,CAAqBX,SAArB,CAThB;AAUE,QAAA,SAAS,EAAE,KAAKI,KAAL,CAAWJ,SAAX,EAAsBE,OAAtB,IAAiCiE,QAAQ,CAACjE,OAVvD;AAWE,QAAA,eAAe,EAAEyE,eAXnB;AAYE,QAAA,UAAU,EAAE,KAAKvE,KAAL,CAAWJ,SAAX,EAAsBG,KAZpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAgBD,KAjBA,CADH,EAoBGwE,eAAe,GAAG;AAAG,MAAA,SAAS,EAAErF,GAAG,CAACa,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKC,KAAL,CAAWN,WAArC,CAAH,GAA2D,IApB7E,EAqBG8E,aAAa,GAAG;AAAG,MAAA,SAAS,EAAEtF,GAAG,CAACa,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BgE,QAAQ,CAAChE,KAAnC,CAAH,GAAmD,IArBnE,CADF;AAyBD;;AAhQ8C;;AAmQjDV,wBAAwB,CAACsF,YAAzB,GAAwC;AACtCf,EAAAA,aAAa,EAAE,IADuB;AAEtCC,EAAAA,SAAS,EAAE,IAF2B;AAGtCI,EAAAA,QAAQ,EAAE;AAH4B,CAAxC;MAMQW,M,GAA8B1G,S,CAA9B0G,M;MAAQC,K,GAAsB3G,S,CAAtB2G,K;MAAOC,I,GAAe5G,S,CAAf4G,I;MAAMC,I,GAAS7G,S,CAAT6G,I;AAE7B1F,wBAAwB,CAAC2F,SAAzB,GAAqC;AACnCpB,EAAAA,aAAa,EAAEgB,MADoB;AAEnCf,EAAAA,SAAS,EAAEe,MAFwB;AAGnC3D,EAAAA,OAAO,EAAE2D,MAAM,CAACK,UAHmB;AAInC9D,EAAAA,QAAQ,EAAEyD,MAAM,CAACK,UAJkB;AAKnCnB,EAAAA,QAAQ,EAAEc,MAAM,CAACK,UALkB;AAMnChB,EAAAA,QAAQ,EAAEc,IANyB;AAQnC1D,EAAAA,KAAK,EAAEwD,KAAK,CAAC;AACXvD,IAAAA,QAAQ,EAAEwD,IAAI,CAACG,UADJ;AAEXvB,IAAAA,MAAM,EAAEoB,IAAI,CAACG;AAFF,GAAD,CAAL,CAGJA,UAXgC;AAYnCjB,EAAAA,IAAI,EAAEa,KAAK,CAAC;AACV/E,IAAAA,OAAO,EAAEiF,IAAI,CAACE,UADJ;AAEVlF,IAAAA,KAAK,EAAE6E;AAFG,GAAD,CAAL,CAGHK,UAfgC;AAiBnCzF,EAAAA,IAAI,EAAErB,SAAS,CAAC8G;AAjBmB,CAArC;AAoBA,MAAMC,gCAAgC,GAAG9G,UAAU,CAACiB,wBAAD,CAAnD;;AAEA,MAAM8F,gCAAgC,GAAG5F,KAAK,IAAI;AAChD,SAAO,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE2F;AAAlB,KAAwD3F,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAFD;;AAIA,eAAe4F,gCAAf","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport config from '../../config';\n\nimport {\n  BANK_ACCOUNT_INPUTS,\n  cleanedString,\n  formatFieldMessage,\n  requiredInputs,\n  mapInputsToStripeAccountKeys,\n  supportedCountries,\n  translateStripeError,\n} from './StripeBankAccountTokenInputField.util';\nimport StripeBankAccountRequiredInput from './StripeBankAccountRequiredInput';\nimport css from './StripeBankAccountTokenInputField.css';\n\n// Since final-form tracks the onBlur event for marking the field as\n// touched (which triggers possible error validation rendering), only\n// trigger the event asynchronously when no other input within this\n// component has received focus.\n//\n// This prevents showing the validation error when the user selects a\n// value and moves on to another input within this component.\nconst BLUR_TIMEOUT = 100;\nconst DEBOUNCE_WAIT_TIME = 1000;\n\nclass TokenInputFieldComponent extends Component {\n  constructor(props) {\n    super(props);\n    const intl = props.intl;\n\n    // Initial state is needed when country (and currency) changes and values need to be cleared.\n    this.initialState = {\n      stripeError: null,\n    };\n\n    // Fill initialState with input type specific data\n    BANK_ACCOUNT_INPUTS.forEach(inputType => {\n      this.initialState[inputType] = {\n        value: '',\n        touched: false,\n        error: formatFieldMessage(intl, inputType, 'required'),\n      };\n    });\n\n    this.state = this.initialState;\n    this.blurTimeoutId = null;\n\n    // We keep track of the mounted state of the component to avoid\n    // setting state or calling callback props if a createToken call\n    // finishes after the component is already removed.\n    //\n    // The correct solution would be to cancel all ongoing operations\n    // in componentWillUnmount, but since Promises don't have a\n    // cancellation mechanism yet, we must use a different solution\n    // for now.\n    //\n    // See: https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\n    this._isMounted = false;\n\n    this.requestToken = debounce(this.requestToken.bind(this), DEBOUNCE_WAIT_TIME);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n  }\n\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for StripeBankAccountTokenInputField');\n    }\n    this.stripe = window.Stripe(config.stripe.publishableKey);\n    this._isMounted = true;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const countryChanged = nextProps.country !== this.props.country;\n    const currencyChanged = nextProps.currency !== this.props.currency;\n    if (countryChanged || currencyChanged) {\n      // Clear the possible input values from the state\n      // if the given country or currency changes.\n      this.setState(this.initialState);\n      nextProps.input.onChange('');\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  /**\n   * Request a token from the Stripe API with the given bank account data\n   *\n   * This function validates the given data and triggers onChange\n   * events for the parent form to handle.\n   *\n   *\n   * @param {Object} values - values from different input types\n   */\n  requestToken(values) {\n    const {\n      country,\n      currency,\n      input: { onChange },\n      intl,\n    } = this.props;\n\n    // First we have to clear the current token value so the parent\n    // form doesn't submit with an old value.\n    onChange('');\n\n    const inputsNeeded = requiredInputs(country);\n    const missingValues = inputsNeeded.filter(inputType => !values[inputType]);\n    const invalidValues = inputsNeeded.filter(inputType => !!this.state[inputType].error);\n\n    const numbersMissing = missingValues.length > 0;\n    const numbersInvalid = invalidValues.length > 0;\n\n    if (numbersMissing || numbersInvalid) {\n      // Incomplete/invalid info, not requesting token\n      return;\n    }\n\n    // Gather data to be sent to Stripe (to create bank account)\n    let accountData = {\n      country,\n      currency,\n    };\n\n    // Include input values with correct stripe keys\n    const inputValueObj = mapInputsToStripeAccountKeys(country, values);\n    accountData = { ...accountData, ...inputValueObj };\n\n    // https://stripe.com/docs/stripe-js/reference#collecting-bank-account-details\n    this.stripe\n      .createToken('bank_account', accountData)\n      .then(result => {\n        if (result.error) {\n          const e = new Error(result.error.message);\n          e.stripeError = result.error;\n          throw e;\n        }\n        return result.token.id;\n      })\n      .then(token => {\n        const changedValues = inputsNeeded.filter(\n          inputType => values[inputType] !== cleanedString(this.state[inputType].value)\n        );\n        const valuesAreUnchanged = changedValues.length === 0;\n\n        // Handle response only if the input values haven't changed\n        if (this._isMounted && valuesAreUnchanged) {\n          this.setState(prevState => {\n            const errorsClearedFromInputs = inputsNeeded.map(inputType => {\n              const input = prevState[inputType];\n              return { ...input, error: null };\n            });\n            return { ...errorsClearedFromInputs, stripeError: null };\n          });\n\n          onChange(token);\n        }\n      })\n      .catch(e => {\n        if (!e.stripeError) {\n          throw e;\n        }\n        if (this._isMounted) {\n          this.setState({\n            stripeError: translateStripeError(country, intl, e.stripeError),\n          });\n        }\n      });\n  }\n\n  handleInputChange(e, inputType, country, intl) {\n    const rawValue = e.target.value;\n    const value = cleanedString(rawValue);\n    let inputError = null;\n\n    // Validate the changed routing number\n    if (!value) {\n      inputError = intl.formatMessage({\n        id: `StripeBankAccountTokenInputField.${inputType}.required`,\n      });\n    }\n\n    // Save changes to the state\n    this.setState(prevState => {\n      const input = { ...prevState[inputType], value: rawValue, error: inputError };\n      return {\n        [inputType]: input,\n        stripeError: null,\n      };\n    });\n\n    // Request new bank account token\n    const unChangedValues = requiredInputs(country).reduce(\n      (acc, iType) => ({ ...acc, [iType]: this.state[iType].value }),\n      {}\n    );\n    this.requestToken({ ...unChangedValues, [inputType]: value });\n  }\n\n  handleInputFocus() {\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  handleInputBlur(inputType) {\n    this.setState(prevState => {\n      const inputData = { ...prevState[inputType], touched: true };\n      return { [inputType]: inputData };\n    });\n    window.clearTimeout(this.blurTimeoutId);\n    this.blurTimeoutId = window.setTimeout(this.props.input.onBlur, BLUR_TIMEOUT);\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      country,\n      formName,\n      meta: formMeta,\n      intl,\n      disabled,\n    } = this.props;\n\n    if (!supportedCountries.includes(country)) {\n      return (\n        <div className={css.unsupportedCountryError}>\n          <FormattedMessage\n            id=\"StripeBankAccountTokenInputField.unsupportedCountry\"\n            values={{ country }}\n          />\n        </div>\n      );\n    }\n\n    const hasInputErrors = requiredInputs(country).some(inputType => {\n      return (this.state[inputType].touched || formMeta.touched) && !!this.state[inputType].error;\n    });\n\n    // Only show Stripe and form errors when the fields don't have\n    // more specific errors.\n    const showingFieldErrors = hasInputErrors;\n    const showStripeError = !!(this.state.stripeError && !showingFieldErrors && formMeta.touched);\n    const showFormError = !!(\n      formMeta.touched &&\n      formMeta.error &&\n      !showingFieldErrors &&\n      !showStripeError\n    );\n\n    const inputConfiguration = requiredInputs(country);\n\n    return (\n      <div className={classNames(rootClassName || css.root, className)}>\n        {inputConfiguration.map(inputType => {\n          return (\n            <StripeBankAccountRequiredInput\n              disabled={disabled}\n              key={inputType}\n              inputType={inputType}\n              formName={formName}\n              value={this.state[inputType].value}\n              placeholder={formatFieldMessage(intl, inputType, 'placeholder')}\n              onChange={e => this.handleInputChange(e, inputType, country, intl)}\n              onFocus={this.handleInputFocus}\n              onBlur={() => this.handleInputBlur(inputType)}\n              isTouched={this.state[inputType].touched || formMeta.touched}\n              showStripeError={showStripeError}\n              inputError={this.state[inputType].error}\n            />\n          );\n        })}\n\n        {showStripeError ? <p className={css.error}>{this.state.stripeError}</p> : null}\n        {showFormError ? <p className={css.error}>{formMeta.error}</p> : null}\n      </div>\n    );\n  }\n}\n\nTokenInputFieldComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  disabled: false,\n};\n\nconst { string, shape, func, bool } = PropTypes;\n\nTokenInputFieldComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  country: string.isRequired,\n  currency: string.isRequired,\n  formName: string.isRequired,\n  disabled: bool,\n\n  input: shape({\n    onChange: func.isRequired,\n    onBlur: func.isRequired,\n  }).isRequired,\n  meta: shape({\n    touched: bool.isRequired,\n    error: string,\n  }).isRequired,\n\n  intl: intlShape.isRequired,\n};\n\nconst EnhancedTokenInputFieldComponent = injectIntl(TokenInputFieldComponent);\n\nconst StripeBankAccountTokenInputField = props => {\n  return <Field component={EnhancedTokenInputFieldComponent} {...props} />;\n};\n\nexport default StripeBankAccountTokenInputField;\n"]},"metadata":{},"sourceType":"module"}