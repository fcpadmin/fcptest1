{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/ContactDetailsForm/ContactDetailsForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isChangeEmailTakenError, isChangeEmailWrongPassword, isTooManyEmailVerificationRequestsError } from '../../util/errors';\nimport { FieldPhoneNumberInput, Form, PrimaryButton, FieldTextInput } from '../../components';\nimport css from './ContactDetailsForm.css';\nconst SHOW_EMAIL_SENT_TIMEOUT = 2000;\n\nclass ContactDetailsFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showVerificationEmailSentMessage: false\n    };\n    this.emailSentTimeoutId = null;\n    this.handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\n    this.submittedValues = {};\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.emailSentTimeoutId);\n  }\n\n  handleResendVerificationEmail() {\n    this.setState({\n      showVerificationEmailSentMessage: true\n    });\n    this.props.onResendVerificationEmail().then(() => {\n      // show \"verification email sent\" text for a bit longer.\n      this.emailSentTimeoutId = window.setTimeout(() => {\n        this.setState({\n          showVerificationEmailSentMessage: false\n        });\n      }, SHOW_EMAIL_SENT_TIMEOUT);\n    });\n  }\n\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const rootClassName = fieldRenderProps.rootClassName,\n              className = fieldRenderProps.className,\n              saveEmailError = fieldRenderProps.saveEmailError,\n              savePhoneNumberError = fieldRenderProps.savePhoneNumberError,\n              currentUser = fieldRenderProps.currentUser,\n              formId = fieldRenderProps.formId,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              inProgress = fieldRenderProps.inProgress,\n              intl = fieldRenderProps.intl,\n              invalid = fieldRenderProps.invalid,\n              sendVerificationEmailError = fieldRenderProps.sendVerificationEmailError,\n              sendVerificationEmailInProgress = fieldRenderProps.sendVerificationEmailInProgress,\n              values = fieldRenderProps.values;\n        const email = values.email,\n              phoneNumber = values.phoneNumber;\n        const user = ensureCurrentUser(currentUser);\n\n        if (!user.id) {\n          return null;\n        }\n\n        const _user$attributes = user.attributes,\n              currentEmail = _user$attributes.email,\n              emailVerified = _user$attributes.emailVerified,\n              pendingEmail = _user$attributes.pendingEmail,\n              profile = _user$attributes.profile; // email\n        // has the email changed\n\n        const emailChanged = currentEmail !== email;\n        const emailLabel = intl.formatMessage({\n          id: 'ContactDetailsForm.emailLabel'\n        });\n        const emailPlaceholder = currentEmail || '';\n        const emailRequiredMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.emailRequired'\n        });\n        const emailRequired = validators.required(emailRequiredMessage);\n        const emailInvalidMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.emailInvalid'\n        });\n        const emailValid = validators.emailFormatValid(emailInvalidMessage);\n        const tooManyVerificationRequests = isTooManyEmailVerificationRequestsError(sendVerificationEmailError);\n        const emailTouched = this.submittedValues.email !== values.email;\n        const emailTakenErrorText = isChangeEmailTakenError(saveEmailError) ? intl.formatMessage({\n          id: 'ContactDetailsForm.emailTakenError'\n        }) : null;\n        let resendEmailMessage = null;\n\n        if (tooManyVerificationRequests) {\n          resendEmailMessage = React.createElement(\"span\", {\n            className: css.tooMany,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.tooManyVerificationRequests\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }));\n        } else if (sendVerificationEmailInProgress || this.state.showVerificationEmailSentMessage) {\n          resendEmailMessage = React.createElement(\"span\", {\n            className: css.emailSent,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.emailSent\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }));\n        } else {\n          /* eslint-disable jsx-a11y/no-static-element-interactions */\n          resendEmailMessage = React.createElement(\"span\", {\n            className: css.helperLink,\n            onClick: this.handleResendVerificationEmail,\n            role: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.resendEmailVerificationText\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }));\n          /* eslint-enable jsx-a11y/no-static-element-interactions */\n        } // Email status info: unverified, verified and pending email (aka changed unverified email)\n\n\n        let emailVerifiedInfo = null;\n\n        if (emailVerified && !pendingEmail && !emailChanged) {\n          // Current email is verified and there's no pending unverified email\n          emailVerifiedInfo = React.createElement(\"span\", {\n            className: css.emailVerified,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.emailVerified\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }));\n        } else if (!emailVerified && !pendingEmail) {\n          // Current email is unverified. This is the email given in sign up form\n          emailVerifiedInfo = React.createElement(\"span\", {\n            className: css.emailUnverified,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.emailUnverified\",\n            values: {\n              resendEmailMessage\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }));\n        } else if (pendingEmail) {\n          // Current email has been tried to change, but the new address is not yet verified\n          const pendingEmailStyled = React.createElement(\"span\", {\n            className: css.emailStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          }, pendingEmail);\n          const pendingEmailCheckInbox = React.createElement(\"span\", {\n            className: css.checkInbox,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.pendingEmailCheckInbox\",\n            values: {\n              pendingEmail: pendingEmailStyled\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }));\n          emailVerifiedInfo = React.createElement(\"span\", {\n            className: css.pendingEmailUnverified,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.pendingEmailUnverified\",\n            values: {\n              pendingEmailCheckInbox,\n              resendEmailMessage\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }));\n        } // phone\n\n\n        const protectedData = profile.protectedData || {};\n        const currentPhoneNumber = protectedData.phoneNumber; // has the phone number changed\n\n        const phoneNumberChanged = currentPhoneNumber !== phoneNumber;\n        const phonePlaceholder = intl.formatMessage({\n          id: 'ContactDetailsForm.phonePlaceholder'\n        });\n        const phoneLabel = intl.formatMessage({\n          id: 'ContactDetailsForm.phoneLabel'\n        }); // password\n\n        const passwordLabel = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordLabel'\n        });\n        const passwordPlaceholder = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordPlaceholder'\n        });\n        const passwordRequiredMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordRequired'\n        });\n        const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n        const passwordMinLengthMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordTooShort'\n        }, {\n          minLength: validators.PASSWORD_MIN_LENGTH\n        });\n        const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n        const passwordValidators = emailChanged ? validators.composeValidators(passwordRequired, passwordMinLength) : null;\n        const passwordFailedMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordFailed'\n        });\n        const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n        const passwordErrorText = isChangeEmailWrongPassword(saveEmailError) ? passwordFailedMessage : null;\n        const confirmClasses = classNames(css.confirmChangesSection, {\n          [css.confirmChangesSectionVisible]: emailChanged\n        }); // generic error\n\n        const isGenericEmailError = saveEmailError && !(emailTakenErrorText || passwordErrorText);\n        let genericError = null;\n\n        if (isGenericEmailError && savePhoneNumberError) {\n          genericError = React.createElement(\"span\", {\n            className: css.error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.genericFailure\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }));\n        } else if (isGenericEmailError) {\n          genericError = React.createElement(\"span\", {\n            className: css.error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.genericEmailFailure\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248\n            },\n            __self: this\n          }));\n        } else if (savePhoneNumberError) {\n          genericError = React.createElement(\"span\", {\n            className: css.error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.genericPhoneNumberFailure\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254\n            },\n            __self: this\n          }));\n        }\n\n        const classes = classNames(rootClassName || css.root, className);\n        const submittedOnce = Object.keys(this.submittedValues).length > 0;\n        const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n        const submitDisabled = invalid || pristineSinceLastSubmit || inProgress || !(emailChanged || phoneNumberChanged);\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedValues = values;\n            handleSubmit(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: css.contactDetailsSection,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, React.createElement(FieldTextInput, {\n          type: \"email\",\n          name: \"email\",\n          id: formId ? \"\".concat(formId, \".email\") : 'email',\n          label: emailLabel,\n          placeholder: emailPlaceholder,\n          validate: validators.composeValidators(emailRequired, emailValid),\n          customErrorText: emailTouched ? null : emailTakenErrorText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }), emailVerifiedInfo, React.createElement(FieldPhoneNumberInput, {\n          className: css.phone,\n          name: \"phoneNumber\",\n          id: formId ? \"\".concat(formId, \".phoneNumber\") : 'phoneNumber',\n          label: phoneLabel,\n          placeholder: phonePlaceholder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: confirmClasses,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: css.confirmChangesTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.confirmChangesTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          className: css.confirmChangesInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.confirmChangesInfo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301\n          },\n          __self: this\n        })), React.createElement(FieldTextInput, {\n          className: css.password,\n          type: \"password\",\n          name: \"currentPassword\",\n          id: formId ? \"\".concat(formId, \".currentPassword\") : 'currentPassword',\n          autoComplete: \"current-password\",\n          label: passwordLabel,\n          placeholder: passwordPlaceholder,\n          validate: passwordValidators,\n          customErrorText: passwordTouched ? null : passwordErrorText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: css.bottomWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, genericError, React.createElement(PrimaryButton, {\n          type: \"submit\",\n          inProgress: inProgress,\n          ready: pristineSinceLastSubmit,\n          disabled: submitDisabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.saveChanges\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324\n          },\n          __self: this\n        }))));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContactDetailsFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  formId: null,\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  inProgress: false,\n  sendVerificationEmailError: null,\n  sendVerificationEmailInProgress: false,\n  email: null,\n  phoneNumber: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      string = PropTypes.string;\nContactDetailsFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  formId: string,\n  saveEmailError: propTypes.error,\n  savePhoneNumberError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  ready: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  sendVerificationEmailInProgress: bool\n};\nconst ContactDetailsForm = compose(injectIntl)(ContactDetailsFormComponent);\nContactDetailsForm.displayName = 'ContactDetailsForm';\nexport default ContactDetailsForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/ContactDetailsForm/ContactDetailsForm.js"],"names":["React","Component","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","isEqual","classNames","propTypes","validators","ensureCurrentUser","isChangeEmailTakenError","isChangeEmailWrongPassword","isTooManyEmailVerificationRequestsError","FieldPhoneNumberInput","PrimaryButton","FieldTextInput","css","SHOW_EMAIL_SENT_TIMEOUT","ContactDetailsFormComponent","constructor","props","state","showVerificationEmailSentMessage","emailSentTimeoutId","handleResendVerificationEmail","bind","submittedValues","componentWillUnmount","window","clearTimeout","setState","onResendVerificationEmail","then","setTimeout","render","fieldRenderProps","rootClassName","className","saveEmailError","savePhoneNumberError","currentUser","formId","handleSubmit","inProgress","intl","invalid","sendVerificationEmailError","sendVerificationEmailInProgress","values","email","phoneNumber","user","id","attributes","currentEmail","emailVerified","pendingEmail","profile","emailChanged","emailLabel","formatMessage","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","tooManyVerificationRequests","emailTouched","emailTakenErrorText","resendEmailMessage","tooMany","emailSent","helperLink","emailVerifiedInfo","emailUnverified","pendingEmailStyled","emailStyle","pendingEmailCheckInbox","checkInbox","pendingEmailUnverified","protectedData","currentPhoneNumber","phoneNumberChanged","phonePlaceholder","phoneLabel","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","requiredStringNoTrim","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMinLength","passwordValidators","composeValidators","passwordFailedMessage","passwordTouched","currentPassword","passwordErrorText","confirmClasses","confirmChangesSection","confirmChangesSectionVisible","isGenericEmailError","genericError","error","classes","root","submittedOnce","Object","keys","length","pristineSinceLastSubmit","submitDisabled","e","contactDetailsSection","phone","confirmChangesTitle","confirmChangesInfo","password","bottomWrapper","defaultProps","bool","func","string","isRequired","ready","ContactDetailsForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { ensureCurrentUser } from '../../util/data';\nimport {\n  isChangeEmailTakenError,\n  isChangeEmailWrongPassword,\n  isTooManyEmailVerificationRequestsError,\n} from '../../util/errors';\nimport { FieldPhoneNumberInput, Form, PrimaryButton, FieldTextInput } from '../../components';\n\nimport css from './ContactDetailsForm.css';\n\nconst SHOW_EMAIL_SENT_TIMEOUT = 2000;\n\nclass ContactDetailsFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showVerificationEmailSentMessage: false };\n    this.emailSentTimeoutId = null;\n    this.handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\n    this.submittedValues = {};\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.emailSentTimeoutId);\n  }\n\n  handleResendVerificationEmail() {\n    this.setState({ showVerificationEmailSentMessage: true });\n\n    this.props.onResendVerificationEmail().then(() => {\n      // show \"verification email sent\" text for a bit longer.\n      this.emailSentTimeoutId = window.setTimeout(() => {\n        this.setState({ showVerificationEmailSentMessage: false });\n      }, SHOW_EMAIL_SENT_TIMEOUT);\n    });\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={fieldRenderProps => {\n          const {\n            rootClassName,\n            className,\n            saveEmailError,\n            savePhoneNumberError,\n            currentUser,\n            formId,\n            handleSubmit,\n            inProgress,\n            intl,\n            invalid,\n            sendVerificationEmailError,\n            sendVerificationEmailInProgress,\n            values,\n          } = fieldRenderProps;\n          const { email, phoneNumber } = values;\n\n          const user = ensureCurrentUser(currentUser);\n\n          if (!user.id) {\n            return null;\n          }\n\n          const { email: currentEmail, emailVerified, pendingEmail, profile } = user.attributes;\n\n          // email\n\n          // has the email changed\n          const emailChanged = currentEmail !== email;\n\n          const emailLabel = intl.formatMessage({\n            id: 'ContactDetailsForm.emailLabel',\n          });\n\n          const emailPlaceholder = currentEmail || '';\n\n          const emailRequiredMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.emailRequired',\n          });\n          const emailRequired = validators.required(emailRequiredMessage);\n          const emailInvalidMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.emailInvalid',\n          });\n          const emailValid = validators.emailFormatValid(emailInvalidMessage);\n\n          const tooManyVerificationRequests = isTooManyEmailVerificationRequestsError(\n            sendVerificationEmailError\n          );\n\n          const emailTouched = this.submittedValues.email !== values.email;\n          const emailTakenErrorText = isChangeEmailTakenError(saveEmailError)\n            ? intl.formatMessage({ id: 'ContactDetailsForm.emailTakenError' })\n            : null;\n\n          let resendEmailMessage = null;\n          if (tooManyVerificationRequests) {\n            resendEmailMessage = (\n              <span className={css.tooMany}>\n                <FormattedMessage id=\"ContactDetailsForm.tooManyVerificationRequests\" />\n              </span>\n            );\n          } else if (\n            sendVerificationEmailInProgress ||\n            this.state.showVerificationEmailSentMessage\n          ) {\n            resendEmailMessage = (\n              <span className={css.emailSent}>\n                <FormattedMessage id=\"ContactDetailsForm.emailSent\" />\n              </span>\n            );\n          } else {\n            /* eslint-disable jsx-a11y/no-static-element-interactions */\n            resendEmailMessage = (\n              <span\n                className={css.helperLink}\n                onClick={this.handleResendVerificationEmail}\n                role=\"button\"\n              >\n                <FormattedMessage id=\"ContactDetailsForm.resendEmailVerificationText\" />\n              </span>\n            );\n            /* eslint-enable jsx-a11y/no-static-element-interactions */\n          }\n\n          // Email status info: unverified, verified and pending email (aka changed unverified email)\n          let emailVerifiedInfo = null;\n\n          if (emailVerified && !pendingEmail && !emailChanged) {\n            // Current email is verified and there's no pending unverified email\n            emailVerifiedInfo = (\n              <span className={css.emailVerified}>\n                <FormattedMessage id=\"ContactDetailsForm.emailVerified\" />\n              </span>\n            );\n          } else if (!emailVerified && !pendingEmail) {\n            // Current email is unverified. This is the email given in sign up form\n\n            emailVerifiedInfo = (\n              <span className={css.emailUnverified}>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.emailUnverified\"\n                  values={{ resendEmailMessage }}\n                />\n              </span>\n            );\n          } else if (pendingEmail) {\n            // Current email has been tried to change, but the new address is not yet verified\n\n            const pendingEmailStyled = <span className={css.emailStyle}>{pendingEmail}</span>;\n            const pendingEmailCheckInbox = (\n              <span className={css.checkInbox}>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.pendingEmailCheckInbox\"\n                  values={{ pendingEmail: pendingEmailStyled }}\n                />\n              </span>\n            );\n\n            emailVerifiedInfo = (\n              <span className={css.pendingEmailUnverified}>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.pendingEmailUnverified\"\n                  values={{ pendingEmailCheckInbox, resendEmailMessage }}\n                />\n              </span>\n            );\n          }\n\n          // phone\n          const protectedData = profile.protectedData || {};\n          const currentPhoneNumber = protectedData.phoneNumber;\n\n          // has the phone number changed\n          const phoneNumberChanged = currentPhoneNumber !== phoneNumber;\n\n          const phonePlaceholder = intl.formatMessage({\n            id: 'ContactDetailsForm.phonePlaceholder',\n          });\n          const phoneLabel = intl.formatMessage({ id: 'ContactDetailsForm.phoneLabel' });\n\n          // password\n          const passwordLabel = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordLabel',\n          });\n          const passwordPlaceholder = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordPlaceholder',\n          });\n          const passwordRequiredMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordRequired',\n          });\n\n          const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n\n          const passwordMinLengthMessage = intl.formatMessage(\n            {\n              id: 'ContactDetailsForm.passwordTooShort',\n            },\n            {\n              minLength: validators.PASSWORD_MIN_LENGTH,\n            }\n          );\n\n          const passwordMinLength = validators.minLength(\n            passwordMinLengthMessage,\n            validators.PASSWORD_MIN_LENGTH\n          );\n\n          const passwordValidators = emailChanged\n            ? validators.composeValidators(passwordRequired, passwordMinLength)\n            : null;\n\n          const passwordFailedMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordFailed',\n          });\n          const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n          const passwordErrorText = isChangeEmailWrongPassword(saveEmailError)\n            ? passwordFailedMessage\n            : null;\n\n          const confirmClasses = classNames(css.confirmChangesSection, {\n            [css.confirmChangesSectionVisible]: emailChanged,\n          });\n\n          // generic error\n          const isGenericEmailError = saveEmailError && !(emailTakenErrorText || passwordErrorText);\n\n          let genericError = null;\n\n          if (isGenericEmailError && savePhoneNumberError) {\n            genericError = (\n              <span className={css.error}>\n                <FormattedMessage id=\"ContactDetailsForm.genericFailure\" />\n              </span>\n            );\n          } else if (isGenericEmailError) {\n            genericError = (\n              <span className={css.error}>\n                <FormattedMessage id=\"ContactDetailsForm.genericEmailFailure\" />\n              </span>\n            );\n          } else if (savePhoneNumberError) {\n            genericError = (\n              <span className={css.error}>\n                <FormattedMessage id=\"ContactDetailsForm.genericPhoneNumberFailure\" />\n              </span>\n            );\n          }\n\n          const classes = classNames(rootClassName || css.root, className);\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n          const submitDisabled =\n            invalid ||\n            pristineSinceLastSubmit ||\n            inProgress ||\n            !(emailChanged || phoneNumberChanged);\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedValues = values;\n                handleSubmit(e);\n              }}\n            >\n              <div className={css.contactDetailsSection}>\n                <FieldTextInput\n                  type=\"email\"\n                  name=\"email\"\n                  id={formId ? `${formId}.email` : 'email'}\n                  label={emailLabel}\n                  placeholder={emailPlaceholder}\n                  validate={validators.composeValidators(emailRequired, emailValid)}\n                  customErrorText={emailTouched ? null : emailTakenErrorText}\n                />\n                {emailVerifiedInfo}\n                <FieldPhoneNumberInput\n                  className={css.phone}\n                  name=\"phoneNumber\"\n                  id={formId ? `${formId}.phoneNumber` : 'phoneNumber'}\n                  label={phoneLabel}\n                  placeholder={phonePlaceholder}\n                />\n              </div>\n\n              <div className={confirmClasses}>\n                <h3 className={css.confirmChangesTitle}>\n                  <FormattedMessage id=\"ContactDetailsForm.confirmChangesTitle\" />\n                </h3>\n                <p className={css.confirmChangesInfo}>\n                  <FormattedMessage id=\"ContactDetailsForm.confirmChangesInfo\" />\n                </p>\n\n                <FieldTextInput\n                  className={css.password}\n                  type=\"password\"\n                  name=\"currentPassword\"\n                  id={formId ? `${formId}.currentPassword` : 'currentPassword'}\n                  autoComplete=\"current-password\"\n                  label={passwordLabel}\n                  placeholder={passwordPlaceholder}\n                  validate={passwordValidators}\n                  customErrorText={passwordTouched ? null : passwordErrorText}\n                />\n              </div>\n              <div className={css.bottomWrapper}>\n                {genericError}\n                <PrimaryButton\n                  type=\"submit\"\n                  inProgress={inProgress}\n                  ready={pristineSinceLastSubmit}\n                  disabled={submitDisabled}\n                >\n                  <FormattedMessage id=\"ContactDetailsForm.saveChanges\" />\n                </PrimaryButton>\n              </div>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nContactDetailsFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  formId: null,\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  inProgress: false,\n  sendVerificationEmailError: null,\n  sendVerificationEmailInProgress: false,\n  email: null,\n  phoneNumber: null,\n};\n\nconst { bool, func, string } = PropTypes;\n\nContactDetailsFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  formId: string,\n  saveEmailError: propTypes.error,\n  savePhoneNumberError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  ready: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  sendVerificationEmailInProgress: bool,\n};\n\nconst ContactDetailsForm = compose(injectIntl)(ContactDetailsFormComponent);\n\nContactDetailsForm.displayName = 'ContactDetailsForm';\n\nexport default ContactDetailsForm;\n"]},"metadata":{},"sourceType":"module"}