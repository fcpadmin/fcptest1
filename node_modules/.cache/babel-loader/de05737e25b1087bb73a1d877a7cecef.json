{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { fetchCurrentUser } from '../../ducks/user.duck';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors'; // ================ Action types ================ //\n\nexport const SET_INITIAL_STATE = 'app/ProfilePage/SET_INITIAL_STATE';\nexport const SHOW_USER_REQUEST = 'app/ProfilePage/SHOW_USER_REQUEST';\nexport const SHOW_USER_SUCCESS = 'app/ProfilePage/SHOW_USER_SUCCESS';\nexport const SHOW_USER_ERROR = 'app/ProfilePage/SHOW_USER_ERROR';\nexport const QUERY_LISTINGS_REQUEST = 'app/ProfilePage/QUERY_LISTINGS_REQUEST';\nexport const QUERY_LISTINGS_SUCCESS = 'app/ProfilePage/QUERY_LISTINGS_SUCCESS';\nexport const QUERY_LISTINGS_ERROR = 'app/ProfilePage/QUERY_LISTINGS_ERROR';\nexport const QUERY_REVIEWS_REQUEST = 'app/ProfilePage/QUERY_REVIEWS_REQUEST';\nexport const QUERY_REVIEWS_SUCCESS = 'app/ProfilePage/QUERY_REVIEWS_SUCCESS';\nexport const QUERY_REVIEWS_ERROR = 'app/ProfilePage/QUERY_REVIEWS_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  userId: null,\n  userListingRefs: [],\n  userShowError: null,\n  queryListingsError: null,\n  reviews: [],\n  queryReviewsError: null\n};\nexport default function profilePageReducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case SET_INITIAL_STATE:\n      return _objectSpread({}, initialState);\n\n    case SHOW_USER_REQUEST:\n      return _objectSpread({}, state, {\n        userShowError: null,\n        userId: payload.userId\n      });\n\n    case SHOW_USER_SUCCESS:\n      return state;\n\n    case SHOW_USER_ERROR:\n      return _objectSpread({}, state, {\n        userShowError: payload\n      });\n\n    case QUERY_LISTINGS_REQUEST:\n      return _objectSpread({}, state, {\n        // Empty listings only when user id changes\n        userListingRefs: payload.userId === state.userId ? state.userListingRefs : [],\n        queryListingsError: null\n      });\n\n    case QUERY_LISTINGS_SUCCESS:\n      return _objectSpread({}, state, {\n        userListingRefs: payload.listingRefs\n      });\n\n    case QUERY_LISTINGS_ERROR:\n      return _objectSpread({}, state, {\n        userListingRefs: [],\n        queryListingsError: payload\n      });\n\n    case QUERY_REVIEWS_REQUEST:\n      return _objectSpread({}, state, {\n        queryReviewsError: null\n      });\n\n    case QUERY_REVIEWS_SUCCESS:\n      return _objectSpread({}, state, {\n        reviews: payload\n      });\n\n    case QUERY_REVIEWS_ERROR:\n      return _objectSpread({}, state, {\n        reviews: [],\n        queryReviewsError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const setInitialState = () => ({\n  type: SET_INITIAL_STATE\n});\nexport const showUserRequest = userId => ({\n  type: SHOW_USER_REQUEST,\n  payload: {\n    userId\n  }\n});\nexport const showUserSuccess = () => ({\n  type: SHOW_USER_SUCCESS\n});\nexport const showUserError = e => ({\n  type: SHOW_USER_ERROR,\n  error: true,\n  payload: e\n});\nexport const queryListingsRequest = userId => ({\n  type: QUERY_LISTINGS_REQUEST,\n  payload: {\n    userId\n  }\n});\nexport const queryListingsSuccess = listingRefs => ({\n  type: QUERY_LISTINGS_SUCCESS,\n  payload: {\n    listingRefs\n  }\n});\nexport const queryListingsError = e => ({\n  type: QUERY_LISTINGS_ERROR,\n  error: true,\n  payload: e\n});\nexport const queryReviewsRequest = () => ({\n  type: QUERY_REVIEWS_REQUEST\n});\nexport const queryReviewsSuccess = reviews => ({\n  type: QUERY_REVIEWS_SUCCESS,\n  payload: reviews\n});\nexport const queryReviewsError = e => ({\n  type: QUERY_REVIEWS_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const queryUserListings = userId => (dispatch, getState, sdk) => {\n  dispatch(queryListingsRequest(userId));\n  return sdk.listings.query({\n    author_id: userId,\n    include: ['author', 'images'],\n    'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x']\n  }).then(response => {\n    // Pick only the id and type properties from the response listings\n    const listingRefs = response.data.data.map(({\n      id,\n      type\n    }) => ({\n      id,\n      type\n    }));\n    dispatch(addMarketplaceEntities(response));\n    dispatch(queryListingsSuccess(listingRefs));\n    return response;\n  }).catch(e => dispatch(queryListingsError(storableError(e))));\n};\nexport const queryUserReviews = userId => (dispatch, getState, sdk) => {\n  sdk.reviews.query({\n    subject_id: userId,\n    state: 'public',\n    include: ['author', 'author.profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const reviews = denormalisedResponseEntities(response);\n    dispatch(queryReviewsSuccess(reviews));\n  }).catch(e => dispatch(queryReviewsError(e)));\n};\nexport const showUser = userId => (dispatch, getState, sdk) => {\n  dispatch(showUserRequest(userId));\n  return sdk.users.show({\n    id: userId,\n    include: ['profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(showUserSuccess());\n    return response;\n  }).catch(e => dispatch(showUserError(storableError(e))));\n};\nexport const loadData = userId => (dispatch, getState, sdk) => {\n  // Clear state so that previously loaded data is not visible\n  // in case this page load fails.\n  dispatch(setInitialState());\n  return Promise.all([dispatch(fetchCurrentUser()), dispatch(showUser(userId)), dispatch(queryUserListings(userId)), dispatch(queryUserReviews(userId))]);\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ProfilePage/ProfilePage.duck.js"],"names":["addMarketplaceEntities","fetchCurrentUser","denormalisedResponseEntities","storableError","SET_INITIAL_STATE","SHOW_USER_REQUEST","SHOW_USER_SUCCESS","SHOW_USER_ERROR","QUERY_LISTINGS_REQUEST","QUERY_LISTINGS_SUCCESS","QUERY_LISTINGS_ERROR","QUERY_REVIEWS_REQUEST","QUERY_REVIEWS_SUCCESS","QUERY_REVIEWS_ERROR","initialState","userId","userListingRefs","userShowError","queryListingsError","reviews","queryReviewsError","profilePageReducer","state","action","type","payload","listingRefs","setInitialState","showUserRequest","showUserSuccess","showUserError","e","error","queryListingsRequest","queryListingsSuccess","queryReviewsRequest","queryReviewsSuccess","queryUserListings","dispatch","getState","sdk","listings","query","author_id","include","then","response","data","map","id","catch","queryUserReviews","subject_id","showUser","users","show","loadData","Promise","all"],"mappings":"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","sourcesContent":["import { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { fetchCurrentUser } from '../../ducks/user.duck';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\n\n// ================ Action types ================ //\n\nexport const SET_INITIAL_STATE = 'app/ProfilePage/SET_INITIAL_STATE';\n\nexport const SHOW_USER_REQUEST = 'app/ProfilePage/SHOW_USER_REQUEST';\nexport const SHOW_USER_SUCCESS = 'app/ProfilePage/SHOW_USER_SUCCESS';\nexport const SHOW_USER_ERROR = 'app/ProfilePage/SHOW_USER_ERROR';\n\nexport const QUERY_LISTINGS_REQUEST = 'app/ProfilePage/QUERY_LISTINGS_REQUEST';\nexport const QUERY_LISTINGS_SUCCESS = 'app/ProfilePage/QUERY_LISTINGS_SUCCESS';\nexport const QUERY_LISTINGS_ERROR = 'app/ProfilePage/QUERY_LISTINGS_ERROR';\n\nexport const QUERY_REVIEWS_REQUEST = 'app/ProfilePage/QUERY_REVIEWS_REQUEST';\nexport const QUERY_REVIEWS_SUCCESS = 'app/ProfilePage/QUERY_REVIEWS_SUCCESS';\nexport const QUERY_REVIEWS_ERROR = 'app/ProfilePage/QUERY_REVIEWS_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  userId: null,\n  userListingRefs: [],\n  userShowError: null,\n  queryListingsError: null,\n  reviews: [],\n  queryReviewsError: null,\n};\n\nexport default function profilePageReducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_INITIAL_STATE:\n      return { ...initialState };\n    case SHOW_USER_REQUEST:\n      return { ...state, userShowError: null, userId: payload.userId };\n    case SHOW_USER_SUCCESS:\n      return state;\n    case SHOW_USER_ERROR:\n      return { ...state, userShowError: payload };\n\n    case QUERY_LISTINGS_REQUEST:\n      return {\n        ...state,\n\n        // Empty listings only when user id changes\n        userListingRefs: payload.userId === state.userId ? state.userListingRefs : [],\n\n        queryListingsError: null,\n      };\n    case QUERY_LISTINGS_SUCCESS:\n      return { ...state, userListingRefs: payload.listingRefs };\n    case QUERY_LISTINGS_ERROR:\n      return { ...state, userListingRefs: [], queryListingsError: payload };\n    case QUERY_REVIEWS_REQUEST:\n      return { ...state, queryReviewsError: null };\n    case QUERY_REVIEWS_SUCCESS:\n      return { ...state, reviews: payload };\n    case QUERY_REVIEWS_ERROR:\n      return { ...state, reviews: [], queryReviewsError: payload };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const setInitialState = () => ({\n  type: SET_INITIAL_STATE,\n});\n\nexport const showUserRequest = userId => ({\n  type: SHOW_USER_REQUEST,\n  payload: { userId },\n});\n\nexport const showUserSuccess = () => ({\n  type: SHOW_USER_SUCCESS,\n});\n\nexport const showUserError = e => ({\n  type: SHOW_USER_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const queryListingsRequest = userId => ({\n  type: QUERY_LISTINGS_REQUEST,\n  payload: { userId },\n});\n\nexport const queryListingsSuccess = listingRefs => ({\n  type: QUERY_LISTINGS_SUCCESS,\n  payload: { listingRefs },\n});\n\nexport const queryListingsError = e => ({\n  type: QUERY_LISTINGS_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const queryReviewsRequest = () => ({\n  type: QUERY_REVIEWS_REQUEST,\n});\n\nexport const queryReviewsSuccess = reviews => ({\n  type: QUERY_REVIEWS_SUCCESS,\n  payload: reviews,\n});\n\nexport const queryReviewsError = e => ({\n  type: QUERY_REVIEWS_ERROR,\n  error: true,\n  payload: e,\n});\n\n// ================ Thunks ================ //\n\nexport const queryUserListings = userId => (dispatch, getState, sdk) => {\n  dispatch(queryListingsRequest(userId));\n  return sdk.listings\n    .query({\n      author_id: userId,\n      include: ['author', 'images'],\n      'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    })\n    .then(response => {\n      // Pick only the id and type properties from the response listings\n      const listingRefs = response.data.data.map(({ id, type }) => ({ id, type }));\n      dispatch(addMarketplaceEntities(response));\n      dispatch(queryListingsSuccess(listingRefs));\n      return response;\n    })\n    .catch(e => dispatch(queryListingsError(storableError(e))));\n};\n\nexport const queryUserReviews = userId => (dispatch, getState, sdk) => {\n  sdk.reviews\n    .query({\n      subject_id: userId,\n      state: 'public',\n      include: ['author', 'author.profileImage'],\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\n    })\n    .then(response => {\n      const reviews = denormalisedResponseEntities(response);\n      dispatch(queryReviewsSuccess(reviews));\n    })\n    .catch(e => dispatch(queryReviewsError(e)));\n};\n\nexport const showUser = userId => (dispatch, getState, sdk) => {\n  dispatch(showUserRequest(userId));\n  return sdk.users\n    .show({\n      id: userId,\n      include: ['profileImage'],\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\n    })\n    .then(response => {\n      dispatch(addMarketplaceEntities(response));\n      dispatch(showUserSuccess());\n      return response;\n    })\n    .catch(e => dispatch(showUserError(storableError(e))));\n};\n\nexport const loadData = userId => (dispatch, getState, sdk) => {\n  // Clear state so that previously loaded data is not visible\n  // in case this page load fails.\n  dispatch(setInitialState());\n\n  return Promise.all([\n    dispatch(fetchCurrentUser()),\n    dispatch(showUser(userId)),\n    dispatch(queryUserListings(userId)),\n    dispatch(queryUserReviews(userId)),\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}