{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Button/Button.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { IconSpinner, IconCheckmark } from '../../components';\nimport css from './Button.css';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mounted: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      mounted: true\n    }); // eslint-disable-line react/no-did-mount-set-state\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          inProgress = _this$props.inProgress,\n          ready = _this$props.ready,\n          disabled = _this$props.disabled,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"rootClassName\", \"inProgress\", \"ready\", \"disabled\"]);\n\n    const rootClass = rootClassName || css.root;\n    const classes = classNames(rootClass, className, {\n      [css.ready]: ready,\n      [css.inProgress]: inProgress\n    });\n    let content;\n\n    if (inProgress) {\n      content = React.createElement(IconSpinner, {\n        rootClassName: css.spinner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    } else if (ready) {\n      content = React.createElement(IconCheckmark, {\n        rootClassName: css.checkmark,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    } else {\n      content = children;\n    } // All buttons are disabled until the component is mounted. This\n    // prevents e.g. being able to submit forms to the backend before\n    // the client side is handling the submit.\n\n\n    const buttonDisabled = this.state.mounted ? disabled : true;\n    return React.createElement(\"button\", Object.assign({\n      className: classes\n    }, rest, {\n      disabled: buttonDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), content);\n  }\n\n}\n\nconst node = PropTypes.node,\n      string = PropTypes.string,\n      bool = PropTypes.bool;\nButton.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  ready: false,\n  disabled: false,\n  children: null\n};\nButton.propTypes = {\n  rootClassName: string,\n  className: string,\n  inProgress: bool,\n  ready: bool,\n  disabled: bool,\n  children: node\n};\nexport default Button;\nexport const PrimaryButton = props => {\n  const classes = classNames(props.rootClassName || css.primaryButtonRoot, css.primaryButton);\n  return React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\nPrimaryButton.displayName = 'PrimaryButton';\nexport const SecondaryButton = props => {\n  const classes = classNames(props.rootClassName || css.secondaryButtonRoot, css.secondaryButton);\n  return React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }));\n};\nSecondaryButton.displayName = 'SecondaryButton';\nexport const InlineTextButton = props => {\n  const classes = classNames(props.rootClassName || css.inlineTextButtonRoot, css.inlineTextButton);\n  return React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n};\nInlineTextButton.displayName = 'InlineTextButton';","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/Button/Button.js"],"names":["React","Component","PropTypes","classNames","IconSpinner","IconCheckmark","css","Button","constructor","props","state","mounted","componentDidMount","setState","render","children","className","rootClassName","inProgress","ready","disabled","rest","rootClass","root","classes","content","spinner","checkmark","buttonDisabled","node","string","bool","defaultProps","propTypes","PrimaryButton","primaryButtonRoot","primaryButton","displayName","SecondaryButton","secondaryButtonRoot","secondaryButton","InlineTextButton","inlineTextButtonRoot","inlineTextButton"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { IconSpinner, IconCheckmark } from '../../components';\n\nimport css from './Button.css';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { mounted: false };\n  }\n  componentDidMount() {\n    this.setState({ mounted: true }); // eslint-disable-line react/no-did-mount-set-state\n  }\n  render() {\n    const { children, className, rootClassName, inProgress, ready, disabled, ...rest } = this.props;\n\n    const rootClass = rootClassName || css.root;\n    const classes = classNames(rootClass, className, {\n      [css.ready]: ready,\n      [css.inProgress]: inProgress,\n    });\n\n    let content;\n\n    if (inProgress) {\n      content = <IconSpinner rootClassName={css.spinner} />;\n    } else if (ready) {\n      content = <IconCheckmark rootClassName={css.checkmark} />;\n    } else {\n      content = children;\n    }\n\n    // All buttons are disabled until the component is mounted. This\n    // prevents e.g. being able to submit forms to the backend before\n    // the client side is handling the submit.\n    const buttonDisabled = this.state.mounted ? disabled : true;\n\n    return (\n      <button className={classes} {...rest} disabled={buttonDisabled}>\n        {content}\n      </button>\n    );\n  }\n}\n\nconst { node, string, bool } = PropTypes;\n\nButton.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  ready: false,\n  disabled: false,\n  children: null,\n};\n\nButton.propTypes = {\n  rootClassName: string,\n  className: string,\n\n  inProgress: bool,\n  ready: bool,\n  disabled: bool,\n\n  children: node,\n};\n\nexport default Button;\n\nexport const PrimaryButton = props => {\n  const classes = classNames(props.rootClassName || css.primaryButtonRoot, css.primaryButton);\n  return <Button {...props} rootClassName={classes} />;\n};\nPrimaryButton.displayName = 'PrimaryButton';\n\nexport const SecondaryButton = props => {\n  const classes = classNames(props.rootClassName || css.secondaryButtonRoot, css.secondaryButton);\n  return <Button {...props} rootClassName={classes} />;\n};\nSecondaryButton.displayName = 'SecondaryButton';\n\nexport const InlineTextButton = props => {\n  const classes = classNames(props.rootClassName || css.inlineTextButtonRoot, css.inlineTextButton);\n  return <Button {...props} rootClassName={classes} />;\n};\nInlineTextButton.displayName = 'InlineTextButton';\n"]},"metadata":{},"sourceType":"module"}