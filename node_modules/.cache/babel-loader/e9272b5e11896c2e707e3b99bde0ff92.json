{"ast":null,"code":"/**\n * Slice a local number that is in the form\n * of 555 01234567\n */\nconst sliceLocal = numbers => {\n  if (numbers.length <= 3) {\n    return numbers;\n  }\n\n  return \"\".concat(numbers.slice(0, 3), \" \").concat(numbers.slice(3, 10));\n};\n/**\n * Slice an international phone number i.e.\n * the part that is followed after a '+' or '00'.\n */\n\n\nconst sliceInternational = numbers => {\n  if (numbers.length <= 3) {\n    return numbers;\n  }\n\n  if (numbers.length <= 5) {\n    return \"\".concat(numbers.slice(0, 3), \" \").concat(numbers.slice(3));\n  }\n\n  return \"\".concat(numbers.slice(0, 3), \" \").concat(numbers.slice(3, 5), \" \").concat(numbers.slice(5, 12));\n};\n/**\n * Format a phone number in a Finnish\n * mobile phone number format.\n *\n * Uses one of the following formats:\n *\n * +123 55 1234567\n * 00123 55 1234567\n * 555 1234567\n */\n\n\nexport const format = value => {\n  if (!value) {\n    return '';\n  }\n\n  const leadingPlus = value.match(/^\\+/g);\n  const leadingZeros = value.match(/^00/g);\n  const numbers = value.replace(/[^\\d]/g, '');\n\n  if (leadingPlus) {\n    const plus = leadingPlus[0];\n    const sliced = sliceInternational(numbers);\n    return \"\".concat(plus).concat(sliced);\n  }\n\n  if (leadingZeros && numbers.length > 2) {\n    const zeros = leadingZeros[0];\n    const trailingNumbers = numbers.substring(2, numbers.length);\n    const sliced = sliceInternational(trailingNumbers);\n    return \"\".concat(zeros).concat(sliced);\n  }\n\n  return sliceLocal(numbers);\n};\n/**\n * Parser that strips whitespaces away from a phone number\n * string so that the plain number can be stored.\n */\n\nexport const parse = value => value ? value.replace(/\\s/g, '') : '';","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldPhoneNumberInput/fiFormatter.js"],"names":["sliceLocal","numbers","length","slice","sliceInternational","format","value","leadingPlus","match","leadingZeros","replace","plus","sliced","zeros","trailingNumbers","substring","parse"],"mappings":"AAAA;;;;AAIA,MAAMA,UAAU,GAAGC,OAAO,IAAI;AAC5B,MAAIA,OAAO,CAACC,MAAR,IAAkB,CAAtB,EAAyB;AACvB,WAAOD,OAAP;AACD;;AACD,mBAAUA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAV,cAAiCF,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAjC;AACD,CALD;AAOA;;;;;;AAIA,MAAMC,kBAAkB,GAAGH,OAAO,IAAI;AACpC,MAAIA,OAAO,CAACC,MAAR,IAAkB,CAAtB,EAAyB;AACvB,WAAOD,OAAP;AACD;;AACD,MAAIA,OAAO,CAACC,MAAR,IAAkB,CAAtB,EAAyB;AACvB,qBAAUD,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAV,cAAiCF,OAAO,CAACE,KAAR,CAAc,CAAd,CAAjC;AACD;;AACD,mBAAUF,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAV,cAAiCF,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAjC,cAAwDF,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAxD;AACD,CARD;AAUA;;;;;;;;;;;;AAUA,OAAO,MAAME,MAAM,GAAGC,KAAK,IAAI;AAC7B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AAED,QAAMC,WAAW,GAAGD,KAAK,CAACE,KAAN,CAAY,MAAZ,CAApB;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACE,KAAN,CAAY,MAAZ,CAArB;AACA,QAAMP,OAAO,GAAGK,KAAK,CAACI,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAhB;;AAEA,MAAIH,WAAJ,EAAiB;AACf,UAAMI,IAAI,GAAGJ,WAAW,CAAC,CAAD,CAAxB;AACA,UAAMK,MAAM,GAAGR,kBAAkB,CAACH,OAAD,CAAjC;AACA,qBAAUU,IAAV,SAAiBC,MAAjB;AACD;;AAED,MAAIH,YAAY,IAAIR,OAAO,CAACC,MAAR,GAAiB,CAArC,EAAwC;AACtC,UAAMW,KAAK,GAAGJ,YAAY,CAAC,CAAD,CAA1B;AACA,UAAMK,eAAe,GAAGb,OAAO,CAACc,SAAR,CAAkB,CAAlB,EAAqBd,OAAO,CAACC,MAA7B,CAAxB;AACA,UAAMU,MAAM,GAAGR,kBAAkB,CAACU,eAAD,CAAjC;AACA,qBAAUD,KAAV,SAAkBD,MAAlB;AACD;;AAED,SAAOZ,UAAU,CAACC,OAAD,CAAjB;AACD,CAvBM;AAyBP;;;;;AAIA,OAAO,MAAMe,KAAK,GAAGV,KAAK,IAAKA,KAAK,GAAGA,KAAK,CAACI,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAH,GAA8B,EAA3D","sourcesContent":["/**\n * Slice a local number that is in the form\n * of 555 01234567\n */\nconst sliceLocal = numbers => {\n  if (numbers.length <= 3) {\n    return numbers;\n  }\n  return `${numbers.slice(0, 3)} ${numbers.slice(3, 10)}`;\n};\n\n/**\n * Slice an international phone number i.e.\n * the part that is followed after a '+' or '00'.\n */\nconst sliceInternational = numbers => {\n  if (numbers.length <= 3) {\n    return numbers;\n  }\n  if (numbers.length <= 5) {\n    return `${numbers.slice(0, 3)} ${numbers.slice(3)}`;\n  }\n  return `${numbers.slice(0, 3)} ${numbers.slice(3, 5)} ${numbers.slice(5, 12)}`;\n};\n\n/**\n * Format a phone number in a Finnish\n * mobile phone number format.\n *\n * Uses one of the following formats:\n *\n * +123 55 1234567\n * 00123 55 1234567\n * 555 1234567\n */\nexport const format = value => {\n  if (!value) {\n    return '';\n  }\n\n  const leadingPlus = value.match(/^\\+/g);\n  const leadingZeros = value.match(/^00/g);\n  const numbers = value.replace(/[^\\d]/g, '');\n\n  if (leadingPlus) {\n    const plus = leadingPlus[0];\n    const sliced = sliceInternational(numbers);\n    return `${plus}${sliced}`;\n  }\n\n  if (leadingZeros && numbers.length > 2) {\n    const zeros = leadingZeros[0];\n    const trailingNumbers = numbers.substring(2, numbers.length);\n    const sliced = sliceInternational(trailingNumbers);\n    return `${zeros}${sliced}`;\n  }\n\n  return sliceLocal(numbers);\n};\n\n/**\n * Parser that strips whitespaces away from a phone number\n * string so that the plain number can be stored.\n */\nexport const parse = value => (value ? value.replace(/\\s/g, '') : '');\n"]},"metadata":{},"sourceType":"module"}