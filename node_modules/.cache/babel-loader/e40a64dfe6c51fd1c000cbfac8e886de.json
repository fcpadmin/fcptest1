{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldDateRangeInput/FieldDateRangeInput.js\";\n\n/**\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\n *\n * NOTE: If you are using this component inside BookingDatesForm,\n * you should convert value.date to start date and end date before submitting it to API\n */\nimport React, { Component } from 'react';\nimport { bool, func, object, oneOf, string, arrayOf } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { START_DATE, END_DATE } from '../../util/dates';\nimport { propTypes } from '../../util/types';\nimport { ValidationError } from '../../components';\nimport DateRangeInput from './DateRangeInput';\nimport css from './FieldDateRangeInput.css';\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nclass FieldDateRangeInputComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focusedInput: null\n    };\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Update focusedInput in case a new value for it is\n    // passed in the props. This may occur if the focus\n    // is manually set to the date picker.\n    if (nextProps.focusedInput && nextProps.focusedInput !== this.props.focusedInput) {\n      this.setState({\n        focusedInput: nextProps.focusedInput\n      });\n    }\n  }\n\n  handleBlur(focusedInput) {\n    this.setState({\n      focusedInput: null\n    });\n    this.props.input.onBlur(focusedInput); // Notify the containing component that the focused\n    // input has changed.\n\n    if (this.props.onFocusedInputChange) {\n      this.props.onFocusedInputChange(null);\n    }\n  }\n\n  handleFocus(focusedInput) {\n    this.setState({\n      focusedInput\n    });\n    this.props.input.onFocus(focusedInput);\n  }\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const _this$props = this.props,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          unitType = _this$props.unitType,\n          startDateId = _this$props.startDateId,\n          startDateLabel = _this$props.startDateLabel,\n          endDateId = _this$props.endDateId,\n          endDateLabel = _this$props.endDateLabel,\n          input = _this$props.input,\n          meta = _this$props.meta,\n          useMobileMargins = _this$props.useMobileMargins,\n          focusedInput = _this$props.focusedInput,\n          onFocusedInputChange = _this$props.onFocusedInputChange,\n          rest = _objectWithoutProperties(_this$props, [\"className\", \"rootClassName\", \"unitType\", \"startDateId\", \"startDateLabel\", \"endDateId\", \"endDateLabel\", \"input\", \"meta\", \"useMobileMargins\", \"focusedInput\", \"onFocusedInputChange\"]);\n    /* eslint-disable no-unused-vars */\n\n\n    if (startDateLabel && !startDateId) {\n      throw new Error('startDateId required when a startDateLabel is given');\n    }\n\n    if (endDateLabel && !endDateId) {\n      throw new Error('endDateId required when a endDateLabel is given');\n    }\n\n    const touched = meta.touched,\n          error = meta.error;\n    const value = input.value; // If startDate is valid label changes color and bottom border changes color too\n\n    const startDateIsValid = value && value.startDate instanceof Date;\n    const startDateLabelClasses = classNames(css.startDateLabel, {\n      [css.labelSuccess]: false //startDateIsValid,\n\n    });\n    const startDateBorderClasses = classNames(css.input, {\n      [css.inputSuccess]: startDateIsValid,\n      [css.inputError]: touched && !startDateIsValid && typeof error === 'string',\n      [css.hover]: this.state.focusedInput === START_DATE\n    }); // If endDate is valid label changes color and bottom border changes color too\n\n    const endDateIsValid = value && value.endDate instanceof Date;\n    const endDateLabelClasses = classNames(css.endDateLabel, {\n      [css.labelSuccess]: false //endDateIsValid,\n\n    });\n    const endDateBorderClasses = classNames(css.input, {\n      [css.inputSuccess]: endDateIsValid,\n      [css.inputError]: touched && !endDateIsValid && typeof error === 'string',\n      [css.hover]: this.state.focusedInput === END_DATE\n    });\n    const label = startDateLabel && endDateLabel ? React.createElement(\"div\", {\n      className: classNames(css.labels, {\n        [css.mobileMargins]: useMobileMargins\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: startDateLabelClasses,\n      htmlFor: startDateId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, startDateLabel), React.createElement(\"label\", {\n      className: endDateLabelClasses,\n      htmlFor: endDateId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, endDateLabel)) : null; // eslint-disable-next-line no-unused-vars\n\n    const onBlur = input.onBlur,\n          onFocus = input.onFocus,\n          restOfInput = _objectWithoutProperties(input, [\"onBlur\", \"onFocus\"]);\n\n    const inputProps = _objectSpread({\n      unitType,\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus,\n      useMobileMargins,\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH\n    }, restOfInput, rest, {\n      focusedInput: this.state.focusedInput,\n      startDateId,\n      endDateId\n    });\n\n    const classes = classNames(rootClassName || css.fieldRoot, className);\n    const errorClasses = classNames({\n      [css.mobileMargins]: useMobileMargins\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, label, React.createElement(DateRangeInput, Object.assign({}, inputProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classNames(css.inputBorders, {\n        [css.mobileMargins]: useMobileMargins && !this.state.focusedInput\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: startDateBorderClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: endDateBorderClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(ValidationError, {\n      className: errorClasses,\n      fieldMeta: meta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }));\n  }\n\n}\n\nFieldDateRangeInputComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  useMobileMargins: false,\n  endDateId: null,\n  endDateLabel: null,\n  endDatePlaceholderText: null,\n  startDateId: null,\n  startDateLabel: null,\n  startDatePlaceholderText: null,\n  focusedInput: null,\n  onFocusedInputChange: null,\n  timeSlots: null\n};\nFieldDateRangeInputComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  unitType: propTypes.bookingUnitType.isRequired,\n  useMobileMargins: bool,\n  endDateId: string,\n  endDateLabel: string,\n  endDatePlaceholderText: string,\n  startDateId: string,\n  startDateLabel: string,\n  startDatePlaceholderText: string,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  input: object.isRequired,\n  meta: object.isRequired,\n  focusedInput: oneOf([START_DATE, END_DATE]),\n  onFocusedInputChange: func\n};\n\nconst FieldDateRangeInput = props => {\n  return React.createElement(Field, Object.assign({\n    component: FieldDateRangeInputComponent\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }));\n};\n\nexport { DateRangeInput };\nexport default FieldDateRangeInput;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldDateRangeInput/FieldDateRangeInput.js"],"names":["React","Component","bool","func","object","oneOf","string","arrayOf","Field","classNames","START_DATE","END_DATE","propTypes","ValidationError","DateRangeInput","css","MAX_MOBILE_SCREEN_WIDTH","FieldDateRangeInputComponent","constructor","props","state","focusedInput","handleBlur","bind","handleFocus","componentWillReceiveProps","nextProps","setState","input","onBlur","onFocusedInputChange","onFocus","render","className","rootClassName","unitType","startDateId","startDateLabel","endDateId","endDateLabel","meta","useMobileMargins","rest","Error","touched","error","value","startDateIsValid","startDate","Date","startDateLabelClasses","labelSuccess","startDateBorderClasses","inputSuccess","inputError","hover","endDateIsValid","endDate","endDateLabelClasses","endDateBorderClasses","label","labels","mobileMargins","restOfInput","inputProps","readOnly","window","innerWidth","classes","fieldRoot","errorClasses","inputBorders","defaultProps","endDatePlaceholderText","startDatePlaceholderText","timeSlots","bookingUnitType","isRequired","timeSlot","FieldDateRangeInput"],"mappings":"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","sourcesContent":["/**\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\n *\n * NOTE: If you are using this component inside BookingDatesForm,\n * you should convert value.date to start date and end date before submitting it to API\n */\n\nimport React, { Component } from 'react';\nimport { bool, func, object, oneOf, string, arrayOf } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { START_DATE, END_DATE } from '../../util/dates';\nimport { propTypes } from '../../util/types';\nimport { ValidationError } from '../../components';\n\nimport DateRangeInput from './DateRangeInput';\nimport css from './FieldDateRangeInput.css';\n\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nclass FieldDateRangeInputComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { focusedInput: null };\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Update focusedInput in case a new value for it is\n    // passed in the props. This may occur if the focus\n    // is manually set to the date picker.\n    if (nextProps.focusedInput && nextProps.focusedInput !== this.props.focusedInput) {\n      this.setState({ focusedInput: nextProps.focusedInput });\n    }\n  }\n\n  handleBlur(focusedInput) {\n    this.setState({ focusedInput: null });\n    this.props.input.onBlur(focusedInput);\n    // Notify the containing component that the focused\n    // input has changed.\n    if (this.props.onFocusedInputChange) {\n      this.props.onFocusedInputChange(null);\n    }\n  }\n\n  handleFocus(focusedInput) {\n    this.setState({ focusedInput });\n    this.props.input.onFocus(focusedInput);\n  }\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      className,\n      rootClassName,\n      unitType,\n      startDateId,\n      startDateLabel,\n      endDateId,\n      endDateLabel,\n      input,\n      meta,\n      useMobileMargins,\n      // Extract focusedInput and onFocusedInputChange so that\n      // the same values will not be passed on to subcomponents.\n      focusedInput,\n      onFocusedInputChange,\n      ...rest\n    } = this.props;\n    /* eslint-disable no-unused-vars */\n\n    if (startDateLabel && !startDateId) {\n      throw new Error('startDateId required when a startDateLabel is given');\n    }\n\n    if (endDateLabel && !endDateId) {\n      throw new Error('endDateId required when a endDateLabel is given');\n    }\n\n    const { touched, error } = meta;\n    const value = input.value;\n\n    // If startDate is valid label changes color and bottom border changes color too\n    const startDateIsValid = value && value.startDate instanceof Date;\n    const startDateLabelClasses = classNames(css.startDateLabel, {\n      [css.labelSuccess]: false, //startDateIsValid,\n    });\n    const startDateBorderClasses = classNames(css.input, {\n      [css.inputSuccess]: startDateIsValid,\n      [css.inputError]: touched && !startDateIsValid && typeof error === 'string',\n      [css.hover]: this.state.focusedInput === START_DATE,\n    });\n\n    // If endDate is valid label changes color and bottom border changes color too\n    const endDateIsValid = value && value.endDate instanceof Date;\n    const endDateLabelClasses = classNames(css.endDateLabel, {\n      [css.labelSuccess]: false, //endDateIsValid,\n    });\n    const endDateBorderClasses = classNames(css.input, {\n      [css.inputSuccess]: endDateIsValid,\n      [css.inputError]: touched && !endDateIsValid && typeof error === 'string',\n      [css.hover]: this.state.focusedInput === END_DATE,\n    });\n\n    const label =\n      startDateLabel && endDateLabel ? (\n        <div className={classNames(css.labels, { [css.mobileMargins]: useMobileMargins })}>\n          <label className={startDateLabelClasses} htmlFor={startDateId}>\n            {startDateLabel}\n          </label>\n          <label className={endDateLabelClasses} htmlFor={endDateId}>\n            {endDateLabel}\n          </label>\n        </div>\n      ) : null;\n\n    // eslint-disable-next-line no-unused-vars\n    const { onBlur, onFocus, ...restOfInput } = input;\n    const inputProps = {\n      unitType,\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus,\n      useMobileMargins,\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH,\n      ...restOfInput,\n      ...rest,\n      focusedInput: this.state.focusedInput,\n      startDateId,\n      endDateId,\n    };\n    const classes = classNames(rootClassName || css.fieldRoot, className);\n    const errorClasses = classNames({ [css.mobileMargins]: useMobileMargins });\n\n    return (\n      <div className={classes}>\n        {label}\n        <DateRangeInput {...inputProps} />\n        <div\n          className={classNames(css.inputBorders, {\n            [css.mobileMargins]: useMobileMargins && !this.state.focusedInput,\n          })}\n        >\n          <div className={startDateBorderClasses} />\n          <div className={endDateBorderClasses} />\n        </div>\n        <ValidationError className={errorClasses} fieldMeta={meta} />\n      </div>\n    );\n  }\n}\n\nFieldDateRangeInputComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  useMobileMargins: false,\n  endDateId: null,\n  endDateLabel: null,\n  endDatePlaceholderText: null,\n  startDateId: null,\n  startDateLabel: null,\n  startDatePlaceholderText: null,\n  focusedInput: null,\n  onFocusedInputChange: null,\n  timeSlots: null,\n};\n\nFieldDateRangeInputComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  unitType: propTypes.bookingUnitType.isRequired,\n  useMobileMargins: bool,\n  endDateId: string,\n  endDateLabel: string,\n  endDatePlaceholderText: string,\n  startDateId: string,\n  startDateLabel: string,\n  startDatePlaceholderText: string,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  input: object.isRequired,\n  meta: object.isRequired,\n  focusedInput: oneOf([START_DATE, END_DATE]),\n  onFocusedInputChange: func,\n};\n\nconst FieldDateRangeInput = props => {\n  return <Field component={FieldDateRangeInputComponent} {...props} />;\n};\n\nexport { DateRangeInput };\nexport default FieldDateRangeInput;\n"]},"metadata":{},"sourceType":"module"}