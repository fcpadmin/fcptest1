{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar MultiTouch = function () {\n  function MultiTouch() {\n    _classCallCheck(this, MultiTouch);\n\n    this.state = {\n      panStart: {\n        x: 0,\n        y: 0\n      },\n      scale: 1\n    };\n    this.touchStart = this.touchStart.bind(this);\n    this.touchMove = this.touchMove.bind(this);\n  }\n\n  _createClass(MultiTouch, [{\n    key: 'touchStart',\n    value: function touchStart(event) {\n      if (event.touches.length !== 2) return;\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      var x = 0;\n      var y = 0;\n      [].forEach.call(event.touches, function (touch) {\n        x += touch.screenX;\n        y += touch.screenY;\n      });\n      this.state.panStart.x = x / event.touches.length;\n      this.state.panStart.y = y / event.touches.length;\n    }\n  }, {\n    key: 'touchMove',\n    value: function touchMove(event) {\n      if (event.touches.length !== 2) return;\n\n      if (this.state.scale === event.scale) {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n      }\n\n      this.state.scale = event.scale;\n      var x = 0;\n      var y = 0;\n      [].forEach.call(event.touches, function (touch) {\n        x += touch.screenX;\n        y += touch.screenY;\n      });\n      var movex = x / event.touches.length - this.state.panStart.x;\n      var movey = y / event.touches.length - this.state.panStart.y;\n      this.state.panStart.x = x / event.touches.length;\n      this.state.panStart.y = y / event.touches.length;\n      this.map.panBy([movex / -1, movey / -1], {\n        animate: false\n      });\n    }\n  }, {\n    key: 'onAdd',\n    value: function onAdd(map) {\n      this.map = map;\n      this.container = document.createElement('div');\n      this.map.getContainer().addEventListener('touchstart', this.touchStart, false);\n      this.map.getContainer().addEventListener('touchmove', this.touchMove, false);\n      if ('ontouchstart' in document.documentElement) map.dragPan.disable();\n      return this.container;\n    }\n  }, {\n    key: 'onRemove',\n    value: function onRemove() {\n      this.map.getContainer().removeEventListener('touchstart', this.touchStart);\n      this.map.getContainer().removeEventListener('touchmove', this.touchMove);\n      this.map = undefined;\n    }\n  }]);\n\n  return MultiTouch;\n}();\n\nexports.default = MultiTouch;","map":null,"metadata":{},"sourceType":"script"}