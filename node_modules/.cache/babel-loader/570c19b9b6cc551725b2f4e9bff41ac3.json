{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport config from '../config';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log'; // ================ Action types ================ //\n\nexport const STRIPE_ACCOUNT_CREATE_REQUEST = 'app/stripe/STRIPE_ACCOUNT_CREATE_REQUEST';\nexport const STRIPE_ACCOUNT_CREATE_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_CREATE_SUCCESS';\nexport const STRIPE_ACCOUNT_CREATE_ERROR = 'app/stripe/STRIPE_ACCOUNT_CREATE_ERROR';\nexport const STRIPE_ACCOUNT_CLEAR_ERROR = 'app/stripe/STRIPE_ACCOUNT_CLEAR_ERROR';\nexport const ACCOUNT_OPENER_CREATE_REQUEST = 'app/stripe/ACCOUNT_OPENER_CREATE_REQUEST';\nexport const ACCOUNT_OPENER_CREATE_SUCCESS = 'app/stripe/ACCOUNT_OPENER_CREATE_SUCCESS';\nexport const ACCOUNT_OPENER_CREATE_ERROR = 'app/stripe/ACCOUNT_OPENER_CREATE_ERROR';\nexport const PERSON_CREATE_REQUEST = 'app/stripe/PERSON_CREATE_REQUEST';\nexport const PERSON_CREATE_SUCCESS = 'app/stripe/PERSON_CREATE_SUCCESS';\nexport const PERSON_CREATE_ERROR = 'app/stripe/PERSON_CREATE_ERROR';\nexport const STRIPE_PAYMENT_TOKEN_CREATE_REQUEST = 'app/stripe/STRIPE_PAYMENT_TOKEN_CREATE_REQUEST';\nexport const STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS = 'app/stripe/STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS';\nexport const STRIPE_PAYMENT_TOKEN_CREATE_ERROR = 'app/stripe/STRIPE_PAYMENT_TOKEN_CREATE_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  createStripeAccountInProgress: false,\n  createStripeAccountError: null,\n  createAccountOpenerInProgress: false,\n  createAccountOpenerError: false,\n  personAccountOpener: null,\n  persons: [],\n  stripeAccount: null,\n  stripeAccountFetched: false,\n  stripePaymentTokenInProgress: false,\n  stripePaymentTokenError: false,\n  stripePaymentToken: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case STRIPE_ACCOUNT_CREATE_REQUEST:\n      return _objectSpread({}, state, {\n        createStripeAccountError: null,\n        createStripeAccountInProgress: true\n      });\n\n    case STRIPE_ACCOUNT_CREATE_SUCCESS:\n      return _objectSpread({}, state, {\n        createStripeAccountInProgress: false,\n        stripeAccount: payload,\n        stripeAccountFetched: true\n      });\n\n    case STRIPE_ACCOUNT_CREATE_ERROR:\n      console.error(payload);\n      return _objectSpread({}, state, {\n        createStripeAccountError: payload,\n        createStripeAccountInProgress: false\n      });\n\n    case STRIPE_ACCOUNT_CLEAR_ERROR:\n      return _objectSpread({}, initialState);\n\n    case ACCOUNT_OPENER_CREATE_REQUEST:\n      return _objectSpread({}, state, {\n        createAccountOpenerError: null,\n        createAccountOpenerInProgress: true\n      });\n\n    case ACCOUNT_OPENER_CREATE_SUCCESS:\n      return _objectSpread({}, state, {\n        createAccountOpenerInProgress: false,\n        personAccountOpener: payload\n      });\n\n    case ACCOUNT_OPENER_CREATE_ERROR:\n      console.error(payload);\n      return _objectSpread({}, state, {\n        createAccountOpenerError: payload,\n        createAccountOpenerInProgress: false\n      });\n\n    case PERSON_CREATE_REQUEST:\n      return _objectSpread({}, state, {\n        persons: [...state.persons, _objectSpread({}, payload, {\n          createStripePersonError: null,\n          createStripePersonInProgress: true\n        })]\n      });\n\n    case PERSON_CREATE_SUCCESS:\n      return _objectSpread({}, state, {\n        persons: state.persons.map(p => {\n          return p.personToken === payload.personToken ? _objectSpread({}, payload, {\n            createStripePersonInProgress: false\n          }) : p;\n        })\n      });\n\n    case PERSON_CREATE_ERROR:\n      console.error(payload);\n      return _objectSpread({}, state, {\n        persons: state.persons.map(p => {\n          return p.personToken === payload.personToken ? _objectSpread({}, p, {\n            createStripePersonInProgress: false,\n            createStripePersonError: payload.error\n          }) : p;\n        })\n      });\n\n    case STRIPE_PAYMENT_TOKEN_CREATE_REQUEST:\n      return _objectSpread({}, state, {\n        stripePaymentTokenError: null,\n        stripePaymentTokenInProgress: true\n      });\n\n    case STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS:\n      return _objectSpread({}, state, {\n        stripePaymentTokenInProgress: false,\n        stripePaymentToken: payload\n      });\n\n    case STRIPE_PAYMENT_TOKEN_CREATE_ERROR:\n      console.error(payload);\n      return _objectSpread({}, state, {\n        stripePaymentTokenError: payload,\n        stripePaymentTokenInProgress: false\n      });\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const stripeAccountCreateRequest = () => ({\n  type: STRIPE_ACCOUNT_CREATE_REQUEST\n});\nexport const stripeAccountCreateSuccess = stripeAccount => ({\n  type: STRIPE_ACCOUNT_CREATE_SUCCESS,\n  payload: stripeAccount\n});\nexport const stripeAccountCreateError = e => ({\n  type: STRIPE_ACCOUNT_CREATE_ERROR,\n  payload: e,\n  error: true\n});\nexport const stripeAccountClearError = () => ({\n  type: STRIPE_ACCOUNT_CLEAR_ERROR\n});\nexport const accountOpenerCreateRequest = personToken => ({\n  type: ACCOUNT_OPENER_CREATE_REQUEST,\n  payload: personToken\n});\nexport const accountOpenerCreateSuccess = payload => ({\n  type: ACCOUNT_OPENER_CREATE_SUCCESS,\n  payload\n});\nexport const accountOpenerCreateError = payload => ({\n  type: ACCOUNT_OPENER_CREATE_ERROR,\n  payload,\n  error: true\n});\nexport const personCreateRequest = personToken => ({\n  type: PERSON_CREATE_REQUEST,\n  payload: personToken\n});\nexport const personCreateSuccess = payload => ({\n  type: PERSON_CREATE_SUCCESS,\n  payload\n});\nexport const personCreateError = payload => ({\n  type: PERSON_CREATE_ERROR,\n  payload,\n  error: true\n});\nexport const stripePaymentTokenCreateRequest = () => ({\n  type: STRIPE_PAYMENT_TOKEN_CREATE_REQUEST\n});\nexport const stripePaymentTokenCreateSuccess = payload => ({\n  type: STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS,\n  payload\n});\nexport const stripePaymentTokenCreateError = payload => ({\n  type: STRIPE_PAYMENT_TOKEN_CREATE_ERROR,\n  payload,\n  error: true\n}); // ================ Thunks ================ //\n// Util: rename address fields to match Stripe API specifications\n\nconst formatAddress = address => {\n  const city = address.city,\n        streetAddress = address.streetAddress,\n        postalCode = address.postalCode,\n        state = address.state,\n        province = address.province;\n  const cityMaybe = city ? {\n    city\n  } : {};\n  const streetAddressMaybe = streetAddress ? {\n    line1: streetAddress\n  } : {};\n  const postalCodeMaybe = postalCode ? {\n    postal_code: postalCode\n  } : {};\n  const stateMaybe = state ? {\n    state\n  } : province ? {\n    state: province\n  } : {};\n  return _objectSpread({}, cityMaybe, streetAddressMaybe, postalCodeMaybe, stateMaybe);\n}; // Util: rename personToken params to match Stripe API specifications\n\n\nconst personTokenParams = (personData, country) => {\n  const isAccountOpener = personData.isAccountOpener,\n        firstName = personData.fname,\n        lastName = personData.lname,\n        birthDate = personData.birthDate,\n        address = personData.address,\n        personalIdNumber = personData.personalIdNumber,\n        email = personData.email,\n        phone = personData.phone,\n        role = personData.role,\n        ownershipPercentage = personData.ownershipPercentage,\n        title = personData.title;\n  const addressMaybe = address ? {\n    address: formatAddress(address)\n  } : {};\n  const emailMaybe = email ? {\n    email\n  } : {};\n  const phoneMaybe = phone ? {\n    phone\n  } : {};\n  const idNumberMaybe = country === 'US' ? {\n    ssn_last_4: personalIdNumber\n  } : personalIdNumber ? {\n    personal_id_number: personalIdNumber\n  } : {};\n  const accountOpenerMaybe = isAccountOpener ? {\n    account_opener: true\n  } : {};\n  const jobTitleMaybe = title ? {\n    title\n  } : {};\n  const ownerMaybe = role && role.find(r => r === 'owner') ? {\n    owner: true\n  } : {};\n  const ownershipPercentageMaybe = ownershipPercentage ? {\n    percent_ownership: Number.parseFloat(ownershipPercentage)\n  } : {};\n  const relationshipMaybe = isAccountOpener || title || role ? {\n    relationship: _objectSpread({}, accountOpenerMaybe, jobTitleMaybe, ownerMaybe, ownershipPercentageMaybe)\n  } : {};\n  return {\n    person: _objectSpread({\n      first_name: firstName,\n      last_name: lastName,\n      dob: birthDate\n    }, addressMaybe, idNumberMaybe, emailMaybe, phoneMaybe, relationshipMaybe)\n  };\n};\n\nconst createStripePerson = (personParams, country, stripe) => (dispatch, getState, sdk) => {\n  const isAccountOpener = personParams.isAccountOpener;\n  let personToken = 'no-token';\n  return stripe.createToken('person', personTokenParams(personParams, country)).then(response => {\n    personToken = response.token.id; // Request to create person in progress\n    // Account opener is mandatory for all - so it's handled separately\n\n    const createPersonRequest = isAccountOpener ? accountOpenerCreateRequest : personCreateRequest;\n    dispatch(createPersonRequest({\n      personToken\n    }));\n    return sdk.stripePersons.create({\n      personToken\n    }, {\n      expand: true\n    });\n  }).then(response => {\n    // Stripe person created successfully\n    const createPersonSuccess = isAccountOpener ? accountOpenerCreateSuccess : personCreateSuccess;\n    dispatch(createPersonSuccess({\n      personToken,\n      stripePerson: response.data.data\n    }));\n    return response;\n  }).catch(err => {\n    const e = storableError(err); // Stripe person creation failed\n\n    const createPersonError = isAccountOpener ? accountOpenerCreateError : personCreateError;\n    dispatch(createPersonError({\n      personToken,\n      error: e\n    }));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'create-stripe-person-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n}; // accountData should be either individual or company\n\n\nconst bankAccountTokenParams = accountData => accountData.bankAccountToken;\n\nconst businessProfileParams = accountData => {\n  const _ref = accountData && accountData.businessProfile ? accountData.businessProfile : {},\n        mcc = _ref.mcc,\n        url = _ref.url;\n\n  return mcc && url ? {\n    businessProfileMCC: mcc,\n    businessProfileURL: url\n  } : {};\n}; // Util: rename accountToken params to match Stripe API specifications\n\n\nconst accountTokenParamsForCompany = company => {\n  const address = company.address,\n        name = company.name,\n        phone = company.phone,\n        taxId = company.taxId;\n  const addressMaybe = address ? {\n    address: formatAddress(address)\n  } : {};\n  const phoneMaybe = phone ? {\n    phone\n  } : {};\n  return {\n    business_type: 'company',\n    company: _objectSpread({\n      name,\n      tax_id: taxId\n    }, addressMaybe, phoneMaybe),\n    tos_shown_and_accepted: true\n  };\n};\n\nexport const createStripeCompanyAccount = (payoutDetails, stripe) => (dispatch, getState, sdk) => {\n  const company = payoutDetails.company,\n        country = payoutDetails.country,\n        accountOpener = payoutDetails.accountOpener,\n        _payoutDetails$person = payoutDetails.persons,\n        persons = _payoutDetails$person === void 0 ? [] : _payoutDetails$person;\n  const state = getState();\n  let stripeAccount = state.stripe && state.stripe.stripeAccount ? state.stripe.stripeAccount : null;\n  dispatch(stripeAccountCreateRequest());\n\n  const createPersons = () => {\n    return Promise.all([dispatch(createStripePerson(_objectSpread({}, accountOpener, {\n      isAccountOpener: true\n    }), country, stripe)), ...persons.map(p => dispatch(createStripePerson(p, country, stripe)))]);\n  }; // If stripeAccount exists, stripePersons call must have failed.\n  // Retry person creation\n\n\n  if (stripeAccount) {\n    return createPersons().then(response => {\n      // Return created stripe account from this thunk function\n      return stripeAccount;\n    }).catch(err => {\n      const e = storableError(err);\n      dispatch(stripeAccountCreateError(e));\n      const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n      log.error(err, 'create-stripe-company-persons-failed', {\n        stripeMessage\n      });\n      throw e;\n    });\n  }\n\n  return stripe.createToken('account', accountTokenParamsForCompany(company)).then(response => {\n    const accountToken = response.token.id;\n    const bankAccountToken = bankAccountTokenParams(company);\n\n    const stripeAccountParams = _objectSpread({\n      accountToken,\n      bankAccountToken,\n      country\n    }, businessProfileParams(company));\n\n    return sdk.stripeAccount.create(stripeAccountParams, {\n      expand: true\n    });\n  }).then(response => {\n    stripeAccount = response;\n    dispatch(stripeAccountCreateSuccess(response.data.data));\n    return createPersons();\n  }).then(response => {\n    // Return created stripe account from this thunk function\n    return stripeAccount;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(stripeAccountCreateError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    const errorFlag = !stripeAccount ? 'create-stripe-company-account-failed' : 'create-stripe-company-persons-failed';\n    log.error(err, errorFlag, {\n      stripeMessage\n    });\n    throw e;\n  });\n};\n\nconst accountTokenParamsForIndividual = (individual, country) => {\n  const firstName = individual.fname,\n        lastName = individual.lname,\n        birthDate = individual.birthDate,\n        address = individual.address,\n        phone = individual.phone,\n        email = individual.email,\n        personalIdNumber = individual.personalIdNumber;\n  const addressMaybe = address ? {\n    address: formatAddress(address)\n  } : {};\n  const dobMaybe = birthDate ? {\n    dob: birthDate\n  } : {};\n  const emailMaybe = email ? {\n    email\n  } : {};\n  const phoneMaybe = phone ? {\n    phone\n  } : {};\n  const idNumberMaybe = country === 'US' ? {\n    ssn_last_4: personalIdNumber\n  } : personalIdNumber ? {\n    personal_id_number: personalIdNumber\n  } : {};\n  return {\n    business_type: 'individual',\n    individual: _objectSpread({\n      first_name: firstName,\n      last_name: lastName\n    }, dobMaybe, addressMaybe, emailMaybe, phoneMaybe, idNumberMaybe),\n    tos_shown_and_accepted: true\n  };\n};\n\nexport const createStripeIndividualAccount = (payoutDetails, stripe) => (dispatch, getState, sdk) => {\n  const country = payoutDetails.country,\n        individual = payoutDetails.individual;\n  let stripeAccount;\n  dispatch(stripeAccountCreateRequest());\n  return stripe.createToken('account', accountTokenParamsForIndividual(individual, country)).then(response => {\n    const accountToken = response.token.id;\n    const bankAccountToken = bankAccountTokenParams(individual);\n\n    const stripeAccountParams = _objectSpread({\n      accountToken,\n      bankAccountToken,\n      country\n    }, businessProfileParams(individual));\n\n    return sdk.stripeAccount.create(stripeAccountParams, {\n      expand: true\n    });\n  }).then(response => {\n    stripeAccount = response;\n    dispatch(stripeAccountCreateSuccess(response.data.data));\n    return stripeAccount;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(stripeAccountCreateError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'create-stripe-individual-account-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n};\nexport const createStripeAccount = payoutDetails => (dispatch, getState, sdk) => {\n  if (typeof window === 'undefined' || !window.Stripe) {\n    throw new Error('Stripe must be loaded for submitting PayoutPreferences');\n  }\n\n  const stripe = window.Stripe(config.stripe.publishableKey);\n\n  if (payoutDetails.accountType === 'individual') {\n    return dispatch(createStripeIndividualAccount(payoutDetails, stripe));\n  } else {\n    return dispatch(createStripeCompanyAccount(payoutDetails, stripe));\n  }\n};\nexport const createStripePaymentToken = params => dispatch => {\n  // It's required to use the same instance of Stripe as where the card has been created\n  // so that's why Stripe needs to be passed here and we can't create a new instance.\n  const stripe = params.stripe,\n        card = params.card;\n  dispatch(stripePaymentTokenCreateRequest());\n  return stripe.createToken(card).then(response => {\n    dispatch(stripePaymentTokenCreateSuccess(response.token));\n    return response;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(stripeAccountCreateError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'create-stripe-payment-token-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/ducks/stripe.duck.js"],"names":["config","storableError","log","STRIPE_ACCOUNT_CREATE_REQUEST","STRIPE_ACCOUNT_CREATE_SUCCESS","STRIPE_ACCOUNT_CREATE_ERROR","STRIPE_ACCOUNT_CLEAR_ERROR","ACCOUNT_OPENER_CREATE_REQUEST","ACCOUNT_OPENER_CREATE_SUCCESS","ACCOUNT_OPENER_CREATE_ERROR","PERSON_CREATE_REQUEST","PERSON_CREATE_SUCCESS","PERSON_CREATE_ERROR","STRIPE_PAYMENT_TOKEN_CREATE_REQUEST","STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS","STRIPE_PAYMENT_TOKEN_CREATE_ERROR","initialState","createStripeAccountInProgress","createStripeAccountError","createAccountOpenerInProgress","createAccountOpenerError","personAccountOpener","persons","stripeAccount","stripeAccountFetched","stripePaymentTokenInProgress","stripePaymentTokenError","stripePaymentToken","reducer","state","action","type","payload","console","error","createStripePersonError","createStripePersonInProgress","map","p","personToken","stripeAccountCreateRequest","stripeAccountCreateSuccess","stripeAccountCreateError","e","stripeAccountClearError","accountOpenerCreateRequest","accountOpenerCreateSuccess","accountOpenerCreateError","personCreateRequest","personCreateSuccess","personCreateError","stripePaymentTokenCreateRequest","stripePaymentTokenCreateSuccess","stripePaymentTokenCreateError","formatAddress","address","city","streetAddress","postalCode","province","cityMaybe","streetAddressMaybe","line1","postalCodeMaybe","postal_code","stateMaybe","personTokenParams","personData","country","isAccountOpener","firstName","fname","lastName","lname","birthDate","personalIdNumber","email","phone","role","ownershipPercentage","title","addressMaybe","emailMaybe","phoneMaybe","idNumberMaybe","ssn_last_4","personal_id_number","accountOpenerMaybe","account_opener","jobTitleMaybe","ownerMaybe","find","r","owner","ownershipPercentageMaybe","percent_ownership","Number","parseFloat","relationshipMaybe","relationship","person","first_name","last_name","dob","createStripePerson","personParams","stripe","dispatch","getState","sdk","createToken","then","response","token","id","createPersonRequest","stripePersons","create","expand","createPersonSuccess","stripePerson","data","catch","err","createPersonError","stripeMessage","apiErrors","length","meta","bankAccountTokenParams","accountData","bankAccountToken","businessProfileParams","businessProfile","mcc","url","businessProfileMCC","businessProfileURL","accountTokenParamsForCompany","company","name","taxId","business_type","tax_id","tos_shown_and_accepted","createStripeCompanyAccount","payoutDetails","accountOpener","createPersons","Promise","all","accountToken","stripeAccountParams","errorFlag","accountTokenParamsForIndividual","individual","dobMaybe","createStripeIndividualAccount","createStripeAccount","window","Stripe","Error","publishableKey","accountType","createStripePaymentToken","params","card"],"mappings":"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","sourcesContent":["import config from '../config';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log';\n\n// ================ Action types ================ //\n\nexport const STRIPE_ACCOUNT_CREATE_REQUEST = 'app/stripe/STRIPE_ACCOUNT_CREATE_REQUEST';\nexport const STRIPE_ACCOUNT_CREATE_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_CREATE_SUCCESS';\nexport const STRIPE_ACCOUNT_CREATE_ERROR = 'app/stripe/STRIPE_ACCOUNT_CREATE_ERROR';\n\nexport const STRIPE_ACCOUNT_CLEAR_ERROR = 'app/stripe/STRIPE_ACCOUNT_CLEAR_ERROR';\n\nexport const ACCOUNT_OPENER_CREATE_REQUEST = 'app/stripe/ACCOUNT_OPENER_CREATE_REQUEST';\nexport const ACCOUNT_OPENER_CREATE_SUCCESS = 'app/stripe/ACCOUNT_OPENER_CREATE_SUCCESS';\nexport const ACCOUNT_OPENER_CREATE_ERROR = 'app/stripe/ACCOUNT_OPENER_CREATE_ERROR';\n\nexport const PERSON_CREATE_REQUEST = 'app/stripe/PERSON_CREATE_REQUEST';\nexport const PERSON_CREATE_SUCCESS = 'app/stripe/PERSON_CREATE_SUCCESS';\nexport const PERSON_CREATE_ERROR = 'app/stripe/PERSON_CREATE_ERROR';\n\nexport const STRIPE_PAYMENT_TOKEN_CREATE_REQUEST = 'app/stripe/STRIPE_PAYMENT_TOKEN_CREATE_REQUEST';\nexport const STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS = 'app/stripe/STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS';\nexport const STRIPE_PAYMENT_TOKEN_CREATE_ERROR = 'app/stripe/STRIPE_PAYMENT_TOKEN_CREATE_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  createStripeAccountInProgress: false,\n  createStripeAccountError: null,\n  createAccountOpenerInProgress: false,\n  createAccountOpenerError: false,\n  personAccountOpener: null,\n  persons: [],\n  stripeAccount: null,\n  stripeAccountFetched: false,\n  stripePaymentTokenInProgress: false,\n  stripePaymentTokenError: false,\n  stripePaymentToken: null,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case STRIPE_ACCOUNT_CREATE_REQUEST:\n      return { ...state, createStripeAccountError: null, createStripeAccountInProgress: true };\n    case STRIPE_ACCOUNT_CREATE_SUCCESS:\n      return {\n        ...state,\n        createStripeAccountInProgress: false,\n        stripeAccount: payload,\n        stripeAccountFetched: true,\n      };\n    case STRIPE_ACCOUNT_CREATE_ERROR:\n      console.error(payload);\n      return { ...state, createStripeAccountError: payload, createStripeAccountInProgress: false };\n\n    case STRIPE_ACCOUNT_CLEAR_ERROR:\n      return { ...initialState };\n\n    case ACCOUNT_OPENER_CREATE_REQUEST:\n      return {\n        ...state,\n        createAccountOpenerError: null,\n        createAccountOpenerInProgress: true,\n      };\n    case ACCOUNT_OPENER_CREATE_SUCCESS:\n      return { ...state, createAccountOpenerInProgress: false, personAccountOpener: payload };\n    case ACCOUNT_OPENER_CREATE_ERROR:\n      console.error(payload);\n      return { ...state, createAccountOpenerError: payload, createAccountOpenerInProgress: false };\n\n    case PERSON_CREATE_REQUEST:\n      return {\n        ...state,\n        persons: [\n          ...state.persons,\n          {\n            ...payload,\n            createStripePersonError: null,\n            createStripePersonInProgress: true,\n          },\n        ],\n      };\n    case PERSON_CREATE_SUCCESS:\n      return {\n        ...state,\n        persons: state.persons.map(p => {\n          return p.personToken === payload.personToken\n            ? { ...payload, createStripePersonInProgress: false }\n            : p;\n        }),\n      };\n    case PERSON_CREATE_ERROR:\n      console.error(payload);\n      return {\n        ...state,\n        persons: state.persons.map(p => {\n          return p.personToken === payload.personToken\n            ? { ...p, createStripePersonInProgress: false, createStripePersonError: payload.error }\n            : p;\n        }),\n      };\n\n    case STRIPE_PAYMENT_TOKEN_CREATE_REQUEST:\n      return {\n        ...state,\n        stripePaymentTokenError: null,\n        stripePaymentTokenInProgress: true,\n      };\n    case STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS:\n      return { ...state, stripePaymentTokenInProgress: false, stripePaymentToken: payload };\n    case STRIPE_PAYMENT_TOKEN_CREATE_ERROR:\n      console.error(payload);\n      return { ...state, stripePaymentTokenError: payload, stripePaymentTokenInProgress: false };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const stripeAccountCreateRequest = () => ({ type: STRIPE_ACCOUNT_CREATE_REQUEST });\n\nexport const stripeAccountCreateSuccess = stripeAccount => ({\n  type: STRIPE_ACCOUNT_CREATE_SUCCESS,\n  payload: stripeAccount,\n});\n\nexport const stripeAccountCreateError = e => ({\n  type: STRIPE_ACCOUNT_CREATE_ERROR,\n  payload: e,\n  error: true,\n});\n\nexport const stripeAccountClearError = () => ({\n  type: STRIPE_ACCOUNT_CLEAR_ERROR,\n});\n\nexport const accountOpenerCreateRequest = personToken => ({\n  type: ACCOUNT_OPENER_CREATE_REQUEST,\n  payload: personToken,\n});\n\nexport const accountOpenerCreateSuccess = payload => ({\n  type: ACCOUNT_OPENER_CREATE_SUCCESS,\n  payload,\n});\n\nexport const accountOpenerCreateError = payload => ({\n  type: ACCOUNT_OPENER_CREATE_ERROR,\n  payload,\n  error: true,\n});\n\nexport const personCreateRequest = personToken => ({\n  type: PERSON_CREATE_REQUEST,\n  payload: personToken,\n});\n\nexport const personCreateSuccess = payload => ({\n  type: PERSON_CREATE_SUCCESS,\n  payload,\n});\n\nexport const personCreateError = payload => ({\n  type: PERSON_CREATE_ERROR,\n  payload,\n  error: true,\n});\n\nexport const stripePaymentTokenCreateRequest = () => ({\n  type: STRIPE_PAYMENT_TOKEN_CREATE_REQUEST,\n});\n\nexport const stripePaymentTokenCreateSuccess = payload => ({\n  type: STRIPE_PAYMENT_TOKEN_CREATE_SUCCESS,\n  payload,\n});\n\nexport const stripePaymentTokenCreateError = payload => ({\n  type: STRIPE_PAYMENT_TOKEN_CREATE_ERROR,\n  payload,\n  error: true,\n});\n\n// ================ Thunks ================ //\n\n// Util: rename address fields to match Stripe API specifications\nconst formatAddress = address => {\n  const { city, streetAddress, postalCode, state, province } = address;\n  const cityMaybe = city ? { city } : {};\n  const streetAddressMaybe = streetAddress ? { line1: streetAddress } : {};\n  const postalCodeMaybe = postalCode ? { postal_code: postalCode } : {};\n  const stateMaybe = state ? { state } : province ? { state: province } : {};\n\n  return {\n    ...cityMaybe,\n    ...streetAddressMaybe,\n    ...postalCodeMaybe,\n    ...stateMaybe,\n  };\n};\n\n// Util: rename personToken params to match Stripe API specifications\nconst personTokenParams = (personData, country) => {\n  const {\n    isAccountOpener,\n    fname: firstName,\n    lname: lastName,\n    birthDate,\n    address,\n    personalIdNumber,\n    email,\n    phone,\n    role,\n    ownershipPercentage,\n    title,\n  } = personData;\n\n  const addressMaybe = address ? { address: formatAddress(address) } : {};\n  const emailMaybe = email ? { email } : {};\n  const phoneMaybe = phone ? { phone } : {};\n  const idNumberMaybe =\n    country === 'US'\n      ? { ssn_last_4: personalIdNumber }\n      : personalIdNumber\n      ? { personal_id_number: personalIdNumber }\n      : {};\n\n  const accountOpenerMaybe = isAccountOpener ? { account_opener: true } : {};\n  const jobTitleMaybe = title ? { title } : {};\n  const ownerMaybe = role && role.find(r => r === 'owner') ? { owner: true } : {};\n  const ownershipPercentageMaybe = ownershipPercentage\n    ? { percent_ownership: Number.parseFloat(ownershipPercentage) }\n    : {};\n\n  const relationshipMaybe =\n    isAccountOpener || title || role\n      ? {\n          relationship: {\n            ...accountOpenerMaybe,\n            ...jobTitleMaybe,\n            ...ownerMaybe,\n            ...ownershipPercentageMaybe,\n          },\n        }\n      : {};\n\n  return {\n    person: {\n      first_name: firstName,\n      last_name: lastName,\n      dob: birthDate,\n      ...addressMaybe,\n      ...idNumberMaybe,\n      ...emailMaybe,\n      ...phoneMaybe,\n      ...relationshipMaybe,\n    },\n  };\n};\n\nconst createStripePerson = (personParams, country, stripe) => (dispatch, getState, sdk) => {\n  const { isAccountOpener } = personParams;\n  let personToken = 'no-token';\n  return stripe\n    .createToken('person', personTokenParams(personParams, country))\n    .then(response => {\n      personToken = response.token.id;\n\n      // Request to create person in progress\n      // Account opener is mandatory for all - so it's handled separately\n      const createPersonRequest = isAccountOpener\n        ? accountOpenerCreateRequest\n        : personCreateRequest;\n      dispatch(createPersonRequest({ personToken }));\n\n      return sdk.stripePersons.create({ personToken }, { expand: true });\n    })\n    .then(response => {\n      // Stripe person created successfully\n      const createPersonSuccess = isAccountOpener\n        ? accountOpenerCreateSuccess\n        : personCreateSuccess;\n      dispatch(createPersonSuccess({ personToken, stripePerson: response.data.data }));\n\n      return response;\n    })\n    .catch(err => {\n      const e = storableError(err);\n\n      // Stripe person creation failed\n      const createPersonError = isAccountOpener ? accountOpenerCreateError : personCreateError;\n      dispatch(createPersonError({ personToken, error: e }));\n\n      const stripeMessage =\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\n          ? e.apiErrors[0].meta.stripeMessage\n          : null;\n      log.error(err, 'create-stripe-person-failed', { stripeMessage });\n      throw e;\n    });\n};\n\n// accountData should be either individual or company\nconst bankAccountTokenParams = accountData => accountData.bankAccountToken;\nconst businessProfileParams = accountData => {\n  const { mcc, url } =\n    accountData && accountData.businessProfile ? accountData.businessProfile : {};\n  return mcc && url\n    ? {\n        businessProfileMCC: mcc,\n        businessProfileURL: url,\n      }\n    : {};\n};\n\n// Util: rename accountToken params to match Stripe API specifications\nconst accountTokenParamsForCompany = company => {\n  const { address, name, phone, taxId } = company;\n  const addressMaybe = address ? { address: formatAddress(address) } : {};\n  const phoneMaybe = phone ? { phone } : {};\n  return {\n    business_type: 'company',\n    company: {\n      name,\n      tax_id: taxId,\n      ...addressMaybe,\n      ...phoneMaybe,\n    },\n    tos_shown_and_accepted: true,\n  };\n};\n\nexport const createStripeCompanyAccount = (payoutDetails, stripe) => (dispatch, getState, sdk) => {\n  const { company, country, accountOpener, persons = [] } = payoutDetails;\n  const state = getState();\n  let stripeAccount =\n    state.stripe && state.stripe.stripeAccount ? state.stripe.stripeAccount : null;\n\n  dispatch(stripeAccountCreateRequest());\n\n  const createPersons = () => {\n    return Promise.all([\n      dispatch(createStripePerson({ ...accountOpener, isAccountOpener: true }, country, stripe)),\n      ...persons.map(p => dispatch(createStripePerson(p, country, stripe))),\n    ]);\n  };\n\n  // If stripeAccount exists, stripePersons call must have failed.\n  // Retry person creation\n  if (stripeAccount) {\n    return createPersons()\n      .then(response => {\n        // Return created stripe account from this thunk function\n        return stripeAccount;\n      })\n      .catch(err => {\n        const e = storableError(err);\n        dispatch(stripeAccountCreateError(e));\n        const stripeMessage =\n          e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\n            ? e.apiErrors[0].meta.stripeMessage\n            : null;\n        log.error(err, 'create-stripe-company-persons-failed', { stripeMessage });\n        throw e;\n      });\n  }\n\n  return stripe\n    .createToken('account', accountTokenParamsForCompany(company))\n    .then(response => {\n      const accountToken = response.token.id;\n      const bankAccountToken = bankAccountTokenParams(company);\n      const stripeAccountParams = {\n        accountToken,\n        bankAccountToken,\n        country,\n        ...businessProfileParams(company),\n      };\n      return sdk.stripeAccount.create(stripeAccountParams, { expand: true });\n    })\n    .then(response => {\n      stripeAccount = response;\n      dispatch(stripeAccountCreateSuccess(response.data.data));\n      return createPersons();\n    })\n    .then(response => {\n      // Return created stripe account from this thunk function\n      return stripeAccount;\n    })\n    .catch(err => {\n      const e = storableError(err);\n      dispatch(stripeAccountCreateError(e));\n      const stripeMessage =\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\n          ? e.apiErrors[0].meta.stripeMessage\n          : null;\n      const errorFlag = !stripeAccount\n        ? 'create-stripe-company-account-failed'\n        : 'create-stripe-company-persons-failed';\n      log.error(err, errorFlag, { stripeMessage });\n      throw e;\n    });\n};\n\nconst accountTokenParamsForIndividual = (individual, country) => {\n  const {\n    fname: firstName,\n    lname: lastName,\n    birthDate,\n    address,\n    phone,\n    email,\n    personalIdNumber,\n  } = individual;\n  const addressMaybe = address ? { address: formatAddress(address) } : {};\n  const dobMaybe = birthDate ? { dob: birthDate } : {};\n  const emailMaybe = email ? { email } : {};\n  const phoneMaybe = phone ? { phone } : {};\n  const idNumberMaybe =\n    country === 'US'\n      ? { ssn_last_4: personalIdNumber }\n      : personalIdNumber\n      ? { personal_id_number: personalIdNumber }\n      : {};\n\n  return {\n    business_type: 'individual',\n    individual: {\n      first_name: firstName,\n      last_name: lastName,\n      ...dobMaybe,\n      ...addressMaybe,\n      ...emailMaybe,\n      ...phoneMaybe,\n      ...idNumberMaybe,\n    },\n    tos_shown_and_accepted: true,\n  };\n};\n\nexport const createStripeIndividualAccount = (payoutDetails, stripe) => (\n  dispatch,\n  getState,\n  sdk\n) => {\n  const { country, individual } = payoutDetails;\n  let stripeAccount;\n  dispatch(stripeAccountCreateRequest());\n\n  return stripe\n    .createToken('account', accountTokenParamsForIndividual(individual, country))\n    .then(response => {\n      const accountToken = response.token.id;\n      const bankAccountToken = bankAccountTokenParams(individual);\n      const stripeAccountParams = {\n        accountToken,\n        bankAccountToken,\n        country,\n        ...businessProfileParams(individual),\n      };\n      return sdk.stripeAccount.create(stripeAccountParams, { expand: true });\n    })\n    .then(response => {\n      stripeAccount = response;\n      dispatch(stripeAccountCreateSuccess(response.data.data));\n      return stripeAccount;\n    })\n    .catch(err => {\n      const e = storableError(err);\n      dispatch(stripeAccountCreateError(e));\n      const stripeMessage =\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\n          ? e.apiErrors[0].meta.stripeMessage\n          : null;\n      log.error(err, 'create-stripe-individual-account-failed', { stripeMessage });\n      throw e;\n    });\n};\n\nexport const createStripeAccount = payoutDetails => (dispatch, getState, sdk) => {\n  if (typeof window === 'undefined' || !window.Stripe) {\n    throw new Error('Stripe must be loaded for submitting PayoutPreferences');\n  }\n\n  const stripe = window.Stripe(config.stripe.publishableKey);\n\n  if (payoutDetails.accountType === 'individual') {\n    return dispatch(createStripeIndividualAccount(payoutDetails, stripe));\n  } else {\n    return dispatch(createStripeCompanyAccount(payoutDetails, stripe));\n  }\n};\n\nexport const createStripePaymentToken = params => dispatch => {\n  // It's required to use the same instance of Stripe as where the card has been created\n  // so that's why Stripe needs to be passed here and we can't create a new instance.\n  const { stripe, card } = params;\n\n  dispatch(stripePaymentTokenCreateRequest());\n\n  return stripe\n    .createToken(card)\n    .then(response => {\n      dispatch(stripePaymentTokenCreateSuccess(response.token));\n      return response;\n    })\n    .catch(err => {\n      const e = storableError(err);\n      dispatch(stripeAccountCreateError(e));\n      const stripeMessage =\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\n          ? e.apiErrors[0].meta.stripeMessage\n          : null;\n      log.error(err, 'create-stripe-payment-token-failed', { stripeMessage });\n      throw e;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}