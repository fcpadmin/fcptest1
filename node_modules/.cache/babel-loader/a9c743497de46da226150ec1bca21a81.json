{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport omit from 'lodash/omit';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { denormalisedResponseEntities, ensureAvailabilityException } from '../../util/data';\nimport { isSameDate, monthIdStringInUTC } from '../../util/dates';\nimport { storableError } from '../../util/errors';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport * as log from '../../util/log';\nconst UUID = sdkTypes.UUID; // A helper function to filter away exception that matches start and end timestamps\n\nconst removeException = (exception, calendar) => {\n  const availabilityException = ensureAvailabilityException(exception.availabilityException);\n  const _availabilityExceptio = availabilityException.attributes,\n        start = _availabilityExceptio.start,\n        end = _availabilityExceptio.end; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdStringInUTC(start);\n  const monthData = calendar[monthId] || {\n    exceptions: []\n  };\n  const exceptions = monthData.exceptions.filter(e => {\n    const anException = ensureAvailabilityException(e.availabilityException);\n    const exceptionStart = anException.attributes.start;\n    const exceptionEnd = anException.attributes.end;\n    return !(isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end));\n  });\n  return _objectSpread({}, calendar, {\n    [monthId]: _objectSpread({}, monthData, {\n      exceptions\n    })\n  });\n}; // A helper function to add a new exception and remove previous one if there's a matching exception\n\n\nconst addException = (exception, calendar) => {\n  const start = ensureAvailabilityException(exception.availabilityException).attributes.start; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdStringInUTC(start); // TODO: API doesn't support \"availability_exceptions/update\" yet\n  // So, when user wants to create an exception we need to ensure\n  // that possible existing exception is removed first.\n\n  const cleanCalendar = removeException(exception, calendar);\n  const monthData = cleanCalendar[monthId] || {\n    exceptions: []\n  };\n  return _objectSpread({}, cleanCalendar, {\n    [monthId]: _objectSpread({}, monthData, {\n      exceptions: [...monthData.exceptions, exception]\n    })\n  });\n}; // A helper function to update exception that matches start and end timestamps\n\n\nconst updateException = (exception, calendar) => {\n  const newAvailabilityException = ensureAvailabilityException(exception.availabilityException);\n  const _newAvailabilityExcep = newAvailabilityException.attributes,\n        start = _newAvailabilityExcep.start,\n        end = _newAvailabilityExcep.end; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdStringInUTC(start);\n  const monthData = calendar[monthId] || {\n    exceptions: []\n  };\n  const exceptions = monthData.exceptions.map(e => {\n    const availabilityException = ensureAvailabilityException(e.availabilityException);\n    const exceptionStart = availabilityException.attributes.start;\n    const exceptionEnd = availabilityException.attributes.end;\n    return isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end) ? exception : e;\n  });\n  return _objectSpread({}, calendar, {\n    [monthId]: _objectSpread({}, monthData, {\n      exceptions\n    })\n  });\n}; // Update calendar data of given month\n\n\nconst updateCalendarMonth = (state, monthId, data) => {\n  // Ensure that every month has array for bookings and exceptions\n  const defaultMonthData = {\n    bookings: [],\n    exceptions: []\n  };\n  return _objectSpread({}, state, {\n    availabilityCalendar: _objectSpread({}, state.availabilityCalendar, {\n      [monthId]: _objectSpread({}, defaultMonthData, state.availabilityCalendar[monthId], data)\n    })\n  });\n};\n\nconst requestAction = actionType => params => ({\n  type: actionType,\n  payload: {\n    params\n  }\n});\n\nconst successAction = actionType => result => ({\n  type: actionType,\n  payload: result.data\n});\n\nconst errorAction = actionType => error => ({\n  type: actionType,\n  payload: error,\n  error: true\n}); // ================ Action types ================ //\n\n\nexport const MARK_TAB_UPDATED = 'app/EditListingPage/MARK_TAB_UPDATED';\nexport const CLEAR_UPDATED_TAB = 'app/EditListingPage/CLEAR_UPDATED_TAB';\nexport const CREATE_LISTING_DRAFT_REQUEST = 'app/EditListingPage/CREATE_LISTING_DRAFT_REQUEST';\nexport const CREATE_LISTING_DRAFT_SUCCESS = 'app/EditListingPage/CREATE_LISTING_DRAFT_SUCCESS';\nexport const CREATE_LISTING_DRAFT_ERROR = 'app/EditListingPage/CREATE_LISTING_DRAFT_ERROR';\nexport const PUBLISH_LISTING_REQUEST = 'app/EditListingPage/PUBLISH_LISTING_REQUEST';\nexport const PUBLISH_LISTING_SUCCESS = 'app/EditListingPage/PUBLISH_LISTING_SUCCESS';\nexport const PUBLISH_LISTING_ERROR = 'app/EditListingPage/PUBLISH_LISTING_ERROR';\nexport const UPDATE_LISTING_REQUEST = 'app/EditListingPage/UPDATE_LISTING_REQUEST';\nexport const UPDATE_LISTING_SUCCESS = 'app/EditListingPage/UPDATE_LISTING_SUCCESS';\nexport const UPDATE_LISTING_ERROR = 'app/EditListingPage/UPDATE_LISTING_ERROR';\nexport const SHOW_LISTINGS_REQUEST = 'app/EditListingPage/SHOW_LISTINGS_REQUEST';\nexport const SHOW_LISTINGS_SUCCESS = 'app/EditListingPage/SHOW_LISTINGS_SUCCESS';\nexport const SHOW_LISTINGS_ERROR = 'app/EditListingPage/SHOW_LISTINGS_ERROR';\nexport const FETCH_BOOKINGS_REQUEST = 'app/EditListingPage/FETCH_BOOKINGS_REQUEST';\nexport const FETCH_BOOKINGS_SUCCESS = 'app/EditListingPage/FETCH_BOOKINGS_SUCCESS';\nexport const FETCH_BOOKINGS_ERROR = 'app/EditListingPage/FETCH_BOOKINGS_ERROR';\nexport const FETCH_EXCEPTIONS_REQUEST = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_REQUEST';\nexport const FETCH_EXCEPTIONS_SUCCESS = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_SUCCESS';\nexport const FETCH_EXCEPTIONS_ERROR = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_ERROR';\nexport const CREATE_EXCEPTION_REQUEST = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_REQUEST';\nexport const CREATE_EXCEPTION_SUCCESS = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_SUCCESS';\nexport const CREATE_EXCEPTION_ERROR = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_ERROR';\nexport const DELETE_EXCEPTION_REQUEST = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_REQUEST';\nexport const DELETE_EXCEPTION_SUCCESS = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_SUCCESS';\nexport const DELETE_EXCEPTION_ERROR = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_ERROR';\nexport const UPLOAD_IMAGE_REQUEST = 'app/EditListingPage/UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'app/EditListingPage/UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_ERROR = 'app/EditListingPage/UPLOAD_IMAGE_ERROR';\nexport const UPDATE_IMAGE_ORDER = 'app/EditListingPage/UPDATE_IMAGE_ORDER';\nexport const REMOVE_LISTING_IMAGE = 'app/EditListingPage/REMOVE_LISTING_IMAGE'; // ================ Reducer ================ //\n\nconst initialState = {\n  // Error instance placeholders for each endpoint\n  createListingDraftError: null,\n  publishingListing: null,\n  publishListingError: null,\n  updateListingError: null,\n  showListingsError: null,\n  uploadImageError: null,\n  createListingDraftInProgress: false,\n  submittedListingId: null,\n  redirectToListing: false,\n  availabilityCalendar: {// '2018-12': {\n    //   bookings: [],\n    //   exceptions: [],\n    //   fetchExceptionsError: null,\n    //   fetchExceptionsInProgress: false,\n    //   fetchBookingsError: null,\n    //   fetchBookingsInProgress: false,\n    // },\n  },\n  images: {},\n  imageOrder: [],\n  removedImageIds: [],\n  listingDraft: null,\n  updatedTab: null,\n  updateInProgress: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case MARK_TAB_UPDATED:\n      return _objectSpread({}, state, {\n        updatedTab: payload\n      });\n\n    case CLEAR_UPDATED_TAB:\n      return _objectSpread({}, state, {\n        updatedTab: null,\n        updateListingError: null\n      });\n\n    case CREATE_LISTING_DRAFT_REQUEST:\n      return _objectSpread({}, state, {\n        createListingDraftInProgress: true,\n        createListingDraftError: null,\n        submittedListingId: null,\n        listingDraft: null\n      });\n\n    case CREATE_LISTING_DRAFT_SUCCESS:\n      return _objectSpread({}, state, {\n        createListingDraftInProgress: false,\n        submittedListingId: payload.data.id,\n        listingDraft: payload.data\n      });\n\n    case CREATE_LISTING_DRAFT_ERROR:\n      return _objectSpread({}, state, {\n        createListingDraftInProgress: false,\n        createListingDraftError: payload\n      });\n\n    case PUBLISH_LISTING_REQUEST:\n      return _objectSpread({}, state, {\n        publishingListing: payload.listingId,\n        publishListingError: null\n      });\n\n    case PUBLISH_LISTING_SUCCESS:\n      return {\n        redirectToListing: true,\n        publishingListing: null\n      };\n\n    case PUBLISH_LISTING_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        console.error(payload);\n        return _objectSpread({}, state, {\n          publishingListing: null,\n          publishListingError: {\n            listingId: state.publishingListing,\n            error: payload\n          }\n        });\n      }\n\n    case UPDATE_LISTING_REQUEST:\n      return _objectSpread({}, state, {\n        updateInProgress: true,\n        updateListingError: null\n      });\n\n    case UPDATE_LISTING_SUCCESS:\n      return _objectSpread({}, state, {\n        updateInProgress: false\n      });\n\n    case UPDATE_LISTING_ERROR:\n      return _objectSpread({}, state, {\n        updateInProgress: false,\n        updateListingError: payload\n      });\n\n    case SHOW_LISTINGS_REQUEST:\n      return _objectSpread({}, state, {\n        showListingsError: null\n      });\n\n    case SHOW_LISTINGS_SUCCESS:\n      return _objectSpread({}, initialState, {\n        availabilityCalendar: _objectSpread({}, state.availabilityCalendar)\n      });\n\n    case SHOW_LISTINGS_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return _objectSpread({}, state, {\n        showListingsError: payload,\n        redirectToListing: false\n      });\n\n    case FETCH_BOOKINGS_REQUEST:\n      return updateCalendarMonth(state, payload.params.monthId, {\n        fetchBookingsError: null,\n        fetchBookingsInProgress: true\n      });\n\n    case FETCH_BOOKINGS_SUCCESS:\n      return updateCalendarMonth(state, payload.monthId, {\n        bookings: payload.bookings,\n        fetchBookingsInProgress: false\n      });\n\n    case FETCH_BOOKINGS_ERROR:\n      return updateCalendarMonth(state, payload.monthId, {\n        fetchBookingsError: payload.error,\n        fetchBookingsInProgress: false\n      });\n\n    case FETCH_EXCEPTIONS_REQUEST:\n      return updateCalendarMonth(state, payload.params.monthId, {\n        fetchExceptionsError: null,\n        fetchExceptionsInProgress: true\n      });\n\n    case FETCH_EXCEPTIONS_SUCCESS:\n      return updateCalendarMonth(state, payload.monthId, {\n        exceptions: payload.exceptions,\n        fetchExceptionsInProgress: false\n      });\n\n    case FETCH_EXCEPTIONS_ERROR:\n      return updateCalendarMonth(state, payload.monthId, {\n        fetchExceptionsError: payload.error,\n        fetchExceptionsInProgress: false\n      });\n\n    case CREATE_EXCEPTION_REQUEST:\n      {\n        const _payload$params = payload.params,\n              start = _payload$params.start,\n              end = _payload$params.end,\n              seats = _payload$params.seats;\n        const draft = ensureAvailabilityException({\n          attributes: {\n            start,\n            end,\n            seats\n          }\n        });\n        const exception = {\n          availabilityException: draft,\n          inProgress: true\n        };\n        const availabilityCalendar = addException(exception, state.availabilityCalendar);\n        return _objectSpread({}, state, {\n          availabilityCalendar\n        });\n      }\n\n    case CREATE_EXCEPTION_SUCCESS:\n      {\n        const availabilityCalendar = updateException(payload.exception, state.availabilityCalendar);\n        return _objectSpread({}, state, {\n          availabilityCalendar\n        });\n      }\n\n    case CREATE_EXCEPTION_ERROR:\n      {\n        const availabilityException = payload.availabilityException,\n              error = payload.error;\n        const failedException = {\n          availabilityException,\n          error\n        };\n        const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\n        return _objectSpread({}, state, {\n          availabilityCalendar\n        });\n      }\n\n    case DELETE_EXCEPTION_REQUEST:\n      {\n        const _payload$params2 = payload.params,\n              id = _payload$params2.id,\n              seats = _payload$params2.seats,\n              currentException = _payload$params2.currentException; // We first create temporary exception with given 'seats' count (the default after deletion).\n        // This makes it possible to show the UI element immediately with default color that matches\n        // with the availability plan.\n\n        const exception = {\n          id,\n          inProgress: true,\n          availabilityException: _objectSpread({}, currentException.availabilityException, {\n            attributes: _objectSpread({}, currentException.availabilityException.attributes, {\n              seats\n            })\n          })\n        };\n        const availabilityCalendar = updateException(exception, state.availabilityCalendar);\n        return _objectSpread({}, state, {\n          availabilityCalendar\n        });\n      }\n\n    case DELETE_EXCEPTION_SUCCESS:\n      {\n        const availabilityCalendar = removeException(payload.exception, state.availabilityCalendar);\n        return _objectSpread({}, state, {\n          availabilityCalendar\n        });\n      }\n\n    case DELETE_EXCEPTION_ERROR:\n      {\n        const availabilityException = payload.availabilityException,\n              error = payload.error;\n        const failedException = {\n          availabilityException,\n          error\n        };\n        const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\n        return _objectSpread({}, state, {\n          availabilityCalendar\n        });\n      }\n\n    case UPLOAD_IMAGE_REQUEST:\n      {\n        // payload.params: { id: 'tempId', file }\n        const images = _objectSpread({}, state.images, {\n          [payload.params.id]: _objectSpread({}, payload.params)\n        });\n\n        return _objectSpread({}, state, {\n          images,\n          imageOrder: state.imageOrder.concat([payload.params.id]),\n          uploadImageError: null\n        });\n      }\n\n    case UPLOAD_IMAGE_SUCCESS:\n      {\n        // payload.params: { id: 'tempId', imageId: 'some-real-id'}\n        const id = payload.id,\n              imageId = payload.imageId;\n        const file = state.images[id].file;\n\n        const images = _objectSpread({}, state.images, {\n          [id]: {\n            id,\n            imageId,\n            file\n          }\n        });\n\n        return _objectSpread({}, state, {\n          images\n        });\n      }\n\n    case UPLOAD_IMAGE_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        const id = payload.id,\n              error = payload.error;\n        const imageOrder = state.imageOrder.filter(i => i !== id);\n        const images = omit(state.images, id);\n        return _objectSpread({}, state, {\n          imageOrder,\n          images,\n          uploadImageError: error\n        });\n      }\n\n    case UPDATE_IMAGE_ORDER:\n      return _objectSpread({}, state, {\n        imageOrder: payload.imageOrder\n      });\n\n    case REMOVE_LISTING_IMAGE:\n      {\n        const id = payload.imageId; // Only mark the image removed if it hasn't been added to the\n        // listing already\n\n        const removedImageIds = state.images[id] ? state.removedImageIds : state.removedImageIds.concat(id); // Always remove from the draft since it might be a new image to\n        // an existing listing.\n\n        const images = omit(state.images, id);\n        const imageOrder = state.imageOrder.filter(i => i !== id);\n        return _objectSpread({}, state, {\n          images,\n          imageOrder,\n          removedImageIds\n        });\n      }\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n// ================ Action creators ================ //\n\nexport const markTabUpdated = tab => ({\n  type: MARK_TAB_UPDATED,\n  payload: tab\n});\nexport const clearUpdatedTab = () => ({\n  type: CLEAR_UPDATED_TAB\n});\nexport const updateImageOrder = imageOrder => ({\n  type: UPDATE_IMAGE_ORDER,\n  payload: {\n    imageOrder\n  }\n});\nexport const removeListingImage = imageId => ({\n  type: REMOVE_LISTING_IMAGE,\n  payload: {\n    imageId\n  }\n}); // All the action creators that don't have the {Success, Error} suffix\n// take the params object that the corresponding SDK endpoint method\n// expects.\n// SDK method: ownListings.create\n\nexport const createListingDraft = requestAction(CREATE_LISTING_DRAFT_REQUEST);\nexport const createListingDraftSuccess = successAction(CREATE_LISTING_DRAFT_SUCCESS);\nexport const createListingDraftError = errorAction(CREATE_LISTING_DRAFT_ERROR); // SDK method: ownListings.publish\n\nexport const publishListing = requestAction(PUBLISH_LISTING_REQUEST);\nexport const publishListingSuccess = successAction(PUBLISH_LISTING_SUCCESS);\nexport const publishListingError = errorAction(PUBLISH_LISTING_ERROR); // SDK method: ownListings.update\n\nexport const updateListing = requestAction(UPDATE_LISTING_REQUEST);\nexport const updateListingSuccess = successAction(UPDATE_LISTING_SUCCESS);\nexport const updateListingError = errorAction(UPDATE_LISTING_ERROR); // SDK method: ownListings.show\n\nexport const showListings = requestAction(SHOW_LISTINGS_REQUEST);\nexport const showListingsSuccess = successAction(SHOW_LISTINGS_SUCCESS);\nexport const showListingsError = errorAction(SHOW_LISTINGS_ERROR); // SDK method: images.upload\n\nexport const uploadImage = requestAction(UPLOAD_IMAGE_REQUEST);\nexport const uploadImageSuccess = successAction(UPLOAD_IMAGE_SUCCESS);\nexport const uploadImageError = errorAction(UPLOAD_IMAGE_ERROR); // SDK method: bookings.query\n\nexport const fetchBookingsRequest = requestAction(FETCH_BOOKINGS_REQUEST);\nexport const fetchBookingsSuccess = successAction(FETCH_BOOKINGS_SUCCESS);\nexport const fetchBookingsError = errorAction(FETCH_BOOKINGS_ERROR); // SDK method: availabilityExceptions.query\n\nexport const fetchAvailabilityExceptionsRequest = requestAction(FETCH_EXCEPTIONS_REQUEST);\nexport const fetchAvailabilityExceptionsSuccess = successAction(FETCH_EXCEPTIONS_SUCCESS);\nexport const fetchAvailabilityExceptionsError = errorAction(FETCH_EXCEPTIONS_ERROR); // SDK method: availabilityExceptions.create\n\nexport const createAvailabilityExceptionRequest = requestAction(CREATE_EXCEPTION_REQUEST);\nexport const createAvailabilityExceptionSuccess = successAction(CREATE_EXCEPTION_SUCCESS);\nexport const createAvailabilityExceptionError = errorAction(CREATE_EXCEPTION_ERROR); // SDK method: availabilityExceptions.delete\n\nexport const deleteAvailabilityExceptionRequest = requestAction(DELETE_EXCEPTION_REQUEST);\nexport const deleteAvailabilityExceptionSuccess = successAction(DELETE_EXCEPTION_SUCCESS);\nexport const deleteAvailabilityExceptionError = errorAction(DELETE_EXCEPTION_ERROR); // ================ Thunk ================ //\n\nexport function requestShowListing(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    dispatch(showListings(actionPayload));\n    return sdk.ownListings.show(actionPayload).then(response => {\n      // EditListingPage fetches new listing data, which also needs to be added to global data\n      dispatch(addMarketplaceEntities(response)); // In case of success, we'll clear state.EditListingPage (user will be redirected away)\n\n      dispatch(showListingsSuccess(response));\n      return response;\n    }).catch(e => dispatch(showListingsError(storableError(e))));\n  };\n}\nexport function requestCreateListingDraft(data) {\n  return (dispatch, getState, sdk) => {\n    dispatch(createListingDraft(data));\n    const queryParams = {\n      expand: true,\n      include: ['author', 'images'],\n      'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x']\n    };\n    return sdk.ownListings.createDraft(data, queryParams).then(response => {\n      //const id = response.data.data.id.uuid;\n      // Add the created listing to the marketplace data\n      dispatch(addMarketplaceEntities(response)); // Modify store to understand that we have created listing and can redirect away\n\n      dispatch(createListingDraftSuccess(response));\n      return response;\n    }).catch(e => {\n      log.error(e, 'create-listing-draft-failed', {\n        listingData: data\n      });\n      return dispatch(createListingDraftError(storableError(e)));\n    });\n  };\n}\nexport const requestPublishListingDraft = listingId => (dispatch, getState, sdk) => {\n  dispatch(publishListing(listingId));\n  return sdk.ownListings.publishDraft({\n    id: listingId\n  }, {\n    expand: true\n  }).then(response => {\n    // Add the created listing to the marketplace data\n    dispatch(addMarketplaceEntities(response));\n    dispatch(publishListingSuccess(response));\n    return response;\n  }).catch(e => {\n    dispatch(publishListingError(storableError(e)));\n  });\n}; // Images return imageId which we need to map with previously generated temporary id\n\nexport function requestImageUpload(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    const id = actionPayload.id;\n    dispatch(uploadImage(actionPayload));\n    return sdk.images.upload({\n      image: actionPayload.file\n    }).then(resp => dispatch(uploadImageSuccess({\n      data: {\n        id,\n        imageId: resp.data.data.id\n      }\n    }))).catch(e => dispatch(uploadImageError({\n      id,\n      error: storableError(e)\n    })));\n  };\n}\nexport const requestFetchBookings = fetchParams => (dispatch, getState, sdk) => {\n  const listingId = fetchParams.listingId,\n        start = fetchParams.start,\n        end = fetchParams.end,\n        state = fetchParams.state; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdStringInUTC(start);\n  dispatch(fetchBookingsRequest(_objectSpread({}, fetchParams, {\n    monthId\n  })));\n  return sdk.bookings.query({\n    listingId,\n    start,\n    end,\n    state\n  }, {\n    expand: true\n  }).then(response => {\n    const bookings = denormalisedResponseEntities(response);\n    return dispatch(fetchBookingsSuccess({\n      data: {\n        monthId,\n        bookings\n      }\n    }));\n  }).catch(e => {\n    return dispatch(fetchBookingsError({\n      monthId,\n      error: storableError(e)\n    }));\n  });\n};\nexport const requestFetchAvailabilityExceptions = fetchParams => (dispatch, getState, sdk) => {\n  const listingId = fetchParams.listingId,\n        start = fetchParams.start,\n        end = fetchParams.end; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdStringInUTC(start);\n  dispatch(fetchAvailabilityExceptionsRequest(_objectSpread({}, fetchParams, {\n    monthId\n  })));\n  return sdk.availabilityExceptions.query({\n    listingId,\n    start,\n    end\n  }, {\n    expand: true\n  }).then(response => {\n    const exceptions = denormalisedResponseEntities(response).map(availabilityException => ({\n      availabilityException\n    }));\n    return dispatch(fetchAvailabilityExceptionsSuccess({\n      data: {\n        monthId,\n        exceptions\n      }\n    }));\n  }).catch(e => {\n    return dispatch(fetchAvailabilityExceptionsError({\n      monthId,\n      error: storableError(e)\n    }));\n  });\n};\nexport const requestCreateAvailabilityException = params => (dispatch, getState, sdk) => {\n  const currentException = params.currentException,\n        createParams = _objectWithoutProperties(params, [\"currentException\"]);\n\n  dispatch(createAvailabilityExceptionRequest(createParams));\n  return sdk.availabilityExceptions.create(createParams, {\n    expand: true\n  }).then(response => {\n    dispatch(createAvailabilityExceptionSuccess({\n      data: {\n        exception: {\n          availabilityException: response.data.data\n        }\n      }\n    }));\n    return response;\n  }).catch(error => {\n    const availabilityException = currentException && currentException.availabilityException;\n    return dispatch(createAvailabilityExceptionError({\n      error: storableError(error),\n      availabilityException\n    }));\n  });\n};\nexport const requestDeleteAvailabilityException = params => (dispatch, getState, sdk) => {\n  const currentException = params.currentException,\n        seats = params.seats,\n        deleteParams = _objectWithoutProperties(params, [\"currentException\", \"seats\"]);\n\n  dispatch(deleteAvailabilityExceptionRequest(params));\n  return sdk.availabilityExceptions.delete(deleteParams, {\n    expand: true\n  }).then(response => {\n    dispatch(deleteAvailabilityExceptionSuccess({\n      data: {\n        exception: currentException\n      }\n    }));\n    return response;\n  }).catch(error => {\n    const availabilityException = currentException && currentException.availabilityException;\n    return dispatch(deleteAvailabilityExceptionError({\n      error: storableError(error),\n      availabilityException\n    }));\n  });\n}; // Update the given tab of the wizard with the given data. This saves\n// the data to the listing, and marks the tab updated so the UI can\n// display the state.\n\nexport function requestUpdateListing(tab, data) {\n  return (dispatch, getState, sdk) => {\n    dispatch(updateListing(data));\n    const id = data.id;\n    let updateResponse;\n    return sdk.ownListings.update(data).then(response => {\n      updateResponse = response;\n      const payload = {\n        id,\n        include: ['author', 'images'],\n        'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x']\n      };\n      return dispatch(requestShowListing(payload));\n    }).then(() => {\n      dispatch(markTabUpdated(tab));\n      dispatch(updateListingSuccess(updateResponse));\n      return updateResponse;\n    }).catch(e => {\n      log.error(e, 'update-listing-failed', {\n        listingData: data\n      });\n      return dispatch(updateListingError(storableError(e)));\n    });\n  };\n} // loadData is run for each tab of the wizard. When editing an\n// existing listing, the listing must be fetched first.\n\nexport function loadData(params) {\n  return dispatch => {\n    dispatch(clearUpdatedTab());\n    const id = params.id,\n          type = params.type;\n\n    if (type === 'new') {\n      // No need to fetch anything when creating a new listing\n      return Promise.resolve(null);\n    }\n\n    const payload = {\n      id: new UUID(id),\n      include: ['author', 'images'],\n      'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x']\n    };\n    return dispatch(requestShowListing(payload));\n  };\n}","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/EditListingPage/EditListingPage.duck.js"],"names":["omit","types","sdkTypes","denormalisedResponseEntities","ensureAvailabilityException","isSameDate","monthIdStringInUTC","storableError","addMarketplaceEntities","log","UUID","removeException","exception","calendar","availabilityException","attributes","start","end","monthId","monthData","exceptions","filter","e","anException","exceptionStart","exceptionEnd","addException","cleanCalendar","updateException","newAvailabilityException","map","updateCalendarMonth","state","data","defaultMonthData","bookings","availabilityCalendar","requestAction","actionType","params","type","payload","successAction","result","errorAction","error","MARK_TAB_UPDATED","CLEAR_UPDATED_TAB","CREATE_LISTING_DRAFT_REQUEST","CREATE_LISTING_DRAFT_SUCCESS","CREATE_LISTING_DRAFT_ERROR","PUBLISH_LISTING_REQUEST","PUBLISH_LISTING_SUCCESS","PUBLISH_LISTING_ERROR","UPDATE_LISTING_REQUEST","UPDATE_LISTING_SUCCESS","UPDATE_LISTING_ERROR","SHOW_LISTINGS_REQUEST","SHOW_LISTINGS_SUCCESS","SHOW_LISTINGS_ERROR","FETCH_BOOKINGS_REQUEST","FETCH_BOOKINGS_SUCCESS","FETCH_BOOKINGS_ERROR","FETCH_EXCEPTIONS_REQUEST","FETCH_EXCEPTIONS_SUCCESS","FETCH_EXCEPTIONS_ERROR","CREATE_EXCEPTION_REQUEST","CREATE_EXCEPTION_SUCCESS","CREATE_EXCEPTION_ERROR","DELETE_EXCEPTION_REQUEST","DELETE_EXCEPTION_SUCCESS","DELETE_EXCEPTION_ERROR","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_ERROR","UPDATE_IMAGE_ORDER","REMOVE_LISTING_IMAGE","initialState","createListingDraftError","publishingListing","publishListingError","updateListingError","showListingsError","uploadImageError","createListingDraftInProgress","submittedListingId","redirectToListing","images","imageOrder","removedImageIds","listingDraft","updatedTab","updateInProgress","reducer","action","id","listingId","console","fetchBookingsError","fetchBookingsInProgress","fetchExceptionsError","fetchExceptionsInProgress","seats","draft","inProgress","failedException","currentException","concat","imageId","file","i","markTabUpdated","tab","clearUpdatedTab","updateImageOrder","removeListingImage","createListingDraft","createListingDraftSuccess","publishListing","publishListingSuccess","updateListing","updateListingSuccess","showListings","showListingsSuccess","uploadImage","uploadImageSuccess","fetchBookingsRequest","fetchBookingsSuccess","fetchAvailabilityExceptionsRequest","fetchAvailabilityExceptionsSuccess","fetchAvailabilityExceptionsError","createAvailabilityExceptionRequest","createAvailabilityExceptionSuccess","createAvailabilityExceptionError","deleteAvailabilityExceptionRequest","deleteAvailabilityExceptionSuccess","deleteAvailabilityExceptionError","requestShowListing","actionPayload","dispatch","getState","sdk","ownListings","show","then","response","catch","requestCreateListingDraft","queryParams","expand","include","createDraft","listingData","requestPublishListingDraft","publishDraft","requestImageUpload","upload","image","resp","requestFetchBookings","fetchParams","query","requestFetchAvailabilityExceptions","availabilityExceptions","requestCreateAvailabilityException","createParams","create","requestDeleteAvailabilityException","deleteParams","delete","requestUpdateListing","updateResponse","update","loadData","Promise","resolve"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { denormalisedResponseEntities, ensureAvailabilityException } from '../../util/data';\nimport { isSameDate, monthIdStringInUTC } from '../../util/dates';\nimport { storableError } from '../../util/errors';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport * as log from '../../util/log';\n\nconst { UUID } = sdkTypes;\n\n// A helper function to filter away exception that matches start and end timestamps\nconst removeException = (exception, calendar) => {\n  const availabilityException = ensureAvailabilityException(exception.availabilityException);\n  const { start, end } = availabilityException.attributes;\n  // When using time-based process, you might want to deal with local dates using monthIdString\n  const monthId = monthIdStringInUTC(start);\n  const monthData = calendar[monthId] || { exceptions: [] };\n\n  const exceptions = monthData.exceptions.filter(e => {\n    const anException = ensureAvailabilityException(e.availabilityException);\n    const exceptionStart = anException.attributes.start;\n    const exceptionEnd = anException.attributes.end;\n\n    return !(isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end));\n  });\n\n  return {\n    ...calendar,\n    [monthId]: { ...monthData, exceptions },\n  };\n};\n\n// A helper function to add a new exception and remove previous one if there's a matching exception\nconst addException = (exception, calendar) => {\n  const { start } = ensureAvailabilityException(exception.availabilityException).attributes;\n  // When using time-based process, you might want to deal with local dates using monthIdString\n  const monthId = monthIdStringInUTC(start);\n\n  // TODO: API doesn't support \"availability_exceptions/update\" yet\n  // So, when user wants to create an exception we need to ensure\n  // that possible existing exception is removed first.\n  const cleanCalendar = removeException(exception, calendar);\n  const monthData = cleanCalendar[monthId] || { exceptions: [] };\n\n  return {\n    ...cleanCalendar,\n    [monthId]: { ...monthData, exceptions: [...monthData.exceptions, exception] },\n  };\n};\n\n// A helper function to update exception that matches start and end timestamps\nconst updateException = (exception, calendar) => {\n  const newAvailabilityException = ensureAvailabilityException(exception.availabilityException);\n  const { start, end } = newAvailabilityException.attributes;\n  // When using time-based process, you might want to deal with local dates using monthIdString\n  const monthId = monthIdStringInUTC(start);\n  const monthData = calendar[monthId] || { exceptions: [] };\n\n  const exceptions = monthData.exceptions.map(e => {\n    const availabilityException = ensureAvailabilityException(e.availabilityException);\n    const exceptionStart = availabilityException.attributes.start;\n    const exceptionEnd = availabilityException.attributes.end;\n\n    return isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end) ? exception : e;\n  });\n\n  return {\n    ...calendar,\n    [monthId]: { ...monthData, exceptions },\n  };\n};\n\n// Update calendar data of given month\nconst updateCalendarMonth = (state, monthId, data) => {\n  // Ensure that every month has array for bookings and exceptions\n  const defaultMonthData = { bookings: [], exceptions: [] };\n  return {\n    ...state,\n    availabilityCalendar: {\n      ...state.availabilityCalendar,\n      [monthId]: {\n        ...defaultMonthData,\n        ...state.availabilityCalendar[monthId],\n        ...data,\n      },\n    },\n  };\n};\n\nconst requestAction = actionType => params => ({ type: actionType, payload: { params } });\n\nconst successAction = actionType => result => ({ type: actionType, payload: result.data });\n\nconst errorAction = actionType => error => ({ type: actionType, payload: error, error: true });\n\n// ================ Action types ================ //\n\nexport const MARK_TAB_UPDATED = 'app/EditListingPage/MARK_TAB_UPDATED';\nexport const CLEAR_UPDATED_TAB = 'app/EditListingPage/CLEAR_UPDATED_TAB';\n\nexport const CREATE_LISTING_DRAFT_REQUEST = 'app/EditListingPage/CREATE_LISTING_DRAFT_REQUEST';\nexport const CREATE_LISTING_DRAFT_SUCCESS = 'app/EditListingPage/CREATE_LISTING_DRAFT_SUCCESS';\nexport const CREATE_LISTING_DRAFT_ERROR = 'app/EditListingPage/CREATE_LISTING_DRAFT_ERROR';\n\nexport const PUBLISH_LISTING_REQUEST = 'app/EditListingPage/PUBLISH_LISTING_REQUEST';\nexport const PUBLISH_LISTING_SUCCESS = 'app/EditListingPage/PUBLISH_LISTING_SUCCESS';\nexport const PUBLISH_LISTING_ERROR = 'app/EditListingPage/PUBLISH_LISTING_ERROR';\n\nexport const UPDATE_LISTING_REQUEST = 'app/EditListingPage/UPDATE_LISTING_REQUEST';\nexport const UPDATE_LISTING_SUCCESS = 'app/EditListingPage/UPDATE_LISTING_SUCCESS';\nexport const UPDATE_LISTING_ERROR = 'app/EditListingPage/UPDATE_LISTING_ERROR';\n\nexport const SHOW_LISTINGS_REQUEST = 'app/EditListingPage/SHOW_LISTINGS_REQUEST';\nexport const SHOW_LISTINGS_SUCCESS = 'app/EditListingPage/SHOW_LISTINGS_SUCCESS';\nexport const SHOW_LISTINGS_ERROR = 'app/EditListingPage/SHOW_LISTINGS_ERROR';\n\nexport const FETCH_BOOKINGS_REQUEST = 'app/EditListingPage/FETCH_BOOKINGS_REQUEST';\nexport const FETCH_BOOKINGS_SUCCESS = 'app/EditListingPage/FETCH_BOOKINGS_SUCCESS';\nexport const FETCH_BOOKINGS_ERROR = 'app/EditListingPage/FETCH_BOOKINGS_ERROR';\n\nexport const FETCH_EXCEPTIONS_REQUEST = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_REQUEST';\nexport const FETCH_EXCEPTIONS_SUCCESS = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_SUCCESS';\nexport const FETCH_EXCEPTIONS_ERROR = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_ERROR';\n\nexport const CREATE_EXCEPTION_REQUEST = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_REQUEST';\nexport const CREATE_EXCEPTION_SUCCESS = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_SUCCESS';\nexport const CREATE_EXCEPTION_ERROR = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_ERROR';\n\nexport const DELETE_EXCEPTION_REQUEST = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_REQUEST';\nexport const DELETE_EXCEPTION_SUCCESS = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_SUCCESS';\nexport const DELETE_EXCEPTION_ERROR = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_ERROR';\n\nexport const UPLOAD_IMAGE_REQUEST = 'app/EditListingPage/UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'app/EditListingPage/UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_ERROR = 'app/EditListingPage/UPLOAD_IMAGE_ERROR';\n\nexport const UPDATE_IMAGE_ORDER = 'app/EditListingPage/UPDATE_IMAGE_ORDER';\n\nexport const REMOVE_LISTING_IMAGE = 'app/EditListingPage/REMOVE_LISTING_IMAGE';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  // Error instance placeholders for each endpoint\n  createListingDraftError: null,\n  publishingListing: null,\n  publishListingError: null,\n  updateListingError: null,\n  showListingsError: null,\n  uploadImageError: null,\n  createListingDraftInProgress: false,\n  submittedListingId: null,\n  redirectToListing: false,\n  availabilityCalendar: {\n    // '2018-12': {\n    //   bookings: [],\n    //   exceptions: [],\n    //   fetchExceptionsError: null,\n    //   fetchExceptionsInProgress: false,\n    //   fetchBookingsError: null,\n    //   fetchBookingsInProgress: false,\n    // },\n  },\n  images: {},\n  imageOrder: [],\n  removedImageIds: [],\n  listingDraft: null,\n  updatedTab: null,\n  updateInProgress: false,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case MARK_TAB_UPDATED:\n      return { ...state, updatedTab: payload };\n    case CLEAR_UPDATED_TAB:\n      return { ...state, updatedTab: null, updateListingError: null };\n\n    case CREATE_LISTING_DRAFT_REQUEST:\n      return {\n        ...state,\n        createListingDraftInProgress: true,\n        createListingDraftError: null,\n        submittedListingId: null,\n        listingDraft: null,\n      };\n\n    case CREATE_LISTING_DRAFT_SUCCESS:\n      return {\n        ...state,\n        createListingDraftInProgress: false,\n        submittedListingId: payload.data.id,\n        listingDraft: payload.data,\n      };\n    case CREATE_LISTING_DRAFT_ERROR:\n      return {\n        ...state,\n        createListingDraftInProgress: false,\n        createListingDraftError: payload,\n      };\n\n    case PUBLISH_LISTING_REQUEST:\n      return {\n        ...state,\n        publishingListing: payload.listingId,\n        publishListingError: null,\n      };\n    case PUBLISH_LISTING_SUCCESS:\n      return {\n        redirectToListing: true,\n        publishingListing: null,\n      };\n    case PUBLISH_LISTING_ERROR: {\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return {\n        ...state,\n        publishingListing: null,\n        publishListingError: {\n          listingId: state.publishingListing,\n          error: payload,\n        },\n      };\n    }\n\n    case UPDATE_LISTING_REQUEST:\n      return { ...state, updateInProgress: true, updateListingError: null };\n    case UPDATE_LISTING_SUCCESS:\n      return { ...state, updateInProgress: false };\n    case UPDATE_LISTING_ERROR:\n      return { ...state, updateInProgress: false, updateListingError: payload };\n\n    case SHOW_LISTINGS_REQUEST:\n      return { ...state, showListingsError: null };\n    case SHOW_LISTINGS_SUCCESS:\n      return { ...initialState, availabilityCalendar: { ...state.availabilityCalendar } };\n\n    case SHOW_LISTINGS_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return { ...state, showListingsError: payload, redirectToListing: false };\n\n    case FETCH_BOOKINGS_REQUEST:\n      return updateCalendarMonth(state, payload.params.monthId, {\n        fetchBookingsError: null,\n        fetchBookingsInProgress: true,\n      });\n    case FETCH_BOOKINGS_SUCCESS:\n      return updateCalendarMonth(state, payload.monthId, {\n        bookings: payload.bookings,\n        fetchBookingsInProgress: false,\n      });\n    case FETCH_BOOKINGS_ERROR:\n      return updateCalendarMonth(state, payload.monthId, {\n        fetchBookingsError: payload.error,\n        fetchBookingsInProgress: false,\n      });\n\n    case FETCH_EXCEPTIONS_REQUEST:\n      return updateCalendarMonth(state, payload.params.monthId, {\n        fetchExceptionsError: null,\n        fetchExceptionsInProgress: true,\n      });\n    case FETCH_EXCEPTIONS_SUCCESS:\n      return updateCalendarMonth(state, payload.monthId, {\n        exceptions: payload.exceptions,\n        fetchExceptionsInProgress: false,\n      });\n    case FETCH_EXCEPTIONS_ERROR:\n      return updateCalendarMonth(state, payload.monthId, {\n        fetchExceptionsError: payload.error,\n        fetchExceptionsInProgress: false,\n      });\n\n    case CREATE_EXCEPTION_REQUEST: {\n      const { start, end, seats } = payload.params;\n      const draft = ensureAvailabilityException({ attributes: { start, end, seats } });\n      const exception = { availabilityException: draft, inProgress: true };\n      const availabilityCalendar = addException(exception, state.availabilityCalendar);\n      return { ...state, availabilityCalendar };\n    }\n    case CREATE_EXCEPTION_SUCCESS: {\n      const availabilityCalendar = updateException(payload.exception, state.availabilityCalendar);\n      return { ...state, availabilityCalendar };\n    }\n    case CREATE_EXCEPTION_ERROR: {\n      const { availabilityException, error } = payload;\n      const failedException = { availabilityException, error };\n      const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\n      return { ...state, availabilityCalendar };\n    }\n\n    case DELETE_EXCEPTION_REQUEST: {\n      const { id, seats, currentException } = payload.params;\n\n      // We first create temporary exception with given 'seats' count (the default after deletion).\n      // This makes it possible to show the UI element immediately with default color that matches\n      // with the availability plan.\n      const exception = {\n        id,\n        inProgress: true,\n        availabilityException: {\n          ...currentException.availabilityException,\n          attributes: { ...currentException.availabilityException.attributes, seats },\n        },\n      };\n\n      const availabilityCalendar = updateException(exception, state.availabilityCalendar);\n      return { ...state, availabilityCalendar };\n    }\n    case DELETE_EXCEPTION_SUCCESS: {\n      const availabilityCalendar = removeException(payload.exception, state.availabilityCalendar);\n      return { ...state, availabilityCalendar };\n    }\n    case DELETE_EXCEPTION_ERROR: {\n      const { availabilityException, error } = payload;\n      const failedException = { availabilityException, error };\n      const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\n      return { ...state, availabilityCalendar };\n    }\n\n    case UPLOAD_IMAGE_REQUEST: {\n      // payload.params: { id: 'tempId', file }\n      const images = {\n        ...state.images,\n        [payload.params.id]: { ...payload.params },\n      };\n      return {\n        ...state,\n        images,\n        imageOrder: state.imageOrder.concat([payload.params.id]),\n        uploadImageError: null,\n      };\n    }\n    case UPLOAD_IMAGE_SUCCESS: {\n      // payload.params: { id: 'tempId', imageId: 'some-real-id'}\n      const { id, imageId } = payload;\n      const file = state.images[id].file;\n      const images = { ...state.images, [id]: { id, imageId, file } };\n      return { ...state, images };\n    }\n    case UPLOAD_IMAGE_ERROR: {\n      // eslint-disable-next-line no-console\n      const { id, error } = payload;\n      const imageOrder = state.imageOrder.filter(i => i !== id);\n      const images = omit(state.images, id);\n      return { ...state, imageOrder, images, uploadImageError: error };\n    }\n    case UPDATE_IMAGE_ORDER:\n      return { ...state, imageOrder: payload.imageOrder };\n\n    case REMOVE_LISTING_IMAGE: {\n      const id = payload.imageId;\n\n      // Only mark the image removed if it hasn't been added to the\n      // listing already\n      const removedImageIds = state.images[id]\n        ? state.removedImageIds\n        : state.removedImageIds.concat(id);\n\n      // Always remove from the draft since it might be a new image to\n      // an existing listing.\n      const images = omit(state.images, id);\n      const imageOrder = state.imageOrder.filter(i => i !== id);\n\n      return { ...state, images, imageOrder, removedImageIds };\n    }\n\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\n// ================ Action creators ================ //\n\nexport const markTabUpdated = tab => ({\n  type: MARK_TAB_UPDATED,\n  payload: tab,\n});\n\nexport const clearUpdatedTab = () => ({\n  type: CLEAR_UPDATED_TAB,\n});\n\nexport const updateImageOrder = imageOrder => ({\n  type: UPDATE_IMAGE_ORDER,\n  payload: { imageOrder },\n});\n\nexport const removeListingImage = imageId => ({\n  type: REMOVE_LISTING_IMAGE,\n  payload: { imageId },\n});\n\n// All the action creators that don't have the {Success, Error} suffix\n// take the params object that the corresponding SDK endpoint method\n// expects.\n\n// SDK method: ownListings.create\nexport const createListingDraft = requestAction(CREATE_LISTING_DRAFT_REQUEST);\nexport const createListingDraftSuccess = successAction(CREATE_LISTING_DRAFT_SUCCESS);\nexport const createListingDraftError = errorAction(CREATE_LISTING_DRAFT_ERROR);\n\n// SDK method: ownListings.publish\nexport const publishListing = requestAction(PUBLISH_LISTING_REQUEST);\nexport const publishListingSuccess = successAction(PUBLISH_LISTING_SUCCESS);\nexport const publishListingError = errorAction(PUBLISH_LISTING_ERROR);\n\n// SDK method: ownListings.update\nexport const updateListing = requestAction(UPDATE_LISTING_REQUEST);\nexport const updateListingSuccess = successAction(UPDATE_LISTING_SUCCESS);\nexport const updateListingError = errorAction(UPDATE_LISTING_ERROR);\n\n// SDK method: ownListings.show\nexport const showListings = requestAction(SHOW_LISTINGS_REQUEST);\nexport const showListingsSuccess = successAction(SHOW_LISTINGS_SUCCESS);\nexport const showListingsError = errorAction(SHOW_LISTINGS_ERROR);\n\n// SDK method: images.upload\nexport const uploadImage = requestAction(UPLOAD_IMAGE_REQUEST);\nexport const uploadImageSuccess = successAction(UPLOAD_IMAGE_SUCCESS);\nexport const uploadImageError = errorAction(UPLOAD_IMAGE_ERROR);\n\n// SDK method: bookings.query\nexport const fetchBookingsRequest = requestAction(FETCH_BOOKINGS_REQUEST);\nexport const fetchBookingsSuccess = successAction(FETCH_BOOKINGS_SUCCESS);\nexport const fetchBookingsError = errorAction(FETCH_BOOKINGS_ERROR);\n\n// SDK method: availabilityExceptions.query\nexport const fetchAvailabilityExceptionsRequest = requestAction(FETCH_EXCEPTIONS_REQUEST);\nexport const fetchAvailabilityExceptionsSuccess = successAction(FETCH_EXCEPTIONS_SUCCESS);\nexport const fetchAvailabilityExceptionsError = errorAction(FETCH_EXCEPTIONS_ERROR);\n\n// SDK method: availabilityExceptions.create\nexport const createAvailabilityExceptionRequest = requestAction(CREATE_EXCEPTION_REQUEST);\nexport const createAvailabilityExceptionSuccess = successAction(CREATE_EXCEPTION_SUCCESS);\nexport const createAvailabilityExceptionError = errorAction(CREATE_EXCEPTION_ERROR);\n\n// SDK method: availabilityExceptions.delete\nexport const deleteAvailabilityExceptionRequest = requestAction(DELETE_EXCEPTION_REQUEST);\nexport const deleteAvailabilityExceptionSuccess = successAction(DELETE_EXCEPTION_SUCCESS);\nexport const deleteAvailabilityExceptionError = errorAction(DELETE_EXCEPTION_ERROR);\n\n// ================ Thunk ================ //\n\nexport function requestShowListing(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    dispatch(showListings(actionPayload));\n    return sdk.ownListings\n      .show(actionPayload)\n      .then(response => {\n        // EditListingPage fetches new listing data, which also needs to be added to global data\n        dispatch(addMarketplaceEntities(response));\n        // In case of success, we'll clear state.EditListingPage (user will be redirected away)\n        dispatch(showListingsSuccess(response));\n        return response;\n      })\n      .catch(e => dispatch(showListingsError(storableError(e))));\n  };\n}\n\nexport function requestCreateListingDraft(data) {\n  return (dispatch, getState, sdk) => {\n    dispatch(createListingDraft(data));\n\n    const queryParams = {\n      expand: true,\n      include: ['author', 'images'],\n      'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    };\n\n    return sdk.ownListings\n      .createDraft(data, queryParams)\n      .then(response => {\n        //const id = response.data.data.id.uuid;\n\n        // Add the created listing to the marketplace data\n        dispatch(addMarketplaceEntities(response));\n\n        // Modify store to understand that we have created listing and can redirect away\n        dispatch(createListingDraftSuccess(response));\n        return response;\n      })\n      .catch(e => {\n        log.error(e, 'create-listing-draft-failed', { listingData: data });\n        return dispatch(createListingDraftError(storableError(e)));\n      });\n  };\n}\n\nexport const requestPublishListingDraft = listingId => (dispatch, getState, sdk) => {\n  dispatch(publishListing(listingId));\n\n  return sdk.ownListings\n    .publishDraft({ id: listingId }, { expand: true })\n    .then(response => {\n      // Add the created listing to the marketplace data\n      dispatch(addMarketplaceEntities(response));\n      dispatch(publishListingSuccess(response));\n      return response;\n    })\n    .catch(e => {\n      dispatch(publishListingError(storableError(e)));\n    });\n};\n\n// Images return imageId which we need to map with previously generated temporary id\nexport function requestImageUpload(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    const id = actionPayload.id;\n    dispatch(uploadImage(actionPayload));\n    return sdk.images\n      .upload({ image: actionPayload.file })\n      .then(resp => dispatch(uploadImageSuccess({ data: { id, imageId: resp.data.data.id } })))\n      .catch(e => dispatch(uploadImageError({ id, error: storableError(e) })));\n  };\n}\n\nexport const requestFetchBookings = fetchParams => (dispatch, getState, sdk) => {\n  const { listingId, start, end, state } = fetchParams;\n  // When using time-based process, you might want to deal with local dates using monthIdString\n  const monthId = monthIdStringInUTC(start);\n\n  dispatch(fetchBookingsRequest({ ...fetchParams, monthId }));\n\n  return sdk.bookings\n    .query({ listingId, start, end, state }, { expand: true })\n    .then(response => {\n      const bookings = denormalisedResponseEntities(response);\n      return dispatch(fetchBookingsSuccess({ data: { monthId, bookings } }));\n    })\n    .catch(e => {\n      return dispatch(fetchBookingsError({ monthId, error: storableError(e) }));\n    });\n};\n\nexport const requestFetchAvailabilityExceptions = fetchParams => (dispatch, getState, sdk) => {\n  const { listingId, start, end } = fetchParams;\n  // When using time-based process, you might want to deal with local dates using monthIdString\n  const monthId = monthIdStringInUTC(start);\n\n  dispatch(fetchAvailabilityExceptionsRequest({ ...fetchParams, monthId }));\n\n  return sdk.availabilityExceptions\n    .query({ listingId, start, end }, { expand: true })\n    .then(response => {\n      const exceptions = denormalisedResponseEntities(response).map(availabilityException => ({\n        availabilityException,\n      }));\n      return dispatch(fetchAvailabilityExceptionsSuccess({ data: { monthId, exceptions } }));\n    })\n    .catch(e => {\n      return dispatch(fetchAvailabilityExceptionsError({ monthId, error: storableError(e) }));\n    });\n};\n\nexport const requestCreateAvailabilityException = params => (dispatch, getState, sdk) => {\n  const { currentException, ...createParams } = params;\n\n  dispatch(createAvailabilityExceptionRequest(createParams));\n\n  return sdk.availabilityExceptions\n    .create(createParams, { expand: true })\n    .then(response => {\n      dispatch(\n        createAvailabilityExceptionSuccess({\n          data: {\n            exception: {\n              availabilityException: response.data.data,\n            },\n          },\n        })\n      );\n      return response;\n    })\n    .catch(error => {\n      const availabilityException = currentException && currentException.availabilityException;\n      return dispatch(\n        createAvailabilityExceptionError({\n          error: storableError(error),\n          availabilityException,\n        })\n      );\n    });\n};\n\nexport const requestDeleteAvailabilityException = params => (dispatch, getState, sdk) => {\n  const { currentException, seats, ...deleteParams } = params;\n\n  dispatch(deleteAvailabilityExceptionRequest(params));\n\n  return sdk.availabilityExceptions\n    .delete(deleteParams, { expand: true })\n    .then(response => {\n      dispatch(\n        deleteAvailabilityExceptionSuccess({\n          data: {\n            exception: currentException,\n          },\n        })\n      );\n      return response;\n    })\n    .catch(error => {\n      const availabilityException = currentException && currentException.availabilityException;\n      return dispatch(\n        deleteAvailabilityExceptionError({\n          error: storableError(error),\n          availabilityException,\n        })\n      );\n    });\n};\n\n// Update the given tab of the wizard with the given data. This saves\n// the data to the listing, and marks the tab updated so the UI can\n// display the state.\nexport function requestUpdateListing(tab, data) {\n  return (dispatch, getState, sdk) => {\n    dispatch(updateListing(data));\n    const { id } = data;\n    let updateResponse;\n    return sdk.ownListings\n      .update(data)\n      .then(response => {\n        updateResponse = response;\n        const payload = {\n          id,\n          include: ['author', 'images'],\n          'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n        };\n        return dispatch(requestShowListing(payload));\n      })\n      .then(() => {\n        dispatch(markTabUpdated(tab));\n        dispatch(updateListingSuccess(updateResponse));\n        return updateResponse;\n      })\n      .catch(e => {\n        log.error(e, 'update-listing-failed', { listingData: data });\n        return dispatch(updateListingError(storableError(e)));\n      });\n  };\n}\n\n// loadData is run for each tab of the wizard. When editing an\n// existing listing, the listing must be fetched first.\nexport function loadData(params) {\n  return dispatch => {\n    dispatch(clearUpdatedTab());\n    const { id, type } = params;\n    if (type === 'new') {\n      // No need to fetch anything when creating a new listing\n      return Promise.resolve(null);\n    }\n    const payload = {\n      id: new UUID(id),\n      include: ['author', 'images'],\n      'fields.image': ['variants.landscape-crop', 'variants.landscape-crop2x'],\n    };\n    return dispatch(requestShowListing(payload));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}