{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport pick from 'lodash/pick';\nimport config from '../../config';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { TRANSITION_REQUEST, TRANSITION_REQUEST_AFTER_ENQUIRY } from '../../util/transaction';\nimport * as log from '../../util/log';\nimport { fetchCurrentUserHasOrdersSuccess } from '../../ducks/user.duck'; // ================ Action types ================ //\n\nexport const SET_INITAL_VALUES = 'app/CheckoutPage/SET_INITIAL_VALUES';\nexport const INITIATE_ORDER_REQUEST = 'app/CheckoutPage/INITIATE_ORDER_REQUEST';\nexport const INITIATE_ORDER_SUCCESS = 'app/CheckoutPage/INITIATE_ORDER_SUCCESS';\nexport const INITIATE_ORDER_ERROR = 'app/CheckoutPage/INITIATE_ORDER_ERROR';\nexport const SPECULATE_TRANSACTION_REQUEST = 'app/ListingPage/SPECULATE_TRANSACTION_REQUEST';\nexport const SPECULATE_TRANSACTION_SUCCESS = 'app/ListingPage/SPECULATE_TRANSACTION_SUCCESS';\nexport const SPECULATE_TRANSACTION_ERROR = 'app/ListingPage/SPECULATE_TRANSACTION_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  listing: null,\n  bookingData: null,\n  bookingDates: null,\n  speculateTransactionInProgress: false,\n  speculateTransactionError: null,\n  speculatedTransaction: null,\n  enquiredTransaction: null,\n  initiateOrderError: null\n};\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case SET_INITAL_VALUES:\n      return _objectSpread({}, initialState, payload);\n\n    case SPECULATE_TRANSACTION_REQUEST:\n      return _objectSpread({}, state, {\n        speculateTransactionInProgress: true,\n        speculateTransactionError: null,\n        speculatedTransaction: null\n      });\n\n    case SPECULATE_TRANSACTION_SUCCESS:\n      return _objectSpread({}, state, {\n        speculateTransactionInProgress: false,\n        speculatedTransaction: payload.transaction\n      });\n\n    case SPECULATE_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return _objectSpread({}, state, {\n        speculateTransactionInProgress: false,\n        speculateTransactionError: payload\n      });\n\n    case INITIATE_ORDER_REQUEST:\n      return _objectSpread({}, state, {\n        initiateOrderError: null\n      });\n\n    case INITIATE_ORDER_SUCCESS:\n      return state;\n\n    case INITIATE_ORDER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return _objectSpread({}, state, {\n        initiateOrderError: payload\n      });\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n// ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\n\nconst initiateOrderRequest = () => ({\n  type: INITIATE_ORDER_REQUEST\n});\n\nconst initiateOrderSuccess = orderId => ({\n  type: INITIATE_ORDER_SUCCESS,\n  payload: orderId\n});\n\nconst initiateOrderError = e => ({\n  type: INITIATE_ORDER_ERROR,\n  error: true,\n  payload: e\n});\n\nexport const speculateTransactionRequest = () => ({\n  type: SPECULATE_TRANSACTION_REQUEST\n});\nexport const speculateTransactionSuccess = transaction => ({\n  type: SPECULATE_TRANSACTION_SUCCESS,\n  payload: {\n    transaction\n  }\n});\nexport const speculateTransactionError = e => ({\n  type: SPECULATE_TRANSACTION_ERROR,\n  error: true,\n  payload: e\n});\n/* ================ Thunks ================ */\n\nexport const initiateOrder = (orderParams, initialMessage) => (dispatch, getState, sdk) => {\n  dispatch(initiateOrderRequest());\n  const bodyParams = {\n    transition: TRANSITION_REQUEST,\n    processAlias: config.bookingProcessAlias,\n    params: orderParams\n  };\n  return sdk.transactions.initiate(bodyParams).then(response => {\n    const orderId = response.data.data.id;\n    dispatch(initiateOrderSuccess(orderId));\n    dispatch(fetchCurrentUserHasOrdersSuccess(true));\n\n    if (initialMessage) {\n      return sdk.messages.send({\n        transactionId: orderId,\n        content: initialMessage\n      }).then(() => {\n        return {\n          orderId,\n          initialMessageSuccess: true\n        };\n      }).catch(e => {\n        log.error(e, 'initial-message-send-failed', {\n          txId: orderId\n        });\n        return {\n          orderId,\n          initialMessageSuccess: false\n        };\n      });\n    } else {\n      return Promise.resolve({\n        orderId,\n        initialMessageSuccess: true\n      });\n    }\n  }).catch(e => {\n    dispatch(initiateOrderError(storableError(e)));\n    log.error(e, 'initiate-order-failed', {\n      listingId: orderParams.listingId.uuid,\n      bookingStart: orderParams.bookingStart,\n      bookingEnd: orderParams.bookingEnd\n    });\n    throw e;\n  });\n};\n/**\n * Initiate an order after an enquiry. Transitions previously created transaction.\n */\n\nexport const initiateOrderAfterEnquiry = (transactionId, orderParams) => (dispatch, getState, sdk) => {\n  dispatch(initiateOrderRequest());\n  const bodyParams = {\n    id: transactionId,\n    transition: TRANSITION_REQUEST_AFTER_ENQUIRY,\n    params: orderParams\n  };\n  return sdk.transactions.transition(bodyParams).then(response => {\n    const orderId = response.data.data.id;\n    dispatch(initiateOrderSuccess(orderId));\n    dispatch(fetchCurrentUserHasOrdersSuccess(true)); // set initialMessageSuccess to true to unify promise handling with initiateOrder\n\n    return Promise.resolve({\n      orderId,\n      initialMessageSuccess: true\n    });\n  }).catch(e => {\n    dispatch(initiateOrderError(storableError(e)));\n    log.error(e, 'initiate-order-failed', {\n      transactionId: transactionId.uuid,\n      listingId: orderParams.listingId.uuid,\n      bookingStart: orderParams.bookingStart,\n      bookingEnd: orderParams.bookingEnd\n    });\n    throw e;\n  });\n};\n/**\n * Initiate the speculative transaction with the given booking details\n *\n * The API allows us to do speculative transaction initiation and\n * transitions. This way we can create a test transaction and get the\n * actual pricing information as if the transaction had been started,\n * without affecting the actual data.\n *\n * We store this speculative transaction in the page store and use the\n * pricing info for the booking breakdown to get a proper estimate for\n * the price with the chosen information.\n */\n\nexport const speculateTransaction = params => (dispatch, getState, sdk) => {\n  dispatch(speculateTransactionRequest());\n  const bodyParams = {\n    transition: TRANSITION_REQUEST,\n    processAlias: config.bookingProcessAlias,\n    params: _objectSpread({}, params, {\n      cardToken: 'CheckoutPage_speculative_card_token'\n    })\n  };\n  const queryParams = {\n    include: ['booking', 'provider'],\n    expand: true\n  };\n  return sdk.transactions.initiateSpeculative(bodyParams, queryParams).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.transactions.initiateSpeculative response');\n    }\n\n    const tx = entities[0];\n    dispatch(speculateTransactionSuccess(tx));\n  }).catch(e => {\n    const listingId = params.listingId,\n          bookingStart = params.bookingStart,\n          bookingEnd = params.bookingEnd;\n    log.error(e, 'speculate-transaction-failed', {\n      listingId: listingId.uuid,\n      bookingStart,\n      bookingEnd\n    });\n    return dispatch(speculateTransactionError(storableError(e)));\n  });\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/CheckoutPage/CheckoutPage.duck.js"],"names":["pick","config","denormalisedResponseEntities","storableError","TRANSITION_REQUEST","TRANSITION_REQUEST_AFTER_ENQUIRY","log","fetchCurrentUserHasOrdersSuccess","SET_INITAL_VALUES","INITIATE_ORDER_REQUEST","INITIATE_ORDER_SUCCESS","INITIATE_ORDER_ERROR","SPECULATE_TRANSACTION_REQUEST","SPECULATE_TRANSACTION_SUCCESS","SPECULATE_TRANSACTION_ERROR","initialState","listing","bookingData","bookingDates","speculateTransactionInProgress","speculateTransactionError","speculatedTransaction","enquiredTransaction","initiateOrderError","checkoutPageReducer","state","action","type","payload","transaction","console","error","setInitialValues","initialValues","Object","keys","initiateOrderRequest","initiateOrderSuccess","orderId","e","speculateTransactionRequest","speculateTransactionSuccess","initiateOrder","orderParams","initialMessage","dispatch","getState","sdk","bodyParams","transition","processAlias","bookingProcessAlias","params","transactions","initiate","then","response","data","id","messages","send","transactionId","content","initialMessageSuccess","catch","txId","Promise","resolve","listingId","uuid","bookingStart","bookingEnd","initiateOrderAfterEnquiry","speculateTransaction","cardToken","queryParams","include","expand","initiateSpeculative","entities","length","Error","tx"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport config from '../../config';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { TRANSITION_REQUEST, TRANSITION_REQUEST_AFTER_ENQUIRY } from '../../util/transaction';\nimport * as log from '../../util/log';\nimport { fetchCurrentUserHasOrdersSuccess } from '../../ducks/user.duck';\n\n// ================ Action types ================ //\n\nexport const SET_INITAL_VALUES = 'app/CheckoutPage/SET_INITIAL_VALUES';\n\nexport const INITIATE_ORDER_REQUEST = 'app/CheckoutPage/INITIATE_ORDER_REQUEST';\nexport const INITIATE_ORDER_SUCCESS = 'app/CheckoutPage/INITIATE_ORDER_SUCCESS';\nexport const INITIATE_ORDER_ERROR = 'app/CheckoutPage/INITIATE_ORDER_ERROR';\n\nexport const SPECULATE_TRANSACTION_REQUEST = 'app/ListingPage/SPECULATE_TRANSACTION_REQUEST';\nexport const SPECULATE_TRANSACTION_SUCCESS = 'app/ListingPage/SPECULATE_TRANSACTION_SUCCESS';\nexport const SPECULATE_TRANSACTION_ERROR = 'app/ListingPage/SPECULATE_TRANSACTION_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  listing: null,\n  bookingData: null,\n  bookingDates: null,\n  speculateTransactionInProgress: false,\n  speculateTransactionError: null,\n  speculatedTransaction: null,\n  enquiredTransaction: null,\n  initiateOrderError: null,\n};\n\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_INITAL_VALUES:\n      return { ...initialState, ...payload };\n\n    case SPECULATE_TRANSACTION_REQUEST:\n      return {\n        ...state,\n        speculateTransactionInProgress: true,\n        speculateTransactionError: null,\n        speculatedTransaction: null,\n      };\n    case SPECULATE_TRANSACTION_SUCCESS:\n      return {\n        ...state,\n        speculateTransactionInProgress: false,\n        speculatedTransaction: payload.transaction,\n      };\n    case SPECULATE_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return {\n        ...state,\n        speculateTransactionInProgress: false,\n        speculateTransactionError: payload,\n      };\n\n    case INITIATE_ORDER_REQUEST:\n      return { ...state, initiateOrderError: null };\n    case INITIATE_ORDER_SUCCESS:\n      return state;\n    case INITIATE_ORDER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return { ...state, initiateOrderError: payload };\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\n// ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState)),\n});\n\nconst initiateOrderRequest = () => ({ type: INITIATE_ORDER_REQUEST });\n\nconst initiateOrderSuccess = orderId => ({\n  type: INITIATE_ORDER_SUCCESS,\n  payload: orderId,\n});\n\nconst initiateOrderError = e => ({\n  type: INITIATE_ORDER_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const speculateTransactionRequest = () => ({ type: SPECULATE_TRANSACTION_REQUEST });\n\nexport const speculateTransactionSuccess = transaction => ({\n  type: SPECULATE_TRANSACTION_SUCCESS,\n  payload: { transaction },\n});\n\nexport const speculateTransactionError = e => ({\n  type: SPECULATE_TRANSACTION_ERROR,\n  error: true,\n  payload: e,\n});\n\n/* ================ Thunks ================ */\n\nexport const initiateOrder = (orderParams, initialMessage) => (dispatch, getState, sdk) => {\n  dispatch(initiateOrderRequest());\n  const bodyParams = {\n    transition: TRANSITION_REQUEST,\n    processAlias: config.bookingProcessAlias,\n    params: orderParams,\n  };\n  return sdk.transactions\n    .initiate(bodyParams)\n    .then(response => {\n      const orderId = response.data.data.id;\n      dispatch(initiateOrderSuccess(orderId));\n      dispatch(fetchCurrentUserHasOrdersSuccess(true));\n\n      if (initialMessage) {\n        return sdk.messages\n          .send({ transactionId: orderId, content: initialMessage })\n          .then(() => {\n            return { orderId, initialMessageSuccess: true };\n          })\n          .catch(e => {\n            log.error(e, 'initial-message-send-failed', { txId: orderId });\n            return { orderId, initialMessageSuccess: false };\n          });\n      } else {\n        return Promise.resolve({ orderId, initialMessageSuccess: true });\n      }\n    })\n    .catch(e => {\n      dispatch(initiateOrderError(storableError(e)));\n      log.error(e, 'initiate-order-failed', {\n        listingId: orderParams.listingId.uuid,\n        bookingStart: orderParams.bookingStart,\n        bookingEnd: orderParams.bookingEnd,\n      });\n      throw e;\n    });\n};\n\n/**\n * Initiate an order after an enquiry. Transitions previously created transaction.\n */\nexport const initiateOrderAfterEnquiry = (transactionId, orderParams) => (\n  dispatch,\n  getState,\n  sdk\n) => {\n  dispatch(initiateOrderRequest());\n\n  const bodyParams = {\n    id: transactionId,\n    transition: TRANSITION_REQUEST_AFTER_ENQUIRY,\n    params: orderParams,\n  };\n\n  return sdk.transactions\n    .transition(bodyParams)\n    .then(response => {\n      const orderId = response.data.data.id;\n      dispatch(initiateOrderSuccess(orderId));\n      dispatch(fetchCurrentUserHasOrdersSuccess(true));\n      // set initialMessageSuccess to true to unify promise handling with initiateOrder\n      return Promise.resolve({ orderId, initialMessageSuccess: true });\n    })\n    .catch(e => {\n      dispatch(initiateOrderError(storableError(e)));\n      log.error(e, 'initiate-order-failed', {\n        transactionId: transactionId.uuid,\n        listingId: orderParams.listingId.uuid,\n        bookingStart: orderParams.bookingStart,\n        bookingEnd: orderParams.bookingEnd,\n      });\n      throw e;\n    });\n};\n\n/**\n * Initiate the speculative transaction with the given booking details\n *\n * The API allows us to do speculative transaction initiation and\n * transitions. This way we can create a test transaction and get the\n * actual pricing information as if the transaction had been started,\n * without affecting the actual data.\n *\n * We store this speculative transaction in the page store and use the\n * pricing info for the booking breakdown to get a proper estimate for\n * the price with the chosen information.\n */\nexport const speculateTransaction = params => (dispatch, getState, sdk) => {\n  dispatch(speculateTransactionRequest());\n  const bodyParams = {\n    transition: TRANSITION_REQUEST,\n    processAlias: config.bookingProcessAlias,\n    params: {\n      ...params,\n      cardToken: 'CheckoutPage_speculative_card_token',\n    },\n  };\n  const queryParams = {\n    include: ['booking', 'provider'],\n    expand: true,\n  };\n  return sdk.transactions\n    .initiateSpeculative(bodyParams, queryParams)\n    .then(response => {\n      const entities = denormalisedResponseEntities(response);\n      if (entities.length !== 1) {\n        throw new Error('Expected a resource in the sdk.transactions.initiateSpeculative response');\n      }\n      const tx = entities[0];\n      dispatch(speculateTransactionSuccess(tx));\n    })\n    .catch(e => {\n      const { listingId, bookingStart, bookingEnd } = params;\n      log.error(e, 'speculate-transaction-failed', {\n        listingId: listingId.uuid,\n        bookingStart,\n        bookingEnd,\n      });\n      return dispatch(speculateTransactionError(storableError(e)));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}