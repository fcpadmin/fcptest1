{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PasswordRecoveryForm/PasswordRecoveryForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { isPasswordRecoveryEmailNotFoundError } from '../../util/errors';\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../components';\nimport css from './PasswordRecoveryForm.css';\n\nclass PasswordRecoveryFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.submittedValues = {};\n  }\n\n  render() {\n    return React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const rootClassName = fieldRenderProps.rootClassName,\n              className = fieldRenderProps.className,\n              formId = fieldRenderProps.formId,\n              handleSubmit = fieldRenderProps.handleSubmit,\n              pristine = fieldRenderProps.pristine,\n              initialValues = fieldRenderProps.initialValues,\n              intl = fieldRenderProps.intl,\n              inProgress = fieldRenderProps.inProgress,\n              recoveryError = fieldRenderProps.recoveryError,\n              values = fieldRenderProps.values; // email\n\n        const emailLabel = intl.formatMessage({\n          id: 'PasswordRecoveryForm.emailLabel'\n        });\n        const emailPlaceholder = intl.formatMessage({\n          id: 'PasswordRecoveryForm.emailPlaceholder'\n        });\n        const emailRequiredMessage = intl.formatMessage({\n          id: 'PasswordRecoveryForm.emailRequired'\n        });\n        const emailNotFoundMessage = intl.formatMessage({\n          id: 'PasswordRecoveryForm.emailNotFound'\n        });\n        const emailInvalidMessage = intl.formatMessage({\n          id: 'PasswordRecoveryForm.emailInvalid'\n        });\n        const emailRequired = validators.required(emailRequiredMessage);\n        const emailValid = validators.emailFormatValid(emailInvalidMessage); // In case a given email is not found, pass a custom error message\n        // to be rendered with the input component\n\n        const customErrorText = isPasswordRecoveryEmailNotFoundError(recoveryError) ? emailNotFoundMessage : null;\n        const initialEmail = initialValues ? initialValues.email : null;\n        const emailTouched = values.email !== this.submittedValues.email;\n        const classes = classNames(rootClassName || css.root, className);\n        const submitInProgress = inProgress;\n        const submittedOnce = Object.keys(this.submittedValues).length > 0;\n        const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n        const submitDisabled = pristine && !initialEmail || submitInProgress || pristineSinceLastSubmit;\n        const loginLink = React.createElement(NamedLink, {\n          name: \"LoginPage\",\n          className: css.modalHelperLink,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordRecoveryForm.loginLinkText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }));\n        return React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedValues = values;\n            handleSubmit(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(FieldTextInput, {\n          className: css.email,\n          type: \"email\",\n          id: formId ? \"\".concat(formId, \".email\") : 'email',\n          name: \"email\",\n          autoComplete: \"email\",\n          label: emailLabel,\n          placeholder: emailPlaceholder,\n          validate: validators.composeValidators(emailRequired, emailValid),\n          customErrorText: emailTouched ? null : customErrorText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: css.bottomWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: css.bottomWrapperText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: css.modalHelperText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordRecoveryForm.loginLinkInfo\",\n          values: {\n            loginLink\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }))), React.createElement(PrimaryButton, {\n          type: \"submit\",\n          inProgress: submitInProgress,\n          disabled: submitDisabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"PasswordRecoveryForm.sendInstructions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }))));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPasswordRecoveryFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  formId: null,\n  inProgress: false,\n  recoveryError: null\n};\nconst bool = PropTypes.bool,\n      string = PropTypes.string;\nPasswordRecoveryFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  formId: string,\n  inProgress: bool,\n  recoveryError: propTypes.error,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst PasswordRecoveryForm = compose(injectIntl)(PasswordRecoveryFormComponent);\nPasswordRecoveryForm.displayName = 'PasswordRecoveryForm';\nexport default PasswordRecoveryForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/PasswordRecoveryForm/PasswordRecoveryForm.js"],"names":["React","Component","PropTypes","compose","FormattedMessage","injectIntl","intlShape","Form","FinalForm","isEqual","classNames","propTypes","validators","isPasswordRecoveryEmailNotFoundError","PrimaryButton","FieldTextInput","NamedLink","css","PasswordRecoveryFormComponent","constructor","props","submittedValues","render","fieldRenderProps","rootClassName","className","formId","handleSubmit","pristine","initialValues","intl","inProgress","recoveryError","values","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailNotFoundMessage","emailInvalidMessage","emailRequired","required","emailValid","emailFormatValid","customErrorText","initialEmail","email","emailTouched","classes","root","submitInProgress","submittedOnce","Object","keys","length","pristineSinceLastSubmit","submitDisabled","loginLink","modalHelperLink","e","composeValidators","bottomWrapper","bottomWrapperText","modalHelperText","defaultProps","bool","string","error","isRequired","PasswordRecoveryForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport * as validators from '../../util/validators';\nimport { isPasswordRecoveryEmailNotFoundError } from '../../util/errors';\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../components';\n\nimport css from './PasswordRecoveryForm.css';\n\nclass PasswordRecoveryFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.submittedValues = {};\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={fieldRenderProps => {\n          const {\n            rootClassName,\n            className,\n            formId,\n            handleSubmit,\n            pristine,\n            initialValues,\n            intl,\n            inProgress,\n            recoveryError,\n            values,\n          } = fieldRenderProps;\n\n          // email\n          const emailLabel = intl.formatMessage({\n            id: 'PasswordRecoveryForm.emailLabel',\n          });\n          const emailPlaceholder = intl.formatMessage({\n            id: 'PasswordRecoveryForm.emailPlaceholder',\n          });\n          const emailRequiredMessage = intl.formatMessage({\n            id: 'PasswordRecoveryForm.emailRequired',\n          });\n          const emailNotFoundMessage = intl.formatMessage({\n            id: 'PasswordRecoveryForm.emailNotFound',\n          });\n          const emailInvalidMessage = intl.formatMessage({\n            id: 'PasswordRecoveryForm.emailInvalid',\n          });\n\n          const emailRequired = validators.required(emailRequiredMessage);\n          const emailValid = validators.emailFormatValid(emailInvalidMessage);\n\n          // In case a given email is not found, pass a custom error message\n          // to be rendered with the input component\n          const customErrorText = isPasswordRecoveryEmailNotFoundError(recoveryError)\n            ? emailNotFoundMessage\n            : null;\n          const initialEmail = initialValues ? initialValues.email : null;\n          const emailTouched = values.email !== this.submittedValues.email;\n\n          const classes = classNames(rootClassName || css.root, className);\n          const submitInProgress = inProgress;\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n          const submitDisabled =\n            (pristine && !initialEmail) || submitInProgress || pristineSinceLastSubmit;\n\n          const loginLink = (\n            <NamedLink name=\"LoginPage\" className={css.modalHelperLink}>\n              <FormattedMessage id=\"PasswordRecoveryForm.loginLinkText\" />\n            </NamedLink>\n          );\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedValues = values;\n                handleSubmit(e);\n              }}\n            >\n              <FieldTextInput\n                className={css.email}\n                type=\"email\"\n                id={formId ? `${formId}.email` : 'email'}\n                name=\"email\"\n                autoComplete=\"email\"\n                label={emailLabel}\n                placeholder={emailPlaceholder}\n                validate={validators.composeValidators(emailRequired, emailValid)}\n                customErrorText={emailTouched ? null : customErrorText}\n              />\n\n              <div className={css.bottomWrapper}>\n                <p className={css.bottomWrapperText}>\n                  <span className={css.modalHelperText}>\n                    <FormattedMessage\n                      id=\"PasswordRecoveryForm.loginLinkInfo\"\n                      values={{ loginLink }}\n                    />\n                  </span>\n                </p>\n\n                <PrimaryButton\n                  type=\"submit\"\n                  inProgress={submitInProgress}\n                  disabled={submitDisabled}\n                >\n                  <FormattedMessage id=\"PasswordRecoveryForm.sendInstructions\" />\n                </PrimaryButton>\n              </div>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nPasswordRecoveryFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  formId: null,\n  inProgress: false,\n  recoveryError: null,\n};\n\nconst { bool, string } = PropTypes;\n\nPasswordRecoveryFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  formId: string,\n\n  inProgress: bool,\n  recoveryError: propTypes.error,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst PasswordRecoveryForm = compose(injectIntl)(PasswordRecoveryFormComponent);\nPasswordRecoveryForm.displayName = 'PasswordRecoveryForm';\n\nexport default PasswordRecoveryForm;\n"]},"metadata":{},"sourceType":"module"}