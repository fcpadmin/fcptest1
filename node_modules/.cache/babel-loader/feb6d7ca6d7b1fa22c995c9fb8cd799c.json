{"ast":null,"code":"import groupBy from 'lodash/groupBy';\nimport reduce from 'lodash/reduce';\n/**\n * hasParentWithClassName searches class name from parent elements of given target\n * @param {Node} target - element whose parent might contain given class.\n * @param {String} className - class name string to be found\n */\n\nexport const hasParentWithClassName = (target, className) => {\n  return [...document.querySelectorAll(\".\".concat(className))].some(el => el !== target && el.contains(target));\n};\n/**\n * Listings array grouped by geolocation\n * @param {Array} mapListings - listings to be grouped on map\n * @return {Object} - Object where coordinate pair is the key to different listings\n */\n\nexport const groupedByCoordinates = mapListings => {\n  return groupBy(mapListings, l => {\n    const g = l.attributes.geolocation;\n    return \"\".concat(g.lat, \"-\").concat(g.lng);\n  });\n};\n/**\n * Listings (in location based object literal) is mapped to array\n * @param {Object} mapListings - listings to be grouped on map\n * @return {Array} - An array where items are arrays of listings\n *   (They are arrays containing all the listings in that location)\n */\n\nexport const reducedToArray = mapListings => {\n  return reduce(mapListings, (acc, listing) => acc.concat([listing]), []);\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchMap/SearchMap.helpers.js"],"names":["groupBy","reduce","hasParentWithClassName","target","className","document","querySelectorAll","some","el","contains","groupedByCoordinates","mapListings","l","g","attributes","geolocation","lat","lng","reducedToArray","acc","listing","concat"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA;;;;;;AAKA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AAC3D,SAAO,CAAC,GAAGC,QAAQ,CAACC,gBAAT,YAA8BF,SAA9B,EAAJ,EAAgDG,IAAhD,CACLC,EAAE,IAAIA,EAAE,KAAKL,MAAP,IAAiBK,EAAE,CAACC,QAAH,CAAYN,MAAZ,CADlB,CAAP;AAGD,CAJM;AAMP;;;;;;AAKA,OAAO,MAAMO,oBAAoB,GAAGC,WAAW,IAAI;AACjD,SAAOX,OAAO,CAACW,WAAD,EAAcC,CAAC,IAAI;AAC/B,UAAMC,CAAC,GAAGD,CAAC,CAACE,UAAF,CAAaC,WAAvB;AACA,qBAAUF,CAAC,CAACG,GAAZ,cAAmBH,CAAC,CAACI,GAArB;AACD,GAHa,CAAd;AAID,CALM;AAOP;;;;;;;AAMA,OAAO,MAAMC,cAAc,GAAGP,WAAW,IAAI;AAC3C,SAAOV,MAAM,CAACU,WAAD,EAAc,CAACQ,GAAD,EAAMC,OAAN,KAAkBD,GAAG,CAACE,MAAJ,CAAW,CAACD,OAAD,CAAX,CAAhC,EAAuD,EAAvD,CAAb;AACD,CAFM","sourcesContent":["import groupBy from 'lodash/groupBy';\nimport reduce from 'lodash/reduce';\n\n/**\n * hasParentWithClassName searches class name from parent elements of given target\n * @param {Node} target - element whose parent might contain given class.\n * @param {String} className - class name string to be found\n */\nexport const hasParentWithClassName = (target, className) => {\n  return [...document.querySelectorAll(`.${className}`)].some(\n    el => el !== target && el.contains(target)\n  );\n};\n\n/**\n * Listings array grouped by geolocation\n * @param {Array} mapListings - listings to be grouped on map\n * @return {Object} - Object where coordinate pair is the key to different listings\n */\nexport const groupedByCoordinates = mapListings => {\n  return groupBy(mapListings, l => {\n    const g = l.attributes.geolocation;\n    return `${g.lat}-${g.lng}`;\n  });\n};\n\n/**\n * Listings (in location based object literal) is mapped to array\n * @param {Object} mapListings - listings to be grouped on map\n * @return {Array} - An array where items are arrays of listings\n *   (They are arrays containing all the listings in that location)\n */\nexport const reducedToArray = mapListings => {\n  return reduce(mapListings, (acc, listing) => acc.concat([listing]), []);\n};\n"]},"metadata":{},"sourceType":"module"}