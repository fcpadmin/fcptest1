{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/RangeSlider/RangeSlider.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { withDimensions } from '../../util/contextHelpers';\nimport Handle from './Handle';\nimport Track from './Track';\nimport css from './RangeSlider.css';\n\nclass RangeSliderComponent extends Component {\n  constructor(props) {\n    super(props);\n    const min = props.min,\n          max = props.max,\n          handles = props.handles;\n    handles.forEach((h, index) => {\n      if (h < min || h > max || index < handles.length - 1 && h > handles[index + 1]) {\n        throw new Error('RangeSlider error: handles need to be given in ascending order and they need to be within min and max values');\n      }\n    });\n    this.state = {\n      activeHandle: 0\n    };\n    this.toPosition = this.toPosition.bind(this);\n    this.toValue = this.toValue.bind(this);\n    this.changeActive = this.changeActive.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  toPosition(value) {\n    const _this$props = this.props,\n          dimensions = _this$props.dimensions,\n          min = _this$props.min,\n          max = _this$props.max;\n    const width = dimensions.width;\n    const valueOffset = value - min;\n    const scale = max - min;\n    return Math.round(valueOffset / scale * width);\n  }\n\n  toValue(position) {\n    const _this$props2 = this.props,\n          dimensions = _this$props2.dimensions,\n          min = _this$props2.min,\n          max = _this$props2.max,\n          step = _this$props2.step;\n    const width = dimensions.width;\n    const scale = max - min;\n    const value = Math.round(position / width * scale) + min;\n    return Math.ceil(value / step) * step;\n  }\n\n  changeActive(index) {\n    this.setState({\n      activeHandle: index\n    });\n  }\n\n  onChange(position, handleIndex) {\n    this.props.onChange(Object.assign([...this.props.handles], {\n      [handleIndex]: position\n    }));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          handles = _this$props3.handles,\n          min = _this$props3.min,\n          max = _this$props3.max;\n    return React.createElement(Track, {\n      handles: handles,\n      valueToPosition: this.toPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, handles.map((h, index) => {\n      const classes = classNames({\n        [css.activeHandle]: this.state.activeHandle === index\n      });\n      return React.createElement(Handle, {\n        key: index,\n        className: classes,\n        value: h,\n        min: index === 0 ? min : handles[index - 1],\n        max: index === handles.length - 1 ? max : handles[index + 1],\n        valueToPosition: this.toPosition,\n        positionToValue: this.toValue,\n        changeActive: () => this.changeActive(index),\n        onChange: value => this.onChange(value, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nRangeSliderComponent.defaultProps = {\n  min: 0,\n  max: 10000000,\n  step: 1\n};\nRangeSliderComponent.propTypes = {\n  handles: arrayOf(number),\n  min: number,\n  max: number,\n  step: number,\n  dimensions: shape({\n    height: number.isRequired,\n    width: number.isRequired\n  }).isRequired\n};\nconst RangeSliderComponentWithDimensions = withDimensions(RangeSliderComponent);\n\nconst RangeSlider = props => {\n  const rootClassName = props.rootClassName,\n        className = props.className,\n        rest = _objectWithoutProperties(props, [\"rootClassName\", \"className\"]);\n\n  const classes = classNames(rootClassName || css.root, className);\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(RangeSliderComponentWithDimensions, Object.assign({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })));\n};\n\nRangeSlider.defaultProps = {\n  rootClassName: null,\n  className: null\n};\nRangeSlider.propTypes = {\n  rootClassName: string,\n  className: string\n};\nexport default RangeSlider;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/RangeSlider/RangeSlider.js"],"names":["React","Component","arrayOf","number","shape","string","classNames","withDimensions","Handle","Track","css","RangeSliderComponent","constructor","props","min","max","handles","forEach","h","index","length","Error","state","activeHandle","toPosition","bind","toValue","changeActive","onChange","value","dimensions","width","valueOffset","scale","Math","round","position","step","ceil","setState","handleIndex","Object","assign","render","map","classes","defaultProps","propTypes","height","isRequired","RangeSliderComponentWithDimensions","RangeSlider","rootClassName","className","rest","root"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { arrayOf, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { withDimensions } from '../../util/contextHelpers';\n\nimport Handle from './Handle';\nimport Track from './Track';\nimport css from './RangeSlider.css';\n\nclass RangeSliderComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    const { min, max, handles } = props;\n    handles.forEach((h, index) => {\n      if (h < min || h > max || (index < handles.length - 1 && h > handles[index + 1])) {\n        throw new Error(\n          'RangeSlider error: handles need to be given in ascending order and they need to be within min and max values'\n        );\n      }\n    });\n\n    this.state = { activeHandle: 0 };\n\n    this.toPosition = this.toPosition.bind(this);\n    this.toValue = this.toValue.bind(this);\n    this.changeActive = this.changeActive.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  toPosition(value) {\n    const { dimensions, min, max } = this.props;\n    const width = dimensions.width;\n    const valueOffset = value - min;\n    const scale = max - min;\n    return Math.round((valueOffset / scale) * width);\n  }\n\n  toValue(position) {\n    const { dimensions, min, max, step } = this.props;\n    const width = dimensions.width;\n    const scale = max - min;\n    const value = Math.round((position / width) * scale) + min;\n    return Math.ceil(value / step) * step;\n  }\n\n  changeActive(index) {\n    this.setState({ activeHandle: index });\n  }\n\n  onChange(position, handleIndex) {\n    this.props.onChange(Object.assign([...this.props.handles], { [handleIndex]: position }));\n  }\n\n  render() {\n    const { handles, min, max } = this.props;\n\n    return (\n      <Track handles={handles} valueToPosition={this.toPosition}>\n        {handles.map((h, index) => {\n          const classes = classNames({ [css.activeHandle]: this.state.activeHandle === index });\n          return (\n            <Handle\n              key={index}\n              className={classes}\n              value={h}\n              min={index === 0 ? min : handles[index - 1]}\n              max={index === handles.length - 1 ? max : handles[index + 1]}\n              valueToPosition={this.toPosition}\n              positionToValue={this.toValue}\n              changeActive={() => this.changeActive(index)}\n              onChange={value => this.onChange(value, index)}\n            />\n          );\n        })}\n      </Track>\n    );\n  }\n}\n\nRangeSliderComponent.defaultProps = {\n  min: 0,\n  max: 10000000,\n  step: 1,\n};\n\nRangeSliderComponent.propTypes = {\n  handles: arrayOf(number),\n  min: number,\n  max: number,\n  step: number,\n  dimensions: shape({\n    height: number.isRequired,\n    width: number.isRequired,\n  }).isRequired,\n};\n\nconst RangeSliderComponentWithDimensions = withDimensions(RangeSliderComponent);\n\nconst RangeSlider = props => {\n  const { rootClassName, className, ...rest } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  return (\n    <div className={classes}>\n      <RangeSliderComponentWithDimensions {...rest} />\n    </div>\n  );\n};\n\nRangeSlider.defaultProps = {\n  rootClassName: null,\n  className: null,\n};\n\nRangeSlider.propTypes = {\n  rootClassName: string,\n  className: string,\n};\n\nexport default RangeSlider;\n"]},"metadata":{},"sourceType":"module"}