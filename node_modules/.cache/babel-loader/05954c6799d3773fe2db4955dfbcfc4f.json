{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { storableError } from '../../util/errors'; // ================ Action types ================ //\n\nexport const RECOVERY_REQUEST = 'app/PasswordRecoveryPage/RECOVERY_REQUEST';\nexport const RECOVERY_SUCCESS = 'app/PasswordRecoveryPage/RECOVERY_SUCCESS';\nexport const RECOVERY_ERROR = 'app/PasswordRecoveryPage/RECOVERY_ERROR';\nexport const RETYPE_EMAIL = 'app/PasswordRecoveryPage/RETYPE_EMAIL';\nexport const CLEAR_RECOVERY_ERROR = 'app/PasswordRecoveryPage/CLEAR_RECOVERY_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  initialEmail: null,\n  submittedEmail: null,\n  recoveryError: null,\n  recoveryInProgress: false,\n  passwordRequested: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case RECOVERY_REQUEST:\n      return _objectSpread({}, state, {\n        submittedEmail: null,\n        recoveryInProgress: true,\n        recoveryError: null\n      });\n\n    case RECOVERY_SUCCESS:\n      return _objectSpread({}, state, {\n        submittedEmail: payload.email,\n        initialEmail: payload.email,\n        recoveryInProgress: false,\n        passwordRequested: true\n      });\n\n    case RECOVERY_ERROR:\n      return _objectSpread({}, state, {\n        recoveryInProgress: false,\n        recoveryError: payload.error,\n        initialEmail: payload.email\n      });\n\n    case RETYPE_EMAIL:\n      return _objectSpread({}, state, {\n        initialEmail: state.submittedEmail,\n        submittedEmail: null,\n        passwordRequested: false\n      });\n\n    case CLEAR_RECOVERY_ERROR:\n      return _objectSpread({}, state, {\n        recoveryError: null\n      });\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const passwordRecoveryRequest = () => ({\n  type: RECOVERY_REQUEST\n});\nexport const passwordRecoverySuccess = email => ({\n  type: RECOVERY_SUCCESS,\n  payload: {\n    email\n  }\n});\nexport const passwordRecoveryError = (error, email) => ({\n  type: RECOVERY_ERROR,\n  payload: {\n    error,\n    email\n  },\n  error: true\n});\nexport const retypePasswordRecoveryEmail = () => ({\n  type: RETYPE_EMAIL\n});\nexport const clearPasswordRecoveryError = () => ({\n  type: CLEAR_RECOVERY_ERROR\n}); // ================ Thunks ================ //\n\nexport const recoverPassword = email => (dispatch, getState, sdk) => {\n  dispatch(passwordRecoveryRequest());\n  return sdk.passwordReset.request({\n    email\n  }).then(() => dispatch(passwordRecoverySuccess(email))).catch(e => dispatch(passwordRecoveryError(storableError(e), email)));\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/PasswordRecoveryPage/PasswordRecoveryPage.duck.js"],"names":["storableError","RECOVERY_REQUEST","RECOVERY_SUCCESS","RECOVERY_ERROR","RETYPE_EMAIL","CLEAR_RECOVERY_ERROR","initialState","initialEmail","submittedEmail","recoveryError","recoveryInProgress","passwordRequested","reducer","state","action","type","payload","email","error","passwordRecoveryRequest","passwordRecoverySuccess","passwordRecoveryError","retypePasswordRecoveryEmail","clearPasswordRecoveryError","recoverPassword","dispatch","getState","sdk","passwordReset","request","then","catch","e"],"mappings":"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","sourcesContent":["import { storableError } from '../../util/errors';\n\n// ================ Action types ================ //\n\nexport const RECOVERY_REQUEST = 'app/PasswordRecoveryPage/RECOVERY_REQUEST';\nexport const RECOVERY_SUCCESS = 'app/PasswordRecoveryPage/RECOVERY_SUCCESS';\nexport const RECOVERY_ERROR = 'app/PasswordRecoveryPage/RECOVERY_ERROR';\nexport const RETYPE_EMAIL = 'app/PasswordRecoveryPage/RETYPE_EMAIL';\nexport const CLEAR_RECOVERY_ERROR = 'app/PasswordRecoveryPage/CLEAR_RECOVERY_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  initialEmail: null,\n  submittedEmail: null,\n  recoveryError: null,\n  recoveryInProgress: false,\n  passwordRequested: false,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case RECOVERY_REQUEST:\n      return {\n        ...state,\n        submittedEmail: null,\n        recoveryInProgress: true,\n        recoveryError: null,\n      };\n    case RECOVERY_SUCCESS:\n      return {\n        ...state,\n        submittedEmail: payload.email,\n        initialEmail: payload.email,\n        recoveryInProgress: false,\n        passwordRequested: true,\n      };\n    case RECOVERY_ERROR:\n      return {\n        ...state,\n        recoveryInProgress: false,\n        recoveryError: payload.error,\n        initialEmail: payload.email,\n      };\n    case RETYPE_EMAIL:\n      return {\n        ...state,\n        initialEmail: state.submittedEmail,\n        submittedEmail: null,\n        passwordRequested: false,\n      };\n    case CLEAR_RECOVERY_ERROR:\n      return { ...state, recoveryError: null };\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const passwordRecoveryRequest = () => ({ type: RECOVERY_REQUEST });\nexport const passwordRecoverySuccess = email => ({ type: RECOVERY_SUCCESS, payload: { email } });\nexport const passwordRecoveryError = (error, email) => ({\n  type: RECOVERY_ERROR,\n  payload: { error, email },\n  error: true,\n});\nexport const retypePasswordRecoveryEmail = () => ({ type: RETYPE_EMAIL });\nexport const clearPasswordRecoveryError = () => ({ type: CLEAR_RECOVERY_ERROR });\n\n// ================ Thunks ================ //\n\nexport const recoverPassword = email => (dispatch, getState, sdk) => {\n  dispatch(passwordRecoveryRequest());\n\n  return sdk.passwordReset\n    .request({ email })\n    .then(() => dispatch(passwordRecoverySuccess(email)))\n    .catch(e => dispatch(passwordRecoveryError(storableError(e), email)));\n};\n"]},"metadata":{},"sourceType":"module"}