{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/EditListingWizard/EditListingWizard.js\";\nimport React, { Component } from 'react';\nimport { array, bool, func, number, object, oneOf, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { withViewport } from '../../util/contextHelpers';\nimport { LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPES } from '../../util/urlHelpers';\nimport { ensureListing, ensureCurrentUser } from '../../util/data';\nimport { PayoutDetailsForm } from '../../forms';\nimport { Modal, NamedRedirect, Tabs } from '../../components';\nimport EditListingWizardTab, { AVAILABILITY, DESCRIPTION, FEATURES, POLICY, LOCATION, PRICING, PHOTOS } from './EditListingWizardTab';\nimport css from './EditListingWizard.css'; // Show availability calendar only if environment variable availabilityEnabled is true\n\nconst availabilityMaybe = config.enableAvailability ? [AVAILABILITY] : []; // TODO: PHOTOS panel needs to be the last one since it currently contains PayoutDetailsForm modal\n// All the other panels can be reordered.\n\nexport const TABS = [DESCRIPTION, FEATURES, POLICY, LOCATION, PRICING, ...availabilityMaybe, PHOTOS]; // Tabs are horizontal in small screens\n\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\n\nconst tabLabel = (intl, tab) => {\n  let key = null;\n\n  if (tab === DESCRIPTION) {\n    key = 'EditListingWizard.tabLabelDescription';\n  } else if (tab === FEATURES) {\n    key = 'EditListingWizard.tabLabelFeatures';\n  } else if (tab === POLICY) {\n    key = 'EditListingWizard.tabLabelPolicy';\n  } else if (tab === LOCATION) {\n    key = 'EditListingWizard.tabLabelLocation';\n  } else if (tab === PRICING) {\n    key = 'EditListingWizard.tabLabelPricing';\n  } else if (tab === AVAILABILITY) {\n    key = 'EditListingWizard.tabLabelAvailability';\n  } else if (tab === PHOTOS) {\n    key = 'EditListingWizard.tabLabelPhotos';\n  }\n\n  return intl.formatMessage({\n    id: key\n  });\n};\n/**\n * Check if a wizard tab is completed.\n *\n * @param tab wizard's tab\n * @param listing is contains some specific data if tab is completed\n *\n * @return true if tab / step is completed.\n */\n\n\nconst tabCompleted = (tab, listing) => {\n  const _listing$attributes = listing.attributes,\n        availabilityPlan = _listing$attributes.availabilityPlan,\n        description = _listing$attributes.description,\n        geolocation = _listing$attributes.geolocation,\n        price = _listing$attributes.price,\n        title = _listing$attributes.title,\n        publicData = _listing$attributes.publicData;\n  const images = listing.images;\n\n  switch (tab) {\n    case DESCRIPTION:\n      return !!(description && title);\n\n    case FEATURES:\n      return !!(publicData && publicData.amenities);\n\n    case POLICY:\n      return !!(publicData && typeof publicData.rules !== 'undefined');\n\n    case LOCATION:\n      return !!(geolocation && publicData && publicData.location && publicData.location.address);\n\n    case PRICING:\n      return !!price;\n\n    case AVAILABILITY:\n      return !!availabilityPlan;\n\n    case PHOTOS:\n      return images && images.length > 0;\n\n    default:\n      return false;\n  }\n};\n/**\n * Check which wizard tabs are active and which are not yet available. Tab is active if previous\n * tab is completed. In edit mode all tabs are active.\n *\n * @param isNew flag if a new listing is being created or an old one being edited\n * @param listing data to be checked\n *\n * @return object containing activity / editability of different tabs of this wizard\n */\n\n\nconst tabsActive = (isNew, listing) => {\n  return TABS.reduce((acc, tab) => {\n    const previousTabIndex = TABS.findIndex(t => t === tab) - 1;\n    const isActive = previousTabIndex >= 0 ? !isNew || tabCompleted(TABS[previousTabIndex], listing) : true;\n    return _objectSpread({}, acc, {\n      [tab]: isActive\n    });\n  }, {});\n};\n\nconst scrollToTab = (tabPrefix, tabId) => {\n  const el = document.querySelector(\"#\".concat(tabPrefix, \"_\").concat(tabId));\n\n  if (el) {\n    el.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth'\n    });\n  }\n}; // Create a new or edit listing through EditListingWizard\n\n\nclass EditListingWizard extends Component {\n  constructor(props) {\n    super(props); // Having this info in state would trigger unnecessary rerendering\n\n    this.hasScrolledToTab = false;\n    this.state = {\n      draftId: null,\n      showPayoutDetails: false\n    };\n    this.handleCreateFlowTabScrolling = this.handleCreateFlowTabScrolling.bind(this);\n    this.handlePublishListing = this.handlePublishListing.bind(this);\n    this.handlePayoutModalClose = this.handlePayoutModalClose.bind(this);\n    this.handlePayoutSubmit = this.handlePayoutSubmit.bind(this);\n  }\n\n  handleCreateFlowTabScrolling(shouldScroll) {\n    this.hasScrolledToTab = shouldScroll;\n  }\n\n  handlePublishListing(id) {\n    const _this$props = this.props,\n          onPublishListingDraft = _this$props.onPublishListingDraft,\n          currentUser = _this$props.currentUser;\n    const stripeConnected = currentUser && currentUser.stripeAccount && !!currentUser.stripeAccount.id;\n\n    if (stripeConnected) {\n      onPublishListingDraft(id);\n    } else {\n      this.setState({\n        draftId: id,\n        showPayoutDetails: true\n      });\n    }\n  }\n\n  handlePayoutModalClose() {\n    this.setState({\n      showPayoutDetails: false\n    });\n  }\n\n  handlePayoutSubmit(values) {\n    this.props.onPayoutDetailsSubmit(values).then(() => {\n      this.setState({\n        showPayoutDetails: false\n      });\n      this.props.onManageDisableScrolling('EditListingWizard.payoutModal', false);\n      this.props.onPublishListingDraft(this.state.draftId);\n    }).catch(() => {// do nothing\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          id = _this$props2.id,\n          className = _this$props2.className,\n          rootClassName = _this$props2.rootClassName,\n          params = _this$props2.params,\n          listing = _this$props2.listing,\n          viewport = _this$props2.viewport,\n          intl = _this$props2.intl,\n          errors = _this$props2.errors,\n          fetchInProgress = _this$props2.fetchInProgress,\n          onManageDisableScrolling = _this$props2.onManageDisableScrolling,\n          onPayoutDetailsFormChange = _this$props2.onPayoutDetailsFormChange,\n          rest = _objectWithoutProperties(_this$props2, [\"id\", \"className\", \"rootClassName\", \"params\", \"listing\", \"viewport\", \"intl\", \"errors\", \"fetchInProgress\", \"onManageDisableScrolling\", \"onPayoutDetailsFormChange\"]);\n\n    const selectedTab = params.tab;\n    const isNewListingFlow = [LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPE_DRAFT].includes(params.type);\n    const rootClasses = rootClassName || css.root;\n    const classes = classNames(rootClasses, className);\n    const currentListing = ensureListing(listing);\n    const tabsStatus = tabsActive(isNewListingFlow, currentListing); // If selectedTab is not active, redirect to the beginning of wizard\n\n    if (!tabsStatus[selectedTab]) {\n      const currentTabIndex = TABS.indexOf(selectedTab);\n      const nearestActiveTab = TABS.slice(0, currentTabIndex).reverse().find(t => tabsStatus[t]);\n      return React.createElement(NamedRedirect, {\n        name: \"EditListingPage\",\n        params: _objectSpread({}, params, {\n          tab: nearestActiveTab\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      });\n    }\n\n    const width = viewport.width;\n    const hasViewport = width > 0;\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasFontsLoaded = hasViewport && document.documentElement.classList.contains('fontsLoaded'); // Check if scrollToTab call is needed (tab is not visible on mobile)\n\n    if (hasVerticalTabLayout) {\n      this.hasScrolledToTab = true;\n    } else if (hasHorizontalTabLayout && !this.hasScrolledToTab && hasFontsLoaded) {\n      const tabPrefix = id;\n      scrollToTab(tabPrefix, selectedTab);\n      this.hasScrolledToTab = true;\n    }\n\n    const tabLink = tab => {\n      return {\n        name: 'EditListingPage',\n        params: _objectSpread({}, params, {\n          tab\n        })\n      };\n    };\n\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      rootClassName: css.tabsContainer,\n      navRootClassName: css.nav,\n      tabRootClassName: css.tab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, TABS.map(tab => {\n      return React.createElement(EditListingWizardTab, Object.assign({}, rest, {\n        key: tab,\n        tabId: \"\".concat(id, \"_\").concat(tab),\n        tabLabel: tabLabel(intl, tab),\n        tabLinkProps: tabLink(tab),\n        selected: selectedTab === tab,\n        disabled: isNewListingFlow && !tabsStatus[tab],\n        tab: tab,\n        intl: intl,\n        params: params,\n        listing: listing,\n        marketplaceTabs: TABS,\n        errors: errors,\n        handleCreateFlowTabScrolling: this.handleCreateFlowTabScrolling,\n        handlePublishListing: this.handlePublishListing,\n        fetchInProgress: fetchInProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }));\n    })), React.createElement(Modal, {\n      id: \"EditListingWizard.payoutModal\",\n      isOpen: this.state.showPayoutDetails,\n      onClose: this.handlePayoutModalClose,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.modalPayoutDetailsWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingPhotosPanel.payoutModalTitleOneMoreThing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(FormattedMessage, {\n      id: \"EditListingPhotosPanel.payoutModalTitlePayoutPreferences\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: css.modalMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingPhotosPanel.payoutModalInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    })), React.createElement(PayoutDetailsForm, {\n      className: css.payoutDetails,\n      inProgress: fetchInProgress,\n      createStripeAccountError: errors ? errors.createStripeAccountError : null,\n      currentUserId: ensureCurrentUser(this.props.currentUser).id,\n      onChange: onPayoutDetailsFormChange,\n      onSubmit: this.handlePayoutSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nEditListingWizard.defaultProps = {\n  className: null,\n  rootClassName: null,\n  listing: null\n};\nEditListingWizard.propTypes = {\n  id: string.isRequired,\n  className: string,\n  rootClassName: string,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: oneOf(TABS).isRequired\n  }).isRequired,\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: shape({\n    attributes: shape({\n      publicData: object,\n      description: string,\n      geolocation: object,\n      pricing: object,\n      title: string\n    }),\n    images: array\n  }),\n  errors: shape({\n    createListingDraftError: object,\n    updateListingError: object,\n    publishListingError: object,\n    showListingsError: object,\n    uploadImageError: object,\n    createStripeAccountError: object\n  }).isRequired,\n  fetchInProgress: bool.isRequired,\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default compose(withViewport, injectIntl)(EditListingWizard);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/EditListingWizard/EditListingWizard.js"],"names":["React","Component","array","bool","func","number","object","oneOf","shape","string","compose","FormattedMessage","injectIntl","intlShape","classNames","config","withViewport","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","LISTING_PAGE_PARAM_TYPES","ensureListing","ensureCurrentUser","PayoutDetailsForm","Modal","NamedRedirect","Tabs","EditListingWizardTab","AVAILABILITY","DESCRIPTION","FEATURES","POLICY","LOCATION","PRICING","PHOTOS","css","availabilityMaybe","enableAvailability","TABS","MAX_HORIZONTAL_NAV_SCREEN_WIDTH","tabLabel","intl","tab","key","formatMessage","id","tabCompleted","listing","attributes","availabilityPlan","description","geolocation","price","title","publicData","images","amenities","rules","location","address","length","tabsActive","isNew","reduce","acc","previousTabIndex","findIndex","t","isActive","scrollToTab","tabPrefix","tabId","el","document","querySelector","scrollIntoView","block","behavior","EditListingWizard","constructor","props","hasScrolledToTab","state","draftId","showPayoutDetails","handleCreateFlowTabScrolling","bind","handlePublishListing","handlePayoutModalClose","handlePayoutSubmit","shouldScroll","onPublishListingDraft","currentUser","stripeConnected","stripeAccount","setState","values","onPayoutDetailsSubmit","then","onManageDisableScrolling","catch","render","className","rootClassName","params","viewport","errors","fetchInProgress","onPayoutDetailsFormChange","rest","selectedTab","isNewListingFlow","includes","type","rootClasses","root","classes","currentListing","tabsStatus","currentTabIndex","indexOf","nearestActiveTab","slice","reverse","find","width","hasViewport","hasHorizontalTabLayout","hasVerticalTabLayout","hasFontsLoaded","documentElement","classList","contains","tabLink","name","tabsContainer","nav","map","modalPayoutDetailsWrapper","modalTitle","modalMessage","payoutDetails","createStripeAccountError","defaultProps","propTypes","isRequired","slug","pricing","createListingDraftError","updateListingError","publishListingError","showListingsError","uploadImageError","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { array, bool, func, number, object, oneOf, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { withViewport } from '../../util/contextHelpers';\nimport {\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\n  LISTING_PAGE_PARAM_TYPE_NEW,\n  LISTING_PAGE_PARAM_TYPES,\n} from '../../util/urlHelpers';\nimport { ensureListing, ensureCurrentUser } from '../../util/data';\nimport { PayoutDetailsForm } from '../../forms';\nimport { Modal, NamedRedirect, Tabs } from '../../components';\n\nimport EditListingWizardTab, {\n  AVAILABILITY,\n  DESCRIPTION,\n  FEATURES,\n  POLICY,\n  LOCATION,\n  PRICING,\n  PHOTOS,\n} from './EditListingWizardTab';\nimport css from './EditListingWizard.css';\n\n// Show availability calendar only if environment variable availabilityEnabled is true\nconst availabilityMaybe = config.enableAvailability ? [AVAILABILITY] : [];\n\n// TODO: PHOTOS panel needs to be the last one since it currently contains PayoutDetailsForm modal\n// All the other panels can be reordered.\nexport const TABS = [\n  DESCRIPTION,\n  FEATURES,\n  POLICY,\n  LOCATION,\n  PRICING,\n  ...availabilityMaybe,\n  PHOTOS,\n];\n\n// Tabs are horizontal in small screens\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\n\nconst tabLabel = (intl, tab) => {\n  let key = null;\n  if (tab === DESCRIPTION) {\n    key = 'EditListingWizard.tabLabelDescription';\n  } else if (tab === FEATURES) {\n    key = 'EditListingWizard.tabLabelFeatures';\n  } else if (tab === POLICY) {\n    key = 'EditListingWizard.tabLabelPolicy';\n  } else if (tab === LOCATION) {\n    key = 'EditListingWizard.tabLabelLocation';\n  } else if (tab === PRICING) {\n    key = 'EditListingWizard.tabLabelPricing';\n  } else if (tab === AVAILABILITY) {\n    key = 'EditListingWizard.tabLabelAvailability';\n  } else if (tab === PHOTOS) {\n    key = 'EditListingWizard.tabLabelPhotos';\n  }\n\n  return intl.formatMessage({ id: key });\n};\n\n/**\n * Check if a wizard tab is completed.\n *\n * @param tab wizard's tab\n * @param listing is contains some specific data if tab is completed\n *\n * @return true if tab / step is completed.\n */\nconst tabCompleted = (tab, listing) => {\n  const {\n    availabilityPlan,\n    description,\n    geolocation,\n    price,\n    title,\n    publicData,\n  } = listing.attributes;\n  const images = listing.images;\n\n  switch (tab) {\n    case DESCRIPTION:\n      return !!(description && title);\n    case FEATURES:\n      return !!(publicData && publicData.amenities);\n    case POLICY:\n      return !!(publicData && typeof publicData.rules !== 'undefined');\n    case LOCATION:\n      return !!(geolocation && publicData && publicData.location && publicData.location.address);\n    case PRICING:\n      return !!price;\n    case AVAILABILITY:\n      return !!availabilityPlan;\n    case PHOTOS:\n      return images && images.length > 0;\n    default:\n      return false;\n  }\n};\n\n/**\n * Check which wizard tabs are active and which are not yet available. Tab is active if previous\n * tab is completed. In edit mode all tabs are active.\n *\n * @param isNew flag if a new listing is being created or an old one being edited\n * @param listing data to be checked\n *\n * @return object containing activity / editability of different tabs of this wizard\n */\nconst tabsActive = (isNew, listing) => {\n  return TABS.reduce((acc, tab) => {\n    const previousTabIndex = TABS.findIndex(t => t === tab) - 1;\n    const isActive =\n      previousTabIndex >= 0 ? !isNew || tabCompleted(TABS[previousTabIndex], listing) : true;\n    return { ...acc, [tab]: isActive };\n  }, {});\n};\n\nconst scrollToTab = (tabPrefix, tabId) => {\n  const el = document.querySelector(`#${tabPrefix}_${tabId}`);\n  if (el) {\n    el.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n};\n\n// Create a new or edit listing through EditListingWizard\nclass EditListingWizard extends Component {\n  constructor(props) {\n    super(props);\n\n    // Having this info in state would trigger unnecessary rerendering\n    this.hasScrolledToTab = false;\n\n    this.state = {\n      draftId: null,\n      showPayoutDetails: false,\n    };\n    this.handleCreateFlowTabScrolling = this.handleCreateFlowTabScrolling.bind(this);\n    this.handlePublishListing = this.handlePublishListing.bind(this);\n    this.handlePayoutModalClose = this.handlePayoutModalClose.bind(this);\n    this.handlePayoutSubmit = this.handlePayoutSubmit.bind(this);\n  }\n\n  handleCreateFlowTabScrolling(shouldScroll) {\n    this.hasScrolledToTab = shouldScroll;\n  }\n\n  handlePublishListing(id) {\n    const { onPublishListingDraft, currentUser } = this.props;\n    const stripeConnected =\n      currentUser && currentUser.stripeAccount && !!currentUser.stripeAccount.id;\n    if (stripeConnected) {\n      onPublishListingDraft(id);\n    } else {\n      this.setState({\n        draftId: id,\n        showPayoutDetails: true,\n      });\n    }\n  }\n\n  handlePayoutModalClose() {\n    this.setState({ showPayoutDetails: false });\n  }\n\n  handlePayoutSubmit(values) {\n    this.props\n      .onPayoutDetailsSubmit(values)\n      .then(() => {\n        this.setState({ showPayoutDetails: false });\n        this.props.onManageDisableScrolling('EditListingWizard.payoutModal', false);\n        this.props.onPublishListingDraft(this.state.draftId);\n      })\n      .catch(() => {\n        // do nothing\n      });\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      rootClassName,\n      params,\n      listing,\n      viewport,\n      intl,\n      errors,\n      fetchInProgress,\n      onManageDisableScrolling,\n      onPayoutDetailsFormChange,\n      ...rest\n    } = this.props;\n\n    const selectedTab = params.tab;\n    const isNewListingFlow = [LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPE_DRAFT].includes(\n      params.type\n    );\n    const rootClasses = rootClassName || css.root;\n    const classes = classNames(rootClasses, className);\n    const currentListing = ensureListing(listing);\n    const tabsStatus = tabsActive(isNewListingFlow, currentListing);\n\n    // If selectedTab is not active, redirect to the beginning of wizard\n    if (!tabsStatus[selectedTab]) {\n      const currentTabIndex = TABS.indexOf(selectedTab);\n      const nearestActiveTab = TABS.slice(0, currentTabIndex)\n        .reverse()\n        .find(t => tabsStatus[t]);\n\n      return <NamedRedirect name=\"EditListingPage\" params={{ ...params, tab: nearestActiveTab }} />;\n    }\n\n    const { width } = viewport;\n    const hasViewport = width > 0;\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasFontsLoaded =\n      hasViewport && document.documentElement.classList.contains('fontsLoaded');\n\n    // Check if scrollToTab call is needed (tab is not visible on mobile)\n    if (hasVerticalTabLayout) {\n      this.hasScrolledToTab = true;\n    } else if (hasHorizontalTabLayout && !this.hasScrolledToTab && hasFontsLoaded) {\n      const tabPrefix = id;\n      scrollToTab(tabPrefix, selectedTab);\n      this.hasScrolledToTab = true;\n    }\n\n    const tabLink = tab => {\n      return { name: 'EditListingPage', params: { ...params, tab } };\n    };\n\n    return (\n      <div className={classes}>\n        <Tabs\n          rootClassName={css.tabsContainer}\n          navRootClassName={css.nav}\n          tabRootClassName={css.tab}\n        >\n          {TABS.map(tab => {\n            return (\n              <EditListingWizardTab\n                {...rest}\n                key={tab}\n                tabId={`${id}_${tab}`}\n                tabLabel={tabLabel(intl, tab)}\n                tabLinkProps={tabLink(tab)}\n                selected={selectedTab === tab}\n                disabled={isNewListingFlow && !tabsStatus[tab]}\n                tab={tab}\n                intl={intl}\n                params={params}\n                listing={listing}\n                marketplaceTabs={TABS}\n                errors={errors}\n                handleCreateFlowTabScrolling={this.handleCreateFlowTabScrolling}\n                handlePublishListing={this.handlePublishListing}\n                fetchInProgress={fetchInProgress}\n              />\n            );\n          })}\n        </Tabs>\n        <Modal\n          id=\"EditListingWizard.payoutModal\"\n          isOpen={this.state.showPayoutDetails}\n          onClose={this.handlePayoutModalClose}\n          onManageDisableScrolling={onManageDisableScrolling}\n        >\n          <div className={css.modalPayoutDetailsWrapper}>\n            <h1 className={css.modalTitle}>\n              <FormattedMessage id=\"EditListingPhotosPanel.payoutModalTitleOneMoreThing\" />\n              <br />\n              <FormattedMessage id=\"EditListingPhotosPanel.payoutModalTitlePayoutPreferences\" />\n            </h1>\n            <p className={css.modalMessage}>\n              <FormattedMessage id=\"EditListingPhotosPanel.payoutModalInfo\" />\n            </p>\n            <PayoutDetailsForm\n              className={css.payoutDetails}\n              inProgress={fetchInProgress}\n              createStripeAccountError={errors ? errors.createStripeAccountError : null}\n              currentUserId={ensureCurrentUser(this.props.currentUser).id}\n              onChange={onPayoutDetailsFormChange}\n              onSubmit={this.handlePayoutSubmit}\n            />\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nEditListingWizard.defaultProps = {\n  className: null,\n  rootClassName: null,\n  listing: null,\n};\n\nEditListingWizard.propTypes = {\n  id: string.isRequired,\n  className: string,\n  rootClassName: string,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: oneOf(TABS).isRequired,\n  }).isRequired,\n\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: shape({\n    attributes: shape({\n      publicData: object,\n      description: string,\n      geolocation: object,\n      pricing: object,\n      title: string,\n    }),\n    images: array,\n  }),\n\n  errors: shape({\n    createListingDraftError: object,\n    updateListingError: object,\n    publishListingError: object,\n    showListingsError: object,\n    uploadImageError: object,\n    createStripeAccountError: object,\n  }).isRequired,\n  fetchInProgress: bool.isRequired,\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nexport default compose(\n  withViewport,\n  injectIntl\n)(EditListingWizard);\n"]},"metadata":{},"sourceType":"module"}