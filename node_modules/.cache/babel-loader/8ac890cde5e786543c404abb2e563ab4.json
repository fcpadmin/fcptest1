{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/PropertyGroup/PropertyGroup.js\";\n\n/*\n * Renders a set of options with selected and non-selected values.\n *\n * The corresponding component when selecting the values is\n * FieldCheckboxGroup.\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport includes from 'lodash/includes';\nimport css from './PropertyGroup.css';\n\nconst checkSelected = (options, selectedOptions) => {\n  return options.map(option => ({\n    key: option.key,\n    label: option.label,\n    isSelected: includes(selectedOptions, option.key)\n  }));\n};\n\nconst IconCheck = props => {\n  const isVisible = props.isVisible;\n  const classes = isVisible ? css.checkIcon : classNames(css.checkIcon, css.hidden);\n  return React.createElement(\"svg\", {\n    width: \"9\",\n    height: \"9\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    className: css.marketplaceFill,\n    d: \"M2.636621 7.7824771L.3573694 5.6447948c-.4764924-.4739011-.4764924-1.2418639 0-1.7181952.4777142-.473901 1.251098-.473901 1.7288122 0l1.260291 1.1254783L6.1721653.505847C6.565577-.0373166 7.326743-.1636902 7.8777637.227582c.5473554.3912721.6731983 1.150729.2797866 1.6951076L4.4924979 7.631801c-.2199195.306213-.5803433.5067096-.9920816.5067096-.3225487 0-.6328797-.1263736-.8637952-.3560334z\",\n    fillRule: \"evenodd\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }));\n};\n\nconst Item = props => {\n  const label = props.label,\n        isSelected = props.isSelected;\n  const labelClass = isSelected ? css.selectedLabel : css.notSelectedLabel;\n  return React.createElement(\"li\", {\n    className: css.item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: css.iconWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(IconCheck, {\n    isVisible: isSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: css.labelWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: labelClass,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, label)));\n};\n\nconst PropertyGroup = props => {\n  const rootClassName = props.rootClassName,\n        className = props.className,\n        id = props.id,\n        options = props.options,\n        selectedOptions = props.selectedOptions,\n        twoColumns = props.twoColumns;\n  const classes = classNames(rootClassName || css.root, className);\n  const listClasses = twoColumns ? classNames(classes, css.twoColumns) : classes;\n  const checked = checkSelected(options, selectedOptions);\n  return React.createElement(\"ul\", {\n    className: listClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, checked.map(option => React.createElement(Item, {\n    key: \"\".concat(id, \".\").concat(option.key),\n    label: option.label,\n    isSelected: option.isSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })));\n};\n\nPropertyGroup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  selectedOptions: [],\n  twoColumns: false\n};\nconst arrayOf = PropTypes.arrayOf,\n      bool = PropTypes.bool,\n      node = PropTypes.node,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nPropertyGroup.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: node.isRequired\n  })),\n  selectedOptions: arrayOf(string),\n  twoColumns: bool\n};\nexport default PropertyGroup;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/PropertyGroup/PropertyGroup.js"],"names":["React","PropTypes","classNames","includes","css","checkSelected","options","selectedOptions","map","option","key","label","isSelected","IconCheck","props","isVisible","classes","checkIcon","hidden","marketplaceFill","Item","labelClass","selectedLabel","notSelectedLabel","item","iconWrapper","labelWrapper","PropertyGroup","rootClassName","className","id","twoColumns","root","listClasses","checked","defaultProps","arrayOf","bool","node","shape","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["/*\n * Renders a set of options with selected and non-selected values.\n *\n * The corresponding component when selecting the values is\n * FieldCheckboxGroup.\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport includes from 'lodash/includes';\n\nimport css from './PropertyGroup.css';\n\nconst checkSelected = (options, selectedOptions) => {\n  return options.map(option => ({\n    key: option.key,\n    label: option.label,\n    isSelected: includes(selectedOptions, option.key),\n  }));\n};\n\nconst IconCheck = props => {\n  const isVisible = props.isVisible;\n  const classes = isVisible ? css.checkIcon : classNames(css.checkIcon, css.hidden);\n\n  return (\n    <svg width=\"9\" height=\"9\" xmlns=\"http://www.w3.org/2000/svg\" className={classes}>\n      <path\n        className={css.marketplaceFill}\n        d=\"M2.636621 7.7824771L.3573694 5.6447948c-.4764924-.4739011-.4764924-1.2418639 0-1.7181952.4777142-.473901 1.251098-.473901 1.7288122 0l1.260291 1.1254783L6.1721653.505847C6.565577-.0373166 7.326743-.1636902 7.8777637.227582c.5473554.3912721.6731983 1.150729.2797866 1.6951076L4.4924979 7.631801c-.2199195.306213-.5803433.5067096-.9920816.5067096-.3225487 0-.6328797-.1263736-.8637952-.3560334z\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nconst Item = props => {\n  const { label, isSelected } = props;\n  const labelClass = isSelected ? css.selectedLabel : css.notSelectedLabel;\n  return (\n    <li className={css.item}>\n      <span className={css.iconWrapper}>\n        <IconCheck isVisible={isSelected} />\n      </span>\n      <div className={css.labelWrapper}>\n        <span className={labelClass}>{label}</span>\n      </div>\n    </li>\n  );\n};\n\nconst PropertyGroup = props => {\n  const { rootClassName, className, id, options, selectedOptions, twoColumns } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const listClasses = twoColumns ? classNames(classes, css.twoColumns) : classes;\n\n  const checked = checkSelected(options, selectedOptions);\n\n  return (\n    <ul className={listClasses}>\n      {checked.map(option => (\n        <Item key={`${id}.${option.key}`} label={option.label} isSelected={option.isSelected} />\n      ))}\n    </ul>\n  );\n};\n\nPropertyGroup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  selectedOptions: [],\n  twoColumns: false,\n};\n\nconst { arrayOf, bool, node, shape, string } = PropTypes;\n\nPropertyGroup.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  options: arrayOf(\n    shape({\n      key: string.isRequired,\n      label: node.isRequired,\n    })\n  ),\n  selectedOptions: arrayOf(string),\n  twoColumns: bool,\n};\n\nexport default PropertyGroup;\n"]},"metadata":{},"sourceType":"module"}