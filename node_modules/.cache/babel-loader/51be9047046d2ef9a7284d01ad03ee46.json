{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ResponsiveImage/ResponsiveImage.example.js\";\nimport React from 'react';\nimport ResponsiveImage from './ResponsiveImage';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport css from './ResponsiveImage.example.css';\nconst UUID = sdkTypes.UUID;\n\nconst ResponsiveImageWrapper = props => {\n  return React.createElement(\"div\", {\n    className: css.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(ResponsiveImage, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  })));\n};\n\nconst ResponsiveImageWrapperWithAspectRatio = props => {\n  return React.createElement(\"div\", {\n    className: css.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.aspectWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(ResponsiveImage, Object.assign({}, props, {\n    rootClassName: css.rootForImageWithAspectRatio,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }))));\n};\n/* Image without aspect ratio wrapper */\n\n\nexport const Image2X = {\n  component: ResponsiveImageWrapper,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133'\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266'\n          }\n        }\n      }\n    },\n    variants: ['crop', 'crop2x']\n  }\n};\n/* Image with aspect ratio wrapper */\n\nexport const Image2XAspect = {\n  component: ResponsiveImageWrapperWithAspectRatio,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133'\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266'\n          }\n        }\n      }\n    },\n    variants: ['crop', 'crop2x']\n  }\n};\n/* Image with aspect ratio wrapper and wrong aspect */\n\nexport const Image2XWrongAspect = {\n  component: ResponsiveImageWrapperWithAspectRatio,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133'\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266'\n          }\n        }\n      }\n    },\n    variants: ['crop', 'crop2x']\n  }\n};\nexport const Image2XWrongAspectNoWrapper = {\n  component: ResponsiveImage,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133'\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266'\n          }\n        }\n      }\n    },\n    variants: ['crop', 'crop2x']\n  }\n};\n/* No image without aspect ratio wrapper */\n\nexport const ImageEmpty = {\n  component: ResponsiveImageWrapper,\n  props: {\n    alt: 'img',\n    image: null,\n    variants: ['crop', 'crop2x']\n  }\n};\n/* No image with aspect ratio wrapper */\n\nexport const ImageEmptyWithAspect = {\n  component: ResponsiveImageWrapperWithAspectRatio,\n  props: {\n    alt: 'img',\n    image: null,\n    variants: ['crop', 'crop2x']\n  }\n};\n/* Image without aspect ratio wrapper usign sizes */\n\nconst ResponsiveImageWrapperForSizes = props => React.createElement(\"div\", {\n  className: css.rootForSizes,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 164\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: css.aspectWrapper,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 165\n  },\n  __self: this\n}, React.createElement(ResponsiveImage, Object.assign({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 166\n  },\n  __self: this\n}))));\n\nexport const ImageWithSizes = {\n  component: ResponsiveImageWrapperForSizes,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133'\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266'\n          }\n        }\n      }\n    },\n    variants: ['crop', 'crop2x'],\n    sizes: '(max-width: 600px) 200px, 400px'\n  }\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ResponsiveImage/ResponsiveImage.example.js"],"names":["React","ResponsiveImage","types","sdkTypes","css","UUID","ResponsiveImageWrapper","props","root","ResponsiveImageWrapperWithAspectRatio","aspectWrapper","rootForImageWithAspectRatio","Image2X","component","alt","image","id","type","attributes","variants","crop","name","width","height","url","crop2x","Image2XAspect","Image2XWrongAspect","Image2XWrongAspectNoWrapper","ImageEmpty","ImageEmptyWithAspect","ResponsiveImageWrapperForSizes","rootForSizes","ImageWithSizes","sizes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ResponsiveImage from './ResponsiveImage';\nimport { types as sdkTypes } from '../../util/sdkLoader';\n\nimport css from './ResponsiveImage.example.css';\n\nconst { UUID } = sdkTypes;\n\nconst ResponsiveImageWrapper = props => {\n  return (\n    <div className={css.root}>\n      <ResponsiveImage {...props} />\n    </div>\n  );\n};\n\nconst ResponsiveImageWrapperWithAspectRatio = props => {\n  return (\n    <div className={css.root}>\n      <div className={css.aspectWrapper}>\n        <ResponsiveImage {...props} rootClassName={css.rootForImageWithAspectRatio} />\n      </div>\n    </div>\n  );\n};\n\n/* Image without aspect ratio wrapper */\nexport const Image2X = {\n  component: ResponsiveImageWrapper,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133',\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266',\n          },\n        },\n      },\n    },\n    variants: ['crop', 'crop2x'],\n  },\n};\n\n/* Image with aspect ratio wrapper */\nexport const Image2XAspect = {\n  component: ResponsiveImageWrapperWithAspectRatio,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133',\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266',\n          },\n        },\n      },\n    },\n    variants: ['crop', 'crop2x'],\n  },\n};\n\n/* Image with aspect ratio wrapper and wrong aspect */\nexport const Image2XWrongAspect = {\n  component: ResponsiveImageWrapperWithAspectRatio,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133',\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266',\n          },\n        },\n      },\n    },\n    variants: ['crop', 'crop2x'],\n  },\n};\n\nexport const Image2XWrongAspectNoWrapper = {\n  component: ResponsiveImage,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133',\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266',\n          },\n        },\n      },\n    },\n    variants: ['crop', 'crop2x'],\n  },\n};\n\n/* No image without aspect ratio wrapper */\nexport const ImageEmpty = {\n  component: ResponsiveImageWrapper,\n  props: {\n    alt: 'img',\n    image: null,\n    variants: ['crop', 'crop2x'],\n  },\n};\n\n/* No image with aspect ratio wrapper */\nexport const ImageEmptyWithAspect = {\n  component: ResponsiveImageWrapperWithAspectRatio,\n  props: {\n    alt: 'img',\n    image: null,\n    variants: ['crop', 'crop2x'],\n  },\n};\n\n/* Image without aspect ratio wrapper usign sizes */\nconst ResponsiveImageWrapperForSizes = props => (\n  <div className={css.rootForSizes}>\n    <div className={css.aspectWrapper}>\n      <ResponsiveImage {...props} />\n    </div>\n  </div>\n);\n\nexport const ImageWithSizes = {\n  component: ResponsiveImageWrapperForSizes,\n  props: {\n    alt: 'img',\n    image: {\n      id: new UUID('empty'),\n      type: 'image',\n      attributes: {\n        variants: {\n          crop: {\n            name: 'crop',\n            width: 200,\n            height: 133,\n            url: 'https://via.placeholder.com/200x133',\n          },\n          crop2x: {\n            name: 'crop2x',\n            width: 400,\n            height: 266,\n            url: 'https://via.placeholder.com/400x266',\n          },\n        },\n      },\n    },\n    variants: ['crop', 'crop2x'],\n    sizes: '(max-width: 600px) 200px, 400px',\n  },\n};\n"]},"metadata":{},"sourceType":"module"}