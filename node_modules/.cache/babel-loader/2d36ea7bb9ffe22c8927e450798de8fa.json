{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCurrencyInput/FieldCurrencyInput.js\";\n\n/**\n * CurrencyInput renders an input field that format it's value according to currency formatting rules\n * onFocus: renders given value in unformatted manner: \"9999,99\"\n * onBlur: formats the given input: \"9 999,99 â‚¬\"\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl } from 'react-intl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport Decimal from 'decimal.js';\nimport { ValidationError } from '../../components';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { isSafeNumber, unitDivisor, convertUnitToSubUnit, convertMoneyToNumber, ensureDotSeparator, ensureSeparator, truncateToSubUnitPrecision } from '../../util/currency';\nimport { propTypes } from '../../util/types';\nimport * as log from '../../util/log';\nimport css from './FieldCurrencyInput.css';\nconst Money = sdkTypes.Money;\n\nconst allowedInputProps = allProps => {\n  // Strip away props that are not passed to input element (or are overwritten)\n  // eslint-disable-next-line no-unused-vars\n  const currencyConfig = allProps.currencyConfig,\n        defaultValue = allProps.defaultValue,\n        intl = allProps.intl,\n        input = allProps.input,\n        meta = allProps.meta,\n        inputProps = _objectWithoutProperties(allProps, [\"currencyConfig\", \"defaultValue\", \"intl\", \"input\", \"meta\"]);\n\n  return inputProps;\n}; // Convert unformatted value (e.g. 10,00) to Money (or null)\n\n\nconst getPrice = (unformattedValue, currencyConfig) => {\n  const isEmptyString = unformattedValue === '';\n\n  try {\n    return isEmptyString ? null : new Money(convertUnitToSubUnit(unformattedValue, unitDivisor(currencyConfig.currency)), currencyConfig.currency);\n  } catch (e) {\n    return null;\n  }\n};\n\nclass CurrencyInputComponent extends Component {\n  constructor(props) {\n    super(props);\n    const currencyConfig = props.currencyConfig,\n          defaultValue = props.defaultValue,\n          input = props.input,\n          intl = props.intl;\n    const initialValueIsMoney = input.value instanceof Money;\n\n    if (initialValueIsMoney && input.value.currency !== currencyConfig.currency) {\n      const e = new Error('Value currency different from marketplace currency');\n      log.error(e, 'currency-input-invalid-currency', {\n        currencyConfig,\n        inputValue: input.value\n      });\n      throw e;\n    }\n\n    const initialValue = initialValueIsMoney ? convertMoneyToNumber(input.value) : defaultValue;\n    const hasInitialValue = typeof initialValue === 'number' && !isNaN(initialValue); // We need to handle number format - some locales use dots and some commas as decimal separator\n    // TODO Figure out if this could be digged from React-Intl directly somehow\n\n    const testSubUnitFormat = intl.formatNumber('1.1', currencyConfig);\n    const usesComma = testSubUnitFormat.indexOf(',') >= 0;\n\n    try {\n      // whatever is passed as a default value, will be converted to currency string\n      // Unformatted value is digits + localized sub unit separator (\"9,99\")\n      const unformattedValue = hasInitialValue ? truncateToSubUnitPrecision(ensureSeparator(initialValue.toString(), usesComma), unitDivisor(currencyConfig.currency), usesComma) : ''; // Formatted value fully localized currency string (\"$1,000.99\")\n\n      const formattedValue = hasInitialValue ? intl.formatNumber(ensureDotSeparator(unformattedValue), currencyConfig) : '';\n      this.state = {\n        formattedValue,\n        unformattedValue,\n        value: formattedValue,\n        usesComma\n      };\n    } catch (e) {\n      log.error(e, 'currency-input-init-failed', {\n        currencyConfig,\n        defaultValue,\n        initialValue\n      });\n      throw e;\n    }\n\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onInputBlur = this.onInputBlur.bind(this);\n    this.onInputFocus = this.onInputFocus.bind(this);\n    this.updateValues = this.updateValues.bind(this);\n  }\n\n  onInputChange(event) {\n    event.preventDefault();\n    event.stopPropagation(); // Update value strings on state\n\n    const _this$updateValues = this.updateValues(event),\n          unformattedValue = _this$updateValues.unformattedValue; // Notify parent component about current price change\n\n\n    const price = getPrice(ensureDotSeparator(unformattedValue), this.props.currencyConfig);\n    this.props.input.onChange(price);\n  }\n\n  onInputBlur(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const _this$props = this.props,\n          currencyConfig = _this$props.currencyConfig,\n          onBlur = _this$props.input.onBlur;\n    this.setState(prevState => {\n      if (onBlur) {\n        // If parent component has provided onBlur function, call it with current price.\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\n        onBlur(price);\n      }\n\n      return {\n        value: prevState.formattedValue\n      };\n    });\n  }\n\n  onInputFocus(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const _this$props2 = this.props,\n          currencyConfig = _this$props2.currencyConfig,\n          onFocus = _this$props2.input.onFocus;\n    this.setState(prevState => {\n      if (onFocus) {\n        // If parent component has provided onFocus function, call it with current price.\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\n        onFocus(price);\n      }\n\n      return {\n        value: prevState.unformattedValue\n      };\n    });\n  }\n\n  updateValues(event) {\n    try {\n      const _this$props3 = this.props,\n            currencyConfig = _this$props3.currencyConfig,\n            intl = _this$props3.intl;\n      const targetValue = event.target.value.trim();\n      const isEmptyString = targetValue === '';\n      const valueOrZero = isEmptyString ? '0' : targetValue;\n      const targetDecimalValue = isEmptyString ? null : new Decimal(ensureDotSeparator(targetValue));\n      const isSafeValue = isEmptyString || targetDecimalValue.isPositive() && isSafeNumber(targetDecimalValue);\n\n      if (!isSafeValue) {\n        throw new Error(\"Unsafe money value: \".concat(targetValue));\n      } // truncate decimals to subunit precision: 10000.999 => 10000.99\n\n\n      const truncatedValueString = truncateToSubUnitPrecision(valueOrZero, unitDivisor(currencyConfig.currency), this.state.usesComma);\n      const unformattedValue = !isEmptyString ? truncatedValueString : '';\n      const formattedValue = !isEmptyString ? intl.formatNumber(ensureDotSeparator(truncatedValueString), currencyConfig) : '';\n      this.setState({\n        formattedValue,\n        value: unformattedValue,\n        unformattedValue\n      });\n      return {\n        formattedValue,\n        value: unformattedValue,\n        unformattedValue\n      };\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e); // If an error occurs while filling input field, use previous values\n      // This ensures that string like '12.3r' doesn't end up to a state.\n\n      const _this$state = this.state,\n            formattedValue = _this$state.formattedValue,\n            unformattedValue = _this$state.unformattedValue,\n            value = _this$state.value;\n      return {\n        formattedValue,\n        unformattedValue,\n        value\n      };\n    }\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          className = _this$props4.className,\n          currencyConfig = _this$props4.currencyConfig,\n          defaultValue = _this$props4.defaultValue,\n          placeholder = _this$props4.placeholder,\n          intl = _this$props4.intl;\n    const placeholderText = placeholder || intl.formatNumber(defaultValue, currencyConfig);\n    return React.createElement(\"input\", Object.assign({\n      className: className\n    }, allowedInputProps(this.props), {\n      value: this.state.value,\n      onChange: this.onInputChange,\n      onBlur: this.onInputBlur,\n      onFocus: this.onInputFocus,\n      type: \"text\",\n      placeholder: placeholderText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }));\n  }\n\n}\n\nCurrencyInputComponent.defaultProps = {\n  className: null,\n  currencyConfig: null,\n  defaultValue: null,\n  input: null,\n  placeholder: null\n};\nconst func = PropTypes.func,\n      oneOfType = PropTypes.oneOfType,\n      number = PropTypes.number,\n      shape = PropTypes.shape,\n      string = PropTypes.string,\n      object = PropTypes.object;\nCurrencyInputComponent.propTypes = {\n  className: string,\n  currencyConfig: propTypes.currencyConfig.isRequired,\n  defaultValue: number,\n  intl: intlShape.isRequired,\n  input: shape({\n    value: oneOfType([string, propTypes.money]),\n    onBlur: func,\n    onChange: func.isRequired,\n    onFocus: func\n  }).isRequired,\n  placeholder: string\n};\nexport const CurrencyInput = injectIntl(CurrencyInputComponent);\n\nconst FieldCurrencyInputComponent = props => {\n  const rootClassName = props.rootClassName,\n        className = props.className,\n        id = props.id,\n        label = props.label,\n        input = props.input,\n        meta = props.meta,\n        rest = _objectWithoutProperties(props, [\"rootClassName\", \"className\", \"id\", \"label\", \"input\", \"meta\"]);\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const valid = meta.valid,\n        invalid = meta.invalid,\n        touched = meta.touched,\n        error = meta.error; // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n\n  const hasError = touched && invalid && error;\n  const inputClasses = classNames(css.input, {\n    [css.inputSuccess]: valid,\n    [css.inputError]: hasError\n  });\n\n  const inputProps = _objectSpread({\n    className: inputClasses,\n    id,\n    input\n  }, rest);\n\n  const classes = classNames(rootClassName, className);\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, label ? React.createElement(\"label\", {\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, label) : null, React.createElement(CurrencyInput, Object.assign({}, inputProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  })), React.createElement(ValidationError, {\n    fieldMeta: meta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }));\n};\n\nFieldCurrencyInputComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null\n};\nFieldCurrencyInputComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired\n};\n\nconst FieldCurrencyInput = props => {\n  return React.createElement(Field, Object.assign({\n    component: FieldCurrencyInputComponent\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }));\n};\n\nexport default FieldCurrencyInput;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldCurrencyInput/FieldCurrencyInput.js"],"names":["React","Component","PropTypes","intlShape","injectIntl","Field","classNames","Decimal","ValidationError","types","sdkTypes","isSafeNumber","unitDivisor","convertUnitToSubUnit","convertMoneyToNumber","ensureDotSeparator","ensureSeparator","truncateToSubUnitPrecision","propTypes","log","css","Money","allowedInputProps","allProps","currencyConfig","defaultValue","intl","input","meta","inputProps","getPrice","unformattedValue","isEmptyString","currency","e","CurrencyInputComponent","constructor","props","initialValueIsMoney","value","Error","error","inputValue","initialValue","hasInitialValue","isNaN","testSubUnitFormat","formatNumber","usesComma","indexOf","toString","formattedValue","state","onInputChange","bind","onInputBlur","onInputFocus","updateValues","event","preventDefault","stopPropagation","price","onChange","onBlur","setState","prevState","onFocus","targetValue","target","trim","valueOrZero","targetDecimalValue","isSafeValue","isPositive","truncatedValueString","console","render","className","placeholder","placeholderText","defaultProps","func","oneOfType","number","shape","string","object","isRequired","money","CurrencyInput","FieldCurrencyInputComponent","rootClassName","id","label","rest","valid","invalid","touched","hasError","inputClasses","inputSuccess","inputError","classes","FieldCurrencyInput"],"mappings":"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","sourcesContent":["/**\n * CurrencyInput renders an input field that format it's value according to currency formatting rules\n * onFocus: renders given value in unformatted manner: \"9999,99\"\n * onBlur: formats the given input: \"9 999,99 â‚¬\"\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl } from 'react-intl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport Decimal from 'decimal.js';\nimport { ValidationError } from '../../components';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport {\n  isSafeNumber,\n  unitDivisor,\n  convertUnitToSubUnit,\n  convertMoneyToNumber,\n  ensureDotSeparator,\n  ensureSeparator,\n  truncateToSubUnitPrecision,\n} from '../../util/currency';\nimport { propTypes } from '../../util/types';\nimport * as log from '../../util/log';\n\nimport css from './FieldCurrencyInput.css';\n\nconst { Money } = sdkTypes;\n\nconst allowedInputProps = allProps => {\n  // Strip away props that are not passed to input element (or are overwritten)\n  // eslint-disable-next-line no-unused-vars\n  const { currencyConfig, defaultValue, intl, input, meta, ...inputProps } = allProps;\n  return inputProps;\n};\n\n// Convert unformatted value (e.g. 10,00) to Money (or null)\nconst getPrice = (unformattedValue, currencyConfig) => {\n  const isEmptyString = unformattedValue === '';\n  try {\n    return isEmptyString\n      ? null\n      : new Money(\n          convertUnitToSubUnit(unformattedValue, unitDivisor(currencyConfig.currency)),\n          currencyConfig.currency\n        );\n  } catch (e) {\n    return null;\n  }\n};\n\nclass CurrencyInputComponent extends Component {\n  constructor(props) {\n    super(props);\n    const { currencyConfig, defaultValue, input, intl } = props;\n    const initialValueIsMoney = input.value instanceof Money;\n\n    if (initialValueIsMoney && input.value.currency !== currencyConfig.currency) {\n      const e = new Error('Value currency different from marketplace currency');\n      log.error(e, 'currency-input-invalid-currency', { currencyConfig, inputValue: input.value });\n      throw e;\n    }\n\n    const initialValue = initialValueIsMoney ? convertMoneyToNumber(input.value) : defaultValue;\n    const hasInitialValue = typeof initialValue === 'number' && !isNaN(initialValue);\n\n    // We need to handle number format - some locales use dots and some commas as decimal separator\n    // TODO Figure out if this could be digged from React-Intl directly somehow\n    const testSubUnitFormat = intl.formatNumber('1.1', currencyConfig);\n    const usesComma = testSubUnitFormat.indexOf(',') >= 0;\n\n    try {\n      // whatever is passed as a default value, will be converted to currency string\n      // Unformatted value is digits + localized sub unit separator (\"9,99\")\n      const unformattedValue = hasInitialValue\n        ? truncateToSubUnitPrecision(\n            ensureSeparator(initialValue.toString(), usesComma),\n            unitDivisor(currencyConfig.currency),\n            usesComma\n          )\n        : '';\n      // Formatted value fully localized currency string (\"$1,000.99\")\n      const formattedValue = hasInitialValue\n        ? intl.formatNumber(ensureDotSeparator(unformattedValue), currencyConfig)\n        : '';\n\n      this.state = {\n        formattedValue,\n        unformattedValue,\n        value: formattedValue,\n        usesComma,\n      };\n    } catch (e) {\n      log.error(e, 'currency-input-init-failed', { currencyConfig, defaultValue, initialValue });\n      throw e;\n    }\n\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onInputBlur = this.onInputBlur.bind(this);\n    this.onInputFocus = this.onInputFocus.bind(this);\n    this.updateValues = this.updateValues.bind(this);\n  }\n\n  onInputChange(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    // Update value strings on state\n    const { unformattedValue } = this.updateValues(event);\n    // Notify parent component about current price change\n    const price = getPrice(ensureDotSeparator(unformattedValue), this.props.currencyConfig);\n    this.props.input.onChange(price);\n  }\n\n  onInputBlur(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const {\n      currencyConfig,\n      input: { onBlur },\n    } = this.props;\n    this.setState(prevState => {\n      if (onBlur) {\n        // If parent component has provided onBlur function, call it with current price.\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\n        onBlur(price);\n      }\n      return {\n        value: prevState.formattedValue,\n      };\n    });\n  }\n\n  onInputFocus(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const {\n      currencyConfig,\n      input: { onFocus },\n    } = this.props;\n    this.setState(prevState => {\n      if (onFocus) {\n        // If parent component has provided onFocus function, call it with current price.\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\n        onFocus(price);\n      }\n      return {\n        value: prevState.unformattedValue,\n      };\n    });\n  }\n\n  updateValues(event) {\n    try {\n      const { currencyConfig, intl } = this.props;\n      const targetValue = event.target.value.trim();\n      const isEmptyString = targetValue === '';\n      const valueOrZero = isEmptyString ? '0' : targetValue;\n\n      const targetDecimalValue = isEmptyString\n        ? null\n        : new Decimal(ensureDotSeparator(targetValue));\n\n      const isSafeValue =\n        isEmptyString || (targetDecimalValue.isPositive() && isSafeNumber(targetDecimalValue));\n      if (!isSafeValue) {\n        throw new Error(`Unsafe money value: ${targetValue}`);\n      }\n\n      // truncate decimals to subunit precision: 10000.999 => 10000.99\n      const truncatedValueString = truncateToSubUnitPrecision(\n        valueOrZero,\n        unitDivisor(currencyConfig.currency),\n        this.state.usesComma\n      );\n      const unformattedValue = !isEmptyString ? truncatedValueString : '';\n      const formattedValue = !isEmptyString\n        ? intl.formatNumber(ensureDotSeparator(truncatedValueString), currencyConfig)\n        : '';\n\n      this.setState({\n        formattedValue,\n        value: unformattedValue,\n        unformattedValue,\n      });\n\n      return { formattedValue, value: unformattedValue, unformattedValue };\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n\n      // If an error occurs while filling input field, use previous values\n      // This ensures that string like '12.3r' doesn't end up to a state.\n      const { formattedValue, unformattedValue, value } = this.state;\n      return { formattedValue, unformattedValue, value };\n    }\n  }\n\n  render() {\n    const { className, currencyConfig, defaultValue, placeholder, intl } = this.props;\n    const placeholderText = placeholder || intl.formatNumber(defaultValue, currencyConfig);\n    return (\n      <input\n        className={className}\n        {...allowedInputProps(this.props)}\n        value={this.state.value}\n        onChange={this.onInputChange}\n        onBlur={this.onInputBlur}\n        onFocus={this.onInputFocus}\n        type=\"text\"\n        placeholder={placeholderText}\n      />\n    );\n  }\n}\n\nCurrencyInputComponent.defaultProps = {\n  className: null,\n  currencyConfig: null,\n  defaultValue: null,\n  input: null,\n  placeholder: null,\n};\n\nconst { func, oneOfType, number, shape, string, object } = PropTypes;\n\nCurrencyInputComponent.propTypes = {\n  className: string,\n  currencyConfig: propTypes.currencyConfig.isRequired,\n  defaultValue: number,\n  intl: intlShape.isRequired,\n  input: shape({\n    value: oneOfType([string, propTypes.money]),\n    onBlur: func,\n    onChange: func.isRequired,\n    onFocus: func,\n  }).isRequired,\n\n  placeholder: string,\n};\n\nexport const CurrencyInput = injectIntl(CurrencyInputComponent);\n\nconst FieldCurrencyInputComponent = props => {\n  const { rootClassName, className, id, label, input, meta, ...rest } = props;\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const { valid, invalid, touched, error } = meta;\n\n  // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n  const hasError = touched && invalid && error;\n\n  const inputClasses = classNames(css.input, {\n    [css.inputSuccess]: valid,\n    [css.inputError]: hasError,\n  });\n\n  const inputProps = { className: inputClasses, id, input, ...rest };\n  const classes = classNames(rootClassName, className);\n  return (\n    <div className={classes}>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <CurrencyInput {...inputProps} />\n      <ValidationError fieldMeta={meta} />\n    </div>\n  );\n};\n\nFieldCurrencyInputComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null,\n};\n\nFieldCurrencyInputComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired,\n};\n\nconst FieldCurrencyInput = props => {\n  return <Field component={FieldCurrencyInputComponent} {...props} />;\n};\n\nexport default FieldCurrencyInput;\n"]},"metadata":{},"sourceType":"module"}