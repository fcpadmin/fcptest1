{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/LocationSearchForm/LocationSearchForm.js\";\nimport React from 'react';\nimport { func, string } from 'prop-types';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { Form, LocationAutocompleteInput } from '../../components';\nimport css from './LocationSearchForm.css';\n\nconst LocationSearchFormComponent = props => {\n  const handleChange = location => {\n    if (location.selectedPlace) {\n      // Note that we use `onSubmit` instead of the conventional\n      // `handleSubmit` prop for submitting. We want to autosubmit\n      // when a place is selected, and don't require any extra\n      // validations for the form.\n      props.onSubmit({\n        location\n      });\n    }\n  };\n\n  return React.createElement(FinalForm, Object.assign({}, props, {\n    render: formRenderProps => {\n      const rootClassName = formRenderProps.rootClassName,\n            className = formRenderProps.className,\n            intl = formRenderProps.intl;\n      const classes = classNames(rootClassName || css.root, className); // Allow form submit only when the place has changed\n\n      const preventFormSubmit = e => e.preventDefault();\n\n      return React.createElement(Form, {\n        className: classes,\n        onSubmit: preventFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"location\",\n        format: null,\n        render: ({\n          input,\n          meta\n        }) => {\n          const onChange = input.onChange,\n                restInput = _objectWithoutProperties(input, [\"onChange\"]); // Merge the standard onChange function with custom behaviur. A better solution would\n          // be to use the FormSpy component from Final Form and pass this.onChange to the\n          // onChange prop but that breaks due to insufficient subscription handling.\n          // See: https://github.com/final-form/react-final-form/issues/159\n\n\n          const searchOnChange = value => {\n            onChange(value);\n            handleChange(value);\n          };\n\n          const searchInput = _objectSpread({}, restInput, {\n            onChange: searchOnChange\n          });\n\n          return React.createElement(LocationAutocompleteInput, {\n            placeholder: intl.formatMessage({\n              id: 'LocationSearchForm.placeholder'\n            }),\n            iconClassName: css.searchInputIcon,\n            inputClassName: css.searchInput,\n            predictionsClassName: css.searchPredictions,\n            input: searchInput,\n            meta: meta,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nLocationSearchFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null\n};\nLocationSearchFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  onSubmit: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst LocationSearchForm = injectIntl(LocationSearchFormComponent);\nexport default LocationSearchForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/LocationSearchForm/LocationSearchForm.js"],"names":["React","func","string","Form","FinalForm","Field","intlShape","injectIntl","classNames","LocationAutocompleteInput","css","LocationSearchFormComponent","props","handleChange","location","selectedPlace","onSubmit","formRenderProps","rootClassName","className","intl","classes","root","preventFormSubmit","e","preventDefault","input","meta","onChange","restInput","searchOnChange","value","searchInput","formatMessage","id","searchInputIcon","searchPredictions","defaultProps","propTypes","isRequired","LocationSearchForm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { func, string } from 'prop-types';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { intlShape, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { Form, LocationAutocompleteInput } from '../../components';\n\nimport css from './LocationSearchForm.css';\n\nconst LocationSearchFormComponent = props => {\n  const handleChange = location => {\n    if (location.selectedPlace) {\n      // Note that we use `onSubmit` instead of the conventional\n      // `handleSubmit` prop for submitting. We want to autosubmit\n      // when a place is selected, and don't require any extra\n      // validations for the form.\n      props.onSubmit({ location });\n    }\n  };\n\n  return (\n    <FinalForm\n      {...props}\n      render={formRenderProps => {\n        const { rootClassName, className, intl } = formRenderProps;\n        const classes = classNames(rootClassName || css.root, className);\n\n        // Allow form submit only when the place has changed\n        const preventFormSubmit = e => e.preventDefault();\n\n        return (\n          <Form className={classes} onSubmit={preventFormSubmit}>\n            <Field\n              name=\"location\"\n              format={null}\n              render={({ input, meta }) => {\n                const { onChange, ...restInput } = input;\n\n                // Merge the standard onChange function with custom behaviur. A better solution would\n                // be to use the FormSpy component from Final Form and pass this.onChange to the\n                // onChange prop but that breaks due to insufficient subscription handling.\n                // See: https://github.com/final-form/react-final-form/issues/159\n                const searchOnChange = value => {\n                  onChange(value);\n                  handleChange(value);\n                };\n\n                const searchInput = { ...restInput, onChange: searchOnChange };\n                return (\n                  <LocationAutocompleteInput\n                    placeholder={intl.formatMessage({ id: 'LocationSearchForm.placeholder' })}\n                    iconClassName={css.searchInputIcon}\n                    inputClassName={css.searchInput}\n                    predictionsClassName={css.searchPredictions}\n                    input={searchInput}\n                    meta={meta}\n                  />\n                );\n              }}\n            />\n          </Form>\n        );\n      }}\n    />\n  );\n};\n\nLocationSearchFormComponent.defaultProps = { rootClassName: null, className: null };\n\nLocationSearchFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  onSubmit: func.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst LocationSearchForm = injectIntl(LocationSearchFormComponent);\n\nexport default LocationSearchForm;\n"]},"metadata":{},"sourceType":"module"}