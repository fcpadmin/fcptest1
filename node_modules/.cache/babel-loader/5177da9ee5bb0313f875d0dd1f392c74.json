{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldSelect/FieldSelect.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\nimport css from './FieldSelect.css';\n\nconst FieldSelectComponent = props => {\n  const rootClassName = props.rootClassName,\n        className = props.className,\n        id = props.id,\n        label = props.label,\n        input = props.input,\n        meta = props.meta,\n        children = props.children,\n        rest = _objectWithoutProperties(props, [\"rootClassName\", \"className\", \"id\", \"label\", \"input\", \"meta\", \"children\"]);\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const valid = meta.valid,\n        invalid = meta.invalid,\n        touched = meta.touched,\n        error = meta.error; // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n\n  const hasError = touched && invalid && error;\n  const selectClasses = classNames(css.select, {\n    [css.selectSuccess]: valid,\n    [css.selectError]: hasError\n  });\n\n  const selectProps = _objectSpread({\n    className: selectClasses,\n    id\n  }, input, rest);\n\n  const classes = classNames(rootClassName || css.root, className);\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, label ? React.createElement(\"label\", {\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, label) : null, React.createElement(\"select\", Object.assign({}, selectProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), children), React.createElement(ValidationError, {\n    fieldMeta: meta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n};\n\nFieldSelectComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null,\n  children: null\n};\nconst string = PropTypes.string,\n      object = PropTypes.object,\n      node = PropTypes.node;\nFieldSelectComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired,\n  children: node\n};\n\nconst FieldSelect = props => {\n  return React.createElement(Field, Object.assign({\n    component: FieldSelectComponent\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default FieldSelect;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/FieldSelect/FieldSelect.js"],"names":["React","PropTypes","Field","classNames","ValidationError","css","FieldSelectComponent","props","rootClassName","className","id","label","input","meta","children","rest","Error","valid","invalid","touched","error","hasError","selectClasses","select","selectSuccess","selectError","selectProps","classes","root","defaultProps","string","object","node","propTypes","isRequired","FieldSelect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\n\nimport css from './FieldSelect.css';\n\nconst FieldSelectComponent = props => {\n  const { rootClassName, className, id, label, input, meta, children, ...rest } = props;\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const { valid, invalid, touched, error } = meta;\n\n  // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n  const hasError = touched && invalid && error;\n\n  const selectClasses = classNames(css.select, {\n    [css.selectSuccess]: valid,\n    [css.selectError]: hasError,\n  });\n  const selectProps = { className: selectClasses, id, ...input, ...rest };\n\n  const classes = classNames(rootClassName || css.root, className);\n  return (\n    <div className={classes}>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <select {...selectProps}>{children}</select>\n      <ValidationError fieldMeta={meta} />\n    </div>\n  );\n};\n\nFieldSelectComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null,\n  children: null,\n};\n\nconst { string, object, node } = PropTypes;\n\nFieldSelectComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired,\n\n  children: node,\n};\n\nconst FieldSelect = props => {\n  return <Field component={FieldSelectComponent} {...props} />;\n};\n\nexport default FieldSelect;\n"]},"metadata":{},"sourceType":"module"}