{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport merge from 'lodash/merge';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { currentUserShowSuccess } from '../../ducks/user.duck'; // ================ Action types ================ //\n\nexport const SAVE_CONTACT_DETAILS_REQUEST = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_REQUEST';\nexport const SAVE_CONTACT_DETAILS_SUCCESS = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_SUCCESS';\nexport const SAVE_EMAIL_ERROR = 'app/ContactDetailsPage/SAVE_EMAIL_ERROR';\nexport const SAVE_PHONE_NUMBER_ERROR = 'app/ContactDetailsPage/SAVE_PHONE_NUMBER_ERROR';\nexport const SAVE_CONTACT_DETAILS_CLEAR = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_CLEAR'; // ================ Reducer ================ //\n\nconst initialState = {\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  saveContactDetailsInProgress: false,\n  contactDetailsChanged: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case SAVE_CONTACT_DETAILS_REQUEST:\n      return _objectSpread({}, state, {\n        saveContactDetailsInProgress: true,\n        saveEmailError: null,\n        savePhoneNumberError: null,\n        contactDetailsChanged: false\n      });\n\n    case SAVE_CONTACT_DETAILS_SUCCESS:\n      return _objectSpread({}, state, {\n        saveContactDetailsInProgress: false,\n        contactDetailsChanged: true\n      });\n\n    case SAVE_EMAIL_ERROR:\n      return _objectSpread({}, state, {\n        saveContactDetailsInProgress: false,\n        saveEmailError: payload\n      });\n\n    case SAVE_PHONE_NUMBER_ERROR:\n      return _objectSpread({}, state, {\n        saveContactDetailsInProgress: false,\n        savePhoneNumberError: payload\n      });\n\n    case SAVE_CONTACT_DETAILS_CLEAR:\n      return _objectSpread({}, state, {\n        saveContactDetailsInProgress: false,\n        saveEmailError: null,\n        savePhoneNumberError: null,\n        contactDetailsChanged: false\n      });\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const saveContactDetailsRequest = () => ({\n  type: SAVE_CONTACT_DETAILS_REQUEST\n});\nexport const saveContactDetailsSuccess = () => ({\n  type: SAVE_CONTACT_DETAILS_SUCCESS\n});\nexport const saveEmailError = error => ({\n  type: SAVE_EMAIL_ERROR,\n  payload: error,\n  error: true\n});\nexport const savePhoneNumberError = error => ({\n  type: SAVE_PHONE_NUMBER_ERROR,\n  payload: error,\n  error: true\n});\nexport const saveContactDetailsClear = () => ({\n  type: SAVE_CONTACT_DETAILS_CLEAR\n}); // ================ Thunks ================ //\n\n/**\n * Make a phone number update request to the API and return the current user.\n */\n\nconst requestSavePhoneNumber = params => (dispatch, getState, sdk) => {\n  const phoneNumber = params.phoneNumber;\n  return sdk.currentUser.updateProfile({\n    protectedData: {\n      phoneNumber\n    }\n  }, {\n    expand: true,\n    include: ['profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.currentUser.updateProfile response');\n    }\n\n    const currentUser = entities[0];\n    return currentUser;\n  }).catch(e => {\n    dispatch(savePhoneNumberError(storableError(e))); // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\n    // action will not be fired\n\n    throw e;\n  });\n};\n/**\n * Make a email update request to the API and return the current user.\n */\n\n\nconst requestSaveEmail = params => (dispatch, getState, sdk) => {\n  const email = params.email,\n        currentPassword = params.currentPassword;\n  return sdk.currentUser.changeEmail({\n    email,\n    currentPassword\n  }, {\n    expand: true,\n    include: ['profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.currentUser.changeEmail response');\n    }\n\n    const currentUser = entities[0];\n    return currentUser;\n  }).catch(e => {\n    dispatch(saveEmailError(storableError(e))); // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\n    // action will not be fired\n\n    throw e;\n  });\n};\n/**\n * Save email and update the current user.\n */\n\n\nconst saveEmail = params => (dispatch, getState, sdk) => {\n  return dispatch(requestSaveEmail(params)).then(user => {\n    dispatch(currentUserShowSuccess(user));\n    dispatch(saveContactDetailsSuccess());\n  }) // error action dispatched in requestSaveEmail\n  .catch(e => null);\n};\n/**\n * Save phone number and update the current user.\n */\n\n\nconst savePhoneNumber = params => (dispatch, getState, sdk) => {\n  return dispatch(requestSavePhoneNumber(params)).then(user => {\n    dispatch(currentUserShowSuccess(user));\n    dispatch(saveContactDetailsSuccess());\n  }) // error action dispatched in requestSavePhoneNumber\n  .catch(e => null);\n};\n/**\n * Save email and phone number and update the current user.\n */\n\n\nconst saveEmailAndPhoneNumber = params => (dispatch, getState, sdk) => {\n  const email = params.email,\n        phoneNumber = params.phoneNumber,\n        currentPassword = params.currentPassword; // order of promises: 1. email, 2. phone number\n\n  const promises = [dispatch(requestSaveEmail({\n    email,\n    currentPassword\n  })), dispatch(requestSavePhoneNumber({\n    phoneNumber\n  }))];\n  return Promise.all(promises).then(values => {\n    // Array of two user objects is resolved\n    // the first one is from the email update\n    // the second one is from the phone number update\n    const saveEmailUser = values[0];\n    const savePhoneNumberUser = values[1]; // merge the protected data from the user object returned\n    // by the phone update operation\n\n    const protectedData = savePhoneNumberUser.attributes.profile.protectedData;\n    const phoneNumberMergeSource = {\n      attributes: {\n        profile: {\n          protectedData\n        }\n      }\n    };\n    const currentUser = merge(saveEmailUser, phoneNumberMergeSource);\n    dispatch(currentUserShowSuccess(currentUser));\n    dispatch(saveContactDetailsSuccess());\n  }).catch(e => null);\n};\n/**\n * Update contact details, actions depend on which data has changed\n */\n\n\nexport const saveContactDetails = params => (dispatch, getState, sdk) => {\n  dispatch(saveContactDetailsRequest());\n  const email = params.email,\n        currentEmail = params.currentEmail,\n        phoneNumber = params.phoneNumber,\n        currentPhoneNumber = params.currentPhoneNumber,\n        currentPassword = params.currentPassword;\n  const emailChanged = email !== currentEmail;\n  const phoneNumberChanged = phoneNumber !== currentPhoneNumber;\n\n  if (emailChanged && phoneNumberChanged) {\n    return dispatch(saveEmailAndPhoneNumber({\n      email,\n      currentPassword,\n      phoneNumber\n    }));\n  } else if (emailChanged) {\n    return dispatch(saveEmail({\n      email,\n      currentPassword\n    }));\n  } else if (phoneNumberChanged) {\n    return dispatch(savePhoneNumber({\n      phoneNumber\n    }));\n  }\n};","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ContactDetailsPage/ContactDetailsPage.duck.js"],"names":["merge","denormalisedResponseEntities","storableError","currentUserShowSuccess","SAVE_CONTACT_DETAILS_REQUEST","SAVE_CONTACT_DETAILS_SUCCESS","SAVE_EMAIL_ERROR","SAVE_PHONE_NUMBER_ERROR","SAVE_CONTACT_DETAILS_CLEAR","initialState","saveEmailError","savePhoneNumberError","saveContactDetailsInProgress","contactDetailsChanged","reducer","state","action","type","payload","saveContactDetailsRequest","saveContactDetailsSuccess","error","saveContactDetailsClear","requestSavePhoneNumber","params","dispatch","getState","sdk","phoneNumber","currentUser","updateProfile","protectedData","expand","include","then","response","entities","length","Error","catch","e","requestSaveEmail","email","currentPassword","changeEmail","saveEmail","user","savePhoneNumber","saveEmailAndPhoneNumber","promises","Promise","all","values","saveEmailUser","savePhoneNumberUser","attributes","profile","phoneNumberMergeSource","saveContactDetails","currentEmail","currentPhoneNumber","emailChanged","phoneNumberChanged"],"mappings":"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","sourcesContent":["import merge from 'lodash/merge';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { currentUserShowSuccess } from '../../ducks/user.duck';\n\n// ================ Action types ================ //\n\nexport const SAVE_CONTACT_DETAILS_REQUEST = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_REQUEST';\nexport const SAVE_CONTACT_DETAILS_SUCCESS = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_SUCCESS';\nexport const SAVE_EMAIL_ERROR = 'app/ContactDetailsPage/SAVE_EMAIL_ERROR';\nexport const SAVE_PHONE_NUMBER_ERROR = 'app/ContactDetailsPage/SAVE_PHONE_NUMBER_ERROR';\n\nexport const SAVE_CONTACT_DETAILS_CLEAR = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_CLEAR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  saveContactDetailsInProgress: false,\n  contactDetailsChanged: false,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case SAVE_CONTACT_DETAILS_REQUEST:\n      return {\n        ...state,\n        saveContactDetailsInProgress: true,\n        saveEmailError: null,\n        savePhoneNumberError: null,\n        contactDetailsChanged: false,\n      };\n    case SAVE_CONTACT_DETAILS_SUCCESS:\n      return { ...state, saveContactDetailsInProgress: false, contactDetailsChanged: true };\n    case SAVE_EMAIL_ERROR:\n      return { ...state, saveContactDetailsInProgress: false, saveEmailError: payload };\n    case SAVE_PHONE_NUMBER_ERROR:\n      return { ...state, saveContactDetailsInProgress: false, savePhoneNumberError: payload };\n\n    case SAVE_CONTACT_DETAILS_CLEAR:\n      return {\n        ...state,\n        saveContactDetailsInProgress: false,\n        saveEmailError: null,\n        savePhoneNumberError: null,\n        contactDetailsChanged: false,\n      };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const saveContactDetailsRequest = () => ({ type: SAVE_CONTACT_DETAILS_REQUEST });\nexport const saveContactDetailsSuccess = () => ({ type: SAVE_CONTACT_DETAILS_SUCCESS });\nexport const saveEmailError = error => ({\n  type: SAVE_EMAIL_ERROR,\n  payload: error,\n  error: true,\n});\nexport const savePhoneNumberError = error => ({\n  type: SAVE_PHONE_NUMBER_ERROR,\n  payload: error,\n  error: true,\n});\n\nexport const saveContactDetailsClear = () => ({ type: SAVE_CONTACT_DETAILS_CLEAR });\n\n// ================ Thunks ================ //\n\n/**\n * Make a phone number update request to the API and return the current user.\n */\nconst requestSavePhoneNumber = params => (dispatch, getState, sdk) => {\n  const phoneNumber = params.phoneNumber;\n\n  return sdk.currentUser\n    .updateProfile(\n      { protectedData: { phoneNumber } },\n      {\n        expand: true,\n        include: ['profileImage'],\n        'fields.image': ['variants.square-small', 'variants.square-small2x'],\n      }\n    )\n    .then(response => {\n      const entities = denormalisedResponseEntities(response);\n      if (entities.length !== 1) {\n        throw new Error('Expected a resource in the sdk.currentUser.updateProfile response');\n      }\n\n      const currentUser = entities[0];\n      return currentUser;\n    })\n    .catch(e => {\n      dispatch(savePhoneNumberError(storableError(e)));\n      // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\n      // action will not be fired\n      throw e;\n    });\n};\n\n/**\n * Make a email update request to the API and return the current user.\n */\nconst requestSaveEmail = params => (dispatch, getState, sdk) => {\n  const { email, currentPassword } = params;\n\n  return sdk.currentUser\n    .changeEmail(\n      { email, currentPassword },\n      {\n        expand: true,\n        include: ['profileImage'],\n        'fields.image': ['variants.square-small', 'variants.square-small2x'],\n      }\n    )\n    .then(response => {\n      const entities = denormalisedResponseEntities(response);\n      if (entities.length !== 1) {\n        throw new Error('Expected a resource in the sdk.currentUser.changeEmail response');\n      }\n\n      const currentUser = entities[0];\n      return currentUser;\n    })\n    .catch(e => {\n      dispatch(saveEmailError(storableError(e)));\n      // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\n      // action will not be fired\n      throw e;\n    });\n};\n\n/**\n * Save email and update the current user.\n */\nconst saveEmail = params => (dispatch, getState, sdk) => {\n  return (\n    dispatch(requestSaveEmail(params))\n      .then(user => {\n        dispatch(currentUserShowSuccess(user));\n        dispatch(saveContactDetailsSuccess());\n      })\n      // error action dispatched in requestSaveEmail\n      .catch(e => null)\n  );\n};\n\n/**\n * Save phone number and update the current user.\n */\nconst savePhoneNumber = params => (dispatch, getState, sdk) => {\n  return (\n    dispatch(requestSavePhoneNumber(params))\n      .then(user => {\n        dispatch(currentUserShowSuccess(user));\n        dispatch(saveContactDetailsSuccess());\n      })\n      // error action dispatched in requestSavePhoneNumber\n      .catch(e => null)\n  );\n};\n\n/**\n * Save email and phone number and update the current user.\n */\nconst saveEmailAndPhoneNumber = params => (dispatch, getState, sdk) => {\n  const { email, phoneNumber, currentPassword } = params;\n\n  // order of promises: 1. email, 2. phone number\n  const promises = [\n    dispatch(requestSaveEmail({ email, currentPassword })),\n    dispatch(requestSavePhoneNumber({ phoneNumber })),\n  ];\n\n  return Promise.all(promises)\n    .then(values => {\n      // Array of two user objects is resolved\n      // the first one is from the email update\n      // the second one is from the phone number update\n\n      const saveEmailUser = values[0];\n      const savePhoneNumberUser = values[1];\n\n      // merge the protected data from the user object returned\n      // by the phone update operation\n      const protectedData = savePhoneNumberUser.attributes.profile.protectedData;\n      const phoneNumberMergeSource = { attributes: { profile: { protectedData } } };\n\n      const currentUser = merge(saveEmailUser, phoneNumberMergeSource);\n      dispatch(currentUserShowSuccess(currentUser));\n      dispatch(saveContactDetailsSuccess());\n    })\n    .catch(e => null);\n};\n\n/**\n * Update contact details, actions depend on which data has changed\n */\nexport const saveContactDetails = params => (dispatch, getState, sdk) => {\n  dispatch(saveContactDetailsRequest());\n\n  const { email, currentEmail, phoneNumber, currentPhoneNumber, currentPassword } = params;\n  const emailChanged = email !== currentEmail;\n  const phoneNumberChanged = phoneNumber !== currentPhoneNumber;\n\n  if (emailChanged && phoneNumberChanged) {\n    return dispatch(saveEmailAndPhoneNumber({ email, currentPassword, phoneNumber }));\n  } else if (emailChanged) {\n    return dispatch(saveEmail({ email, currentPassword }));\n  } else if (phoneNumberChanged) {\n    return dispatch(savePhoneNumber({ phoneNumber }));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}