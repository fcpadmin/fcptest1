{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingDescriptionForm/EditListingDescriptionForm.js\";\nimport React from 'react';\nimport { arrayOf, bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { maxLength, required, composeValidators } from '../../util/validators';\nimport { Form, Button, FieldTextInput } from '../../components';\nimport CustomCategorySelectFieldMaybe from './CustomCategorySelectFieldMaybe';\nimport css from './EditListingDescriptionForm.css';\nconst TITLE_MAX_LENGTH = 60;\n\nconst EditListingDescriptionFormComponent = props => React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const categories = fieldRenderProps.categories,\n          className = fieldRenderProps.className,\n          disabled = fieldRenderProps.disabled,\n          handleSubmit = fieldRenderProps.handleSubmit,\n          intl = fieldRenderProps.intl,\n          invalid = fieldRenderProps.invalid,\n          pristine = fieldRenderProps.pristine,\n          saveActionMsg = fieldRenderProps.saveActionMsg,\n          updated = fieldRenderProps.updated,\n          updateInProgress = fieldRenderProps.updateInProgress,\n          fetchErrors = fieldRenderProps.fetchErrors;\n    const titleMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.title'\n    });\n    const titlePlaceholderMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.titlePlaceholder'\n    });\n    const titleRequiredMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.titleRequired'\n    });\n    const maxLengthMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.maxLength'\n    }, {\n      maxLength: TITLE_MAX_LENGTH\n    });\n    const descriptionMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.description'\n    });\n    const descriptionPlaceholderMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.descriptionPlaceholder'\n    });\n    const maxLength60Message = maxLength(maxLengthMessage, TITLE_MAX_LENGTH);\n    const descriptionRequiredMessage = intl.formatMessage({\n      id: 'EditListingDescriptionForm.descriptionRequired'\n    });\n\n    const _ref = fetchErrors || {},\n          updateListingError = _ref.updateListingError,\n          createListingDraftError = _ref.createListingDraftError,\n          showListingsError = _ref.showListingsError;\n\n    const errorMessageUpdateListing = updateListingError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingDescriptionForm.updateFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })) : null; // This error happens only on first tab (of EditListingWizard)\n\n    const errorMessageCreateListingDraft = createListingDraftError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingDescriptionForm.createListingDraftError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })) : null;\n    const errorMessageShowListing = showListingsError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingDescriptionForm.showListingFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })) : null;\n    const classes = classNames(css.root, className);\n    const submitReady = updated && pristine;\n    const submitInProgress = updateInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n    return React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, errorMessageCreateListingDraft, errorMessageUpdateListing, errorMessageShowListing, React.createElement(FieldTextInput, {\n      id: \"title\",\n      name: \"title\",\n      className: css.title,\n      type: \"text\",\n      label: titleMessage,\n      placeholder: titlePlaceholderMessage,\n      maxLength: TITLE_MAX_LENGTH,\n      validate: composeValidators(required(titleRequiredMessage), maxLength60Message),\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(FieldTextInput, {\n      id: \"description\",\n      name: \"description\",\n      className: css.description,\n      type: \"textarea\",\n      label: descriptionMessage,\n      placeholder: descriptionPlaceholderMessage,\n      validate: composeValidators(required(descriptionRequiredMessage)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(CustomCategorySelectFieldMaybe, {\n      id: \"category\",\n      name: \"category\",\n      categories: categories,\n      intl: intl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: submitReady,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, saveActionMsg));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}));\n\nEditListingDescriptionFormComponent.defaultProps = {\n  className: null,\n  fetchErrors: null\n};\nEditListingDescriptionFormComponent.propTypes = {\n  className: string,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    createListingDraftError: propTypes.error,\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error\n  }),\n  categories: arrayOf(shape({\n    key: string.isRequired,\n    label: string.isRequired\n  }))\n};\nexport default compose(injectIntl)(EditListingDescriptionFormComponent);","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingDescriptionForm/EditListingDescriptionForm.js"],"names":["React","arrayOf","bool","func","shape","string","compose","Form","FinalForm","intlShape","injectIntl","FormattedMessage","classNames","propTypes","maxLength","required","composeValidators","Button","FieldTextInput","CustomCategorySelectFieldMaybe","css","TITLE_MAX_LENGTH","EditListingDescriptionFormComponent","props","fieldRenderProps","categories","className","disabled","handleSubmit","intl","invalid","pristine","saveActionMsg","updated","updateInProgress","fetchErrors","titleMessage","formatMessage","id","titlePlaceholderMessage","titleRequiredMessage","maxLengthMessage","descriptionMessage","descriptionPlaceholderMessage","maxLength60Message","descriptionRequiredMessage","updateListingError","createListingDraftError","showListingsError","errorMessageUpdateListing","error","errorMessageCreateListingDraft","errorMessageShowListing","classes","root","submitReady","submitInProgress","submitDisabled","title","description","submitButton","defaultProps","isRequired","onSubmit","key","label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { arrayOf, bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { intlShape, injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { propTypes } from '../../util/types';\nimport { maxLength, required, composeValidators } from '../../util/validators';\nimport { Form, Button, FieldTextInput } from '../../components';\nimport CustomCategorySelectFieldMaybe from './CustomCategorySelectFieldMaybe';\n\nimport css from './EditListingDescriptionForm.css';\n\nconst TITLE_MAX_LENGTH = 60;\n\nconst EditListingDescriptionFormComponent = props => (\n  <FinalForm\n    {...props}\n    render={fieldRenderProps => {\n      const {\n        categories,\n        className,\n        disabled,\n        handleSubmit,\n        intl,\n        invalid,\n        pristine,\n        saveActionMsg,\n        updated,\n        updateInProgress,\n        fetchErrors,\n      } = fieldRenderProps;\n\n      const titleMessage = intl.formatMessage({ id: 'EditListingDescriptionForm.title' });\n      const titlePlaceholderMessage = intl.formatMessage({\n        id: 'EditListingDescriptionForm.titlePlaceholder',\n      });\n      const titleRequiredMessage = intl.formatMessage({\n        id: 'EditListingDescriptionForm.titleRequired',\n      });\n      const maxLengthMessage = intl.formatMessage(\n        { id: 'EditListingDescriptionForm.maxLength' },\n        {\n          maxLength: TITLE_MAX_LENGTH,\n        }\n      );\n\n      const descriptionMessage = intl.formatMessage({\n        id: 'EditListingDescriptionForm.description',\n      });\n      const descriptionPlaceholderMessage = intl.formatMessage({\n        id: 'EditListingDescriptionForm.descriptionPlaceholder',\n      });\n      const maxLength60Message = maxLength(maxLengthMessage, TITLE_MAX_LENGTH);\n      const descriptionRequiredMessage = intl.formatMessage({\n        id: 'EditListingDescriptionForm.descriptionRequired',\n      });\n\n      const { updateListingError, createListingDraftError, showListingsError } = fetchErrors || {};\n      const errorMessageUpdateListing = updateListingError ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"EditListingDescriptionForm.updateFailed\" />\n        </p>\n      ) : null;\n\n      // This error happens only on first tab (of EditListingWizard)\n      const errorMessageCreateListingDraft = createListingDraftError ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"EditListingDescriptionForm.createListingDraftError\" />\n        </p>\n      ) : null;\n\n      const errorMessageShowListing = showListingsError ? (\n        <p className={css.error}>\n          <FormattedMessage id=\"EditListingDescriptionForm.showListingFailed\" />\n        </p>\n      ) : null;\n\n      const classes = classNames(css.root, className);\n      const submitReady = updated && pristine;\n      const submitInProgress = updateInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress;\n\n      return (\n        <Form className={classes} onSubmit={handleSubmit}>\n          {errorMessageCreateListingDraft}\n          {errorMessageUpdateListing}\n          {errorMessageShowListing}\n          <FieldTextInput\n            id=\"title\"\n            name=\"title\"\n            className={css.title}\n            type=\"text\"\n            label={titleMessage}\n            placeholder={titlePlaceholderMessage}\n            maxLength={TITLE_MAX_LENGTH}\n            validate={composeValidators(required(titleRequiredMessage), maxLength60Message)}\n            autoFocus\n          />\n\n          <FieldTextInput\n            id=\"description\"\n            name=\"description\"\n            className={css.description}\n            type=\"textarea\"\n            label={descriptionMessage}\n            placeholder={descriptionPlaceholderMessage}\n            validate={composeValidators(required(descriptionRequiredMessage))}\n          />\n\n          <CustomCategorySelectFieldMaybe\n            id=\"category\"\n            name=\"category\"\n            categories={categories}\n            intl={intl}\n          />\n\n          <Button\n            className={css.submitButton}\n            type=\"submit\"\n            inProgress={submitInProgress}\n            disabled={submitDisabled}\n            ready={submitReady}\n          >\n            {saveActionMsg}\n          </Button>\n        </Form>\n      );\n    }}\n  />\n);\n\nEditListingDescriptionFormComponent.defaultProps = { className: null, fetchErrors: null };\n\nEditListingDescriptionFormComponent.propTypes = {\n  className: string,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    createListingDraftError: propTypes.error,\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error,\n  }),\n  categories: arrayOf(\n    shape({\n      key: string.isRequired,\n      label: string.isRequired,\n    })\n  ),\n};\n\nexport default compose(injectIntl)(EditListingDescriptionFormComponent);\n"]},"metadata":{},"sourceType":"module"}