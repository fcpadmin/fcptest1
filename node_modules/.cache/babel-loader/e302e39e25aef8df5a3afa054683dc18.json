{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ResponsiveImage/ResponsiveImage.js\";\n\n/**\n * Usage without sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\" />\n *\n * Usage with sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *     sizes=\"(max-width: 600px) 100vw, 50vw\"\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\"\n *     sizes=\"(max-width: 600px) 100vw, 50vw\" />\n *\n *   // This means that below 600px image will take as many pixels there are available on current\n *   // viewport width (100vw) - and above that image will only take 50% of the page width.\n *   // Browser decides which image it will fetch based on current screen size.\n *\n * NOTE: for all the possible image variant names and their respective\n * sizes, see the API documentation.\n */\nimport React from 'react';\nimport { arrayOf, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport NoImageIcon from './NoImageIcon';\nimport css from './ResponsiveImage.css';\n\nconst ResponsiveImage = props => {\n  const className = props.className,\n        rootClassName = props.rootClassName,\n        alt = props.alt,\n        noImageMessage = props.noImageMessage,\n        image = props.image,\n        variants = props.variants,\n        rest = _objectWithoutProperties(props, [\"className\", \"rootClassName\", \"alt\", \"noImageMessage\", \"image\", \"variants\"]);\n\n  const classes = classNames(rootClassName || css.root, className);\n\n  if (image == null || variants.length === 0) {\n    const noImageClasses = classNames(rootClassName || css.root, css.noImageContainer, className); // NoImageMessage is needed for listing images on top the map (those component lose context)\n    // https://github.com/tomchentw/react-google-maps/issues/578\n\n    const noImageMessageText = noImageMessage || React.createElement(FormattedMessage, {\n      id: \"ResponsiveImage.noImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n    /* eslint-disable jsx-a11y/img-redundant-alt */\n\n    return React.createElement(\"div\", {\n      className: noImageClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.noImageWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(NoImageIcon, {\n      className: css.noImageIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: css.noImageText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, noImageMessageText)));\n    /* eslint-enable jsx-a11y/img-redundant-alt */\n  }\n\n  const imageVariants = image.attributes.variants;\n  const srcSet = variants.map(variantName => {\n    const variant = imageVariants[variantName];\n\n    if (!variant) {\n      // Variant not available (most like just not loaded yet)\n      return null;\n    }\n\n    return \"\".concat(variant.url, \" \").concat(variant.width, \"w\");\n  }).filter(v => v != null).join(', ');\n\n  const imgProps = _objectSpread({\n    className: classes,\n    alt,\n    srcSet\n  }, rest); // alt prop already defined above\n  // eslint-disable-next-line jsx-a11y/alt-text\n\n\n  return React.createElement(\"img\", Object.assign({}, imgProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n};\n\nResponsiveImage.defaultProps = {\n  className: null,\n  rootClassName: null,\n  image: null,\n  noImageMessage: null\n};\nResponsiveImage.propTypes = {\n  className: string,\n  rootClassName: string,\n  alt: string.isRequired,\n  image: propTypes.image,\n  variants: arrayOf(string).isRequired,\n  noImageMessage: string\n};\nexport default ResponsiveImage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/ResponsiveImage/ResponsiveImage.js"],"names":["React","arrayOf","string","classNames","FormattedMessage","propTypes","NoImageIcon","css","ResponsiveImage","props","className","rootClassName","alt","noImageMessage","image","variants","rest","classes","root","length","noImageClasses","noImageContainer","noImageMessageText","noImageWrapper","noImageIcon","noImageText","imageVariants","attributes","srcSet","map","variantName","variant","url","width","filter","v","join","imgProps","defaultProps","isRequired"],"mappings":"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","sourcesContent":["/**\n * Usage without sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\" />\n *\n * Usage with sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *     sizes=\"(max-width: 600px) 100vw, 50vw\"\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\"\n *     sizes=\"(max-width: 600px) 100vw, 50vw\" />\n *\n *   // This means that below 600px image will take as many pixels there are available on current\n *   // viewport width (100vw) - and above that image will only take 50% of the page width.\n *   // Browser decides which image it will fetch based on current screen size.\n *\n * NOTE: for all the possible image variant names and their respective\n * sizes, see the API documentation.\n */\n\nimport React from 'react';\nimport { arrayOf, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { propTypes } from '../../util/types';\n\nimport NoImageIcon from './NoImageIcon';\nimport css from './ResponsiveImage.css';\n\nconst ResponsiveImage = props => {\n  const { className, rootClassName, alt, noImageMessage, image, variants, ...rest } = props;\n  const classes = classNames(rootClassName || css.root, className);\n\n  if (image == null || variants.length === 0) {\n    const noImageClasses = classNames(rootClassName || css.root, css.noImageContainer, className);\n\n    // NoImageMessage is needed for listing images on top the map (those component lose context)\n    // https://github.com/tomchentw/react-google-maps/issues/578\n    const noImageMessageText = noImageMessage || <FormattedMessage id=\"ResponsiveImage.noImage\" />;\n    /* eslint-disable jsx-a11y/img-redundant-alt */\n    return (\n      <div className={noImageClasses}>\n        <div className={css.noImageWrapper}>\n          <NoImageIcon className={css.noImageIcon} />\n          <div className={css.noImageText}>{noImageMessageText}</div>\n        </div>\n      </div>\n    );\n    /* eslint-enable jsx-a11y/img-redundant-alt */\n  }\n\n  const imageVariants = image.attributes.variants;\n\n  const srcSet = variants\n    .map(variantName => {\n      const variant = imageVariants[variantName];\n\n      if (!variant) {\n        // Variant not available (most like just not loaded yet)\n        return null;\n      }\n      return `${variant.url} ${variant.width}w`;\n    })\n    .filter(v => v != null)\n    .join(', ');\n\n  const imgProps = {\n    className: classes,\n    alt,\n    srcSet,\n    ...rest,\n  };\n\n  // alt prop already defined above\n  // eslint-disable-next-line jsx-a11y/alt-text\n  return <img {...imgProps} />;\n};\n\nResponsiveImage.defaultProps = {\n  className: null,\n  rootClassName: null,\n  image: null,\n  noImageMessage: null,\n};\n\nResponsiveImage.propTypes = {\n  className: string,\n  rootClassName: string,\n  alt: string.isRequired,\n  image: propTypes.image,\n  variants: arrayOf(string).isRequired,\n  noImageMessage: string,\n};\n\nexport default ResponsiveImage;\n"]},"metadata":{},"sourceType":"module"}