{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchMap/SearchMap.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, func, number, string, shape, object } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { createSlug } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { obfuscatedCoordinates } from '../../util/maps';\nimport config from '../../config';\nimport { hasParentWithClassName } from './SearchMap.helpers.js';\nimport SearchMapWithMapbox, { LABEL_HANDLE, INFO_CARD_HANDLE, getMapBounds, getMapCenter, fitMapToBounds, isMapsLibLoaded } from './SearchMapWithMapbox';\nimport ReusableMapContainer from './ReusableMapContainer';\nimport css from './SearchMap.css';\nconst REUSABLE_MAP_HIDDEN_HANDLE = 'reusableMapHidden';\n\nconst withCoordinatesObfuscated = listings => {\n  return listings.map(listing => {\n    const id = listing.id,\n          attributes = listing.attributes,\n          rest = _objectWithoutProperties(listing, [\"id\", \"attributes\"]);\n\n    const origGeolocation = attributes.geolocation;\n    const cacheKey = id ? \"\".concat(id.uuid, \"_\").concat(origGeolocation.lat, \"_\").concat(origGeolocation.lng) : null;\n    const geolocation = obfuscatedCoordinates(origGeolocation, cacheKey);\n    return _objectSpread({\n      id\n    }, rest, {\n      attributes: _objectSpread({}, attributes, {\n        geolocation\n      })\n    });\n  });\n};\n\nexport class SearchMapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.listings = [];\n    this.mapRef = null;\n    let mapReattachmentCount = 0;\n\n    if (typeof window !== 'undefined') {\n      if (window.mapReattachmentCount) {\n        mapReattachmentCount = window.mapReattachmentCount;\n      } else {\n        window.mapReattachmentCount = 0;\n      }\n    }\n\n    this.state = {\n      infoCardOpen: null,\n      mapReattachmentCount\n    };\n    this.createURLToListing = this.createURLToListing.bind(this);\n    this.onListingInfoCardClicked = this.onListingInfoCardClicked.bind(this);\n    this.onListingClicked = this.onListingClicked.bind(this);\n    this.onMapClicked = this.onMapClicked.bind(this);\n    this.onMapLoadHandler = this.onMapLoadHandler.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.listings = [];\n  }\n\n  createURLToListing(listing) {\n    const routes = routeConfiguration();\n    const id = listing.id.uuid;\n    const slug = createSlug(listing.attributes.title);\n    const pathParams = {\n      id,\n      slug\n    };\n    return createResourceLocatorString('ListingPage', routes, pathParams, {});\n  }\n\n  onListingClicked(listings) {\n    this.setState({\n      infoCardOpen: listings\n    });\n  }\n\n  onListingInfoCardClicked(listing) {\n    if (this.props.onCloseAsModal) {\n      this.props.onCloseAsModal();\n    } // To avoid full page refresh we need to use internal router\n\n\n    const history = this.props.history;\n    history.push(this.createURLToListing(listing));\n  }\n\n  onMapClicked(e) {\n    // Close open listing popup / infobox, unless the click is attached to a price label\n    const labelClicked = hasParentWithClassName(e.nativeEvent.target, LABEL_HANDLE);\n    const infoCardClicked = hasParentWithClassName(e.nativeEvent.target, INFO_CARD_HANDLE);\n\n    if (this.state.infoCardOpen != null && !labelClicked && !infoCardClicked) {\n      this.setState({\n        infoCardOpen: null\n      });\n    }\n  }\n\n  onMapLoadHandler(map) {\n    this.mapRef = map;\n\n    if (this.mapRef && this.state.mapReattachmentCount === 0) {\n      // map is ready, let's fit search area's bounds to map's viewport\n      fitMapToBounds(this.mapRef, this.props.bounds, {\n        padding: 0,\n        isAutocompleteSearch: true\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          rootClassName = _this$props.rootClassName,\n          reusableContainerClassName = _this$props.reusableContainerClassName,\n          bounds = _this$props.bounds,\n          center = _this$props.center,\n          location = _this$props.location,\n          originalListings = _this$props.listings,\n          onMapMoveEnd = _this$props.onMapMoveEnd,\n          zoom = _this$props.zoom,\n          mapsConfig = _this$props.mapsConfig,\n          activeListingId = _this$props.activeListingId,\n          messages = _this$props.messages;\n    const classes = classNames(rootClassName || css.root, className);\n    const listingsWithLocation = originalListings.filter(l => !!l.attributes.geolocation);\n    const listings = mapsConfig.fuzzy.enabled ? withCoordinatesObfuscated(listingsWithLocation) : listingsWithLocation;\n    const infoCardOpen = this.state.infoCardOpen;\n\n    const forceUpdateHandler = () => {\n      // Update global reattachement count\n      window.mapReattachmentCount += 1; // Initiate rerendering\n\n      this.setState({\n        mapReattachmentCount: window.mapReattachmentCount\n      });\n    }; // When changing from default map provider to Google Maps, you should use the following\n    // component instead of SearchMapWithMapbox:\n    //\n    // <SearchMapWithGoogleMap\n    //   containerElement={\n    //     <div id=\"search-map-container\" className={classes} onClick={this.onMapClicked} />\n    //   }\n    //   mapElement={<div className={mapRootClassName || css.mapRoot} />}\n    //   bounds={bounds}\n    //   center={center}\n    //   location={location}\n    //   infoCardOpen={infoCardOpen}\n    //   listings={listings}\n    //   activeListingId={activeListingId}\n    //   mapComponentRefreshToken={this.state.mapReattachmentCount}\n    //   createURLToListing={this.createURLToListing}\n    //   onListingClicked={this.onListingClicked}\n    //   onListingInfoCardClicked={this.onListingInfoCardClicked}\n    //   onMapLoad={this.onMapLoadHandler}\n    //   onMapMoveEnd={onMapMoveEnd}\n    //   zoom={zoom}\n    // />\n\n\n    return isMapsLibLoaded() ? React.createElement(ReusableMapContainer, {\n      className: reusableContainerClassName,\n      reusableMapHiddenHandle: REUSABLE_MAP_HIDDEN_HANDLE,\n      onReattach: forceUpdateHandler,\n      messages: messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(SearchMapWithMapbox, {\n      className: classes,\n      bounds: bounds,\n      center: center,\n      location: location,\n      infoCardOpen: infoCardOpen,\n      listings: listings,\n      activeListingId: activeListingId,\n      mapComponentRefreshToken: this.state.mapReattachmentCount,\n      createURLToListing: this.createURLToListing,\n      onListingClicked: this.onListingClicked,\n      onListingInfoCardClicked: this.onListingInfoCardClicked,\n      onMapLoad: this.onMapLoadHandler,\n      onClick: this.onMapClicked,\n      onMapMoveEnd: onMapMoveEnd,\n      zoom: zoom,\n      reusableMapHiddenHandle: REUSABLE_MAP_HIDDEN_HANDLE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    });\n  }\n\n}\nSearchMapComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  mapRootClassName: null,\n  reusableContainerClassName: null,\n  bounds: null,\n  center: null,\n  activeListingId: null,\n  listings: [],\n  onCloseAsModal: null,\n  zoom: 11,\n  mapsConfig: config.maps\n};\nSearchMapComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  mapRootClassName: string,\n  reusableContainerClassName: string,\n  bounds: propTypes.latlngBounds,\n  center: propTypes.latlng,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  activeListingId: propTypes.uuid,\n  listings: arrayOf(propTypes.listing),\n  onCloseAsModal: func,\n  onMapMoveEnd: func.isRequired,\n  zoom: number,\n  mapsConfig: object,\n  messages: object.isRequired,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\nconst SearchMap = withRouter(SearchMapComponent);\nSearchMap.getMapBounds = getMapBounds;\nSearchMap.getMapCenter = getMapCenter;\nexport default SearchMap;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/SearchMap/SearchMap.js"],"names":["React","Component","arrayOf","func","number","string","shape","object","withRouter","classNames","routeConfiguration","createResourceLocatorString","createSlug","propTypes","obfuscatedCoordinates","config","hasParentWithClassName","SearchMapWithMapbox","LABEL_HANDLE","INFO_CARD_HANDLE","getMapBounds","getMapCenter","fitMapToBounds","isMapsLibLoaded","ReusableMapContainer","css","REUSABLE_MAP_HIDDEN_HANDLE","withCoordinatesObfuscated","listings","map","listing","id","attributes","rest","origGeolocation","geolocation","cacheKey","uuid","lat","lng","SearchMapComponent","constructor","props","mapRef","mapReattachmentCount","window","state","infoCardOpen","createURLToListing","bind","onListingInfoCardClicked","onListingClicked","onMapClicked","onMapLoadHandler","componentWillUnmount","routes","slug","title","pathParams","setState","onCloseAsModal","history","push","e","labelClicked","nativeEvent","target","infoCardClicked","bounds","padding","isAutocompleteSearch","render","className","rootClassName","reusableContainerClassName","center","location","originalListings","onMapMoveEnd","zoom","mapsConfig","activeListingId","messages","classes","root","listingsWithLocation","filter","l","fuzzy","enabled","forceUpdateHandler","defaultProps","mapRootClassName","maps","latlngBounds","latlng","search","isRequired","SearchMap"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { arrayOf, func, number, string, shape, object } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { createSlug } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { obfuscatedCoordinates } from '../../util/maps';\nimport config from '../../config';\n\nimport { hasParentWithClassName } from './SearchMap.helpers.js';\nimport SearchMapWithMapbox, {\n  LABEL_HANDLE,\n  INFO_CARD_HANDLE,\n  getMapBounds,\n  getMapCenter,\n  fitMapToBounds,\n  isMapsLibLoaded,\n} from './SearchMapWithMapbox';\nimport ReusableMapContainer from './ReusableMapContainer';\nimport css from './SearchMap.css';\n\nconst REUSABLE_MAP_HIDDEN_HANDLE = 'reusableMapHidden';\n\nconst withCoordinatesObfuscated = listings => {\n  return listings.map(listing => {\n    const { id, attributes, ...rest } = listing;\n    const origGeolocation = attributes.geolocation;\n    const cacheKey = id ? `${id.uuid}_${origGeolocation.lat}_${origGeolocation.lng}` : null;\n    const geolocation = obfuscatedCoordinates(origGeolocation, cacheKey);\n    return {\n      id,\n      ...rest,\n      attributes: {\n        ...attributes,\n        geolocation,\n      },\n    };\n  });\n};\n\nexport class SearchMapComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.listings = [];\n    this.mapRef = null;\n\n    let mapReattachmentCount = 0;\n\n    if (typeof window !== 'undefined') {\n      if (window.mapReattachmentCount) {\n        mapReattachmentCount = window.mapReattachmentCount;\n      } else {\n        window.mapReattachmentCount = 0;\n      }\n    }\n\n    this.state = { infoCardOpen: null, mapReattachmentCount };\n\n    this.createURLToListing = this.createURLToListing.bind(this);\n    this.onListingInfoCardClicked = this.onListingInfoCardClicked.bind(this);\n    this.onListingClicked = this.onListingClicked.bind(this);\n    this.onMapClicked = this.onMapClicked.bind(this);\n    this.onMapLoadHandler = this.onMapLoadHandler.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.listings = [];\n  }\n\n  createURLToListing(listing) {\n    const routes = routeConfiguration();\n\n    const id = listing.id.uuid;\n    const slug = createSlug(listing.attributes.title);\n    const pathParams = { id, slug };\n\n    return createResourceLocatorString('ListingPage', routes, pathParams, {});\n  }\n\n  onListingClicked(listings) {\n    this.setState({ infoCardOpen: listings });\n  }\n\n  onListingInfoCardClicked(listing) {\n    if (this.props.onCloseAsModal) {\n      this.props.onCloseAsModal();\n    }\n\n    // To avoid full page refresh we need to use internal router\n    const history = this.props.history;\n    history.push(this.createURLToListing(listing));\n  }\n\n  onMapClicked(e) {\n    // Close open listing popup / infobox, unless the click is attached to a price label\n    const labelClicked = hasParentWithClassName(e.nativeEvent.target, LABEL_HANDLE);\n    const infoCardClicked = hasParentWithClassName(e.nativeEvent.target, INFO_CARD_HANDLE);\n    if (this.state.infoCardOpen != null && !labelClicked && !infoCardClicked) {\n      this.setState({ infoCardOpen: null });\n    }\n  }\n\n  onMapLoadHandler(map) {\n    this.mapRef = map;\n\n    if (this.mapRef && this.state.mapReattachmentCount === 0) {\n      // map is ready, let's fit search area's bounds to map's viewport\n      fitMapToBounds(this.mapRef, this.props.bounds, { padding: 0, isAutocompleteSearch: true });\n    }\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      reusableContainerClassName,\n      bounds,\n      center,\n      location,\n      listings: originalListings,\n      onMapMoveEnd,\n      zoom,\n      mapsConfig,\n      activeListingId,\n      messages,\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n\n    const listingsWithLocation = originalListings.filter(l => !!l.attributes.geolocation);\n    const listings = mapsConfig.fuzzy.enabled\n      ? withCoordinatesObfuscated(listingsWithLocation)\n      : listingsWithLocation;\n    const infoCardOpen = this.state.infoCardOpen;\n\n    const forceUpdateHandler = () => {\n      // Update global reattachement count\n      window.mapReattachmentCount += 1;\n      // Initiate rerendering\n      this.setState({ mapReattachmentCount: window.mapReattachmentCount });\n    };\n\n    // When changing from default map provider to Google Maps, you should use the following\n    // component instead of SearchMapWithMapbox:\n    //\n    // <SearchMapWithGoogleMap\n    //   containerElement={\n    //     <div id=\"search-map-container\" className={classes} onClick={this.onMapClicked} />\n    //   }\n    //   mapElement={<div className={mapRootClassName || css.mapRoot} />}\n    //   bounds={bounds}\n    //   center={center}\n    //   location={location}\n    //   infoCardOpen={infoCardOpen}\n    //   listings={listings}\n    //   activeListingId={activeListingId}\n    //   mapComponentRefreshToken={this.state.mapReattachmentCount}\n    //   createURLToListing={this.createURLToListing}\n    //   onListingClicked={this.onListingClicked}\n    //   onListingInfoCardClicked={this.onListingInfoCardClicked}\n    //   onMapLoad={this.onMapLoadHandler}\n    //   onMapMoveEnd={onMapMoveEnd}\n    //   zoom={zoom}\n    // />\n\n    return isMapsLibLoaded() ? (\n      <ReusableMapContainer\n        className={reusableContainerClassName}\n        reusableMapHiddenHandle={REUSABLE_MAP_HIDDEN_HANDLE}\n        onReattach={forceUpdateHandler}\n        messages={messages}\n      >\n        <SearchMapWithMapbox\n          className={classes}\n          bounds={bounds}\n          center={center}\n          location={location}\n          infoCardOpen={infoCardOpen}\n          listings={listings}\n          activeListingId={activeListingId}\n          mapComponentRefreshToken={this.state.mapReattachmentCount}\n          createURLToListing={this.createURLToListing}\n          onListingClicked={this.onListingClicked}\n          onListingInfoCardClicked={this.onListingInfoCardClicked}\n          onMapLoad={this.onMapLoadHandler}\n          onClick={this.onMapClicked}\n          onMapMoveEnd={onMapMoveEnd}\n          zoom={zoom}\n          reusableMapHiddenHandle={REUSABLE_MAP_HIDDEN_HANDLE}\n        />\n      </ReusableMapContainer>\n    ) : (\n      <div className={classes} />\n    );\n  }\n}\n\nSearchMapComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  mapRootClassName: null,\n  reusableContainerClassName: null,\n  bounds: null,\n  center: null,\n  activeListingId: null,\n  listings: [],\n  onCloseAsModal: null,\n  zoom: 11,\n  mapsConfig: config.maps,\n};\n\nSearchMapComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  mapRootClassName: string,\n  reusableContainerClassName: string,\n  bounds: propTypes.latlngBounds,\n  center: propTypes.latlng,\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n  activeListingId: propTypes.uuid,\n  listings: arrayOf(propTypes.listing),\n  onCloseAsModal: func,\n  onMapMoveEnd: func.isRequired,\n  zoom: number,\n  mapsConfig: object,\n  messages: object.isRequired,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nconst SearchMap = withRouter(SearchMapComponent);\n\nSearchMap.getMapBounds = getMapBounds;\nSearchMap.getMapCenter = getMapCenter;\n\nexport default SearchMap;\n"]},"metadata":{},"sourceType":"module"}