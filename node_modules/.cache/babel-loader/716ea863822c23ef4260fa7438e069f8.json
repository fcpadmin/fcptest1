{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ProfilePage/ProfilePage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { REVIEW_TYPE_OF_PROVIDER, REVIEW_TYPE_OF_CUSTOMER, propTypes } from '../../util/types';\nimport { ensureCurrentUser, ensureUser } from '../../util/data';\nimport { withViewport } from '../../util/contextHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { Page, LayoutSideNavigation, LayoutWrapperMain, LayoutWrapperSideNav, LayoutWrapperTopbar, LayoutWrapperFooter, Footer, AvatarLarge, NamedLink, ListingCard, Reviews, ButtonTabNavHorizontal } from '../../components';\nimport { TopbarContainer, NotFoundPage } from '../../containers';\nimport { loadData } from './ProfilePage.duck';\nimport config from '../../config';\nimport css from './ProfilePage.css';\nconst UUID = sdkTypes.UUID;\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\nexport class ProfilePageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // keep track of which reviews tab to show in desktop viewport\n      showReviewsType: REVIEW_TYPE_OF_PROVIDER\n    };\n    this.showOfProviderReviews = this.showOfProviderReviews.bind(this);\n    this.showOfCustomerReviews = this.showOfCustomerReviews.bind(this);\n  }\n\n  showOfProviderReviews() {\n    this.setState({\n      showReviewsType: REVIEW_TYPE_OF_PROVIDER\n    });\n  }\n\n  showOfCustomerReviews() {\n    this.setState({\n      showReviewsType: REVIEW_TYPE_OF_CUSTOMER\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          scrollingDisabled = _this$props.scrollingDisabled,\n          currentUser = _this$props.currentUser,\n          user = _this$props.user,\n          userShowError = _this$props.userShowError,\n          queryListingsError = _this$props.queryListingsError,\n          listings = _this$props.listings,\n          reviews = _this$props.reviews,\n          queryReviewsError = _this$props.queryReviewsError,\n          viewport = _this$props.viewport,\n          intl = _this$props.intl;\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\n    const profileUser = ensureUser(user);\n    const isCurrentUser = ensuredCurrentUser.id && profileUser.id && ensuredCurrentUser.id.uuid === profileUser.id.uuid;\n    const displayName = profileUser.attributes.profile.displayName;\n    const bio = profileUser.attributes.profile.bio;\n    const hasBio = !!bio;\n    const hasListings = listings.length > 0;\n    const isMobileLayout = viewport.width < MAX_MOBILE_SCREEN_WIDTH;\n    const editLinkMobile = isCurrentUser ? React.createElement(NamedLink, {\n      className: css.editLinkMobile,\n      name: \"ProfileSettingsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.editProfileLinkMobile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })) : null;\n    const editLinkDesktop = isCurrentUser ? React.createElement(NamedLink, {\n      className: css.editLinkDesktop,\n      name: \"ProfileSettingsPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.editProfileLinkDesktop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })) : null;\n    const asideContent = React.createElement(\"div\", {\n      className: css.asideContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(AvatarLarge, {\n      className: css.avatar,\n      user: user,\n      disableProfileLink: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: css.mobileHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, displayName ? React.createElement(FormattedMessage, {\n      id: \"ProfilePage.mobileHeading\",\n      values: {\n        name: displayName\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }) : null), editLinkMobile, editLinkDesktop);\n    const listingsContainerClasses = classNames(css.listingsContainer, {\n      [css.withBioMissingAbove]: !hasBio\n    });\n    const reviewsError = React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.loadingReviewsFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n    const reviewsOfProvider = reviews.filter(r => r.attributes.type === REVIEW_TYPE_OF_PROVIDER);\n    const reviewsOfCustomer = reviews.filter(r => r.attributes.type === REVIEW_TYPE_OF_CUSTOMER);\n    const mobileReviews = React.createElement(\"div\", {\n      className: css.mobileReviews,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: css.mobileReviewsTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.reviewsOfProviderTitle\",\n      values: {\n        count: reviewsOfProvider.length\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), queryReviewsError ? reviewsError : null, React.createElement(Reviews, {\n      reviews: reviewsOfProvider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: css.mobileReviewsTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.reviewsOfCustomerTitle\",\n      values: {\n        count: reviewsOfCustomer.length\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), queryReviewsError ? reviewsError : null, React.createElement(Reviews, {\n      reviews: reviewsOfCustomer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n    const desktopReviewTabs = [{\n      text: React.createElement(\"h3\", {\n        className: css.desktopReviewsTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ProfilePage.reviewsOfProviderTitle\",\n        values: {\n          count: reviewsOfProvider.length\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })),\n      selected: this.state.showReviewsType === REVIEW_TYPE_OF_PROVIDER,\n      onClick: this.showOfProviderReviews\n    }, {\n      text: React.createElement(\"h3\", {\n        className: css.desktopReviewsTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ProfilePage.reviewsOfCustomerTitle\",\n        values: {\n          count: reviewsOfCustomer.length\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })),\n      selected: this.state.showReviewsType === REVIEW_TYPE_OF_CUSTOMER,\n      onClick: this.showOfCustomerReviews\n    }];\n    const desktopReviews = React.createElement(\"div\", {\n      className: css.desktopReviews,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(ButtonTabNavHorizontal, {\n      className: css.desktopReviewsTabNav,\n      tabs: desktopReviewTabs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), queryReviewsError ? reviewsError : null, this.state.showReviewsType === REVIEW_TYPE_OF_PROVIDER ? React.createElement(Reviews, {\n      reviews: reviewsOfProvider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }) : React.createElement(Reviews, {\n      reviews: reviewsOfCustomer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }));\n    const mainContent = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: css.desktopHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.desktopHeading\",\n      values: {\n        name: displayName\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), hasBio ? React.createElement(\"p\", {\n      className: css.bio,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, bio) : null, hasListings ? React.createElement(\"div\", {\n      className: listingsContainerClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: css.listingsTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ProfilePage.listingsTitle\",\n      values: {\n        count: listings.length\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: css.listings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, listings.map(l => React.createElement(\"li\", {\n      className: css.listing,\n      key: l.id.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(ListingCard, {\n      listing: l,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }))))) : null, isMobileLayout ? mobileReviews : desktopReviews);\n    let content;\n\n    if (userShowError && userShowError.status === 404) {\n      return React.createElement(NotFoundPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      });\n    } else if (userShowError || queryListingsError) {\n      content = React.createElement(\"p\", {\n        className: css.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ProfilePage.loadingDataFailed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }));\n    } else {\n      content = mainContent;\n    }\n\n    const schemaTitle = intl.formatMessage({\n      id: 'ProfilePage.schemaTitle'\n    }, {\n      name: displayName,\n      siteTitle: config.siteTitle\n    });\n    return React.createElement(Page, {\n      scrollingDisabled: scrollingDisabled,\n      title: schemaTitle,\n      schema: {\n        '@context': 'http://schema.org',\n        '@type': 'ProfilePage',\n        name: schemaTitle\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(LayoutSideNavigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(LayoutWrapperTopbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(TopbarContainer, {\n      currentPage: \"ProfilePage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })), React.createElement(LayoutWrapperSideNav, {\n      className: css.aside,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, asideContent), React.createElement(LayoutWrapperMain, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, content), React.createElement(LayoutWrapperFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }))));\n  }\n\n}\nProfilePageComponent.defaultProps = {\n  currentUser: null,\n  user: null,\n  userShowError: null,\n  queryListingsError: null,\n  reviews: [],\n  queryReviewsError: null\n};\nconst bool = PropTypes.bool,\n      arrayOf = PropTypes.arrayOf,\n      number = PropTypes.number,\n      shape = PropTypes.shape;\nProfilePageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  user: propTypes.user,\n  userShowError: propTypes.error,\n  queryListingsError: propTypes.error,\n  listings: arrayOf(propTypes.listing).isRequired,\n  reviews: arrayOf(propTypes.review),\n  queryReviewsError: propTypes.error,\n  // form withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const currentUser = state.user.currentUser;\n  const _state$ProfilePage = state.ProfilePage,\n        userId = _state$ProfilePage.userId,\n        userShowError = _state$ProfilePage.userShowError,\n        queryListingsError = _state$ProfilePage.queryListingsError,\n        userListingRefs = _state$ProfilePage.userListingRefs,\n        reviews = _state$ProfilePage.reviews,\n        queryReviewsError = _state$ProfilePage.queryReviewsError;\n  const userMatches = getMarketplaceEntities(state, [{\n    type: 'user',\n    id: userId\n  }]);\n  const user = userMatches.length === 1 ? userMatches[0] : null;\n  const listings = getMarketplaceEntities(state, userListingRefs);\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    currentUser,\n    user,\n    userShowError,\n    queryListingsError,\n    listings,\n    reviews,\n    queryReviewsError\n  };\n};\n\nconst ProfilePage = compose(connect(mapStateToProps), withViewport, injectIntl)(ProfilePageComponent);\n\nProfilePage.loadData = params => {\n  const id = new UUID(params.id);\n  return loadData(id);\n};\n\nexport default ProfilePage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/ProfilePage/ProfilePage.js"],"names":["React","Component","PropTypes","injectIntl","intlShape","FormattedMessage","compose","connect","classNames","types","sdkTypes","REVIEW_TYPE_OF_PROVIDER","REVIEW_TYPE_OF_CUSTOMER","propTypes","ensureCurrentUser","ensureUser","withViewport","isScrollingDisabled","getMarketplaceEntities","Page","LayoutSideNavigation","LayoutWrapperMain","LayoutWrapperSideNav","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","AvatarLarge","NamedLink","ListingCard","Reviews","ButtonTabNavHorizontal","TopbarContainer","NotFoundPage","loadData","config","css","UUID","MAX_MOBILE_SCREEN_WIDTH","ProfilePageComponent","constructor","props","state","showReviewsType","showOfProviderReviews","bind","showOfCustomerReviews","setState","render","scrollingDisabled","currentUser","user","userShowError","queryListingsError","listings","reviews","queryReviewsError","viewport","intl","ensuredCurrentUser","profileUser","isCurrentUser","id","uuid","displayName","attributes","profile","bio","hasBio","hasListings","length","isMobileLayout","width","editLinkMobile","editLinkDesktop","asideContent","avatar","mobileHeading","name","listingsContainerClasses","listingsContainer","withBioMissingAbove","reviewsError","error","reviewsOfProvider","filter","r","type","reviewsOfCustomer","mobileReviews","mobileReviewsTitle","count","desktopReviewTabs","text","desktopReviewsTitle","selected","onClick","desktopReviews","desktopReviewsTabNav","mainContent","desktopHeading","listingsTitle","map","l","listing","content","status","schemaTitle","formatMessage","siteTitle","aside","defaultProps","bool","arrayOf","number","shape","isRequired","review","height","mapStateToProps","ProfilePage","userId","userListingRefs","userMatches","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { REVIEW_TYPE_OF_PROVIDER, REVIEW_TYPE_OF_CUSTOMER, propTypes } from '../../util/types';\nimport { ensureCurrentUser, ensureUser } from '../../util/data';\nimport { withViewport } from '../../util/contextHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport {\n  Page,\n  LayoutSideNavigation,\n  LayoutWrapperMain,\n  LayoutWrapperSideNav,\n  LayoutWrapperTopbar,\n  LayoutWrapperFooter,\n  Footer,\n  AvatarLarge,\n  NamedLink,\n  ListingCard,\n  Reviews,\n  ButtonTabNavHorizontal,\n} from '../../components';\nimport { TopbarContainer, NotFoundPage } from '../../containers';\nimport { loadData } from './ProfilePage.duck';\nimport config from '../../config';\n\nimport css from './ProfilePage.css';\n\nconst { UUID } = sdkTypes;\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nexport class ProfilePageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // keep track of which reviews tab to show in desktop viewport\n      showReviewsType: REVIEW_TYPE_OF_PROVIDER,\n    };\n\n    this.showOfProviderReviews = this.showOfProviderReviews.bind(this);\n    this.showOfCustomerReviews = this.showOfCustomerReviews.bind(this);\n  }\n\n  showOfProviderReviews() {\n    this.setState({\n      showReviewsType: REVIEW_TYPE_OF_PROVIDER,\n    });\n  }\n\n  showOfCustomerReviews() {\n    this.setState({\n      showReviewsType: REVIEW_TYPE_OF_CUSTOMER,\n    });\n  }\n\n  render() {\n    const {\n      scrollingDisabled,\n      currentUser,\n      user,\n      userShowError,\n      queryListingsError,\n      listings,\n      reviews,\n      queryReviewsError,\n      viewport,\n      intl,\n    } = this.props;\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\n    const profileUser = ensureUser(user);\n    const isCurrentUser =\n      ensuredCurrentUser.id && profileUser.id && ensuredCurrentUser.id.uuid === profileUser.id.uuid;\n    const displayName = profileUser.attributes.profile.displayName;\n    const bio = profileUser.attributes.profile.bio;\n    const hasBio = !!bio;\n    const hasListings = listings.length > 0;\n    const isMobileLayout = viewport.width < MAX_MOBILE_SCREEN_WIDTH;\n\n    const editLinkMobile = isCurrentUser ? (\n      <NamedLink className={css.editLinkMobile} name=\"ProfileSettingsPage\">\n        <FormattedMessage id=\"ProfilePage.editProfileLinkMobile\" />\n      </NamedLink>\n    ) : null;\n    const editLinkDesktop = isCurrentUser ? (\n      <NamedLink className={css.editLinkDesktop} name=\"ProfileSettingsPage\">\n        <FormattedMessage id=\"ProfilePage.editProfileLinkDesktop\" />\n      </NamedLink>\n    ) : null;\n\n    const asideContent = (\n      <div className={css.asideContent}>\n        <AvatarLarge className={css.avatar} user={user} disableProfileLink />\n        <h1 className={css.mobileHeading}>\n          {displayName ? (\n            <FormattedMessage id=\"ProfilePage.mobileHeading\" values={{ name: displayName }} />\n          ) : null}\n        </h1>\n        {editLinkMobile}\n        {editLinkDesktop}\n      </div>\n    );\n\n    const listingsContainerClasses = classNames(css.listingsContainer, {\n      [css.withBioMissingAbove]: !hasBio,\n    });\n\n    const reviewsError = (\n      <p className={css.error}>\n        <FormattedMessage id=\"ProfilePage.loadingReviewsFailed\" />\n      </p>\n    );\n\n    const reviewsOfProvider = reviews.filter(r => r.attributes.type === REVIEW_TYPE_OF_PROVIDER);\n\n    const reviewsOfCustomer = reviews.filter(r => r.attributes.type === REVIEW_TYPE_OF_CUSTOMER);\n\n    const mobileReviews = (\n      <div className={css.mobileReviews}>\n        <h2 className={css.mobileReviewsTitle}>\n          <FormattedMessage\n            id=\"ProfilePage.reviewsOfProviderTitle\"\n            values={{ count: reviewsOfProvider.length }}\n          />\n        </h2>\n        {queryReviewsError ? reviewsError : null}\n        <Reviews reviews={reviewsOfProvider} />\n        <h2 className={css.mobileReviewsTitle}>\n          <FormattedMessage\n            id=\"ProfilePage.reviewsOfCustomerTitle\"\n            values={{ count: reviewsOfCustomer.length }}\n          />\n        </h2>\n        {queryReviewsError ? reviewsError : null}\n        <Reviews reviews={reviewsOfCustomer} />\n      </div>\n    );\n\n    const desktopReviewTabs = [\n      {\n        text: (\n          <h3 className={css.desktopReviewsTitle}>\n            <FormattedMessage\n              id=\"ProfilePage.reviewsOfProviderTitle\"\n              values={{ count: reviewsOfProvider.length }}\n            />\n          </h3>\n        ),\n        selected: this.state.showReviewsType === REVIEW_TYPE_OF_PROVIDER,\n        onClick: this.showOfProviderReviews,\n      },\n      {\n        text: (\n          <h3 className={css.desktopReviewsTitle}>\n            <FormattedMessage\n              id=\"ProfilePage.reviewsOfCustomerTitle\"\n              values={{ count: reviewsOfCustomer.length }}\n            />\n          </h3>\n        ),\n        selected: this.state.showReviewsType === REVIEW_TYPE_OF_CUSTOMER,\n        onClick: this.showOfCustomerReviews,\n      },\n    ];\n\n    const desktopReviews = (\n      <div className={css.desktopReviews}>\n        <ButtonTabNavHorizontal className={css.desktopReviewsTabNav} tabs={desktopReviewTabs} />\n\n        {queryReviewsError ? reviewsError : null}\n\n        {this.state.showReviewsType === REVIEW_TYPE_OF_PROVIDER ? (\n          <Reviews reviews={reviewsOfProvider} />\n        ) : (\n          <Reviews reviews={reviewsOfCustomer} />\n        )}\n      </div>\n    );\n\n    const mainContent = (\n      <div>\n        <h1 className={css.desktopHeading}>\n          <FormattedMessage id=\"ProfilePage.desktopHeading\" values={{ name: displayName }} />\n        </h1>\n        {hasBio ? <p className={css.bio}>{bio}</p> : null}\n        {hasListings ? (\n          <div className={listingsContainerClasses}>\n            <h2 className={css.listingsTitle}>\n              <FormattedMessage\n                id=\"ProfilePage.listingsTitle\"\n                values={{ count: listings.length }}\n              />\n            </h2>\n            <ul className={css.listings}>\n              {listings.map(l => (\n                <li className={css.listing} key={l.id.uuid}>\n                  <ListingCard listing={l} />\n                </li>\n              ))}\n            </ul>\n          </div>\n        ) : null}\n        {isMobileLayout ? mobileReviews : desktopReviews}\n      </div>\n    );\n\n    let content;\n\n    if (userShowError && userShowError.status === 404) {\n      return <NotFoundPage />;\n    } else if (userShowError || queryListingsError) {\n      content = (\n        <p className={css.error}>\n          <FormattedMessage id=\"ProfilePage.loadingDataFailed\" />\n        </p>\n      );\n    } else {\n      content = mainContent;\n    }\n\n    const schemaTitle = intl.formatMessage(\n      {\n        id: 'ProfilePage.schemaTitle',\n      },\n      {\n        name: displayName,\n        siteTitle: config.siteTitle,\n      }\n    );\n\n    return (\n      <Page\n        scrollingDisabled={scrollingDisabled}\n        title={schemaTitle}\n        schema={{\n          '@context': 'http://schema.org',\n          '@type': 'ProfilePage',\n          name: schemaTitle,\n        }}\n      >\n        <LayoutSideNavigation>\n          <LayoutWrapperTopbar>\n            <TopbarContainer currentPage=\"ProfilePage\" />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperSideNav className={css.aside}>{asideContent}</LayoutWrapperSideNav>\n          <LayoutWrapperMain>{content}</LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSideNavigation>\n      </Page>\n    );\n  }\n}\n\nProfilePageComponent.defaultProps = {\n  currentUser: null,\n  user: null,\n  userShowError: null,\n  queryListingsError: null,\n  reviews: [],\n  queryReviewsError: null,\n};\n\nconst { bool, arrayOf, number, shape } = PropTypes;\n\nProfilePageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  user: propTypes.user,\n  userShowError: propTypes.error,\n  queryListingsError: propTypes.error,\n  listings: arrayOf(propTypes.listing).isRequired,\n  reviews: arrayOf(propTypes.review),\n  queryReviewsError: propTypes.error,\n\n  // form withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n  const {\n    userId,\n    userShowError,\n    queryListingsError,\n    userListingRefs,\n    reviews,\n    queryReviewsError,\n  } = state.ProfilePage;\n  const userMatches = getMarketplaceEntities(state, [{ type: 'user', id: userId }]);\n  const user = userMatches.length === 1 ? userMatches[0] : null;\n  const listings = getMarketplaceEntities(state, userListingRefs);\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    currentUser,\n    user,\n    userShowError,\n    queryListingsError,\n    listings,\n    reviews,\n    queryReviewsError,\n  };\n};\n\nconst ProfilePage = compose(\n  connect(mapStateToProps),\n  withViewport,\n  injectIntl\n)(ProfilePageComponent);\n\nProfilePage.loadData = params => {\n  const id = new UUID(params.id);\n  return loadData(id);\n};\n\nexport default ProfilePage;\n"]},"metadata":{},"sourceType":"module"}