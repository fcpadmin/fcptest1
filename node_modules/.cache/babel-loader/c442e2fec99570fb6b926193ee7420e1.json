{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/PasswordResetPage/PasswordResetPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Page, NamedLink, IconKeys, IconKeysSuccess, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer } from '../../components';\nimport { PasswordResetForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\nimport { resetPassword } from './PasswordResetPage.duck';\nimport css from './PasswordResetPage.css';\n\nconst parseUrlParams = location => {\n  const params = parse(location.search);\n  const token = params.t,\n        email = params.e;\n  return {\n    token,\n    email\n  };\n};\n\nexport class PasswordResetPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newPasswordSubmitted: false\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          intl = _this$props.intl,\n          scrollingDisabled = _this$props.scrollingDisabled,\n          location = _this$props.location,\n          resetPasswordInProgress = _this$props.resetPasswordInProgress,\n          resetPasswordError = _this$props.resetPasswordError,\n          onSubmitPassword = _this$props.onSubmitPassword;\n    const title = intl.formatMessage({\n      id: 'PasswordResetPage.title'\n    });\n\n    const _parseUrlParams = parseUrlParams(location),\n          token = _parseUrlParams.token,\n          email = _parseUrlParams.email;\n\n    const paramsValid = !!(token && email);\n\n    const handleSubmit = values => {\n      const password = values.password;\n      this.setState({\n        newPasswordSubmitted: false\n      });\n      onSubmitPassword(email, token, password).then(() => {\n        this.setState({\n          newPasswordSubmitted: true\n        });\n      });\n    };\n\n    const recoveryLink = React.createElement(NamedLink, {\n      name: \"PasswordRecoveryPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.recoveryLinkText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n    const paramsErrorContent = React.createElement(\"div\", {\n      className: css.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.invalidUrlParams\",\n      values: {\n        recoveryLink\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })));\n    const resetFormContent = React.createElement(\"div\", {\n      className: css.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(IconKeys, {\n      className: css.modalIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.mainHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: css.modalMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.helpText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), resetPasswordError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.resetFailed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })) : null, React.createElement(PasswordResetForm, {\n      className: css.form,\n      onSubmit: handleSubmit,\n      inProgress: resetPasswordInProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n    const resetDoneContent = React.createElement(\"div\", {\n      className: css.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(IconKeysSuccess, {\n      className: css.modalIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.passwordChangedHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: css.modalMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.passwordChangedHelpText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(NamedLink, {\n      name: \"LoginPage\",\n      className: css.submitButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.loginButtonText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n    let content;\n\n    if (!paramsValid) {\n      content = paramsErrorContent;\n    } else if (!resetPasswordError && this.state.newPasswordSubmitted) {\n      content = resetDoneContent;\n    } else {\n      content = resetFormContent;\n    }\n\n    return React.createElement(Page, {\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      referrer: \"origin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(LayoutSingleColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(LayoutWrapperTopbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(TopbarContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(LayoutWrapperMain, {\n      className: css.layoutWrapperMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, content)), React.createElement(LayoutWrapperFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))));\n  }\n\n}\nPasswordResetPageComponent.defaultProps = {\n  resetPasswordError: null\n};\nconst bool = PropTypes.bool,\n      func = PropTypes.func,\n      shape = PropTypes.shape,\n      string = PropTypes.string;\nPasswordResetPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  resetPasswordInProgress: bool.isRequired,\n  resetPasswordError: propTypes.error,\n  onSubmitPassword: func.isRequired,\n  // from withRouter\n  location: shape({\n    search: string\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const _state$PasswordResetP = state.PasswordResetPage,\n        resetPasswordInProgress = _state$PasswordResetP.resetPasswordInProgress,\n        resetPasswordError = _state$PasswordResetP.resetPasswordError;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    resetPasswordInProgress,\n    resetPasswordError\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmitPassword: (email, token, password) => dispatch(resetPassword(email, token, password))\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst PasswordResetPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(PasswordResetPageComponent);\nexport default PasswordResetPage;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/containers/PasswordResetPage/PasswordResetPage.js"],"names":["React","Component","PropTypes","compose","connect","withRouter","FormattedMessage","injectIntl","intlShape","propTypes","parse","isScrollingDisabled","Page","NamedLink","IconKeys","IconKeysSuccess","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","PasswordResetForm","TopbarContainer","resetPassword","css","parseUrlParams","location","params","search","token","t","email","e","PasswordResetPageComponent","constructor","props","state","newPasswordSubmitted","render","intl","scrollingDisabled","resetPasswordInProgress","resetPasswordError","onSubmitPassword","title","formatMessage","id","paramsValid","handleSubmit","values","password","setState","then","recoveryLink","paramsErrorContent","content","resetFormContent","modalIcon","modalTitle","modalMessage","error","form","resetDoneContent","submitButton","layoutWrapperMain","root","defaultProps","bool","func","shape","string","isRequired","mapStateToProps","PasswordResetPage","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  Page,\n  NamedLink,\n  IconKeys,\n  IconKeysSuccess,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { PasswordResetForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\n\nimport { resetPassword } from './PasswordResetPage.duck';\nimport css from './PasswordResetPage.css';\n\nconst parseUrlParams = location => {\n  const params = parse(location.search);\n  const { t: token, e: email } = params;\n  return { token, email };\n};\n\nexport class PasswordResetPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { newPasswordSubmitted: false };\n  }\n  render() {\n    const {\n      intl,\n      scrollingDisabled,\n      location,\n      resetPasswordInProgress,\n      resetPasswordError,\n      onSubmitPassword,\n    } = this.props;\n\n    const title = intl.formatMessage({\n      id: 'PasswordResetPage.title',\n    });\n\n    const { token, email } = parseUrlParams(location);\n    const paramsValid = !!(token && email);\n\n    const handleSubmit = values => {\n      const { password } = values;\n      this.setState({ newPasswordSubmitted: false });\n      onSubmitPassword(email, token, password).then(() => {\n        this.setState({ newPasswordSubmitted: true });\n      });\n    };\n\n    const recoveryLink = (\n      <NamedLink name=\"PasswordRecoveryPage\">\n        <FormattedMessage id=\"PasswordResetPage.recoveryLinkText\" />\n      </NamedLink>\n    );\n    const paramsErrorContent = (\n      <div className={css.content}>\n        <p>\n          <FormattedMessage id=\"PasswordResetPage.invalidUrlParams\" values={{ recoveryLink }} />\n        </p>\n      </div>\n    );\n\n    const resetFormContent = (\n      <div className={css.content}>\n        <IconKeys className={css.modalIcon} />\n        <h1 className={css.modalTitle}>\n          <FormattedMessage id=\"PasswordResetPage.mainHeading\" />\n        </h1>\n        <p className={css.modalMessage}>\n          <FormattedMessage id=\"PasswordResetPage.helpText\" />\n        </p>\n        {resetPasswordError ? (\n          <p className={css.error}>\n            <FormattedMessage id=\"PasswordResetPage.resetFailed\" />\n          </p>\n        ) : null}\n        <PasswordResetForm\n          className={css.form}\n          onSubmit={handleSubmit}\n          inProgress={resetPasswordInProgress}\n        />\n      </div>\n    );\n\n    const resetDoneContent = (\n      <div className={css.content}>\n        <IconKeysSuccess className={css.modalIcon} />\n        <h1 className={css.modalTitle}>\n          <FormattedMessage id=\"PasswordResetPage.passwordChangedHeading\" />\n        </h1>\n        <p className={css.modalMessage}>\n          <FormattedMessage id=\"PasswordResetPage.passwordChangedHelpText\" />\n        </p>\n        <NamedLink name=\"LoginPage\" className={css.submitButton}>\n          <FormattedMessage id=\"PasswordResetPage.loginButtonText\" />\n        </NamedLink>\n      </div>\n    );\n\n    let content;\n\n    if (!paramsValid) {\n      content = paramsErrorContent;\n    } else if (!resetPasswordError && this.state.newPasswordSubmitted) {\n      content = resetDoneContent;\n    } else {\n      content = resetFormContent;\n    }\n\n    return (\n      <Page title={title} scrollingDisabled={scrollingDisabled} referrer=\"origin\">\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain className={css.layoutWrapperMain}>\n            <div className={css.root}>{content}</div>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nPasswordResetPageComponent.defaultProps = {\n  resetPasswordError: null,\n};\n\nconst { bool, func, shape, string } = PropTypes;\n\nPasswordResetPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  resetPasswordInProgress: bool.isRequired,\n  resetPasswordError: propTypes.error,\n  onSubmitPassword: func.isRequired,\n\n  // from withRouter\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { resetPasswordInProgress, resetPasswordError } = state.PasswordResetPage;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    resetPasswordInProgress,\n    resetPasswordError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmitPassword: (email, token, password) => dispatch(resetPassword(email, token, password)),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst PasswordResetPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(PasswordResetPageComponent);\n\nexport default PasswordResetPage;\n"]},"metadata":{},"sourceType":"module"}