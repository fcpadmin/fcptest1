{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/UserCard/UserCard.js\";\nimport React, { Component } from 'react';\nimport { string, func, oneOfType } from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport truncate from 'lodash/truncate';\nimport classNames from 'classnames';\nimport { AvatarLarge, NamedLink, InlineTextButton } from '../../components';\nimport { ensureUser, ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport css from './UserCard.css'; // Approximated collapsed size so that there are ~three lines of text\n// in the desktop layout in the host section of the ListingPage.\n\nconst BIO_COLLAPSED_LENGTH = 170;\n\nconst truncated = s => {\n  return truncate(s, {\n    length: BIO_COLLAPSED_LENGTH,\n    // Allow truncated text end only in specific characters. This will\n    // make the truncated text shorter than the length if the original\n    // text has to be shortened and the substring ends in a separator.\n    //\n    // This ensures that the final text doesn't get cut in the middle\n    // of a word.\n    separator: /\\s|,|\\.|:|;/,\n    omission: 'â€¦'\n  });\n};\n\nclass ExpandableBio extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expand: false\n    };\n  }\n\n  render() {\n    const expand = this.state.expand;\n    const _this$props = this.props,\n          className = _this$props.className,\n          bio = _this$props.bio;\n    const truncatedBio = truncated(bio);\n\n    const handleShowMoreClick = () => {\n      this.setState({\n        expand: true\n      });\n    };\n\n    const showMore = React.createElement(InlineTextButton, {\n      rootClassName: css.showMore,\n      onClick: handleShowMoreClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"UserCard.showFullBioLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n    return React.createElement(\"p\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, expand ? bio : truncatedBio, bio !== truncatedBio && !expand ? showMore : null);\n  }\n\n}\n\nExpandableBio.defaultProps = {\n  className: null\n};\nExpandableBio.propTypes = {\n  className: string,\n  bio: string.isRequired\n};\n\nconst UserCard = props => {\n  const rootClassName = props.rootClassName,\n        className = props.className,\n        user = props.user,\n        currentUser = props.currentUser,\n        onContactUser = props.onContactUser;\n  const userIsCurrentUser = user && user.type === 'currentUser';\n  const ensuredUser = userIsCurrentUser ? ensureCurrentUser(user) : ensureUser(user);\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const isCurrentUser = ensuredUser.id && ensuredCurrentUser.id && ensuredUser.id.uuid === ensuredCurrentUser.id.uuid;\n  const _ensuredUser$attribut = ensuredUser.attributes.profile,\n        displayName = _ensuredUser$attribut.displayName,\n        bio = _ensuredUser$attribut.bio;\n\n  const handleContactUserClick = () => {\n    onContactUser(user);\n  };\n\n  const hasBio = !!bio;\n  const classes = classNames(rootClassName || css.root, className);\n  const linkClasses = classNames(css.links, {\n    [css.withBioMissingAbove]: !hasBio\n  });\n  const separator = isCurrentUser ? null : React.createElement(\"span\", {\n    className: css.linkSeparator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"\\u2022\");\n  const contact = React.createElement(InlineTextButton, {\n    rootClassName: css.contact,\n    onClick: handleContactUserClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"UserCard.contactUser\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n  const editProfileMobile = React.createElement(\"span\", {\n    className: css.editProfileMobile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: css.linkSeparator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"\\u2022\"), React.createElement(NamedLink, {\n    name: \"ProfileSettingsPage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ListingPage.editProfileLink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n  const editProfileDesktop = isCurrentUser ? React.createElement(NamedLink, {\n    className: css.editProfileDesktop,\n    name: \"ProfileSettingsPage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ListingPage.editProfileLink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })) : null;\n  const links = ensuredUser.id ? React.createElement(\"p\", {\n    className: linkClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(NamedLink, {\n    className: css.link,\n    name: \"ProfilePage\",\n    params: {\n      id: ensuredUser.id.uuid\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"UserCard.viewProfileLink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), separator, isCurrentUser ? editProfileMobile : contact) : null;\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(AvatarLarge, {\n    className: css.avatar,\n    user: user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: css.info,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: css.headingRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: css.heading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"UserCard.heading\",\n    values: {\n      name: displayName\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })), editProfileDesktop), hasBio ? React.createElement(ExpandableBio, {\n    className: css.desktopBio,\n    bio: bio,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }) : null, links)), hasBio ? React.createElement(ExpandableBio, {\n    className: css.mobileBio,\n    bio: bio,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }) : null);\n};\n\nUserCard.defaultProps = {\n  rootClassName: null,\n  className: null,\n  user: null,\n  currentUser: null\n};\nUserCard.propTypes = {\n  rootClassName: string,\n  className: string,\n  user: oneOfType([propTypes.user, propTypes.currentUser]),\n  currentUser: propTypes.currentUser,\n  onContactUser: func.isRequired\n};\nexport default UserCard;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/components/UserCard/UserCard.js"],"names":["React","Component","string","func","oneOfType","FormattedMessage","truncate","classNames","AvatarLarge","NamedLink","InlineTextButton","ensureUser","ensureCurrentUser","propTypes","css","BIO_COLLAPSED_LENGTH","truncated","s","length","separator","omission","ExpandableBio","constructor","props","state","expand","render","className","bio","truncatedBio","handleShowMoreClick","setState","showMore","defaultProps","isRequired","UserCard","rootClassName","user","currentUser","onContactUser","userIsCurrentUser","type","ensuredUser","ensuredCurrentUser","isCurrentUser","id","uuid","attributes","profile","displayName","handleContactUserClick","hasBio","classes","root","linkClasses","links","withBioMissingAbove","linkSeparator","contact","editProfileMobile","editProfileDesktop","link","content","avatar","info","headingRow","heading","name","desktopBio","mobileBio"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, func, oneOfType } from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport truncate from 'lodash/truncate';\nimport classNames from 'classnames';\nimport { AvatarLarge, NamedLink, InlineTextButton } from '../../components';\nimport { ensureUser, ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\n\nimport css from './UserCard.css';\n\n// Approximated collapsed size so that there are ~three lines of text\n// in the desktop layout in the host section of the ListingPage.\nconst BIO_COLLAPSED_LENGTH = 170;\n\nconst truncated = s => {\n  return truncate(s, {\n    length: BIO_COLLAPSED_LENGTH,\n\n    // Allow truncated text end only in specific characters. This will\n    // make the truncated text shorter than the length if the original\n    // text has to be shortened and the substring ends in a separator.\n    //\n    // This ensures that the final text doesn't get cut in the middle\n    // of a word.\n    separator: /\\s|,|\\.|:|;/,\n    omission: 'â€¦',\n  });\n};\n\nclass ExpandableBio extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { expand: false };\n  }\n  render() {\n    const { expand } = this.state;\n    const { className, bio } = this.props;\n    const truncatedBio = truncated(bio);\n\n    const handleShowMoreClick = () => {\n      this.setState({ expand: true });\n    };\n    const showMore = (\n      <InlineTextButton rootClassName={css.showMore} onClick={handleShowMoreClick}>\n        <FormattedMessage id=\"UserCard.showFullBioLink\" />\n      </InlineTextButton>\n    );\n    return (\n      <p className={className}>\n        {expand ? bio : truncatedBio}\n        {bio !== truncatedBio && !expand ? showMore : null}\n      </p>\n    );\n  }\n}\n\nExpandableBio.defaultProps = { className: null };\n\nExpandableBio.propTypes = {\n  className: string,\n  bio: string.isRequired,\n};\n\nconst UserCard = props => {\n  const { rootClassName, className, user, currentUser, onContactUser } = props;\n\n  const userIsCurrentUser = user && user.type === 'currentUser';\n  const ensuredUser = userIsCurrentUser ? ensureCurrentUser(user) : ensureUser(user);\n\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const isCurrentUser =\n    ensuredUser.id && ensuredCurrentUser.id && ensuredUser.id.uuid === ensuredCurrentUser.id.uuid;\n  const { displayName, bio } = ensuredUser.attributes.profile;\n\n  const handleContactUserClick = () => {\n    onContactUser(user);\n  };\n\n  const hasBio = !!bio;\n  const classes = classNames(rootClassName || css.root, className);\n  const linkClasses = classNames(css.links, {\n    [css.withBioMissingAbove]: !hasBio,\n  });\n\n  const separator = isCurrentUser ? null : <span className={css.linkSeparator}>â€¢</span>;\n\n  const contact = (\n    <InlineTextButton rootClassName={css.contact} onClick={handleContactUserClick}>\n      <FormattedMessage id=\"UserCard.contactUser\" />\n    </InlineTextButton>\n  );\n\n  const editProfileMobile = (\n    <span className={css.editProfileMobile}>\n      <span className={css.linkSeparator}>â€¢</span>\n      <NamedLink name=\"ProfileSettingsPage\">\n        <FormattedMessage id=\"ListingPage.editProfileLink\" />\n      </NamedLink>\n    </span>\n  );\n\n  const editProfileDesktop = isCurrentUser ? (\n    <NamedLink className={css.editProfileDesktop} name=\"ProfileSettingsPage\">\n      <FormattedMessage id=\"ListingPage.editProfileLink\" />\n    </NamedLink>\n  ) : null;\n\n  const links = ensuredUser.id ? (\n    <p className={linkClasses}>\n      <NamedLink className={css.link} name=\"ProfilePage\" params={{ id: ensuredUser.id.uuid }}>\n        <FormattedMessage id=\"UserCard.viewProfileLink\" />\n      </NamedLink>\n      {separator}\n      {isCurrentUser ? editProfileMobile : contact}\n    </p>\n  ) : null;\n\n  return (\n    <div className={classes}>\n      <div className={css.content}>\n        <AvatarLarge className={css.avatar} user={user} />\n        <div className={css.info}>\n          <div className={css.headingRow}>\n            <h3 className={css.heading}>\n              <FormattedMessage id=\"UserCard.heading\" values={{ name: displayName }} />\n            </h3>\n            {editProfileDesktop}\n          </div>\n          {hasBio ? <ExpandableBio className={css.desktopBio} bio={bio} /> : null}\n          {links}\n        </div>\n      </div>\n      {hasBio ? <ExpandableBio className={css.mobileBio} bio={bio} /> : null}\n    </div>\n  );\n};\n\nUserCard.defaultProps = {\n  rootClassName: null,\n  className: null,\n  user: null,\n  currentUser: null,\n};\n\nUserCard.propTypes = {\n  rootClassName: string,\n  className: string,\n  user: oneOfType([propTypes.user, propTypes.currentUser]),\n  currentUser: propTypes.currentUser,\n  onContactUser: func.isRequired,\n};\n\nexport default UserCard;\n"]},"metadata":{},"sourceType":"module"}