{"ast":null,"code":"import _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingAvailabilityForm/ManageAvailabilityCalendar.js\";\nimport React, { Component } from 'react';\nimport { func, object, shape, string } from 'prop-types';\nimport { DayPickerSingleDateController, isSameDay, isInclusivelyBeforeDay, isInclusivelyAfterDay } from 'react-dates';\nimport { FormattedMessage } from 'react-intl';\nimport memoize from 'lodash/memoize';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { ensureBooking, ensureAvailabilityException, ensureDayAvailabilityPlan } from '../../util/data';\nimport { DAYS_OF_WEEK } from '../../util/types';\nimport { monthIdString, monthIdStringInUTC } from '../../util/dates';\nimport { IconArrowHead, IconSpinner } from '../../components';\nimport css from './ManageAvailabilityCalendar.css'; // Constants\n\nconst HORIZONTAL_ORIENTATION = 'horizontal';\nconst MAX_AVAILABILITY_EXCEPTIONS_RANGE = 365;\nconst MAX_BOOKINGS_RANGE = 180;\nconst TODAY_MOMENT = moment().startOf('day');\nconst END_OF_RANGE_MOMENT = TODAY_MOMENT.clone().add(MAX_AVAILABILITY_EXCEPTIONS_RANGE - 1, 'days').startOf('day');\nconst END_OF_BOOKING_RANGE_MOMENT = TODAY_MOMENT.clone().add(MAX_BOOKINGS_RANGE - 1, 'days').startOf('day'); // Constants for calculating day width (aka table cell dimensions)\n\nconst TABLE_BORDER = 2;\nconst TABLE_COLUMNS = 7;\nconst MIN_CONTENT_WIDTH = 272;\nconst MIN_CELL_WIDTH = Math.floor(MIN_CONTENT_WIDTH / TABLE_COLUMNS); // 38\n\nconst MAX_CONTENT_WIDTH_DESKTOP = 756;\nconst MAX_CELL_WIDTH_DESKTOP = Math.floor(MAX_CONTENT_WIDTH_DESKTOP / TABLE_COLUMNS); // 108\n\nconst VIEWPORT_LARGE = 1024; // Helper functions\n// Calculate the width for a calendar day (table cell)\n\nconst dayWidth = (wrapperWidth, windowWith) => {\n  if (windowWith >= VIEWPORT_LARGE) {\n    // NOTE: viewportLarge has a layout with sidebar.\n    // In that layout 30% is reserved for paddings and 282 px goes to sidebar and gutter.\n    const width = windowWith * 0.7 - 282;\n    return width > MAX_CONTENT_WIDTH_DESKTOP ? MAX_CELL_WIDTH_DESKTOP : Math.floor((width - TABLE_BORDER) / TABLE_COLUMNS);\n  } else {\n    return wrapperWidth > MIN_CONTENT_WIDTH ? Math.floor((wrapperWidth - TABLE_BORDER) / TABLE_COLUMNS) : MIN_CELL_WIDTH;\n  }\n}; // Get a function that returns the start of the previous month\n\n\nconst prevMonthFn = currentMoment => currentMoment.clone().subtract(1, 'months').startOf('month'); // Get a function that returns the start of the next month\n\n\nconst nextMonthFn = currentMoment => currentMoment.clone().add(1, 'months').startOf('month'); // Get the start and end Dates in UTC\n\n\nconst dateStartAndEndInUTC = date => {\n  const start = moment(date).utc().startOf('day').toDate();\n  const end = moment(date).utc().add(1, 'days').startOf('day').toDate();\n  return {\n    start,\n    end\n  };\n};\n\nconst momentToUTCDate = dateMoment => dateMoment.clone().utc().add(dateMoment.utcOffset(), 'minutes').toDate(); // outside range -><- today ... today+MAX_AVAILABILITY_EXCEPTIONS_RANGE -1 -><- outside range\n\n\nconst isDateOutsideRange = date => {\n  return !isInclusivelyAfterDay(date, TODAY_MOMENT) || !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT);\n};\n\nconst isOutsideRange = memoize(isDateOutsideRange);\n\nconst isMonthInRange = (monthMoment, startOfRange, endOfRange) => {\n  const isAfterThisMonth = monthMoment.isSameOrAfter(startOfRange, 'month');\n  const isBeforeEndOfRange = monthMoment.isSameOrBefore(endOfRange, 'month');\n  return isAfterThisMonth && isBeforeEndOfRange;\n};\n\nconst isPast = date => !isInclusivelyAfterDay(date, TODAY_MOMENT);\n\nconst isAfterEndOfRange = date => !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT);\n\nconst isAfterEndOfBookingRange = date => !isInclusivelyBeforeDay(date, END_OF_BOOKING_RANGE_MOMENT);\n\nconst isBooked = (bookings, day) => {\n  return !!bookings.find(b => {\n    const booking = ensureBooking(b);\n    const start = booking.attributes.start;\n    const end = booking.attributes.end;\n    const dayInUTC = day.clone().utc(); // '[)' means that the range start is inclusive and range end is exclusive\n\n    return dayInUTC.isBetween(moment(start).utc(), moment(end).utc(), null, '[)');\n  });\n};\n\nconst findException = (exceptions, day) => {\n  return exceptions.find(exception => {\n    const availabilityException = ensureAvailabilityException(exception.availabilityException);\n    const start = availabilityException.attributes.start;\n    const dayInUTC = day.clone().utc();\n    return isSameDay(moment(start).utc(), dayInUTC);\n  });\n};\n\nconst isBlocked = (availabilityPlan, exception, date) => {\n  const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\n  const seatsFromPlan = planEntries.find(weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]).seats;\n  const seatsFromException = exception && ensureAvailabilityException(exception.availabilityException).attributes.seats;\n  const seats = exception ? seatsFromException : seatsFromPlan;\n  return seats === 0;\n};\n\nconst dateModifiers = (availabilityPlan, exceptions, bookings, date) => {\n  const exception = findException(exceptions, date);\n  return {\n    isOutsideRange: isOutsideRange(date),\n    isSameDay: isSameDay(date, TODAY_MOMENT),\n    isBlocked: isBlocked(availabilityPlan, exception, date),\n    isBooked: isBooked(bookings, date),\n    isInProgress: exception && exception.inProgress,\n    isFailed: exception && exception.error\n  };\n};\n\nconst renderDayContents = (calendar, availabilityPlan) => date => {\n  // This component is for day/night based processes. If time-based process is used,\n  // you might want to deal with local dates using monthIdString instead of monthIdStringInUTC.\n  const _ref = calendar[monthIdStringInUTC(date)] || {},\n        _ref$exceptions = _ref.exceptions,\n        exceptions = _ref$exceptions === void 0 ? [] : _ref$exceptions,\n        _ref$bookings = _ref.bookings,\n        bookings = _ref$bookings === void 0 ? [] : _ref$bookings;\n\n  const _dateModifiers = dateModifiers(availabilityPlan, exceptions, bookings, date),\n        isOutsideRange = _dateModifiers.isOutsideRange,\n        isSameDay = _dateModifiers.isSameDay,\n        isBlocked = _dateModifiers.isBlocked,\n        isBooked = _dateModifiers.isBooked,\n        isInProgress = _dateModifiers.isInProgress,\n        isFailed = _dateModifiers.isFailed;\n\n  const dayClasses = classNames(css.default, {\n    [css.outsideRange]: isOutsideRange,\n    [css.today]: isSameDay,\n    [css.blocked]: isBlocked,\n    [css.reserved]: isBooked,\n    [css.exceptionError]: isFailed\n  });\n  return React.createElement(\"div\", {\n    className: css.dayWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: dayClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, isInProgress ? React.createElement(IconSpinner, {\n    rootClassName: css.inProgress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }) : React.createElement(\"span\", {\n    className: css.dayNumber,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, date.format('D'))));\n};\n\nconst makeDraftException = (exceptions, start, end, seats) => {\n  const draft = ensureAvailabilityException({\n    attributes: {\n      start,\n      end,\n      seats\n    }\n  });\n  return {\n    availabilityException: draft\n  };\n}; ////////////////////////////////\n// ManageAvailabilityCalendar //\n////////////////////////////////\n\n\nclass ManageAvailabilityCalendar extends Component {\n  constructor(props) {\n    super(props); // DOM refs\n\n    this.dayPickerWrapper = null;\n    this.dayPicker = null;\n    this.state = {\n      currentMonth: moment().startOf('month'),\n      focused: true,\n      date: null\n    };\n    this.fetchMonthData = this.fetchMonthData.bind(this);\n    this.onDayAvailabilityChange = this.onDayAvailabilityChange.bind(this);\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n    this.onMonthClick = this.onMonthClick.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetch month data if user have navigated to availability tab in EditListingWizard\n    this.fetchMonthData(this.state.currentMonth); // Fetch next month too.\n\n    this.fetchMonthData(nextMonthFn(this.state.currentMonth));\n  }\n\n  fetchMonthData(monthMoment) {\n    const _this$props = this.props,\n          availability = _this$props.availability,\n          listingId = _this$props.listingId; // Don't fetch exceptions for past months or too far in the future\n\n    if (isMonthInRange(monthMoment, TODAY_MOMENT, END_OF_RANGE_MOMENT)) {\n      // Use \"today\", if the first day of given month is in the past\n      const startMoment = isPast(monthMoment) ? TODAY_MOMENT : monthMoment;\n      const start = momentToUTCDate(startMoment); // Use END_OF_RANGE_MOMENT, if the first day of the next month is too far in the future\n\n      const nextMonthMoment = nextMonthFn(monthMoment);\n      const endMoment = isAfterEndOfRange(nextMonthMoment) ? END_OF_RANGE_MOMENT.clone().add(1, 'days') : nextMonthMoment;\n      const end = momentToUTCDate(endMoment); // Fetch AvailabilityExceptions for this month\n\n      availability.onFetchAvailabilityExceptions({\n        listingId,\n        start,\n        end\n      }); // Fetch Bookings if the month is within bookable range (180 days)\n\n      if (isMonthInRange(startMoment, TODAY_MOMENT, END_OF_BOOKING_RANGE_MOMENT)) {\n        const endMomentForBookings = isAfterEndOfBookingRange(nextMonthMoment) ? END_OF_BOOKING_RANGE_MOMENT.clone().add(1, 'days') : nextMonthMoment;\n        const endForBookings = momentToUTCDate(endMomentForBookings); // Fetch Bookings for this month (if they are in pending or accepted state)\n\n        const state = ['pending', 'accepted'].join(',');\n        availability.onFetchBookings({\n          listingId,\n          start,\n          end: endForBookings,\n          state\n        });\n      }\n    }\n  }\n\n  onDayAvailabilityChange(date, seats, exceptions) {\n    const _this$props2 = this.props,\n          availabilityPlan = _this$props2.availabilityPlan,\n          listingId = _this$props2.listingId;\n\n    const _dateStartAndEndInUTC = dateStartAndEndInUTC(date),\n          start = _dateStartAndEndInUTC.start,\n          end = _dateStartAndEndInUTC.end;\n\n    const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\n    const seatsFromPlan = planEntries.find(weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]).seats;\n    const currentException = findException(exceptions, date);\n    const draftException = makeDraftException(exceptions, start, end, seatsFromPlan);\n    const exception = currentException || draftException;\n    const hasAvailabilityException = currentException && currentException.availabilityException.id;\n\n    if (hasAvailabilityException) {\n      const id = currentException.availabilityException.id;\n      const isResetToPlanSeats = seatsFromPlan === seats;\n\n      if (isResetToPlanSeats) {\n        // Delete the exception, if the exception is redundant\n        // (it has the same content as what user has in the plan).\n        this.props.availability.onDeleteAvailabilityException({\n          id,\n          currentException: exception,\n          seats: seatsFromPlan\n        });\n      } else {\n        // If availability exception exists, delete it first and then create a new one.\n        // NOTE: currently, API does not support update (only deleting and creating)\n        this.props.availability.onDeleteAvailabilityException({\n          id,\n          currentException: exception,\n          seats: seatsFromPlan\n        }).then(r => {\n          const params = {\n            listingId,\n            start,\n            end,\n            seats,\n            currentException: exception\n          };\n          this.props.availability.onCreateAvailabilityException(params);\n        });\n      }\n    } else {\n      // If there is no existing AvailabilityExceptions, just create a new one\n      const params = {\n        listingId,\n        start,\n        end,\n        seats,\n        currentException: exception\n      };\n      this.props.availability.onCreateAvailabilityException(params);\n    }\n  }\n\n  onDateChange(date) {\n    this.setState({\n      date\n    });\n    const _this$props3 = this.props,\n          availabilityPlan = _this$props3.availabilityPlan,\n          availability = _this$props3.availability;\n    const calendar = availability.calendar; // This component is for day/night based processes. If time-based process is used,\n    // you might want to deal with local dates using monthIdString instead of monthIdStringInUTC.\n\n    const _ref2 = calendar[monthIdStringInUTC(date)] || {},\n          _ref2$exceptions = _ref2.exceptions,\n          exceptions = _ref2$exceptions === void 0 ? [] : _ref2$exceptions,\n          _ref2$bookings = _ref2.bookings,\n          bookings = _ref2$bookings === void 0 ? [] : _ref2$bookings;\n\n    const _dateModifiers2 = dateModifiers(availabilityPlan, exceptions, bookings, date),\n          isPast = _dateModifiers2.isPast,\n          isBlocked = _dateModifiers2.isBlocked,\n          isBooked = _dateModifiers2.isBooked,\n          isInProgress = _dateModifiers2.isInProgress;\n\n    if (isBooked || isPast || isInProgress) {\n      // Cannot allow or block a reserved or a past date or inProgress\n      return;\n    } else if (isBlocked) {\n      // Unblock the date (seats = 1)\n      this.onDayAvailabilityChange(date, 1, exceptions);\n    } else {\n      // Block the date (seats = 0)\n      this.onDayAvailabilityChange(date, 0, exceptions);\n    }\n  }\n\n  onFocusChange() {\n    // Force the state.focused to always be truthy so that date is always selectable\n    this.setState({\n      focused: true\n    });\n  }\n\n  onMonthClick(monthFn) {\n    const onMonthChanged = this.props.onMonthChanged;\n    this.setState(prevState => ({\n      currentMonth: monthFn(prevState.currentMonth)\n    }), () => {\n      // Callback function after month has been updated.\n      // react-dates component has next and previous months ready (but inivisible).\n      // we try to populate those invisible months before user advances there.\n      this.fetchMonthData(monthFn(this.state.currentMonth)); // If previous fetch for month data failed, try again.\n\n      const monthId = monthIdString(this.state.currentMonth);\n      const currentMonthData = this.props.availability.calendar[monthId];\n\n      const _ref3 = currentMonthData || {},\n            fetchExceptionsError = _ref3.fetchExceptionsError,\n            fetchBookingsError = _ref3.fetchBookingsError;\n\n      if (currentMonthData && (fetchExceptionsError || fetchBookingsError)) {\n        this.fetchMonthData(this.state.currentMonth);\n      } // Call onMonthChanged function if it has been passed in among props.\n\n\n      if (onMonthChanged) {\n        onMonthChanged(monthIdString(this.state.currentMonth));\n      }\n    });\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          className = _this$props4.className,\n          rootClassName = _this$props4.rootClassName,\n          listingId = _this$props4.listingId,\n          availability = _this$props4.availability,\n          availabilityPlan = _this$props4.availabilityPlan,\n          onMonthChanged = _this$props4.onMonthChanged,\n          monthFormat = _this$props4.monthFormat,\n          rest = _objectWithoutProperties(_this$props4, [\"className\", \"rootClassName\", \"listingId\", \"availability\", \"availabilityPlan\", \"onMonthChanged\", \"monthFormat\"]);\n\n    const _this$state = this.state,\n          focused = _this$state.focused,\n          date = _this$state.date,\n          currentMonth = _this$state.currentMonth;\n\n    const _ref4 = this.dayPickerWrapper || {\n      clientWidth: 0\n    },\n          width = _ref4.clientWidth;\n\n    const hasWindow = typeof window !== 'undefined';\n    const windowWidth = hasWindow ? window.innerWidth : 0;\n    const daySize = dayWidth(width, windowWidth);\n    const calendarGridWidth = daySize * TABLE_COLUMNS + TABLE_BORDER;\n    const calendar = availability.calendar;\n    const currentMonthData = calendar[monthIdString(currentMonth)];\n\n    const _ref5 = currentMonthData || {},\n          fetchExceptionsInProgress = _ref5.fetchExceptionsInProgress,\n          fetchBookingsInProgress = _ref5.fetchBookingsInProgress,\n          fetchExceptionsError = _ref5.fetchExceptionsError,\n          fetchBookingsError = _ref5.fetchBookingsError;\n\n    const isMonthDataFetched = !isMonthInRange(currentMonth, TODAY_MOMENT, END_OF_RANGE_MOMENT) || !!currentMonthData && !fetchExceptionsInProgress && !fetchBookingsInProgress;\n    const monthName = currentMonth.format('MMMM');\n    const classes = classNames(rootClassName || css.root, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      ref: c => {\n        this.dayPickerWrapper = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, width > 0 ? React.createElement(\"div\", {\n      style: {\n        width: \"\".concat(calendarGridWidth, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(DayPickerSingleDateController, Object.assign({}, rest, {\n      ref: c => {\n        this.dayPicker = c;\n      },\n      numberOfMonths: 1,\n      navPrev: React.createElement(IconArrowHead, {\n        direction: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }),\n      navNext: React.createElement(IconArrowHead, {\n        direction: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }),\n      weekDayFormat: \"ddd\",\n      daySize: daySize,\n      renderDayContents: renderDayContents(calendar, availabilityPlan),\n      focused: focused,\n      date: date,\n      onDateChange: this.onDateChange,\n      onFocusChange: this.onFocusChange,\n      onPrevMonthClick: () => this.onMonthClick(prevMonthFn),\n      onNextMonthClick: () => this.onMonthClick(nextMonthFn),\n      hideKeyboardShortcutsPanel: true,\n      horizontalMonthPadding: 9,\n      renderMonthElement: ({\n        month\n      }) => React.createElement(\"div\", {\n        className: css.monthElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: css.monthString,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, month.format(monthFormat)), !isMonthDataFetched ? React.createElement(IconSpinner, {\n        rootClassName: css.monthInProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }) : null),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }))) : null, React.createElement(\"div\", {\n      className: css.legend,\n      style: {\n        width: \"\".concat(calendarGridWidth, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: css.legendRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.legendAvailableColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: css.legendText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.availableDay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: css.legendRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.legendBlockedColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: css.legendText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.blockedDay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: css.legendRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: css.legendReservedColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: css.legendText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.bookedDay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    })))), fetchExceptionsError && fetchBookingsError ? React.createElement(\"p\", {\n      className: css.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.fetchMonthDataFailed\",\n      values: {\n        month: monthName\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })) : null);\n  }\n\n}\n\nManageAvailabilityCalendar.defaultProps = {\n  className: null,\n  rootClassName: null,\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  isDayBlocked: () => false,\n  isOutsideRange,\n  isDayHighlighted: () => false,\n  enableOutsideDays: true,\n  // calendar presentation and interaction related props\n  orientation: HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n\n  onOutsideClick() {},\n\n  keepOpenOnDateSelect: false,\n  renderCalendarInfo: null,\n  isRTL: false,\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n\n  onPrevMonthClick() {},\n\n  onNextMonthClick() {},\n\n  // internationalization\n  monthFormat: 'MMMM YYYY',\n  onMonthChanged: null\n};\nManageAvailabilityCalendar.propTypes = {\n  className: string,\n  rootClassName: string,\n  availability: shape({\n    calendar: object.isRequired,\n    onFetchAvailabilityExceptions: func.isRequired,\n    onFetchBookings: func.isRequired,\n    onDeleteAvailabilityException: func.isRequired,\n    onCreateAvailabilityException: func.isRequired\n  }).isRequired,\n  onMonthChanged: func\n};\nexport default ManageAvailabilityCalendar;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/EditListingAvailabilityForm/ManageAvailabilityCalendar.js"],"names":["React","Component","func","object","shape","string","DayPickerSingleDateController","isSameDay","isInclusivelyBeforeDay","isInclusivelyAfterDay","FormattedMessage","memoize","classNames","moment","ensureBooking","ensureAvailabilityException","ensureDayAvailabilityPlan","DAYS_OF_WEEK","monthIdString","monthIdStringInUTC","IconArrowHead","IconSpinner","css","HORIZONTAL_ORIENTATION","MAX_AVAILABILITY_EXCEPTIONS_RANGE","MAX_BOOKINGS_RANGE","TODAY_MOMENT","startOf","END_OF_RANGE_MOMENT","clone","add","END_OF_BOOKING_RANGE_MOMENT","TABLE_BORDER","TABLE_COLUMNS","MIN_CONTENT_WIDTH","MIN_CELL_WIDTH","Math","floor","MAX_CONTENT_WIDTH_DESKTOP","MAX_CELL_WIDTH_DESKTOP","VIEWPORT_LARGE","dayWidth","wrapperWidth","windowWith","width","prevMonthFn","currentMoment","subtract","nextMonthFn","dateStartAndEndInUTC","date","start","utc","toDate","end","momentToUTCDate","dateMoment","utcOffset","isDateOutsideRange","isOutsideRange","isMonthInRange","monthMoment","startOfRange","endOfRange","isAfterThisMonth","isSameOrAfter","isBeforeEndOfRange","isSameOrBefore","isPast","isAfterEndOfRange","isAfterEndOfBookingRange","isBooked","bookings","day","find","b","booking","attributes","dayInUTC","isBetween","findException","exceptions","exception","availabilityException","isBlocked","availabilityPlan","planEntries","entries","seatsFromPlan","weekDayEntry","dayOfWeek","isoWeekday","seats","seatsFromException","dateModifiers","isInProgress","inProgress","isFailed","error","renderDayContents","calendar","dayClasses","default","outsideRange","today","blocked","reserved","exceptionError","dayWrapper","dayNumber","format","makeDraftException","draft","ManageAvailabilityCalendar","constructor","props","dayPickerWrapper","dayPicker","state","currentMonth","focused","fetchMonthData","bind","onDayAvailabilityChange","onDateChange","onFocusChange","onMonthClick","componentDidMount","availability","listingId","startMoment","nextMonthMoment","endMoment","onFetchAvailabilityExceptions","endMomentForBookings","endForBookings","join","onFetchBookings","currentException","draftException","hasAvailabilityException","id","isResetToPlanSeats","onDeleteAvailabilityException","then","r","params","onCreateAvailabilityException","setState","monthFn","onMonthChanged","prevState","monthId","currentMonthData","fetchExceptionsError","fetchBookingsError","render","className","rootClassName","monthFormat","rest","clientWidth","hasWindow","window","windowWidth","innerWidth","daySize","calendarGridWidth","fetchExceptionsInProgress","fetchBookingsInProgress","isMonthDataFetched","monthName","classes","root","c","month","monthElement","monthString","monthInProgress","legend","legendRow","legendAvailableColor","legendText","legendBlockedColor","legendReservedColor","defaultProps","renderCalendarDay","undefined","isDayBlocked","isDayHighlighted","enableOutsideDays","orientation","withPortal","initialVisibleMonth","numberOfMonths","onOutsideClick","keepOpenOnDateSelect","renderCalendarInfo","isRTL","navPrev","navNext","onPrevMonthClick","onNextMonthClick","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { func, object, shape, string } from 'prop-types';\nimport {\n  DayPickerSingleDateController,\n  isSameDay,\n  isInclusivelyBeforeDay,\n  isInclusivelyAfterDay,\n} from 'react-dates';\nimport { FormattedMessage } from 'react-intl';\nimport memoize from 'lodash/memoize';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport {\n  ensureBooking,\n  ensureAvailabilityException,\n  ensureDayAvailabilityPlan,\n} from '../../util/data';\nimport { DAYS_OF_WEEK } from '../../util/types';\nimport { monthIdString, monthIdStringInUTC } from '../../util/dates';\nimport { IconArrowHead, IconSpinner } from '../../components';\n\nimport css from './ManageAvailabilityCalendar.css';\n\n// Constants\n\nconst HORIZONTAL_ORIENTATION = 'horizontal';\nconst MAX_AVAILABILITY_EXCEPTIONS_RANGE = 365;\nconst MAX_BOOKINGS_RANGE = 180;\nconst TODAY_MOMENT = moment().startOf('day');\nconst END_OF_RANGE_MOMENT = TODAY_MOMENT.clone()\n  .add(MAX_AVAILABILITY_EXCEPTIONS_RANGE - 1, 'days')\n  .startOf('day');\nconst END_OF_BOOKING_RANGE_MOMENT = TODAY_MOMENT.clone()\n  .add(MAX_BOOKINGS_RANGE - 1, 'days')\n  .startOf('day');\n\n// Constants for calculating day width (aka table cell dimensions)\nconst TABLE_BORDER = 2;\nconst TABLE_COLUMNS = 7;\nconst MIN_CONTENT_WIDTH = 272;\nconst MIN_CELL_WIDTH = Math.floor(MIN_CONTENT_WIDTH / TABLE_COLUMNS); // 38\nconst MAX_CONTENT_WIDTH_DESKTOP = 756;\nconst MAX_CELL_WIDTH_DESKTOP = Math.floor(MAX_CONTENT_WIDTH_DESKTOP / TABLE_COLUMNS); // 108\nconst VIEWPORT_LARGE = 1024;\n\n// Helper functions\n\n// Calculate the width for a calendar day (table cell)\nconst dayWidth = (wrapperWidth, windowWith) => {\n  if (windowWith >= VIEWPORT_LARGE) {\n    // NOTE: viewportLarge has a layout with sidebar.\n    // In that layout 30% is reserved for paddings and 282 px goes to sidebar and gutter.\n    const width = windowWith * 0.7 - 282;\n    return width > MAX_CONTENT_WIDTH_DESKTOP\n      ? MAX_CELL_WIDTH_DESKTOP\n      : Math.floor((width - TABLE_BORDER) / TABLE_COLUMNS);\n  } else {\n    return wrapperWidth > MIN_CONTENT_WIDTH\n      ? Math.floor((wrapperWidth - TABLE_BORDER) / TABLE_COLUMNS)\n      : MIN_CELL_WIDTH;\n  }\n};\n\n// Get a function that returns the start of the previous month\nconst prevMonthFn = currentMoment =>\n  currentMoment\n    .clone()\n    .subtract(1, 'months')\n    .startOf('month');\n\n// Get a function that returns the start of the next month\nconst nextMonthFn = currentMoment =>\n  currentMoment\n    .clone()\n    .add(1, 'months')\n    .startOf('month');\n\n// Get the start and end Dates in UTC\nconst dateStartAndEndInUTC = date => {\n  const start = moment(date)\n    .utc()\n    .startOf('day')\n    .toDate();\n  const end = moment(date)\n    .utc()\n    .add(1, 'days')\n    .startOf('day')\n    .toDate();\n  return { start, end };\n};\n\nconst momentToUTCDate = dateMoment =>\n  dateMoment\n    .clone()\n    .utc()\n    .add(dateMoment.utcOffset(), 'minutes')\n    .toDate();\n\n// outside range -><- today ... today+MAX_AVAILABILITY_EXCEPTIONS_RANGE -1 -><- outside range\nconst isDateOutsideRange = date => {\n  return (\n    !isInclusivelyAfterDay(date, TODAY_MOMENT) || !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT)\n  );\n};\nconst isOutsideRange = memoize(isDateOutsideRange);\n\nconst isMonthInRange = (monthMoment, startOfRange, endOfRange) => {\n  const isAfterThisMonth = monthMoment.isSameOrAfter(startOfRange, 'month');\n  const isBeforeEndOfRange = monthMoment.isSameOrBefore(endOfRange, 'month');\n  return isAfterThisMonth && isBeforeEndOfRange;\n};\n\nconst isPast = date => !isInclusivelyAfterDay(date, TODAY_MOMENT);\nconst isAfterEndOfRange = date => !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT);\nconst isAfterEndOfBookingRange = date => !isInclusivelyBeforeDay(date, END_OF_BOOKING_RANGE_MOMENT);\n\nconst isBooked = (bookings, day) => {\n  return !!bookings.find(b => {\n    const booking = ensureBooking(b);\n    const start = booking.attributes.start;\n    const end = booking.attributes.end;\n    const dayInUTC = day.clone().utc();\n\n    // '[)' means that the range start is inclusive and range end is exclusive\n    return dayInUTC.isBetween(moment(start).utc(), moment(end).utc(), null, '[)');\n  });\n};\n\nconst findException = (exceptions, day) => {\n  return exceptions.find(exception => {\n    const availabilityException = ensureAvailabilityException(exception.availabilityException);\n    const start = availabilityException.attributes.start;\n    const dayInUTC = day.clone().utc();\n    return isSameDay(moment(start).utc(), dayInUTC);\n  });\n};\n\nconst isBlocked = (availabilityPlan, exception, date) => {\n  const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\n  const seatsFromPlan = planEntries.find(\n    weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]\n  ).seats;\n\n  const seatsFromException =\n    exception && ensureAvailabilityException(exception.availabilityException).attributes.seats;\n\n  const seats = exception ? seatsFromException : seatsFromPlan;\n  return seats === 0;\n};\n\nconst dateModifiers = (availabilityPlan, exceptions, bookings, date) => {\n  const exception = findException(exceptions, date);\n\n  return {\n    isOutsideRange: isOutsideRange(date),\n    isSameDay: isSameDay(date, TODAY_MOMENT),\n    isBlocked: isBlocked(availabilityPlan, exception, date),\n    isBooked: isBooked(bookings, date),\n    isInProgress: exception && exception.inProgress,\n    isFailed: exception && exception.error,\n  };\n};\n\nconst renderDayContents = (calendar, availabilityPlan) => date => {\n  // This component is for day/night based processes. If time-based process is used,\n  // you might want to deal with local dates using monthIdString instead of monthIdStringInUTC.\n  const { exceptions = [], bookings = [] } = calendar[monthIdStringInUTC(date)] || {};\n  const { isOutsideRange, isSameDay, isBlocked, isBooked, isInProgress, isFailed } = dateModifiers(\n    availabilityPlan,\n    exceptions,\n    bookings,\n    date\n  );\n\n  const dayClasses = classNames(css.default, {\n    [css.outsideRange]: isOutsideRange,\n    [css.today]: isSameDay,\n    [css.blocked]: isBlocked,\n    [css.reserved]: isBooked,\n    [css.exceptionError]: isFailed,\n  });\n\n  return (\n    <div className={css.dayWrapper}>\n      <span className={dayClasses}>\n        {isInProgress ? (\n          <IconSpinner rootClassName={css.inProgress} />\n        ) : (\n          <span className={css.dayNumber}>{date.format('D')}</span>\n        )}\n      </span>\n    </div>\n  );\n};\n\nconst makeDraftException = (exceptions, start, end, seats) => {\n  const draft = ensureAvailabilityException({ attributes: { start, end, seats } });\n  return { availabilityException: draft };\n};\n\n////////////////////////////////\n// ManageAvailabilityCalendar //\n////////////////////////////////\nclass ManageAvailabilityCalendar extends Component {\n  constructor(props) {\n    super(props);\n\n    // DOM refs\n    this.dayPickerWrapper = null;\n    this.dayPicker = null;\n\n    this.state = {\n      currentMonth: moment().startOf('month'),\n      focused: true,\n      date: null,\n    };\n\n    this.fetchMonthData = this.fetchMonthData.bind(this);\n    this.onDayAvailabilityChange = this.onDayAvailabilityChange.bind(this);\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n    this.onMonthClick = this.onMonthClick.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetch month data if user have navigated to availability tab in EditListingWizard\n    this.fetchMonthData(this.state.currentMonth);\n    // Fetch next month too.\n    this.fetchMonthData(nextMonthFn(this.state.currentMonth));\n  }\n\n  fetchMonthData(monthMoment) {\n    const { availability, listingId } = this.props;\n\n    // Don't fetch exceptions for past months or too far in the future\n    if (isMonthInRange(monthMoment, TODAY_MOMENT, END_OF_RANGE_MOMENT)) {\n      // Use \"today\", if the first day of given month is in the past\n      const startMoment = isPast(monthMoment) ? TODAY_MOMENT : monthMoment;\n      const start = momentToUTCDate(startMoment);\n\n      // Use END_OF_RANGE_MOMENT, if the first day of the next month is too far in the future\n      const nextMonthMoment = nextMonthFn(monthMoment);\n      const endMoment = isAfterEndOfRange(nextMonthMoment)\n        ? END_OF_RANGE_MOMENT.clone().add(1, 'days')\n        : nextMonthMoment;\n      const end = momentToUTCDate(endMoment);\n\n      // Fetch AvailabilityExceptions for this month\n      availability.onFetchAvailabilityExceptions({ listingId, start, end });\n\n      // Fetch Bookings if the month is within bookable range (180 days)\n      if (isMonthInRange(startMoment, TODAY_MOMENT, END_OF_BOOKING_RANGE_MOMENT)) {\n        const endMomentForBookings = isAfterEndOfBookingRange(nextMonthMoment)\n          ? END_OF_BOOKING_RANGE_MOMENT.clone().add(1, 'days')\n          : nextMonthMoment;\n        const endForBookings = momentToUTCDate(endMomentForBookings);\n\n        // Fetch Bookings for this month (if they are in pending or accepted state)\n        const state = ['pending', 'accepted'].join(',');\n        availability.onFetchBookings({ listingId, start, end: endForBookings, state });\n      }\n    }\n  }\n\n  onDayAvailabilityChange(date, seats, exceptions) {\n    const { availabilityPlan, listingId } = this.props;\n    const { start, end } = dateStartAndEndInUTC(date);\n\n    const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\n    const seatsFromPlan = planEntries.find(\n      weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]\n    ).seats;\n\n    const currentException = findException(exceptions, date);\n    const draftException = makeDraftException(exceptions, start, end, seatsFromPlan);\n    const exception = currentException || draftException;\n    const hasAvailabilityException = currentException && currentException.availabilityException.id;\n\n    if (hasAvailabilityException) {\n      const id = currentException.availabilityException.id;\n      const isResetToPlanSeats = seatsFromPlan === seats;\n\n      if (isResetToPlanSeats) {\n        // Delete the exception, if the exception is redundant\n        // (it has the same content as what user has in the plan).\n        this.props.availability.onDeleteAvailabilityException({\n          id,\n          currentException: exception,\n          seats: seatsFromPlan,\n        });\n      } else {\n        // If availability exception exists, delete it first and then create a new one.\n        // NOTE: currently, API does not support update (only deleting and creating)\n        this.props.availability\n          .onDeleteAvailabilityException({ id, currentException: exception, seats: seatsFromPlan })\n          .then(r => {\n            const params = { listingId, start, end, seats, currentException: exception };\n            this.props.availability.onCreateAvailabilityException(params);\n          });\n      }\n    } else {\n      // If there is no existing AvailabilityExceptions, just create a new one\n      const params = { listingId, start, end, seats, currentException: exception };\n      this.props.availability.onCreateAvailabilityException(params);\n    }\n  }\n\n  onDateChange(date) {\n    this.setState({ date });\n\n    const { availabilityPlan, availability } = this.props;\n    const calendar = availability.calendar;\n    // This component is for day/night based processes. If time-based process is used,\n    // you might want to deal with local dates using monthIdString instead of monthIdStringInUTC.\n    const { exceptions = [], bookings = [] } = calendar[monthIdStringInUTC(date)] || {};\n    const { isPast, isBlocked, isBooked, isInProgress } = dateModifiers(\n      availabilityPlan,\n      exceptions,\n      bookings,\n      date\n    );\n\n    if (isBooked || isPast || isInProgress) {\n      // Cannot allow or block a reserved or a past date or inProgress\n      return;\n    } else if (isBlocked) {\n      // Unblock the date (seats = 1)\n      this.onDayAvailabilityChange(date, 1, exceptions);\n    } else {\n      // Block the date (seats = 0)\n      this.onDayAvailabilityChange(date, 0, exceptions);\n    }\n  }\n\n  onFocusChange() {\n    // Force the state.focused to always be truthy so that date is always selectable\n    this.setState({ focused: true });\n  }\n\n  onMonthClick(monthFn) {\n    const onMonthChanged = this.props.onMonthChanged;\n    this.setState(\n      prevState => ({ currentMonth: monthFn(prevState.currentMonth) }),\n      () => {\n        // Callback function after month has been updated.\n        // react-dates component has next and previous months ready (but inivisible).\n        // we try to populate those invisible months before user advances there.\n        this.fetchMonthData(monthFn(this.state.currentMonth));\n\n        // If previous fetch for month data failed, try again.\n        const monthId = monthIdString(this.state.currentMonth);\n        const currentMonthData = this.props.availability.calendar[monthId];\n        const { fetchExceptionsError, fetchBookingsError } = currentMonthData || {};\n        if (currentMonthData && (fetchExceptionsError || fetchBookingsError)) {\n          this.fetchMonthData(this.state.currentMonth);\n        }\n\n        // Call onMonthChanged function if it has been passed in among props.\n        if (onMonthChanged) {\n          onMonthChanged(monthIdString(this.state.currentMonth));\n        }\n      }\n    );\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      listingId,\n      availability,\n      availabilityPlan,\n      onMonthChanged,\n      monthFormat,\n      ...rest\n    } = this.props;\n    const { focused, date, currentMonth } = this.state;\n    const { clientWidth: width } = this.dayPickerWrapper || { clientWidth: 0 };\n    const hasWindow = typeof window !== 'undefined';\n    const windowWidth = hasWindow ? window.innerWidth : 0;\n\n    const daySize = dayWidth(width, windowWidth);\n    const calendarGridWidth = daySize * TABLE_COLUMNS + TABLE_BORDER;\n\n    const calendar = availability.calendar;\n    const currentMonthData = calendar[monthIdString(currentMonth)];\n    const {\n      fetchExceptionsInProgress,\n      fetchBookingsInProgress,\n      fetchExceptionsError,\n      fetchBookingsError,\n    } = currentMonthData || {};\n    const isMonthDataFetched =\n      !isMonthInRange(currentMonth, TODAY_MOMENT, END_OF_RANGE_MOMENT) ||\n      (!!currentMonthData && !fetchExceptionsInProgress && !fetchBookingsInProgress);\n\n    const monthName = currentMonth.format('MMMM');\n    const classes = classNames(rootClassName || css.root, className);\n\n    return (\n      <div\n        className={classes}\n        ref={c => {\n          this.dayPickerWrapper = c;\n        }}\n      >\n        {width > 0 ? (\n          <div style={{ width: `${calendarGridWidth}px` }}>\n            <DayPickerSingleDateController\n              {...rest}\n              ref={c => {\n                this.dayPicker = c;\n              }}\n              numberOfMonths={1}\n              navPrev={<IconArrowHead direction=\"left\" />}\n              navNext={<IconArrowHead direction=\"right\" />}\n              weekDayFormat=\"ddd\"\n              daySize={daySize}\n              renderDayContents={renderDayContents(calendar, availabilityPlan)}\n              focused={focused}\n              date={date}\n              onDateChange={this.onDateChange}\n              onFocusChange={this.onFocusChange}\n              onPrevMonthClick={() => this.onMonthClick(prevMonthFn)}\n              onNextMonthClick={() => this.onMonthClick(nextMonthFn)}\n              hideKeyboardShortcutsPanel\n              horizontalMonthPadding={9}\n              renderMonthElement={({ month }) => (\n                <div className={css.monthElement}>\n                  <span className={css.monthString}>{month.format(monthFormat)}</span>\n                  {!isMonthDataFetched ? <IconSpinner rootClassName={css.monthInProgress} /> : null}\n                </div>\n              )}\n            />\n          </div>\n        ) : null}\n        <div className={css.legend} style={{ width: `${calendarGridWidth}px` }}>\n          <div className={css.legendRow}>\n            <span className={css.legendAvailableColor} />\n            <span className={css.legendText}>\n              <FormattedMessage id=\"EditListingAvailabilityForm.availableDay\" />\n            </span>\n          </div>\n          <div className={css.legendRow}>\n            <span className={css.legendBlockedColor} />\n            <span className={css.legendText}>\n              <FormattedMessage id=\"EditListingAvailabilityForm.blockedDay\" />\n            </span>\n          </div>\n          <div className={css.legendRow}>\n            <span className={css.legendReservedColor} />\n            <span className={css.legendText}>\n              <FormattedMessage id=\"EditListingAvailabilityForm.bookedDay\" />\n            </span>\n          </div>\n        </div>\n        {fetchExceptionsError && fetchBookingsError ? (\n          <p className={css.error}>\n            <FormattedMessage\n              id=\"EditListingAvailabilityForm.fetchMonthDataFailed\"\n              values={{ month: monthName }}\n            />\n          </p>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nManageAvailabilityCalendar.defaultProps = {\n  className: null,\n  rootClassName: null,\n\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  isDayBlocked: () => false,\n  isOutsideRange,\n  isDayHighlighted: () => false,\n  enableOutsideDays: true,\n\n  // calendar presentation and interaction related props\n  orientation: HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n  onOutsideClick() {},\n  keepOpenOnDateSelect: false,\n  renderCalendarInfo: null,\n  isRTL: false,\n\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick() {},\n  onNextMonthClick() {},\n\n  // internationalization\n  monthFormat: 'MMMM YYYY',\n  onMonthChanged: null,\n};\n\nManageAvailabilityCalendar.propTypes = {\n  className: string,\n  rootClassName: string,\n  availability: shape({\n    calendar: object.isRequired,\n    onFetchAvailabilityExceptions: func.isRequired,\n    onFetchBookings: func.isRequired,\n    onDeleteAvailabilityException: func.isRequired,\n    onCreateAvailabilityException: func.isRequired,\n  }).isRequired,\n  onMonthChanged: func,\n};\n\nexport default ManageAvailabilityCalendar;\n"]},"metadata":{},"sourceType":"module"}