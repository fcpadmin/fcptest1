{"ast":null,"code":"import _objectSpread from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/FilterForm/FilterForm.js\";\nimport React from 'react';\nimport { bool, func, node, object } from 'prop-types';\nimport classNames from 'classnames';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { Form } from '../../components';\nimport css from './FilterForm.css';\n\nconst FilterFormComponent = props => {\n  const liveEdit = props.liveEdit,\n        onChange = props.onChange,\n        onSubmit = props.onSubmit,\n        onCancel = props.onCancel,\n        onClear = props.onClear,\n        rest = _objectWithoutProperties(props, [\"liveEdit\", \"onChange\", \"onSubmit\", \"onCancel\", \"onClear\"]);\n\n  if (liveEdit && !onChange) {\n    throw new Error('FilterForm: if liveEdit is true you need to provide onChange function');\n  }\n\n  if (!liveEdit && !(onCancel && onClear && onSubmit)) {\n    throw new Error('FilterForm: if liveEdit is false you need to provide onCancel, onClear, and onSubmit functions');\n  }\n\n  const handleChange = formState => {\n    if (formState.dirty) {\n      onChange(formState.values);\n    }\n  };\n\n  const formCallbacks = liveEdit ? {\n    onSubmit: () => null\n  } : {\n    onSubmit,\n    onCancel,\n    onClear\n  };\n  return React.createElement(FinalForm, Object.assign({}, rest, formCallbacks, {\n    mutators: _objectSpread({}, arrayMutators),\n    render: formRenderProps => {\n      const id = formRenderProps.id,\n            form = formRenderProps.form,\n            handleSubmit = formRenderProps.handleSubmit,\n            onClear = formRenderProps.onClear,\n            onCancel = formRenderProps.onCancel,\n            style = formRenderProps.style,\n            paddingClasses = formRenderProps.paddingClasses,\n            intl = formRenderProps.intl,\n            children = formRenderProps.children;\n\n      const handleCancel = () => {\n        // reset the final form to initialValues\n        form.reset();\n        onCancel();\n      };\n\n      const clear = intl.formatMessage({\n        id: 'FilterForm.clear'\n      });\n      const cancel = intl.formatMessage({\n        id: 'FilterForm.cancel'\n      });\n      const submit = intl.formatMessage({\n        id: 'FilterForm.submit'\n      });\n      const classes = classNames(css.root);\n      return React.createElement(Form, {\n        id: id,\n        className: classes,\n        onSubmit: handleSubmit,\n        tabIndex: \"0\",\n        style: _objectSpread({}, style),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classNames(paddingClasses || css.contentWrapper),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, children), liveEdit ? React.createElement(FormSpy, {\n        onChange: handleChange,\n        subscription: {\n          values: true,\n          dirty: true\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: css.buttonsWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: css.clearButton,\n        type: \"button\",\n        onClick: onClear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, clear), React.createElement(\"button\", {\n        className: css.cancelButton,\n        type: \"button\",\n        onClick: handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, cancel), React.createElement(\"button\", {\n        className: css.submitButton,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, submit)));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n};\n\nFilterFormComponent.defaultProps = {\n  liveEdit: false,\n  style: null,\n  onCancel: null,\n  onChange: null,\n  onClear: null,\n  onSubmit: null\n};\nFilterFormComponent.propTypes = {\n  liveEdit: bool,\n  onCancel: func,\n  onChange: func,\n  onClear: func,\n  onSubmit: func,\n  style: object,\n  children: node.isRequired,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nconst FilterForm = injectIntl(FilterFormComponent);\nexport default FilterForm;","map":{"version":3,"sources":["/Users/matthewmcelwee/fcprepos/webtest1/flex-template-web/src/forms/FilterForm/FilterForm.js"],"names":["React","bool","func","node","object","classNames","Form","FinalForm","FormSpy","arrayMutators","injectIntl","intlShape","css","FilterFormComponent","props","liveEdit","onChange","onSubmit","onCancel","onClear","rest","Error","handleChange","formState","dirty","values","formCallbacks","formRenderProps","id","form","handleSubmit","style","paddingClasses","intl","children","handleCancel","reset","clear","formatMessage","cancel","submit","classes","root","contentWrapper","buttonsWrapper","clearButton","cancelButton","submitButton","defaultProps","propTypes","isRequired","FilterForm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func, node, object } from 'prop-types';\nimport classNames from 'classnames';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport { Form } from '../../components';\nimport css from './FilterForm.css';\n\nconst FilterFormComponent = props => {\n  const { liveEdit, onChange, onSubmit, onCancel, onClear, ...rest } = props;\n\n  if (liveEdit && !onChange) {\n    throw new Error('FilterForm: if liveEdit is true you need to provide onChange function');\n  }\n\n  if (!liveEdit && !(onCancel && onClear && onSubmit)) {\n    throw new Error(\n      'FilterForm: if liveEdit is false you need to provide onCancel, onClear, and onSubmit functions'\n    );\n  }\n\n  const handleChange = formState => {\n    if (formState.dirty) {\n      onChange(formState.values);\n    }\n  };\n\n  const formCallbacks = liveEdit ? { onSubmit: () => null } : { onSubmit, onCancel, onClear };\n  return (\n    <FinalForm\n      {...rest}\n      {...formCallbacks}\n      mutators={{ ...arrayMutators }}\n      render={formRenderProps => {\n        const {\n          id,\n          form,\n          handleSubmit,\n          onClear,\n          onCancel,\n          style,\n          paddingClasses,\n          intl,\n          children,\n        } = formRenderProps;\n\n        const handleCancel = () => {\n          // reset the final form to initialValues\n          form.reset();\n          onCancel();\n        };\n\n        const clear = intl.formatMessage({ id: 'FilterForm.clear' });\n        const cancel = intl.formatMessage({ id: 'FilterForm.cancel' });\n        const submit = intl.formatMessage({ id: 'FilterForm.submit' });\n\n        const classes = classNames(css.root);\n\n        return (\n          <Form\n            id={id}\n            className={classes}\n            onSubmit={handleSubmit}\n            tabIndex=\"0\"\n            style={{ ...style }}\n          >\n            <div className={classNames(paddingClasses || css.contentWrapper)}>{children}</div>\n\n            {liveEdit ? (\n              <FormSpy onChange={handleChange} subscription={{ values: true, dirty: true }} />\n            ) : (\n              <div className={css.buttonsWrapper}>\n                <button className={css.clearButton} type=\"button\" onClick={onClear}>\n                  {clear}\n                </button>\n                <button className={css.cancelButton} type=\"button\" onClick={handleCancel}>\n                  {cancel}\n                </button>\n                <button className={css.submitButton} type=\"submit\">\n                  {submit}\n                </button>\n              </div>\n            )}\n          </Form>\n        );\n      }}\n    />\n  );\n};\n\nFilterFormComponent.defaultProps = {\n  liveEdit: false,\n  style: null,\n  onCancel: null,\n  onChange: null,\n  onClear: null,\n  onSubmit: null,\n};\n\nFilterFormComponent.propTypes = {\n  liveEdit: bool,\n  onCancel: func,\n  onChange: func,\n  onClear: func,\n  onSubmit: func,\n  style: object,\n  children: node.isRequired,\n\n  // form injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst FilterForm = injectIntl(FilterFormComponent);\n\nexport default FilterForm;\n"]},"metadata":{},"sourceType":"module"}